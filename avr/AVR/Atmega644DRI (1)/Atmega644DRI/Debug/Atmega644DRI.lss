
Atmega644DRI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ba  00800100  000045c8  0000465c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000045c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000469  008002ba  008002ba  00004816  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004816  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001d0  00000000  00000000  00004872  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000319e  00000000  00000000  00004a42  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000065c  00000000  00000000  00007be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b5a  00000000  00000000  0000823c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006a0  00000000  00000000  00008d98  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000819  00000000  00000000  00009438  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001fa2  00000000  00000000  00009c51  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000210  00000000  00000000  0000bbf3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c1 10 	jmp	0x2182	; 0x2182 <__ctors_end>
       4:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <__bad_interrupt>
       8:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <__bad_interrupt>
       c:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <__bad_interrupt>
      10:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <__bad_interrupt>
      14:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <__bad_interrupt>
      18:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <__bad_interrupt>
      1c:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <__bad_interrupt>
      20:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <__bad_interrupt>
      24:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <__bad_interrupt>
      28:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <__bad_interrupt>
      2c:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <__bad_interrupt>
      30:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <__bad_interrupt>
      34:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <__bad_interrupt>
      38:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <__bad_interrupt>
      3c:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <__bad_interrupt>
      40:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <__bad_interrupt>
      44:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <__bad_interrupt>
      48:	0c 94 67 1a 	jmp	0x34ce	; 0x34ce <__vector_18>
      4c:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <__bad_interrupt>
      50:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <__bad_interrupt>
      54:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <__bad_interrupt>
      58:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <__bad_interrupt>
      5c:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <__bad_interrupt>
      60:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <__bad_interrupt>
      64:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <__bad_interrupt>
      68:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <__bad_interrupt>
      6c:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <__bad_interrupt>
      70:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <__bad_interrupt>
      74:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <__bad_interrupt>
      78:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <__bad_interrupt>
      7c:	03 6e       	ori	r16, 0xE3	; 227
      7e:	db 36       	cpi	r29, 0x6B	; 107
      80:	3d 9a       	sbi	0x07, 5	; 7
      82:	99 99       	sbic	0x13, 1	; 19
      84:	99 3d       	cpi	r25, 0xD9	; 217
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	3e 00       	.word	0x003e	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	07 2c       	mov	r0, r7
      92:	7a a5       	ldd	r23, Y+42	; 0x2a
      94:	ba 6c       	ori	r27, 0xCA	; 202
      96:	c5 90       	lpm	r12, Z+
      98:	da 3b       	cpi	r29, 0xBA	; 186
      9a:	93 65       	ori	r25, 0x53	; 83
      9c:	fc 8b       	std	Y+20, r31	; 0x14
      9e:	bc 53       	subi	r27, 0x3C	; 60
      a0:	f8 10       	cpse	r15, r8
      a2:	fd 3c       	cpi	r31, 0xCD	; 205
      a4:	56 92       	lac	Z, r5
      a6:	83 4d       	sbci	r24, 0xD3	; 211
      a8:	bd 87       	std	Y+13, r27	; 0x0d
      aa:	9d 3a       	cpi	r25, 0xAD	; 173
      ac:	b6 3d       	cpi	r27, 0xD6	; 214
      ae:	cb c9       	rjmp	.-3178   	; 0xfffff446 <__eeprom_end+0xff7ef446>
      b0:	bf 5b       	subi	r27, 0xBF	; 191
      b2:	be 73       	andi	r27, 0x3E	; 62
      b4:	da 0f       	add	r29, r26
      b6:	c9 3f       	cpi	r28, 0xF9	; 249

000000b8 <M721fuzetimes>:
      b8:	c0 00 c1 00 c1 00 c1 00 c1 00 c1 00 c1 00 c1 00     ................
      c8:	c1 00 c1 00 c1 00 c1 00 c2 00 c2 00 c2 00 c2 00     ................
      d8:	c2 00 c2 00 c2 00 c2 00 c2 00 c2 00 c2 00 c2 00     ................
      e8:	c2 00 c2 00 c2 00 c2 00 c2 00 c2 00 c2 00 c2 00     ................
      f8:	c2 00 c2 00 c2 00 c2 00 c2 00 c2 00 c2 00 c2 00     ................
     108:	c2 00 c2 00 c2 00 c2 00 c2 00 c2 00 c2 00 c2 00     ................
     118:	c2 00 c2 00 c2 00 c2 00 c1 00 c1 00 c1 00 c1 00     ................
     128:	c1 00 c1 00 c1 00 c1 00 c1 00 c1 00 c1 00 c0 00     ................
     138:	c0 00 c0 00 c0 00 c0 00 c0 00 c0 00 c0 00 c0 00     ................
     148:	bf 00 bf 00 bf 00 bf 00 bf 00 bf 00 be 00 be 00     ................
     158:	be 00 be 00 be 00 be 00 bd 00 bd 00 bd 00 bd 00     ................
     168:	bd 00 bc 00 bc 00 bc 00 bc 00 bc 00 bb 00 bb 00     ................
     178:	bb 00 bb 00 ba 00 ba 00 ba 00 ba 00 b9 00 b9 00     ................
     188:	b9 00 b8 00 b8 00 b8 00 b8 00 b7 00 b7 00 b7 00     ................
     198:	b6 00 b6 00 b5 00 b5 00 b5 00 b4 00 b4 00 b4 00     ................
     1a8:	b3 00 b3 00 b2 00 b2 00 b1 00 b1 00 b0 00 b0 00     ................
     1b8:	af 00 af 00 ae 00 ad 00 ad 00 ac 00 ac 00 ab 00     ................
     1c8:	aa 00 a9 00 a9 00 a8 00 a7 00 a6 00 a5 00 a4 00     ................
     1d8:	a3 00 a2 00 a1 00 a0 00 9e 00 9d 00 9b 00 99 00     ................
     1e8:	96 00                                               ..

000001ea <M721ch1>:
     1ea:	b4 00 e5 05 b9 00 e2 05 be 00 e0 05 c3 00 dd 05     ................
     1fa:	c8 00 db 05 cd 00 d8 05 d2 00 d6 05 d7 00 d4 05     ................
     20a:	dc 00 d1 05 e1 00 cf 05 e6 00 cd 05 eb 00 ca 05     ................
     21a:	f0 00 c8 05 f5 00 c5 05 fa 00 c3 05 ff 00 c1 05     ................
     22a:	04 01 be 05 09 01 bc 05 0e 01 b9 05 13 01 b7 05     ................
     23a:	18 01 b5 05 1d 01 b2 05 22 01 b0 05 27 01 ad 05     ........"...'...
     24a:	2c 01 ab 05 31 01 a9 05 36 01 a6 05 3b 01 a4 05     ,...1...6...;...
     25a:	40 01 a1 05 45 01 9f 05 4a 01 9d 05 4f 01 9a 05     @...E...J...O...
     26a:	54 01 98 05 59 01 95 05 5e 01 93 05 63 01 90 05     T...Y...^...c...
     27a:	68 01 8e 05 6d 01 8c 05 72 01 89 05 77 01 87 05     h...m...r...w...
     28a:	7c 01 84 05 81 01 82 05 86 01 7f 05 8b 01 7d 05     |.............}.
     29a:	90 01 7a 05 95 01 78 05 9a 01 76 05 9f 01 73 05     ..z...x...v...s.
     2aa:	a4 01 71 05 a9 01 6e 05 ae 01 6c 05 b3 01 69 05     ..q...n...l...i.
     2ba:	b8 01 67 05 bd 01 64 05 c2 01 62 05 c7 01 5f 05     ..g...d...b..._.
     2ca:	cc 01 5c 05 d1 01 5a 05 d6 01 57 05 db 01 55 05     ..\...Z...W...U.
     2da:	e0 01 52 05 e5 01 50 05 ea 01 4d 05 ef 01 4a 05     ..R...P...M...J.
     2ea:	f4 01 48 05 f9 01 45 05 fe 01 43 05 03 02 40 05     ..H...E...C...@.
     2fa:	08 02 3d 05 0d 02 3b 05 12 02 38 05 17 02 35 05     ..=...;...8...5.
     30a:	1c 02 33 05 21 02 30 05 26 02 2d 05 2b 02 2b 05     ..3.!.0.&.-.+.+.
     31a:	30 02 28 05 35 02 25 05 3a 02 22 05 3f 02 20 05     0.(.5.%.:.".?. .
     32a:	44 02 1d 05 49 02 1a 05 4e 02 17 05 53 02 14 05     D...I...N...S...
     33a:	58 02 12 05 5d 02 0f 05 62 02 0c 05 67 02 09 05     X...]...b...g...
     34a:	6c 02 06 05 71 02 03 05 76 02 00 05 7b 02 fd 04     l...q...v...{...
     35a:	80 02 fa 04 85 02 f7 04 8a 02 f4 04 8f 02 f1 04     ................
     36a:	94 02 ee 04 99 02 eb 04 9e 02 e8 04 a3 02 e5 04     ................
     37a:	a8 02 e2 04 ad 02 df 04 b2 02 db 04 b7 02 d8 04     ................
     38a:	bc 02 d5 04 c1 02 d2 04 c6 02 ce 04 cb 02 cb 04     ................
     39a:	d0 02 c8 04 d5 02 c4 04 da 02 c1 04 df 02 bd 04     ................
     3aa:	e4 02 ba 04 e9 02 b6 04 ee 02 b3 04 f3 02 af 04     ................
     3ba:	f8 02 ab 04 fd 02 a8 04 02 03 a4 04 07 03 a0 04     ................
     3ca:	0c 03 9c 04 11 03 98 04 16 03 94 04 1b 03 90 04     ................
     3da:	20 03 8c 04 25 03 88 04 2a 03 83 04 2f 03 7f 04      ...%...*.../...
     3ea:	34 03 7b 04 39 03 76 04 3e 03 72 04 43 03 6d 04     4.{.9.v.>.r.C.m.
     3fa:	48 03 68 04 4d 03 63 04 52 03 5e 04 57 03 59 04     H.h.M.c.R.^.W.Y.
     40a:	5c 03 54 04 61 03 4e 04 66 03 49 04 6b 03 43 04     \.T.a.N.f.I.k.C.
     41a:	70 03 3d 04 75 03 37 04 7a 03 31 04 7f 03 2a 04     p.=.u.7.z.1...*.
     42a:	84 03 23 04 89 03 1c 04 8e 03 14 04 93 03 0c 04     ..#.............
     43a:	98 03 03 04 9d 03 f9 03 a2 03 ee 03 a7 03 e1 03     ................
     44a:	ac 03 d1 03                                         ....

0000044e <M888ch1>:
     44e:	d2 00 e8 05 d7 00 e6 05 dc 00 e4 05 e1 00 e1 05     ................
     45e:	e6 00 df 05 eb 00 dd 05 f0 00 db 05 f5 00 d9 05     ................
     46e:	fa 00 d7 05 ff 00 d5 05 04 01 d3 05 09 01 d1 05     ................
     47e:	0e 01 cf 05 13 01 cd 05 18 01 cb 05 1d 01 c9 05     ................
     48e:	22 01 c7 05 27 01 c5 05 2c 01 c3 05 31 01 c1 05     "...'...,...1...
     49e:	36 01 bf 05 3b 01 bd 05 40 01 bb 05 45 01 b9 05     6...;...@...E...
     4ae:	4a 01 b7 05 4f 01 b5 05 54 01 b3 05 59 01 b1 05     J...O...T...Y...
     4be:	5e 01 af 05 63 01 ac 05 68 01 aa 05 6d 01 a8 05     ^...c...h...m...
     4ce:	72 01 a6 05 77 01 a4 05 7c 01 a2 05 81 01 a0 05     r...w...|.......
     4de:	86 01 9e 05 8b 01 9c 05 90 01 9a 05 95 01 98 05     ................
     4ee:	9a 01 96 05 9f 01 94 05 a4 01 92 05 a9 01 90 05     ................
     4fe:	ae 01 8e 05 b3 01 8c 05 b8 01 89 05 bd 01 87 05     ................
     50e:	c2 01 85 05 c7 01 83 05 cc 01 81 05 d1 01 7f 05     ................
     51e:	d6 01 7d 05 db 01 7b 05 e0 01 79 05 e5 01 77 05     ..}...{...y...w.
     52e:	ea 01 75 05 ef 01 72 05 f4 01 70 05 f9 01 6e 05     ..u...r...p...n.
     53e:	fe 01 6c 05 03 02 6a 05 08 02 68 05 0d 02 66 05     ..l...j...h...f.
     54e:	12 02 64 05 17 02 61 05 1c 02 5f 05 21 02 5d 05     ..d...a..._.!.].
     55e:	26 02 5b 05 2b 02 59 05 30 02 57 05 35 02 54 05     &.[.+.Y.0.W.5.T.
     56e:	3a 02 52 05 3f 02 50 05 44 02 4e 05 49 02 4c 05     :.R.?.P.D.N.I.L.
     57e:	4e 02 4a 05 53 02 47 05 58 02 45 05 5d 02 43 05     N.J.S.G.X.E.].C.
     58e:	62 02 41 05 67 02 3f 05 6c 02 3c 05 71 02 3a 05     b.A.g.?.l.<.q.:.
     59e:	76 02 38 05 7b 02 36 05 80 02 33 05 85 02 31 05     v.8.{.6...3...1.
     5ae:	8a 02 2f 05 8f 02 2d 05 94 02 2a 05 99 02 28 05     ../...-...*...(.
     5be:	9e 02 26 05 a3 02 24 05 a8 02 21 05 ad 02 1f 05     ..&...$...!.....
     5ce:	b2 02 1d 05 b7 02 1a 05 bc 02 18 05 c1 02 16 05     ................
     5de:	c6 02 13 05 cb 02 11 05 d0 02 0f 05 d5 02 0c 05     ................
     5ee:	da 02 0a 05 df 02 08 05 e4 02 05 05 e9 02 03 05     ................
     5fe:	ee 02 00 05 f3 02 fe 04 f8 02 fc 04 fd 02 f9 04     ................
     60e:	02 03 f7 04 07 03 f4 04 0c 03 f2 04 11 03 ef 04     ................
     61e:	16 03 ed 04 1b 03 ea 04 20 03 e8 04 25 03 e5 04     ........ ...%...
     62e:	2a 03 e3 04 2f 03 e0 04 34 03 de 04 39 03 db 04     *.../...4...9...
     63e:	3e 03 d9 04 43 03 d6 04 48 03 d4 04 4d 03 d1 04     >...C...H...M...
     64e:	52 03 ce 04 57 03 cc 04 5c 03 c9 04 61 03 c6 04     R...W...\...a...
     65e:	66 03 c4 04 6b 03 c1 04 70 03 be 04 75 03 bc 04     f...k...p...u...
     66e:	7a 03 b9 04 7f 03 b6 04 84 03 b3 04 89 03 b1 04     z...............
     67e:	8e 03 ae 04 93 03 ab 04 98 03 a8 04 9d 03 a5 04     ................
     68e:	a2 03 a2 04 a7 03 9f 04 ac 03 9c 04 b1 03 9a 04     ................
     69e:	b6 03 97 04 bb 03 94 04 c0 03 91 04 c5 03 8e 04     ................
     6ae:	ca 03 8b 04 cf 03 87 04 d4 03 84 04 d9 03 81 04     ................
     6be:	de 03 7e 04 e3 03 7b 04 e8 03 78 04 ed 03 75 04     ..~...{...x...u.
     6ce:	f2 03 71 04 f7 03 6e 04 fc 03 6b 04 01 04 67 04     ..q...n...k...g.
     6de:	06 04 64 04 0b 04 61 04 10 04 5d 04 15 04 5a 04     ..d...a...]...Z.
     6ee:	1a 04 56 04 1f 04 53 04 24 04 4f 04 29 04 4c 04     ..V...S.$.O.).L.
     6fe:	2e 04 48 04 33 04 44 04 38 04 41 04 3d 04 3d 04     ..H.3.D.8.A.=.=.
     70e:	42 04 39 04 47 04 35 04 4c 04 31 04 51 04 2d 04     B.9.G.5.L.1.Q.-.
     71e:	56 04 2a 04 5b 04 26 04 60 04 21 04 65 04 1d 04     V.*.[.&.`.!.e...
     72e:	6a 04 19 04 6f 04 15 04 74 04 11 04 79 04 0c 04     j...o...t...y...
     73e:	7e 04 08 04 83 04 03 04 88 04 ff 03 8d 04 fa 03     ~...............
     74e:	92 04 f5 03 97 04 f0 03 9c 04 eb 03 a1 04 e6 03     ................
     75e:	a6 04 e1 03 ab 04 dc 03 b0 04 d6 03 b5 04 d1 03     ................
     76e:	ba 04 cb 03 bf 04 c5 03 c4 04 bf 03 c9 04 b9 03     ................
     77e:	ce 04 b2 03 d3 04 ab 03 d8 04 a4 03 dd 04 9d 03     ................
     78e:	e2 04 95 03 e7 04 8d 03 ec 04 84 03 f1 04 7a 03     ..............z.
     79e:	f6 04 70 03 fb 04 64 03 00 05 57 03 05 05 46 03     ..p...d...W...F.
     7ae:	0a 05 30 03                                         ..0.

000007b2 <M888ch0>:
     7b2:	41 00 e6 05 46 00 e0 05 4b 00 d9 05 50 00 d2 05     A...F...K...P...
     7c2:	55 00 cb 05 5a 00 c5 05 5f 00 be 05 64 00 b7 05     U...Z..._...d...
     7d2:	69 00 b0 05 6e 00 aa 05 73 00 a3 05 78 00 9c 05     i...n...s...x...
     7e2:	7d 00 95 05 82 00 8e 05 87 00 87 05 8c 00 80 05     }...............
     7f2:	91 00 79 05 96 00 72 05 9b 00 6b 05 a0 00 64 05     ..y...r...k...d.
     802:	a5 00 5d 05 aa 00 56 05 af 00 4e 05 b4 00 47 05     ..]...V...N...G.
     812:	b9 00 40 05 be 00 38 05 c3 00 31 05 c8 00 29 05     ..@...8...1...).
     822:	cd 00 22 05 d2 00 1a 05 d7 00 12 05 dc 00 0a 05     ..".............
     832:	e1 00 02 05 e6 00 fa 04 eb 00 f2 04 f0 00 ea 04     ................
     842:	f5 00 e1 04 fa 00 d9 04 ff 00 d0 04 04 01 c7 04     ................
     852:	09 01 be 04 0e 01 b5 04 13 01 ac 04 18 01 a2 04     ................
     862:	1d 01 99 04 22 01 8f 04 27 01 85 04 2c 01 7a 04     ...."...'...,.z.
     872:	31 01 70 04 36 01 65 04 3b 01 5a 04 40 01 4e 04     1.p.6.e.;.Z.@.N.
     882:	45 01 42 04 4a 01 35 04 4f 01 28 04 54 01 1b 04     E.B.J.5.O.(.T...
     892:	59 01 0c 04 5e 01 fd 03 63 01 ed 03 68 01 dc 03     Y...^...c...h...
     8a2:	6d 01 c9 03 72 01 b3 03 77 01 9b 03 7c 01 7c 03     m...r...w...|.|.
     8b2:	81 01 4e 03                                         ..N.

000008b6 <M769ch1>:
     8b6:	e1 00 e6 05 e6 00 e4 05 eb 00 e2 05 f0 00 e0 05     ................
     8c6:	f5 00 de 05 fa 00 dc 05 ff 00 da 05 04 01 d8 05     ................
     8d6:	09 01 d6 05 0e 01 d4 05 13 01 d2 05 18 01 d0 05     ................
     8e6:	1d 01 cf 05 22 01 cd 05 27 01 cb 05 2c 01 c9 05     ...."...'...,...
     8f6:	31 01 c7 05 36 01 c5 05 3b 01 c3 05 40 01 c1 05     1...6...;...@...
     906:	45 01 bf 05 4a 01 bd 05 4f 01 bb 05 54 01 b9 05     E...J...O...T...
     916:	59 01 b7 05 5e 01 b5 05 63 01 b3 05 68 01 b1 05     Y...^...c...h...
     926:	6d 01 af 05 72 01 ad 05 77 01 ab 05 7c 01 a9 05     m...r...w...|...
     936:	81 01 a7 05 86 01 a5 05 8b 01 a3 05 90 01 a1 05     ................
     946:	95 01 9f 05 9a 01 9d 05 9f 01 9b 05 a4 01 99 05     ................
     956:	a9 01 97 05 ae 01 95 05 b3 01 93 05 b8 01 91 05     ................
     966:	bd 01 8f 05 c2 01 8d 05 c7 01 8b 05 cc 01 89 05     ................
     976:	d1 01 87 05 d6 01 85 05 db 01 83 05 e0 01 81 05     ................
     986:	e5 01 7f 05 ea 01 7d 05 ef 01 7b 05 f4 01 79 05     ......}...{...y.
     996:	f9 01 77 05 fe 01 75 05 03 02 73 05 08 02 71 05     ..w...u...s...q.
     9a6:	0d 02 6f 05 12 02 6d 05 17 02 6b 05 1c 02 69 05     ..o...m...k...i.
     9b6:	21 02 67 05 26 02 65 05 2b 02 63 05 30 02 61 05     !.g.&.e.+.c.0.a.
     9c6:	35 02 5e 05 3a 02 5c 05 3f 02 5a 05 44 02 58 05     5.^.:.\.?.Z.D.X.
     9d6:	49 02 56 05 4e 02 54 05 53 02 52 05 58 02 50 05     I.V.N.T.S.R.X.P.
     9e6:	5d 02 4e 05 62 02 4c 05 67 02 49 05 6c 02 47 05     ].N.b.L.g.I.l.G.
     9f6:	71 02 45 05 76 02 43 05 7b 02 41 05 80 02 3f 05     q.E.v.C.{.A...?.
     a06:	85 02 3d 05 8a 02 3b 05 8f 02 38 05 94 02 36 05     ..=...;...8...6.
     a16:	99 02 34 05 9e 02 32 05 a3 02 30 05 a8 02 2e 05     ..4...2...0.....
     a26:	ad 02 2b 05 b2 02 29 05 b7 02 27 05 bc 02 25 05     ..+...)...'...%.
     a36:	c1 02 23 05 c6 02 20 05 cb 02 1e 05 d0 02 1c 05     ..#... .........
     a46:	d5 02 1a 05 da 02 17 05 df 02 15 05 e4 02 13 05     ................
     a56:	e9 02 11 05 ee 02 0e 05 f3 02 0c 05 f8 02 0a 05     ................
     a66:	fd 02 08 05 02 03 05 05 07 03 03 05 0c 03 01 05     ................
     a76:	11 03 fe 04 16 03 fc 04 1b 03 fa 04 20 03 f7 04     ............ ...
     a86:	25 03 f5 04 2a 03 f3 04 2f 03 f0 04 34 03 ee 04     %...*.../...4...
     a96:	39 03 eb 04 3e 03 e9 04 43 03 e7 04 48 03 e4 04     9...>...C...H...
     aa6:	4d 03 e2 04 52 03 df 04 57 03 dd 04 5c 03 da 04     M...R...W...\...
     ab6:	61 03 d8 04 66 03 d5 04 6b 03 d3 04 70 03 d0 04     a...f...k...p...
     ac6:	75 03 ce 04 7a 03 cb 04 7f 03 c9 04 84 03 c6 04     u...z...........
     ad6:	89 03 c4 04 8e 03 c1 04 93 03 bf 04 98 03 bc 04     ................
     ae6:	9d 03 b9 04 a2 03 b7 04 a7 03 b4 04 ac 03 b2 04     ................
     af6:	b1 03 af 04 b6 03 ac 04 bb 03 aa 04 c0 03 a7 04     ................
     b06:	c5 03 a4 04 ca 03 a1 04 cf 03 9f 04 d4 03 9c 04     ................
     b16:	d9 03 99 04 de 03 96 04 e3 03 93 04 e8 03 91 04     ................
     b26:	ed 03 8e 04 f2 03 8b 04 f7 03 88 04 fc 03 85 04     ................
     b36:	01 04 82 04 06 04 7f 04 0b 04 7c 04 10 04 79 04     ..........|...y.
     b46:	15 04 76 04 1a 04 73 04 1f 04 70 04 24 04 6d 04     ..v...s...p.$.m.
     b56:	29 04 6a 04 2e 04 67 04 33 04 64 04 38 04 60 04     ).j...g.3.d.8.`.
     b66:	3d 04 5d 04 42 04 5a 04 47 04 57 04 4c 04 53 04     =.].B.Z.G.W.L.S.
     b76:	51 04 50 04 56 04 4d 04 5b 04 49 04 60 04 46 04     Q.P.V.M.[.I.`.F.
     b86:	65 04 42 04 6a 04 3f 04 6f 04 3b 04 74 04 38 04     e.B.j.?.o.;.t.8.
     b96:	79 04 34 04 7e 04 30 04 83 04 2d 04 88 04 29 04     y.4.~.0...-...).
     ba6:	8d 04 25 04 92 04 21 04 97 04 1d 04 9c 04 19 04     ..%...!.........
     bb6:	a1 04 15 04 a6 04 11 04 ab 04 0d 04 b0 04 09 04     ................
     bc6:	b5 04 05 04 ba 04 00 04 bf 04 fc 03 c4 04 f7 03     ................
     bd6:	c9 04 f3 03 ce 04 ee 03 d3 04 e9 03 d8 04 e4 03     ................
     be6:	dd 04 df 03 e2 04 da 03 e7 04 d5 03 ec 04 d0 03     ................
     bf6:	f1 04 ca 03 f6 04 c5 03 fb 04 bf 03 00 05 b9 03     ................
     c06:	05 05 b3 03 0a 05 ac 03 0f 05 a5 03 14 05 9e 03     ................
     c16:	19 05 97 03 1e 05 8f 03 23 05 87 03 28 05 7e 03     ........#...(.~.
     c26:	2d 05 74 03 32 05 6a 03 37 05 5e 03 3c 05 51 03     -.t.2.j.7.^.<.Q.
     c36:	41 05 40 03 46 05 28 03                             A.@.F.(.

00000c3e <M769ch0>:
     c3e:	46 00 e1 05 4b 00 da 05 50 00 d3 05 55 00 cd 05     F...K...P...U...
     c4e:	5a 00 c6 05 5f 00 bf 05 64 00 b8 05 69 00 b1 05     Z..._...d...i...
     c5e:	6e 00 aa 05 73 00 a3 05 78 00 9c 05 7d 00 95 05     n...s...x...}...
     c6e:	82 00 8e 05 87 00 87 05 8c 00 80 05 91 00 79 05     ..............y.
     c7e:	96 00 72 05 9b 00 6a 05 a0 00 63 05 a5 00 5c 05     ..r...j...c...\.
     c8e:	aa 00 55 05 af 00 4d 05 b4 00 46 05 b9 00 3e 05     ..U...M...F...>.
     c9e:	be 00 36 05 c3 00 2f 05 c8 00 27 05 cd 00 1f 05     ..6.../...'.....
     cae:	d2 00 17 05 d7 00 0f 05 dc 00 07 05 e1 00 ff 04     ................
     cbe:	e6 00 f7 04 eb 00 ef 04 f0 00 e6 04 f5 00 de 04     ................
     cce:	fa 00 d5 04 ff 00 cc 04 04 01 c3 04 09 01 ba 04     ................
     cde:	0e 01 b1 04 13 01 a7 04 18 01 9e 04 1d 01 94 04     ................
     cee:	22 01 8a 04 27 01 7f 04 2c 01 75 04 31 01 6a 04     "...'...,.u.1.j.
     cfe:	36 01 5f 04 3b 01 53 04 40 01 48 04 45 01 3b 04     6._.;.S.@.H.E.;.
     d0e:	4a 01 2e 04 4f 01 21 04 54 01 13 04 59 01 04 04     J...O.!.T...Y...
     d1e:	5e 01 f4 03 63 01 e3 03 68 01 d1 03 6d 01 bd 03     ^...c...h...m...
     d2e:	72 01 a5 03 77 01 8a 03 7c 01 64 03                 r...w...|.d.

00000d3a <M722A1ch1>:
     d3a:	e1 00 e5 05 e6 00 e3 05 eb 00 e1 05 f0 00 df 05     ................
     d4a:	f5 00 dd 05 fa 00 db 05 ff 00 d9 05 04 01 d7 05     ................
     d5a:	09 01 d6 05 0e 01 d4 05 13 01 d2 05 18 01 d0 05     ................
     d6a:	1d 01 ce 05 22 01 cc 05 27 01 ca 05 2c 01 c8 05     ...."...'...,...
     d7a:	31 01 c6 05 36 01 c4 05 3b 01 c2 05 40 01 c0 05     1...6...;...@...
     d8a:	45 01 be 05 4a 01 bc 05 4f 01 ba 05 54 01 b8 05     E...J...O...T...
     d9a:	59 01 b6 05 5e 01 b4 05 63 01 b2 05 68 01 b0 05     Y...^...c...h...
     daa:	6d 01 ae 05 72 01 ac 05 77 01 aa 05 7c 01 a8 05     m...r...w...|...
     dba:	81 01 a6 05 86 01 a4 05 8b 01 a2 05 90 01 a0 05     ................
     dca:	95 01 9e 05 9a 01 9c 05 9f 01 9a 05 a4 01 98 05     ................
     dda:	a9 01 96 05 ae 01 94 05 b3 01 92 05 b8 01 90 05     ................
     dea:	bd 01 8e 05 c2 01 8c 05 c7 01 8a 05 cc 01 88 05     ................
     dfa:	d1 01 86 05 d6 01 84 05 db 01 82 05 e0 01 80 05     ................
     e0a:	e5 01 7e 05 ea 01 7c 05 ef 01 7a 05 f4 01 78 05     ..~...|...z...x.
     e1a:	f9 01 76 05 fe 01 73 05 03 02 71 05 08 02 6f 05     ..v...s...q...o.
     e2a:	0d 02 6d 05 12 02 6b 05 17 02 69 05 1c 02 67 05     ..m...k...i...g.
     e3a:	21 02 65 05 26 02 63 05 2b 02 61 05 30 02 5f 05     !.e.&.c.+.a.0._.
     e4a:	35 02 5d 05 3a 02 5b 05 3f 02 59 05 44 02 56 05     5.].:.[.?.Y.D.V.
     e5a:	49 02 54 05 4e 02 52 05 53 02 50 05 58 02 4e 05     I.T.N.R.S.P.X.N.
     e6a:	5d 02 4c 05 62 02 4a 05 67 02 48 05 6c 02 45 05     ].L.b.J.g.H.l.E.
     e7a:	71 02 43 05 76 02 41 05 7b 02 3f 05 80 02 3d 05     q.C.v.A.{.?...=.
     e8a:	85 02 3b 05 8a 02 38 05 8f 02 36 05 94 02 34 05     ..;...8...6...4.
     e9a:	99 02 32 05 9e 02 30 05 a3 02 2e 05 a8 02 2b 05     ..2...0.......+.
     eaa:	ad 02 29 05 b2 02 27 05 b7 02 25 05 bc 02 23 05     ..)...'...%...#.
     eba:	c1 02 20 05 c6 02 1e 05 cb 02 1c 05 d0 02 1a 05     .. .............
     eca:	d5 02 17 05 da 02 15 05 df 02 13 05 e4 02 10 05     ................
     eda:	e9 02 0e 05 ee 02 0c 05 f3 02 0a 05 f8 02 07 05     ................
     eea:	fd 02 05 05 02 03 03 05 07 03 00 05 0c 03 fe 04     ................
     efa:	11 03 fc 04 16 03 f9 04 1b 03 f7 04 20 03 f5 04     ............ ...
     f0a:	25 03 f2 04 2a 03 f0 04 2f 03 ed 04 34 03 eb 04     %...*.../...4...
     f1a:	39 03 e9 04 3e 03 e6 04 43 03 e4 04 48 03 e1 04     9...>...C...H...
     f2a:	4d 03 df 04 52 03 dc 04 57 03 da 04 5c 03 d7 04     M...R...W...\...
     f3a:	61 03 d5 04 66 03 d2 04 6b 03 d0 04 70 03 cd 04     a...f...k...p...
     f4a:	75 03 cb 04 7a 03 c8 04 7f 03 c6 04 84 03 c3 04     u...z...........
     f5a:	89 03 c1 04 8e 03 be 04 93 03 bb 04 98 03 b9 04     ................
     f6a:	9d 03 b6 04 a2 03 b3 04 a7 03 b1 04 ac 03 ae 04     ................
     f7a:	b1 03 ab 04 b6 03 a9 04 bb 03 a6 04 c0 03 a3 04     ................
     f8a:	c5 03 a0 04 ca 03 9e 04 cf 03 9b 04 d4 03 98 04     ................
     f9a:	d9 03 95 04 de 03 92 04 e3 03 8f 04 e8 03 8d 04     ................
     faa:	ed 03 8a 04 f2 03 87 04 f7 03 84 04 fc 03 81 04     ................
     fba:	01 04 7e 04 06 04 7b 04 0b 04 78 04 10 04 75 04     ..~...{...x...u.
     fca:	15 04 72 04 1a 04 6f 04 1f 04 6c 04 24 04 68 04     ..r...o...l.$.h.
     fda:	29 04 65 04 2e 04 62 04 33 04 5f 04 38 04 5c 04     ).e...b.3._.8.\.
     fea:	3d 04 58 04 42 04 55 04 47 04 52 04 4c 04 4e 04     =.X.B.U.G.R.L.N.
     ffa:	51 04 4b 04 56 04 47 04 5b 04 44 04 60 04 40 04     Q.K.V.G.[.D.`.@.
    100a:	65 04 3d 04 6a 04 39 04 6f 04 36 04 74 04 32 04     e.=.j.9.o.6.t.2.
    101a:	79 04 2e 04 7e 04 2a 04 83 04 27 04 88 04 23 04     y...~.*...'...#.
    102a:	8d 04 1f 04 92 04 1b 04 97 04 17 04 9c 04 13 04     ................
    103a:	a1 04 0f 04 a6 04 0a 04 ab 04 06 04 b0 04 02 04     ................
    104a:	b5 04 fd 03 ba 04 f9 03 bf 04 f4 03 c4 04 f0 03     ................
    105a:	c9 04 eb 03 ce 04 e6 03 d3 04 e1 03 d8 04 dc 03     ................
    106a:	dd 04 d7 03 e2 04 d1 03 e7 04 cc 03 ec 04 c6 03     ................
    107a:	f1 04 c0 03 f6 04 ba 03 fb 04 b4 03 00 05 ae 03     ................
    108a:	05 05 a7 03 0a 05 a0 03 0f 05 99 03 14 05 91 03     ................
    109a:	19 05 89 03 1e 05 80 03 23 05 77 03 28 05 6c 03     ........#.w.(.l.
    10aa:	2d 05 61 03 32 05 54 03 37 05 44 03 3c 05 2e 03     -.a.2.T.7.D.<...

000010ba <M722A1ch0>:
    10ba:	46 00 e6 05 4b 00 e0 05 50 00 da 05 55 00 d3 05     F...K...P...U...
    10ca:	5a 00 cd 05 5f 00 c6 05 64 00 c0 05 69 00 b9 05     Z..._...d...i...
    10da:	6e 00 b3 05 73 00 ac 05 78 00 a6 05 7d 00 9f 05     n...s...x...}...
    10ea:	82 00 99 05 87 00 92 05 8c 00 8b 05 91 00 85 05     ................
    10fa:	96 00 7e 05 9b 00 77 05 a0 00 70 05 a5 00 6a 05     ..~...w...p...j.
    110a:	aa 00 63 05 af 00 5c 05 b4 00 55 05 b9 00 4e 05     ..c...\...U...N.
    111a:	be 00 47 05 c3 00 40 05 c8 00 39 05 cd 00 31 05     ..G...@...9...1.
    112a:	d2 00 2a 05 d7 00 23 05 dc 00 1b 05 e1 00 14 05     ..*...#.........
    113a:	e6 00 0c 05 eb 00 05 05 f0 00 fd 04 f5 00 f5 04     ................
    114a:	fa 00 ed 04 ff 00 e6 04 04 01 dd 04 09 01 d5 04     ................
    115a:	0e 01 cd 04 13 01 c4 04 18 01 bc 04 1d 01 b3 04     ................
    116a:	22 01 aa 04 27 01 a1 04 2c 01 98 04 31 01 8f 04     "...'...,...1...
    117a:	36 01 85 04 3b 01 7b 04 40 01 71 04 45 01 67 04     6...;.{.@.q.E.g.
    118a:	4a 01 5c 04 4f 01 52 04 54 01 46 04 59 01 3b 04     J.\.O.R.T.F.Y.;.
    119a:	5e 01 2f 04 63 01 22 04 68 01 15 04 6d 01 07 04     ^./.c.".h...m...
    11aa:	72 01 f8 03 77 01 e9 03 7c 01 d8 03 81 01 c5 03     r...w...|.......
    11ba:	86 01 b1 03 8b 01 99 03 90 01 7c 03 95 01 52 03     ..........|...R.

000011ca <M720ch1>:
    11ca:	e1 00 e5 05 e6 00 e3 05 eb 00 e1 05 f0 00 df 05     ................
    11da:	f5 00 dd 05 fa 00 db 05 ff 00 d9 05 04 01 d7 05     ................
    11ea:	09 01 d6 05 0e 01 d4 05 13 01 d2 05 18 01 d0 05     ................
    11fa:	1d 01 ce 05 22 01 cc 05 27 01 ca 05 2c 01 c8 05     ...."...'...,...
    120a:	31 01 c6 05 36 01 c4 05 3b 01 c2 05 40 01 c0 05     1...6...;...@...
    121a:	45 01 be 05 4a 01 bc 05 4f 01 ba 05 54 01 b8 05     E...J...O...T...
    122a:	59 01 b6 05 5e 01 b4 05 63 01 b2 05 68 01 b0 05     Y...^...c...h...
    123a:	6d 01 ae 05 72 01 ac 05 77 01 aa 05 7c 01 a8 05     m...r...w...|...
    124a:	81 01 a6 05 86 01 a4 05 8b 01 a2 05 90 01 a0 05     ................
    125a:	95 01 9e 05 9a 01 9c 05 9f 01 9a 05 a4 01 98 05     ................
    126a:	a9 01 96 05 ae 01 94 05 b3 01 92 05 b8 01 90 05     ................
    127a:	bd 01 8e 05 c2 01 8c 05 c7 01 8a 05 cc 01 88 05     ................
    128a:	d1 01 86 05 d6 01 84 05 db 01 82 05 e0 01 80 05     ................
    129a:	e5 01 7e 05 ea 01 7c 05 ef 01 7a 05 f4 01 78 05     ..~...|...z...x.
    12aa:	f9 01 76 05 fe 01 73 05 03 02 71 05 08 02 6f 05     ..v...s...q...o.
    12ba:	0d 02 6d 05 12 02 6b 05 17 02 69 05 1c 02 67 05     ..m...k...i...g.
    12ca:	21 02 65 05 26 02 63 05 2b 02 61 05 30 02 5f 05     !.e.&.c.+.a.0._.
    12da:	35 02 5d 05 3a 02 5b 05 3f 02 59 05 44 02 56 05     5.].:.[.?.Y.D.V.
    12ea:	49 02 54 05 4e 02 52 05 53 02 50 05 58 02 4e 05     I.T.N.R.S.P.X.N.
    12fa:	5d 02 4c 05 62 02 4a 05 67 02 48 05 6c 02 45 05     ].L.b.J.g.H.l.E.
    130a:	71 02 43 05 76 02 41 05 7b 02 3f 05 80 02 3d 05     q.C.v.A.{.?...=.
    131a:	85 02 3b 05 8a 02 38 05 8f 02 36 05 94 02 34 05     ..;...8...6...4.
    132a:	99 02 32 05 9e 02 30 05 a3 02 2e 05 a8 02 2b 05     ..2...0.......+.
    133a:	ad 02 29 05 b2 02 27 05 b7 02 25 05 bc 02 23 05     ..)...'...%...#.
    134a:	c1 02 20 05 c6 02 1e 05 cb 02 1c 05 d0 02 1a 05     .. .............
    135a:	d5 02 17 05 da 02 15 05 df 02 13 05 e4 02 10 05     ................
    136a:	e9 02 0e 05 ee 02 0c 05 f3 02 0a 05 f8 02 07 05     ................
    137a:	fd 02 05 05 02 03 03 05 07 03 00 05 0c 03 fe 04     ................
    138a:	11 03 fc 04 16 03 f9 04 1b 03 f7 04 20 03 f5 04     ............ ...
    139a:	25 03 f2 04 2a 03 f0 04 2f 03 ed 04 34 03 eb 04     %...*.../...4...
    13aa:	39 03 e9 04 3e 03 e6 04 43 03 e4 04 48 03 e1 04     9...>...C...H...
    13ba:	4d 03 df 04 52 03 dc 04 57 03 da 04 5c 03 d7 04     M...R...W...\...
    13ca:	61 03 d5 04 66 03 d2 04 6b 03 d0 04 70 03 cd 04     a...f...k...p...
    13da:	75 03 cb 04 7a 03 c8 04 7f 03 c6 04 84 03 c3 04     u...z...........
    13ea:	89 03 c1 04 8e 03 be 04 93 03 bb 04 98 03 b9 04     ................
    13fa:	9d 03 b6 04 a2 03 b3 04 a7 03 b1 04 ac 03 ae 04     ................
    140a:	b1 03 ab 04 b6 03 a9 04 bb 03 a6 04 c0 03 a3 04     ................
    141a:	c5 03 a0 04 ca 03 9e 04 cf 03 9b 04 d4 03 98 04     ................
    142a:	d9 03 95 04 de 03 92 04 e3 03 8f 04 e8 03 8d 04     ................
    143a:	ed 03 8a 04 f2 03 87 04 f7 03 84 04 fc 03 81 04     ................
    144a:	01 04 7e 04 06 04 7b 04 0b 04 78 04 10 04 75 04     ..~...{...x...u.
    145a:	15 04 72 04 1a 04 6f 04 1f 04 6c 04 24 04 68 04     ..r...o...l.$.h.
    146a:	29 04 65 04 2e 04 62 04 33 04 5f 04 38 04 5c 04     ).e...b.3._.8.\.
    147a:	3d 04 58 04 42 04 55 04 47 04 52 04 4c 04 4e 04     =.X.B.U.G.R.L.N.
    148a:	51 04 4b 04 56 04 47 04 5b 04 44 04 60 04 40 04     Q.K.V.G.[.D.`.@.
    149a:	65 04 3d 04 6a 04 39 04 6f 04 36 04 74 04 32 04     e.=.j.9.o.6.t.2.
    14aa:	79 04 2e 04 7e 04 2a 04 83 04 27 04 88 04 23 04     y...~.*...'...#.
    14ba:	8d 04 1f 04 92 04 1b 04 97 04 17 04 9c 04 13 04     ................
    14ca:	a1 04 0f 04 a6 04 0a 04 ab 04 06 04 b0 04 02 04     ................
    14da:	b5 04 fd 03 ba 04 f9 03 bf 04 f4 03 c4 04 f0 03     ................
    14ea:	c9 04 eb 03 ce 04 e6 03 d3 04 e1 03 d8 04 dc 03     ................
    14fa:	dd 04 d7 03 e2 04 d1 03 e7 04 cc 03 ec 04 c6 03     ................
    150a:	f1 04 c0 03 f6 04 ba 03 fb 04 b4 03 00 05 ae 03     ................
    151a:	05 05 a7 03 0a 05 a0 03 0f 05 99 03 14 05 91 03     ................
    152a:	19 05 89 03 1e 05 80 03 23 05 77 03 28 05 6c 03     ........#.w.(.l.
    153a:	2d 05 61 03 32 05 54 03 37 05 44 03 3c 05 2e 03     -.a.2.T.7.D.<...

0000154a <M720ch0>:
    154a:	46 00 e6 05 4b 00 e0 05 50 00 da 05 55 00 d3 05     F...K...P...U...
    155a:	5a 00 cd 05 5f 00 c6 05 64 00 c0 05 69 00 b9 05     Z..._...d...i...
    156a:	6e 00 b3 05 73 00 ac 05 78 00 a6 05 7d 00 9f 05     n...s...x...}...
    157a:	82 00 99 05 87 00 92 05 8c 00 8b 05 91 00 85 05     ................
    158a:	96 00 7e 05 9b 00 77 05 a0 00 70 05 a5 00 6a 05     ..~...w...p...j.
    159a:	aa 00 63 05 af 00 5c 05 b4 00 55 05 b9 00 4e 05     ..c...\...U...N.
    15aa:	be 00 47 05 c3 00 40 05 c8 00 39 05 cd 00 31 05     ..G...@...9...1.
    15ba:	d2 00 2a 05 d7 00 23 05 dc 00 1b 05 e1 00 14 05     ..*...#.........
    15ca:	e6 00 0c 05 eb 00 05 05 f0 00 fd 04 f5 00 f5 04     ................
    15da:	fa 00 ed 04 ff 00 e6 04 04 01 dd 04 09 01 d5 04     ................
    15ea:	0e 01 cd 04 13 01 c4 04 18 01 bc 04 1d 01 b3 04     ................
    15fa:	22 01 aa 04 27 01 a1 04 2c 01 98 04 31 01 8f 04     "...'...,...1...
    160a:	36 01 85 04 3b 01 7b 04 40 01 71 04 45 01 67 04     6...;.{.@.q.E.g.
    161a:	4a 01 5c 04 4f 01 52 04 54 01 46 04 59 01 3b 04     J.\.O.R.T.F.Y.;.
    162a:	5e 01 2f 04 63 01 22 04 68 01 15 04 6d 01 07 04     ^./.c.".h...m...
    163a:	72 01 f8 03 77 01 e9 03 7c 01 d8 03 81 01 c5 03     r...w...|.......
    164a:	86 01 b1 03 8b 01 99 03 90 01 7c 03 95 01 52 03     ..........|...R.

0000165a <M302A1ch1>:
    165a:	55 00 e5 05 5a 00 df 05 5f 00 da 05 64 00 d5 05     U...Z..._...d...
    166a:	69 00 d0 05 6e 00 cb 05 73 00 c5 05 78 00 c0 05     i...n...s...x...
    167a:	7d 00 bb 05 82 00 b6 05 87 00 b0 05 8c 00 ab 05     }...............
    168a:	91 00 a6 05 96 00 a0 05 9b 00 9b 05 a0 00 96 05     ................
    169a:	a5 00 90 05 aa 00 8b 05 af 00 86 05 b4 00 80 05     ................
    16aa:	b9 00 7b 05 be 00 76 05 c3 00 70 05 c8 00 6b 05     ..{...v...p...k.
    16ba:	cd 00 65 05 d2 00 60 05 d7 00 5a 05 dc 00 55 05     ..e...`...Z...U.
    16ca:	e1 00 4f 05 e6 00 49 05 eb 00 44 05 f0 00 3e 05     ..O...I...D...>.
    16da:	f5 00 38 05 fa 00 33 05 ff 00 2d 05 04 01 27 05     ..8...3...-...'.
    16ea:	09 01 21 05 0e 01 1b 05 13 01 15 05 18 01 0f 05     ..!.............
    16fa:	1d 01 09 05 22 01 03 05 27 01 fd 04 2c 01 f7 04     ...."...'...,...
    170a:	31 01 f1 04 36 01 eb 04 3b 01 e4 04 40 01 de 04     1...6...;...@...
    171a:	45 01 d7 04 4a 01 d1 04 4f 01 ca 04 54 01 c3 04     E...J...O...T...
    172a:	59 01 bd 04 5e 01 b6 04 63 01 af 04 68 01 a8 04     Y...^...c...h...
    173a:	6d 01 a1 04 72 01 99 04 77 01 92 04 7c 01 8b 04     m...r...w...|...
    174a:	81 01 83 04 86 01 7b 04 8b 01 73 04 90 01 6b 04     ......{...s...k.
    175a:	95 01 63 04 9a 01 5b 04 9f 01 52 04 a4 01 49 04     ..c...[...R...I.
    176a:	a9 01 40 04 ae 01 37 04 b3 01 2e 04 b8 01 24 04     ..@...7.......$.
    177a:	bd 01 1a 04 c2 01 0f 04 c7 01 04 04 cc 01 f8 03     ................
    178a:	d1 01 ec 03 d6 01 df 03 db 01 d2 03 e0 01 c3 03     ................
    179a:	e5 01 b3 03 ea 01 a1 03 ef 01 8c 03 f4 01 72 03     ..............r.
    17aa:	f9 01 4d 03                                         ..M.

000017ae <M302A1ch0>:
    17ae:	23 00 e2 05 28 00 d5 05 2d 00 c8 05 32 00 ba 05     #...(...-...2...
    17be:	37 00 ad 05 3c 00 a0 05 41 00 92 05 46 00 85 05     7...<...A...F...
    17ce:	4b 00 77 05 50 00 69 05 55 00 5c 05 5a 00 4d 05     K.w.P.i.U.\.Z.M.
    17de:	5f 00 3f 05 64 00 31 05 69 00 22 05 6e 00 13 05     _.?.d.1.i.".n...
    17ee:	73 00 04 05 78 00 f4 04 7d 00 e4 04 82 00 d4 04     s...x...}.......
    17fe:	87 00 c3 04 8c 00 b1 04 91 00 9f 04 96 00 8d 04     ................
    180e:	9b 00 79 04 a0 00 65 04 a5 00 4f 04 aa 00 38 04     ..y...e...O...8.
    181e:	af 00 1f 04 b4 00 04 04 b9 00 e5 03 be 00 c1 03     ................
    182e:	c3 00 94 03 c8 00 44 03                             ......D.

00001836 <M1061ch1>:
    1836:	b4 00 e7 05 b9 00 e4 05 be 00 e2 05 c3 00 e0 05     ................
    1846:	c8 00 dd 05 cd 00 db 05 d2 00 d8 05 d7 00 d6 05     ................
    1856:	dc 00 d4 05 e1 00 d1 05 e6 00 cf 05 eb 00 cc 05     ................
    1866:	f0 00 ca 05 f5 00 c8 05 fa 00 c5 05 ff 00 c3 05     ................
    1876:	04 01 c1 05 09 01 be 05 0e 01 bc 05 13 01 b9 05     ................
    1886:	18 01 b7 05 1d 01 b5 05 22 01 b2 05 27 01 b0 05     ........"...'...
    1896:	2c 01 ad 05 31 01 ab 05 36 01 a9 05 3b 01 a6 05     ,...1...6...;...
    18a6:	40 01 a4 05 45 01 a1 05 4a 01 9f 05 4f 01 9d 05     @...E...J...O...
    18b6:	54 01 9a 05 59 01 98 05 5e 01 96 05 63 01 93 05     T...Y...^...c...
    18c6:	68 01 91 05 6d 01 8e 05 72 01 8c 05 77 01 8a 05     h...m...r...w...
    18d6:	7c 01 87 05 81 01 85 05 86 01 82 05 8b 01 80 05     |...............
    18e6:	90 01 7d 05 95 01 7b 05 9a 01 79 05 9f 01 76 05     ..}...{...y...v.
    18f6:	a4 01 74 05 a9 01 71 05 ae 01 6f 05 b3 01 6d 05     ..t...q...o...m.
    1906:	b8 01 6a 05 bd 01 68 05 c2 01 65 05 c7 01 63 05     ..j...h...e...c.
    1916:	cc 01 60 05 d1 01 5e 05 d6 01 5c 05 db 01 59 05     ..`...^...\...Y.
    1926:	e0 01 57 05 e5 01 54 05 ea 01 52 05 ef 01 4f 05     ..W...T...R...O.
    1936:	f4 01 4d 05 f9 01 4a 05 fe 01 48 05 03 02 45 05     ..M...J...H...E.
    1946:	08 02 43 05 0d 02 41 05 12 02 3e 05 17 02 3c 05     ..C...A...>...<.
    1956:	1c 02 39 05 21 02 37 05 26 02 34 05 2b 02 32 05     ..9.!.7.&.4.+.2.
    1966:	30 02 2f 05 35 02 2d 05 3a 02 2a 05 3f 02 28 05     0./.5.-.:.*.?.(.
    1976:	44 02 25 05 49 02 22 05 4e 02 20 05 53 02 1d 05     D.%.I.".N. .S...
    1986:	58 02 1b 05 5d 02 18 05 62 02 16 05 67 02 13 05     X...]...b...g...
    1996:	6c 02 11 05 71 02 0e 05 76 02 0b 05 7b 02 09 05     l...q...v...{...
    19a6:	80 02 06 05 85 02 04 05 8a 02 01 05 8f 02 fe 04     ................
    19b6:	94 02 fc 04 99 02 f9 04 9e 02 f7 04 a3 02 f4 04     ................
    19c6:	a8 02 f1 04 ad 02 ef 04 b2 02 ec 04 b7 02 e9 04     ................
    19d6:	bc 02 e7 04 c1 02 e4 04 c6 02 e1 04 cb 02 df 04     ................
    19e6:	d0 02 dc 04 d5 02 d9 04 da 02 d6 04 df 02 d4 04     ................
    19f6:	e4 02 d1 04 e9 02 ce 04 ee 02 cb 04 f3 02 c9 04     ................
    1a06:	f8 02 c6 04 fd 02 c3 04 02 03 c0 04 07 03 bd 04     ................
    1a16:	0c 03 bb 04 11 03 b8 04 16 03 b5 04 1b 03 b2 04     ................
    1a26:	20 03 af 04 25 03 ac 04 2a 03 a9 04 2f 03 a6 04      ...%...*.../...
    1a36:	34 03 a3 04 39 03 a1 04 3e 03 9e 04 43 03 9b 04     4...9...>...C...
    1a46:	48 03 98 04 4d 03 95 04 52 03 92 04 57 03 8f 04     H...M...R...W...
    1a56:	5c 03 8c 04 61 03 88 04 66 03 85 04 6b 03 82 04     \...a...f...k...
    1a66:	70 03 7f 04 75 03 7c 04 7a 03 79 04 7f 03 76 04     p...u.|.z.y...v.
    1a76:	84 03 73 04 89 03 6f 04 8e 03 6c 04 93 03 69 04     ..s...o...l...i.
    1a86:	98 03 66 04 9d 03 62 04 a2 03 5f 04 a7 03 5c 04     ..f...b..._...\.
    1a96:	ac 03 58 04 b1 03 55 04 b6 03 52 04 bb 03 4e 04     ..X...U...R...N.
    1aa6:	c0 03 4b 04 c5 03 47 04 ca 03 44 04 cf 03 40 04     ..K...G...D...@.
    1ab6:	d4 03 3d 04 d9 03 39 04 de 03 35 04 e3 03 32 04     ..=...9...5...2.
    1ac6:	e8 03 2e 04 ed 03 2a 04 f2 03 27 04 f7 03 23 04     ......*...'...#.
    1ad6:	fc 03 1f 04 01 04 1b 04 06 04 17 04 0b 04 13 04     ................
    1ae6:	10 04 0f 04 15 04 0b 04 1a 04 07 04 1f 04 03 04     ................
    1af6:	24 04 ff 03 29 04 fa 03 2e 04 f6 03 33 04 f2 03     $...).......3...
    1b06:	38 04 ed 03 3d 04 e9 03 42 04 e4 03 47 04 e0 03     8...=...B...G...
    1b16:	4c 04 db 03 51 04 d6 03 56 04 d1 03 5b 04 cc 03     L...Q...V...[...
    1b26:	60 04 c7 03 65 04 c2 03 6a 04 bc 03 6f 04 b7 03     `...e...j...o...
    1b36:	74 04 b1 03 79 04 ac 03 7e 04 a6 03 83 04 a0 03     t...y...~.......
    1b46:	88 04 99 03 8d 04 93 03 92 04 8c 03 97 04 85 03     ................
    1b56:	9c 04 7e 03 a1 04 76 03 a6 04 6e 03 ab 04 65 03     ..~...v...n...e.
    1b66:	b0 04 5c 03 b5 04 52 03 ba 04 47 03 bf 04 3a 03     ..\...R...G...:.
    1b76:	c4 04 2c 03                                         ..,.

00001b7a <M1061ch0>:
    1b7a:	3c 00 e1 05 41 00 d9 05 46 00 d1 05 4b 00 c9 05     <...A...F...K...
    1b8a:	50 00 c0 05 55 00 b8 05 5a 00 b0 05 5f 00 a8 05     P...U...Z..._...
    1b9a:	64 00 9f 05 69 00 97 05 6e 00 8f 05 73 00 86 05     d...i...n...s...
    1baa:	78 00 7e 05 7d 00 75 05 82 00 6c 05 87 00 64 05     x.~.}.u...l...d.
    1bba:	8c 00 5b 05 91 00 52 05 96 00 49 05 9b 00 40 05     ..[...R...I...@.
    1bca:	a0 00 37 05 a5 00 2e 05 aa 00 25 05 af 00 1b 05     ..7.......%.....
    1bda:	b4 00 12 05 b9 00 08 05 be 00 fe 04 c3 00 f4 04     ................
    1bea:	c8 00 ea 04 cd 00 e0 04 d2 00 d5 04 d7 00 cb 04     ................
    1bfa:	dc 00 c0 04 e1 00 b5 04 e6 00 aa 04 eb 00 9e 04     ................
    1c0a:	f0 00 92 04 f5 00 86 04 fa 00 7a 04 ff 00 6d 04     ..........z...m.
    1c1a:	04 01 5f 04 09 01 52 04 0e 01 43 04 13 01 34 04     .._...R...C...4.
    1c2a:	18 01 25 04 1d 01 14 04 22 01 02 04 27 01 ef 03     ..%....."...'...
    1c3a:	2c 01 da 03 31 01 c3 03 36 01 a8 03 3b 01 87 03     ,...1...6...;...
    1c4a:	40 01 57 03                                         @.W.

00001c4e <M720A1ch1>:
    1c4e:	e6 00 e6 05 eb 00 e4 05 f0 00 e2 05 f5 00 e0 05     ................
    1c5e:	fa 00 de 05 ff 00 dc 05 04 01 da 05 09 01 d8 05     ................
    1c6e:	0e 01 d6 05 13 01 d4 05 18 01 d2 05 1d 01 d0 05     ................
    1c7e:	22 01 cf 05 27 01 cd 05 2c 01 cb 05 31 01 c9 05     "...'...,...1...
    1c8e:	36 01 c7 05 3b 01 c5 05 40 01 c3 05 45 01 c1 05     6...;...@...E...
    1c9e:	4a 01 bf 05 4f 01 bd 05 54 01 bb 05 59 01 b9 05     J...O...T...Y...
    1cae:	5e 01 b7 05 63 01 b5 05 68 01 b4 05 6d 01 b2 05     ^...c...h...m...
    1cbe:	72 01 b0 05 77 01 ae 05 7c 01 ac 05 81 01 aa 05     r...w...|.......
    1cce:	86 01 a8 05 8b 01 a6 05 90 01 a4 05 95 01 a2 05     ................
    1cde:	9a 01 a0 05 9f 01 9e 05 a4 01 9c 05 a9 01 9a 05     ................
    1cee:	ae 01 98 05 b3 01 96 05 b8 01 94 05 bd 01 92 05     ................
    1cfe:	c2 01 91 05 c7 01 8f 05 cc 01 8d 05 d1 01 8b 05     ................
    1d0e:	d6 01 89 05 db 01 87 05 e0 01 85 05 e5 01 83 05     ................
    1d1e:	ea 01 81 05 ef 01 7f 05 f4 01 7d 05 f9 01 7b 05     ..........}...{.
    1d2e:	fe 01 79 05 03 02 77 05 08 02 75 05 0d 02 73 05     ..y...w...u...s.
    1d3e:	12 02 71 05 17 02 6f 05 1c 02 6d 05 21 02 6b 05     ..q...o...m.!.k.
    1d4e:	26 02 69 05 2b 02 67 05 30 02 65 05 35 02 63 05     &.i.+.g.0.e.5.c.
    1d5e:	3a 02 61 05 3f 02 5f 05 44 02 5d 05 49 02 5b 05     :.a.?._.D.].I.[.
    1d6e:	4e 02 59 05 53 02 56 05 58 02 54 05 5d 02 52 05     N.Y.S.V.X.T.].R.
    1d7e:	62 02 50 05 67 02 4e 05 6c 02 4c 05 71 02 4a 05     b.P.g.N.l.L.q.J.
    1d8e:	76 02 48 05 7b 02 46 05 80 02 44 05 85 02 42 05     v.H.{.F...D...B.
    1d9e:	8a 02 40 05 8f 02 3e 05 94 02 3b 05 99 02 39 05     ..@...>...;...9.
    1dae:	9e 02 37 05 a3 02 35 05 a8 02 33 05 ad 02 31 05     ..7...5...3...1.
    1dbe:	b2 02 2f 05 b7 02 2d 05 bc 02 2a 05 c1 02 28 05     ../...-...*...(.
    1dce:	c6 02 26 05 cb 02 24 05 d0 02 22 05 d5 02 20 05     ..&...$..."... .
    1dde:	da 02 1d 05 df 02 1b 05 e4 02 19 05 e9 02 17 05     ................
    1dee:	ee 02 15 05 f3 02 12 05 f8 02 10 05 fd 02 0e 05     ................
    1dfe:	02 03 0c 05 07 03 0a 05 0c 03 07 05 11 03 05 05     ................
    1e0e:	16 03 03 05 1b 03 01 05 20 03 fe 04 25 03 fc 04     ........ ...%...
    1e1e:	2a 03 fa 04 2f 03 f7 04 34 03 f5 04 39 03 f3 04     *.../...4...9...
    1e2e:	3e 03 f0 04 43 03 ee 04 48 03 ec 04 4d 03 e9 04     >...C...H...M...
    1e3e:	52 03 e7 04 57 03 e5 04 5c 03 e2 04 61 03 e0 04     R...W...\...a...
    1e4e:	66 03 de 04 6b 03 db 04 70 03 d9 04 75 03 d6 04     f...k...p...u...
    1e5e:	7a 03 d4 04 7f 03 d1 04 84 03 cf 04 89 03 cc 04     z...............
    1e6e:	8e 03 ca 04 93 03 c8 04 98 03 c5 04 9d 03 c2 04     ................
    1e7e:	a2 03 c0 04 a7 03 bd 04 ac 03 bb 04 b1 03 b8 04     ................
    1e8e:	b6 03 b6 04 bb 03 b3 04 c0 03 b1 04 c5 03 ae 04     ................
    1e9e:	ca 03 ab 04 cf 03 a9 04 d4 03 a6 04 d9 03 a3 04     ................
    1eae:	de 03 a1 04 e3 03 9e 04 e8 03 9b 04 ed 03 99 04     ................
    1ebe:	f2 03 96 04 f7 03 93 04 fc 03 90 04 01 04 8d 04     ................
    1ece:	06 04 8b 04 0b 04 88 04 10 04 85 04 15 04 82 04     ................
    1ede:	1a 04 7f 04 1f 04 7c 04 24 04 79 04 29 04 76 04     ......|.$.y.).v.
    1eee:	2e 04 73 04 33 04 70 04 38 04 6d 04 3d 04 6a 04     ..s.3.p.8.m.=.j.
    1efe:	42 04 67 04 47 04 64 04 4c 04 61 04 51 04 5e 04     B.g.G.d.L.a.Q.^.
    1f0e:	56 04 5b 04 5b 04 57 04 60 04 54 04 65 04 51 04     V.[.[.W.`.T.e.Q.
    1f1e:	6a 04 4e 04 6f 04 4a 04 74 04 47 04 79 04 44 04     j.N.o.J.t.G.y.D.
    1f2e:	7e 04 40 04 83 04 3d 04 88 04 39 04 8d 04 36 04     ~.@...=...9...6.
    1f3e:	92 04 32 04 97 04 2e 04 9c 04 2b 04 a1 04 27 04     ..2.......+...'.
    1f4e:	a6 04 23 04 ab 04 1f 04 b0 04 1c 04 b5 04 18 04     ..#.............
    1f5e:	ba 04 14 04 bf 04 10 04 c4 04 0c 04 c9 04 07 04     ................
    1f6e:	ce 04 03 04 d3 04 ff 03 d8 04 fb 03 dd 04 f6 03     ................
    1f7e:	e2 04 f2 03 e7 04 ed 03 ec 04 e8 03 f1 04 e4 03     ................
    1f8e:	f6 04 df 03 fb 04 da 03 00 05 d5 03 05 05 cf 03     ................
    1f9e:	0a 05 ca 03 0f 05 c4 03 14 05 bf 03 19 05 b9 03     ................
    1fae:	1e 05 b3 03 23 05 ac 03 28 05 a6 03 2d 05 9f 03     ....#...(...-...
    1fbe:	32 05 98 03 37 05 90 03 3c 05 88 03 41 05 80 03     2...7...<...A...
    1fce:	46 05 76 03 4b 05 6c 03 50 05 61 03 55 05 55 03     F.v.K.l.P.a.U.U.
    1fde:	5a 05 46 03 5f 05 32 03                             Z.F._.2.

00001fe6 <M720A1ch0>:
    1fe6:	4b 00 e5 05 50 00 df 05 55 00 d9 05 5a 00 d3 05     K...P...U...Z...
    1ff6:	5f 00 cd 05 69 00 c1 05 6e 00 bb 05 73 00 b5 05     _...i...n...s...
    2006:	78 00 ae 05 7d 00 a8 05 82 00 a2 05 87 00 9c 05     x...}...........
    2016:	8c 00 96 05 91 00 8f 05 96 00 89 05 9b 00 83 05     ................
    2026:	a0 00 7c 05 a5 00 76 05 aa 00 70 05 af 00 69 05     ..|...v...p...i.
    2036:	b4 00 63 05 b9 00 5c 05 be 00 56 05 c3 00 4f 05     ..c...\...V...O.
    2046:	c8 00 48 05 cd 00 42 05 d2 00 3b 05 d7 00 34 05     ..H...B...;...4.
    2056:	dc 00 2d 05 e1 00 27 05 e6 00 20 05 eb 00 19 05     ..-...'... .....
    2066:	f0 00 11 05 f5 00 0a 05 fa 00 03 05 ff 00 fc 04     ................
    2076:	04 01 f4 04 09 01 ed 04 0e 01 e5 04 13 01 de 04     ................
    2086:	18 01 d6 04 1d 01 ce 04 22 01 c6 04 27 01 be 04     ........"...'...
    2096:	2c 01 b6 04 31 01 ae 04 36 01 a5 04 3b 01 9d 04     ,...1...6...;...
    20a6:	40 01 94 04 45 01 8b 04 4a 01 82 04 4f 01 79 04     @...E...J...O.y.
    20b6:	54 01 6f 04 59 01 65 04 5e 01 5b 04 63 01 51 04     T.o.Y.e.^.[.c.Q.
    20c6:	68 01 46 04 6d 01 3b 04 72 01 30 04 77 01 24 04     h.F.m.;.r.0.w.$.
    20d6:	7c 01 18 04 81 01 0b 04 86 01 fd 03 8b 01 ef 03     |...............
    20e6:	90 01 df 03 95 01 cf 03 9a 01 bd 03 9f 01 a8 03     ................
    20f6:	a4 01 90 03 a9 01 73 03 ae 01 44 03                 ......s...D.

00002102 <State7>:
    2102:	53 74 61 74 65 20 37 00                             State 7.

0000210a <State6>:
    210a:	53 74 61 74 65 20 36 00                             State 6.

00002112 <State5>:
    2112:	53 74 61 74 65 20 35 00                             State 5.

0000211a <State4>:
    211a:	53 74 61 74 65 20 34 00                             State 4.

00002122 <State3>:
    2122:	53 74 61 74 65 20 33 00                             State 3.

0000212a <State2>:
    212a:	53 74 61 74 65 20 32 00                             State 2.

00002132 <State1>:
    2132:	53 74 61 74 65 20 31 00                             State 1.

0000213a <State0>:
    213a:	53 74 61 74 65 20 30 00                             State 0.

00002142 <LcdCustomChar>:
    2142:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
    2152:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
    2162:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
    2172:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00002182 <__ctors_end>:
    2182:	11 24       	eor	r1, r1
    2184:	1f be       	out	0x3f, r1	; 63
    2186:	cf ef       	ldi	r28, 0xFF	; 255
    2188:	d0 e1       	ldi	r29, 0x10	; 16
    218a:	de bf       	out	0x3e, r29	; 62
    218c:	cd bf       	out	0x3d, r28	; 61

0000218e <__do_copy_data>:
    218e:	12 e0       	ldi	r17, 0x02	; 2
    2190:	a0 e0       	ldi	r26, 0x00	; 0
    2192:	b1 e0       	ldi	r27, 0x01	; 1
    2194:	e8 ec       	ldi	r30, 0xC8	; 200
    2196:	f5 e4       	ldi	r31, 0x45	; 69
    2198:	02 c0       	rjmp	.+4      	; 0x219e <__do_copy_data+0x10>
    219a:	05 90       	lpm	r0, Z+
    219c:	0d 92       	st	X+, r0
    219e:	aa 3b       	cpi	r26, 0xBA	; 186
    21a0:	b1 07       	cpc	r27, r17
    21a2:	d9 f7       	brne	.-10     	; 0x219a <__do_copy_data+0xc>

000021a4 <__do_clear_bss>:
    21a4:	27 e0       	ldi	r18, 0x07	; 7
    21a6:	aa eb       	ldi	r26, 0xBA	; 186
    21a8:	b2 e0       	ldi	r27, 0x02	; 2
    21aa:	01 c0       	rjmp	.+2      	; 0x21ae <.do_clear_bss_start>

000021ac <.do_clear_bss_loop>:
    21ac:	1d 92       	st	X+, r1

000021ae <.do_clear_bss_start>:
    21ae:	a3 32       	cpi	r26, 0x23	; 35
    21b0:	b2 07       	cpc	r27, r18
    21b2:	e1 f7       	brne	.-8      	; 0x21ac <.do_clear_bss_loop>
    21b4:	0e 94 0e 1c 	call	0x381c	; 0x381c <main>
    21b8:	0c 94 e2 22 	jmp	0x45c4	; 0x45c4 <_exit>

000021bc <__bad_interrupt>:
    21bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000021c0 <i2cSendStart>:
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
    21c0:	3c 9a       	sbi	0x07, 4	; 7
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    21c2:	84 ea       	ldi	r24, 0xA4	; 164
    21c4:	80 93 bc 00 	sts	0x00BC, r24
    21c8:	08 95       	ret

000021ca <i2cWaitForComplete>:
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    21ca:	80 91 bc 00 	lds	r24, 0x00BC
    21ce:	88 23       	and	r24, r24
    21d0:	54 f0       	brlt	.+20     	; 0x21e6 <i2cWaitForComplete+0x1c>
    21d2:	8a e5       	ldi	r24, 0x5A	; 90
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	ec eb       	ldi	r30, 0xBC	; 188
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	20 81       	ld	r18, Z
    21dc:	22 23       	and	r18, r18
    21de:	1c f0       	brlt	.+6      	; 0x21e6 <i2cWaitForComplete+0x1c>
    21e0:	01 97       	sbiw	r24, 0x01	; 1
    21e2:	00 97       	sbiw	r24, 0x00	; 0
    21e4:	d1 f7       	brne	.-12     	; 0x21da <i2cWaitForComplete+0x10>
    21e6:	08 95       	ret

000021e8 <i2cReceiveByte>:
}

void i2cReceiveByte(unsigned char ackFlag)
{
	// begin receive over i2c
	if( ackFlag )
    21e8:	88 23       	and	r24, r24
    21ea:	39 f0       	breq	.+14     	; 0x21fa <i2cReceiveByte+0x12>
	{
		// ackFlag = TRUE: ACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
    21ec:	ec eb       	ldi	r30, 0xBC	; 188
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	8f 70       	andi	r24, 0x0F	; 15
    21f4:	80 6c       	ori	r24, 0xC0	; 192
    21f6:	80 83       	st	Z, r24
    21f8:	08 95       	ret
	}
	else
	{
		// ackFlag = FALSE: NACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    21fa:	ec eb       	ldi	r30, 0xBC	; 188
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	80 81       	ld	r24, Z
    2200:	8f 70       	andi	r24, 0x0F	; 15
    2202:	80 68       	ori	r24, 0x80	; 128
    2204:	80 83       	st	Z, r24
    2206:	08 95       	ret

00002208 <delay_ms>:
}

void delay_ms(uint16_t x)
{
  uint8_t y, z;
  for ( ; x > 0 ; x--){
    2208:	00 97       	sbiw	r24, 0x00	; 0
    220a:	61 f4       	brne	.+24     	; 0x2224 <delay_ms+0x1c>
    220c:	08 95       	ret
	...
    for ( y = 0 ; y < 90 ; y++){
      for ( z = 0 ; z < 6 ; z++){
        asm volatile ("nop");
    221a:	21 50       	subi	r18, 0x01	; 1

void delay_ms(uint16_t x)
{
  uint8_t y, z;
  for ( ; x > 0 ; x--){
    for ( y = 0 ; y < 90 ; y++){
    221c:	c1 f7       	brne	.-16     	; 0x220e <delay_ms+0x6>
}

void delay_ms(uint16_t x)
{
  uint8_t y, z;
  for ( ; x > 0 ; x--){
    221e:	01 97       	sbiw	r24, 0x01	; 1
    2220:	00 97       	sbiw	r24, 0x00	; 0
    2222:	11 f0       	breq	.+4      	; 0x2228 <delay_ms+0x20>
	// retieve current i2c status from i2c TWSR
	return( inb(TWSR) );
}

void delay_ms(uint16_t x)
{
    2224:	2a e5       	ldi	r18, 0x5A	; 90
    2226:	f3 cf       	rjmp	.-26     	; 0x220e <delay_ms+0x6>
    2228:	08 95       	ret

0000222a <i2cSendByte>:
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
}

void i2cSendByte(unsigned char data)
{
    222a:	cf 93       	push	r28
    222c:	c8 2f       	mov	r28, r24
	delay_ms(1);
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	0e 94 04 11 	call	0x2208	; 0x2208 <delay_ms>
	//printf("sending 0x%x\n", data);
	WRITE_sda();
    2236:	3c 9a       	sbi	0x07, 4	; 7
	// save data to the TWDR
	TWDR = data;
    2238:	c0 93 bb 00 	sts	0x00BB, r28
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    223c:	84 e8       	ldi	r24, 0x84	; 132
    223e:	80 93 bc 00 	sts	0x00BC, r24
}
    2242:	cf 91       	pop	r28
    2244:	08 95       	ret

00002246 <writeRegister>:
#define MMA8452_ADDRESS 0x1D
#define FALSE	0
#define TRUE	-1

void writeRegister(uint8_t address, uint8_t data)
{
    2246:	cf 93       	push	r28
    2248:	df 93       	push	r29
    224a:	d8 2f       	mov	r29, r24
    224c:	c6 2f       	mov	r28, r22
	i2cSendStart();
    224e:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <i2cSendStart>
	i2cWaitForComplete();
    2252:	0e 94 e5 10 	call	0x21ca	; 0x21ca <i2cWaitForComplete>

	i2cSendByte((MMA8452_ADDRESS<<1)); // Write 0xB4
    2256:	8a e3       	ldi	r24, 0x3A	; 58
    2258:	0e 94 15 11 	call	0x222a	; 0x222a <i2cSendByte>
	i2cWaitForComplete();
    225c:	0e 94 e5 10 	call	0x21ca	; 0x21ca <i2cWaitForComplete>

	i2cSendByte(address);	// Write register address
    2260:	8d 2f       	mov	r24, r29
    2262:	0e 94 15 11 	call	0x222a	; 0x222a <i2cSendByte>
	i2cWaitForComplete();
    2266:	0e 94 e5 10 	call	0x21ca	; 0x21ca <i2cWaitForComplete>

	i2cSendByte(data);
    226a:	8c 2f       	mov	r24, r28
    226c:	0e 94 15 11 	call	0x222a	; 0x222a <i2cSendByte>
	i2cWaitForComplete();
    2270:	0e 94 e5 10 	call	0x21ca	; 0x21ca <i2cWaitForComplete>
}

void i2cSendStop(void)
{
	// transmit stop condition
        TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    2274:	84 e9       	ldi	r24, 0x94	; 148
    2276:	80 93 bc 00 	sts	0x00BC, r24

	i2cSendStop();
}
    227a:	df 91       	pop	r29
    227c:	cf 91       	pop	r28
    227e:	08 95       	ret

00002280 <readRegisters>:

void readRegisters(uint8_t address, int i, uint8_t * dest)
{
    2280:	ef 92       	push	r14
    2282:	ff 92       	push	r15
    2284:	0f 93       	push	r16
    2286:	1f 93       	push	r17
    2288:	cf 93       	push	r28
    228a:	df 93       	push	r29
    228c:	c8 2f       	mov	r28, r24
    228e:	8b 01       	movw	r16, r22
    2290:	7a 01       	movw	r14, r20
	i2cSendStart();
    2292:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <i2cSendStart>
	i2cWaitForComplete();
    2296:	0e 94 e5 10 	call	0x21ca	; 0x21ca <i2cWaitForComplete>

	i2cSendByte((MMA8452_ADDRESS<<1)); // write 0xB4
    229a:	8a e3       	ldi	r24, 0x3A	; 58
    229c:	0e 94 15 11 	call	0x222a	; 0x222a <i2cSendByte>
	i2cWaitForComplete();
    22a0:	0e 94 e5 10 	call	0x21ca	; 0x21ca <i2cWaitForComplete>

	i2cSendByte(address);	// write register address
    22a4:	8c 2f       	mov	r24, r28
    22a6:	0e 94 15 11 	call	0x222a	; 0x222a <i2cSendByte>
	i2cWaitForComplete();
    22aa:	0e 94 e5 10 	call	0x21ca	; 0x21ca <i2cWaitForComplete>

	i2cSendStart();
    22ae:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <i2cSendStart>
	i2cSendByte((MMA8452_ADDRESS<<1)|0x01); // write 0xB5
    22b2:	8b e3       	ldi	r24, 0x3B	; 59
    22b4:	0e 94 15 11 	call	0x222a	; 0x222a <i2cSendByte>
	i2cWaitForComplete();
    22b8:	0e 94 e5 10 	call	0x21ca	; 0x21ca <i2cWaitForComplete>
	for (int j=0; j<i; j++)
    22bc:	10 16       	cp	r1, r16
    22be:	11 06       	cpc	r1, r17
    22c0:	84 f4       	brge	.+32     	; 0x22e2 <readRegisters+0x62>
    22c2:	e7 01       	movw	r28, r14
    22c4:	e0 0e       	add	r14, r16
    22c6:	f1 1e       	adc	r15, r17
}

unsigned char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
    22c8:	0b eb       	ldi	r16, 0xBB	; 187
    22ca:	10 e0       	ldi	r17, 0x00	; 0
	{
		i2cReceiveByte(TRUE);
    22cc:	8f ef       	ldi	r24, 0xFF	; 255
    22ce:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <i2cReceiveByte>
		i2cWaitForComplete();
    22d2:	0e 94 e5 10 	call	0x21ca	; 0x21ca <i2cWaitForComplete>
    22d6:	f8 01       	movw	r30, r16
    22d8:	80 81       	ld	r24, Z
		dest[j] = i2cGetReceivedByte(); // Get MSB result
    22da:	89 93       	st	Y+, r24
	i2cWaitForComplete();

	i2cSendStart();
	i2cSendByte((MMA8452_ADDRESS<<1)|0x01); // write 0xB5
	i2cWaitForComplete();
	for (int j=0; j<i; j++)
    22dc:	ce 15       	cp	r28, r14
    22de:	df 05       	cpc	r29, r15
    22e0:	a9 f7       	brne	.-22     	; 0x22cc <readRegisters+0x4c>
	{
		i2cReceiveByte(TRUE);
		i2cWaitForComplete();
		dest[j] = i2cGetReceivedByte(); // Get MSB result
	}
	i2cWaitForComplete();
    22e2:	0e 94 e5 10 	call	0x21ca	; 0x21ca <i2cWaitForComplete>
}

void i2cSendStop(void)
{
	// transmit stop condition
        TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    22e6:	ec eb       	ldi	r30, 0xBC	; 188
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	84 e9       	ldi	r24, 0x94	; 148
    22ec:	80 83       	st	Z, r24
	i2cSendStop();

	cbi(TWCR, TWEN); // Disable TWI
    22ee:	80 81       	ld	r24, Z
    22f0:	8b 7f       	andi	r24, 0xFB	; 251
    22f2:	80 83       	st	Z, r24
	sbi(TWCR, TWEN); // Enable TWI
    22f4:	80 81       	ld	r24, Z
    22f6:	84 60       	ori	r24, 0x04	; 4
    22f8:	80 83       	st	Z, r24
}
    22fa:	df 91       	pop	r29
    22fc:	cf 91       	pop	r28
    22fe:	1f 91       	pop	r17
    2300:	0f 91       	pop	r16
    2302:	ff 90       	pop	r15
    2304:	ef 90       	pop	r14
    2306:	08 95       	ret

00002308 <readRegister>:

unsigned char readRegister(uint8_t address)
{
    2308:	cf 93       	push	r28
    230a:	c8 2f       	mov	r28, r24
	unsigned char data;

	i2cSendStart();
    230c:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <i2cSendStart>
	i2cWaitForComplete();
    2310:	0e 94 e5 10 	call	0x21ca	; 0x21ca <i2cWaitForComplete>

	i2cSendByte((MMA8452_ADDRESS<<1)); // Write 0xB4
    2314:	8a e3       	ldi	r24, 0x3A	; 58
    2316:	0e 94 15 11 	call	0x222a	; 0x222a <i2cSendByte>
	i2cWaitForComplete();
    231a:	0e 94 e5 10 	call	0x21ca	; 0x21ca <i2cWaitForComplete>

	i2cSendByte(address);	// Write register address
    231e:	8c 2f       	mov	r24, r28
    2320:	0e 94 15 11 	call	0x222a	; 0x222a <i2cSendByte>
	i2cWaitForComplete();
    2324:	0e 94 e5 10 	call	0x21ca	; 0x21ca <i2cWaitForComplete>

	i2cSendStart();
    2328:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <i2cSendStart>

	i2cSendByte((MMA8452_ADDRESS<<1)|0x01); // Write 0xB5
    232c:	8b e3       	ldi	r24, 0x3B	; 59
    232e:	0e 94 15 11 	call	0x222a	; 0x222a <i2cSendByte>
	i2cWaitForComplete();
    2332:	0e 94 e5 10 	call	0x21ca	; 0x21ca <i2cWaitForComplete>
	i2cReceiveByte(TRUE);
    2336:	8f ef       	ldi	r24, 0xFF	; 255
    2338:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <i2cReceiveByte>
	i2cWaitForComplete();
    233c:	0e 94 e5 10 	call	0x21ca	; 0x21ca <i2cWaitForComplete>
}

unsigned char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
    2340:	c0 91 bb 00 	lds	r28, 0x00BB

	data = i2cGetReceivedByte();	// Get MSB result
	i2cWaitForComplete();
    2344:	0e 94 e5 10 	call	0x21ca	; 0x21ca <i2cWaitForComplete>
}

void i2cSendStop(void)
{
	// transmit stop condition
        TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    2348:	ec eb       	ldi	r30, 0xBC	; 188
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	84 e9       	ldi	r24, 0x94	; 148
    234e:	80 83       	st	Z, r24
	i2cSendStop();

	cbi(TWCR, TWEN);	// Disable TWI
    2350:	80 81       	ld	r24, Z
    2352:	8b 7f       	andi	r24, 0xFB	; 251
    2354:	80 83       	st	Z, r24
	sbi(TWCR, TWEN);	// Enable TWI
    2356:	80 81       	ld	r24, Z
    2358:	84 60       	ori	r24, 0x04	; 4
    235a:	80 83       	st	Z, r24

	return data;
}
    235c:	8c 2f       	mov	r24, r28
    235e:	cf 91       	pop	r28
    2360:	08 95       	ret

00002362 <MMA8452Active>:

void MMA8452Active(void)
{
	unsigned char c = readRegister(0x2A);
    2362:	8a e2       	ldi	r24, 0x2A	; 42
    2364:	0e 94 84 11 	call	0x2308	; 0x2308 <readRegister>
	writeRegister(0x2A, c | 0x01);
    2368:	68 2f       	mov	r22, r24
    236a:	61 60       	ori	r22, 0x01	; 1
    236c:	8a e2       	ldi	r24, 0x2A	; 42
    236e:	0e 94 23 11 	call	0x2246	; 0x2246 <writeRegister>
    2372:	08 95       	ret

00002374 <MMA8452Standby>:
}

void MMA8452Standby(void)
{
	unsigned char c = readRegister(0x2A);
    2374:	8a e2       	ldi	r24, 0x2A	; 42
    2376:	0e 94 84 11 	call	0x2308	; 0x2308 <readRegister>
	writeRegister(0x2A, c & ~(0x01));
    237a:	68 2f       	mov	r22, r24
    237c:	6e 7f       	andi	r22, 0xFE	; 254
    237e:	8a e2       	ldi	r24, 0x2A	; 42
    2380:	0e 94 23 11 	call	0x2246	; 0x2246 <writeRegister>
    2384:	08 95       	ret

00002386 <initMMA8452>:
}

void initMMA8452(uint8_t fsr, uint8_t dataRate)
{
    2386:	cf 93       	push	r28
    2388:	df 93       	push	r29
    238a:	c8 2f       	mov	r28, r24
    238c:	d6 2f       	mov	r29, r22
  MMA8452Standby();  // Must be in standby to change registers
    238e:	0e 94 ba 11 	call	0x2374	; 0x2374 <MMA8452Standby>

  // Set up the full scale range to 2, 4, or 8g.
  if ((fsr==2)||(fsr==4)||(fsr==8))
    2392:	c2 30       	cpi	r28, 0x02	; 2
    2394:	21 f0       	breq	.+8      	; 0x239e <initMMA8452+0x18>
    2396:	c4 30       	cpi	r28, 0x04	; 4
    2398:	11 f0       	breq	.+4      	; 0x239e <initMMA8452+0x18>
    239a:	c8 30       	cpi	r28, 0x08	; 8
    239c:	39 f4       	brne	.+14     	; 0x23ac <initMMA8452+0x26>
    writeRegister(0x0E, fsr >> 2);  
    239e:	6c 2f       	mov	r22, r28
    23a0:	66 95       	lsr	r22
    23a2:	66 95       	lsr	r22
    23a4:	8e e0       	ldi	r24, 0x0E	; 14
    23a6:	0e 94 23 11 	call	0x2246	; 0x2246 <writeRegister>
    23aa:	04 c0       	rjmp	.+8      	; 0x23b4 <initMMA8452+0x2e>
  else
    writeRegister(0x0E, 0);
    23ac:	60 e0       	ldi	r22, 0x00	; 0
    23ae:	8e e0       	ldi	r24, 0x0E	; 14
    23b0:	0e 94 23 11 	call	0x2246	; 0x2246 <writeRegister>

  // Setup the 3 data rate bits, from 0 to 7
  writeRegister(0x2A, readRegister(0x2A) & ~(0x38));
    23b4:	8a e2       	ldi	r24, 0x2A	; 42
    23b6:	0e 94 84 11 	call	0x2308	; 0x2308 <readRegister>
    23ba:	68 2f       	mov	r22, r24
    23bc:	67 7c       	andi	r22, 0xC7	; 199
    23be:	8a e2       	ldi	r24, 0x2A	; 42
    23c0:	0e 94 23 11 	call	0x2246	; 0x2246 <writeRegister>
  if (dataRate <= 7)
    23c4:	d8 30       	cpi	r29, 0x08	; 8
    23c6:	58 f4       	brcc	.+22     	; 0x23de <initMMA8452+0x58>
    writeRegister(0x2A, readRegister(0x2A) | (dataRate << 3));  
    23c8:	8a e2       	ldi	r24, 0x2A	; 42
    23ca:	0e 94 84 11 	call	0x2308	; 0x2308 <readRegister>
    23ce:	dd 0f       	add	r29, r29
    23d0:	dd 0f       	add	r29, r29
    23d2:	dd 0f       	add	r29, r29
    23d4:	6d 2f       	mov	r22, r29
    23d6:	68 2b       	or	r22, r24
    23d8:	8a e2       	ldi	r24, 0x2A	; 42
    23da:	0e 94 23 11 	call	0x2246	; 0x2246 <writeRegister>
  // 1. Enable P/L
  // 2. Set the back/front angle trigger points (z-lock)
  // 3. Set the threshold/hysteresis angle
  // 4. Set the debouce rate
  // For more info check out this app note: http://cache.freescale.com/files/sensors/doc/app_note/AN4068.pdf
  writeRegister(0x11, 0x40);  // 1. Enable P/L
    23de:	60 e4       	ldi	r22, 0x40	; 64
    23e0:	81 e1       	ldi	r24, 0x11	; 17
    23e2:	0e 94 23 11 	call	0x2246	; 0x2246 <writeRegister>
  writeRegister(0x13, 0x44);  // 2. 29deg z-lock (don't think this register is actually writable)
    23e6:	64 e4       	ldi	r22, 0x44	; 68
    23e8:	83 e1       	ldi	r24, 0x13	; 19
    23ea:	0e 94 23 11 	call	0x2246	; 0x2246 <writeRegister>
  writeRegister(0x14, 0x84);  // 3. 45deg thresh, 14deg hyst (don't think this register is writable either)
    23ee:	64 e8       	ldi	r22, 0x84	; 132
    23f0:	84 e1       	ldi	r24, 0x14	; 20
    23f2:	0e 94 23 11 	call	0x2246	; 0x2246 <writeRegister>
  writeRegister(0x12, 0x50);  // 4. debounce counter at 100ms (at 800 hz)
    23f6:	60 e5       	ldi	r22, 0x50	; 80
    23f8:	82 e1       	ldi	r24, 0x12	; 18
    23fa:	0e 94 23 11 	call	0x2246	; 0x2246 <writeRegister>
   2. Set the threshold - minimum required acceleration to cause a tap.
   3. Set the time limit - the maximum time that a tap can be above the threshold
   4. Set the pulse latency - the minimum required time between one pulse and the next
   5. Set the second pulse window - maximum allowed time between end of latency and start of second pulse
   for more info check out this app note: http://cache.freescale.com/files/sensors/doc/app_note/AN4072.pdf */
  writeRegister(0x21, 0x7F);  // 1. enable single/double taps on all axes
    23fe:	6f e7       	ldi	r22, 0x7F	; 127
    2400:	81 e2       	ldi	r24, 0x21	; 33
    2402:	0e 94 23 11 	call	0x2246	; 0x2246 <writeRegister>
  // writeRegister(0x21, 0x55);  // 1. single taps only on all axes
  // writeRegister(0x21, 0x6A);  // 1. double taps only on all axes
  writeRegister(0x23, 0x20);  // 2. x thresh at 2g, multiply the value by 0.0625g/LSB to get the threshold
    2406:	60 e2       	ldi	r22, 0x20	; 32
    2408:	83 e2       	ldi	r24, 0x23	; 35
    240a:	0e 94 23 11 	call	0x2246	; 0x2246 <writeRegister>
  writeRegister(0x24, 0x20);  // 2. y thresh at 2g, multiply the value by 0.0625g/LSB to get the threshold
    240e:	60 e2       	ldi	r22, 0x20	; 32
    2410:	84 e2       	ldi	r24, 0x24	; 36
    2412:	0e 94 23 11 	call	0x2246	; 0x2246 <writeRegister>
  writeRegister(0x25, 0x08);  // 2. z thresh at .5g, multiply the value by 0.0625g/LSB to get the threshold
    2416:	68 e0       	ldi	r22, 0x08	; 8
    2418:	85 e2       	ldi	r24, 0x25	; 37
    241a:	0e 94 23 11 	call	0x2246	; 0x2246 <writeRegister>
  writeRegister(0x26, 0x30);  // 3. 30ms time limit at 800Hz odr, this is very dependent on data rate, see the app note
    241e:	60 e3       	ldi	r22, 0x30	; 48
    2420:	86 e2       	ldi	r24, 0x26	; 38
    2422:	0e 94 23 11 	call	0x2246	; 0x2246 <writeRegister>
  writeRegister(0x27, 0xA0);  // 4. 200ms (at 800Hz odr) between taps min, this also depends on the data rate
    2426:	60 ea       	ldi	r22, 0xA0	; 160
    2428:	87 e2       	ldi	r24, 0x27	; 39
    242a:	0e 94 23 11 	call	0x2246	; 0x2246 <writeRegister>
  writeRegister(0x28, 0xFF);  // 5. 318ms (max value) between taps max
    242e:	6f ef       	ldi	r22, 0xFF	; 255
    2430:	88 e2       	ldi	r24, 0x28	; 40
    2432:	0e 94 23 11 	call	0x2246	; 0x2246 <writeRegister>

  // Set up interrupt 1 and 2
  writeRegister(0x2C, 0x02);  // Active high, push-pull interrupts
    2436:	62 e0       	ldi	r22, 0x02	; 2
    2438:	8c e2       	ldi	r24, 0x2C	; 44
    243a:	0e 94 23 11 	call	0x2246	; 0x2246 <writeRegister>
  writeRegister(0x2D, 0x19);  // DRDY, P/L and tap ints enabled
    243e:	69 e1       	ldi	r22, 0x19	; 25
    2440:	8d e2       	ldi	r24, 0x2D	; 45
    2442:	0e 94 23 11 	call	0x2246	; 0x2246 <writeRegister>
  writeRegister(0x2E, 0x01);  // DRDY on INT1, P/L and taps on INT2
    2446:	61 e0       	ldi	r22, 0x01	; 1
    2448:	8e e2       	ldi	r24, 0x2E	; 46
    244a:	0e 94 23 11 	call	0x2246	; 0x2246 <writeRegister>

  MMA8452Active();  // Set to active to start reading
    244e:	0e 94 b1 11 	call	0x2362	; 0x2362 <MMA8452Active>
}
    2452:	df 91       	pop	r29
    2454:	cf 91       	pop	r28
    2456:	08 95       	ret

00002458 <readAccelData>:

void readAccelData(int * destination)
{
    2458:	0f 93       	push	r16
    245a:	1f 93       	push	r17
    245c:	cf 93       	push	r28
    245e:	df 93       	push	r29
    2460:	00 d0       	rcall	.+0      	; 0x2462 <readAccelData+0xa>
    2462:	00 d0       	rcall	.+0      	; 0x2464 <readAccelData+0xc>
    2464:	00 d0       	rcall	.+0      	; 0x2466 <readAccelData+0xe>
    2466:	cd b7       	in	r28, 0x3d	; 61
    2468:	de b7       	in	r29, 0x3e	; 62
    246a:	8c 01       	movw	r16, r24
	uint8_t rawData[6];  // x/y/z accel register data stored here

	readRegisters(0x01, 6, &rawData[0]);  // Read the six raw data registers into data array
    246c:	ae 01       	movw	r20, r28
    246e:	4f 5f       	subi	r20, 0xFF	; 255
    2470:	5f 4f       	sbci	r21, 0xFF	; 255
    2472:	66 e0       	ldi	r22, 0x06	; 6
    2474:	70 e0       	ldi	r23, 0x00	; 0
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	0e 94 40 11 	call	0x2280	; 0x2280 <readRegisters>
    247c:	fe 01       	movw	r30, r28
    247e:	32 96       	adiw	r30, 0x02	; 2

	// Loop to calculate 12-bit ADC and g value for each axis
	for (int i=0; i<6; i+=2)
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	30 e0       	ldi	r19, 0x00	; 0
	{
		destination[i/2] = ((rawData[i] << 8) | rawData[i+1]) >> 4;  // Turn the MSB and LSB into a 12-bit value
    2484:	a9 01       	movw	r20, r18
    2486:	33 23       	and	r19, r19
    2488:	14 f4       	brge	.+4      	; 0x248e <readAccelData+0x36>
    248a:	4f 5f       	subi	r20, 0xFF	; 255
    248c:	5f 4f       	sbci	r21, 0xFF	; 255
    248e:	4e 7f       	andi	r20, 0xFE	; 254
    2490:	b8 01       	movw	r22, r16
    2492:	64 0f       	add	r22, r20
    2494:	75 1f       	adc	r23, r21
    2496:	cf 01       	movw	r24, r30
    2498:	01 97       	sbiw	r24, 0x01	; 1
    249a:	dc 01       	movw	r26, r24
    249c:	8c 91       	ld	r24, X
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	98 2f       	mov	r25, r24
    24a2:	88 27       	eor	r24, r24
    24a4:	40 81       	ld	r20, Z
    24a6:	84 2b       	or	r24, r20
    24a8:	95 95       	asr	r25
    24aa:	87 95       	ror	r24
    24ac:	95 95       	asr	r25
    24ae:	87 95       	ror	r24
    24b0:	95 95       	asr	r25
    24b2:	87 95       	ror	r24
    24b4:	95 95       	asr	r25
    24b6:	87 95       	ror	r24
		if (rawData[i] > 0x7F)
		{
			// If the number is negative, we have to make it so manually (no 12-bit data type)
			destination[i/2] = ~destination[i/2] + 1;
			destination[i/2] *= -1;  // Transform into negative 2's complement #
    24b8:	db 01       	movw	r26, r22
    24ba:	8d 93       	st	X+, r24
    24bc:	9c 93       	st	X, r25
	uint8_t rawData[6];  // x/y/z accel register data stored here

	readRegisters(0x01, 6, &rawData[0]);  // Read the six raw data registers into data array

	// Loop to calculate 12-bit ADC and g value for each axis
	for (int i=0; i<6; i+=2)
    24be:	2e 5f       	subi	r18, 0xFE	; 254
    24c0:	3f 4f       	sbci	r19, 0xFF	; 255
    24c2:	32 96       	adiw	r30, 0x02	; 2
    24c4:	26 30       	cpi	r18, 0x06	; 6
    24c6:	31 05       	cpc	r19, r1
    24c8:	e9 f6       	brne	.-70     	; 0x2484 <readAccelData+0x2c>
			// If the number is negative, we have to make it so manually (no 12-bit data type)
			destination[i/2] = ~destination[i/2] + 1;
			destination[i/2] *= -1;  // Transform into negative 2's complement #
		}
	}
    24ca:	26 96       	adiw	r28, 0x06	; 6
    24cc:	0f b6       	in	r0, 0x3f	; 63
    24ce:	f8 94       	cli
    24d0:	de bf       	out	0x3e, r29	; 62
    24d2:	0f be       	out	0x3f, r0	; 63
    24d4:	cd bf       	out	0x3d, r28	; 61
    24d6:	df 91       	pop	r29
    24d8:	cf 91       	pop	r28
    24da:	1f 91       	pop	r17
    24dc:	0f 91       	pop	r16
    24de:	08 95       	ret

000024e0 <printTime>:
	{
		LCDsendChar(' ');
	}
}
void printTime(uint8_t x, uint8_t y)
{
    24e0:	ef 92       	push	r14
    24e2:	ff 92       	push	r15
    24e4:	0f 93       	push	r16
    24e6:	1f 93       	push	r17
    24e8:	cf 93       	push	r28
    24ea:	df 93       	push	r29
    24ec:	cd b7       	in	r28, 0x3d	; 61
    24ee:	de b7       	in	r29, 0x3e	; 62
    24f0:	60 97       	sbiw	r28, 0x10	; 16
    24f2:	0f b6       	in	r0, 0x3f	; 63
    24f4:	f8 94       	cli
    24f6:	de bf       	out	0x3e, r29	; 62
    24f8:	0f be       	out	0x3f, r0	; 63
    24fa:	cd bf       	out	0x3d, r28	; 61
	LCDGotoXY(x, y);
    24fc:	0e 94 56 1c 	call	0x38ac	; 0x38ac <LCDGotoXY>
	char buf[PRINT_INT_BUFSIZE];
	
	buf[10] = system_Day / 10 +48 ;
    2500:	90 91 c4 02 	lds	r25, 0x02C4
    2504:	8d ec       	ldi	r24, 0xCD	; 205
    2506:	98 9f       	mul	r25, r24
    2508:	91 2d       	mov	r25, r1
    250a:	11 24       	eor	r1, r1
    250c:	96 95       	lsr	r25
    250e:	96 95       	lsr	r25
    2510:	96 95       	lsr	r25
    2512:	90 5d       	subi	r25, 0xD0	; 208
    2514:	9b 87       	std	Y+11, r25	; 0x0b
	buf[9] =  system_Day % 10 +48 ;
    2516:	90 91 c4 02 	lds	r25, 0x02C4
    251a:	98 9f       	mul	r25, r24
    251c:	21 2d       	mov	r18, r1
    251e:	11 24       	eor	r1, r1
    2520:	26 95       	lsr	r18
    2522:	26 95       	lsr	r18
    2524:	26 95       	lsr	r18
    2526:	22 0f       	add	r18, r18
    2528:	32 2f       	mov	r19, r18
    252a:	33 0f       	add	r19, r19
    252c:	33 0f       	add	r19, r19
    252e:	23 0f       	add	r18, r19
    2530:	92 1b       	sub	r25, r18
    2532:	90 5d       	subi	r25, 0xD0	; 208
    2534:	9a 87       	std	Y+10, r25	; 0x0a
	buf[8] =  ':' ;
    2536:	9a e3       	ldi	r25, 0x3A	; 58
    2538:	99 87       	std	Y+9, r25	; 0x09
	buf[7] = system_Hour / 10 +48 ;
    253a:	20 91 c5 02 	lds	r18, 0x02C5
    253e:	28 9f       	mul	r18, r24
    2540:	21 2d       	mov	r18, r1
    2542:	11 24       	eor	r1, r1
    2544:	26 95       	lsr	r18
    2546:	26 95       	lsr	r18
    2548:	26 95       	lsr	r18
    254a:	20 5d       	subi	r18, 0xD0	; 208
    254c:	28 87       	std	Y+8, r18	; 0x08
	buf[6] = system_Hour % 10 +48 ;
    254e:	20 91 c5 02 	lds	r18, 0x02C5
    2552:	28 9f       	mul	r18, r24
    2554:	31 2d       	mov	r19, r1
    2556:	11 24       	eor	r1, r1
    2558:	36 95       	lsr	r19
    255a:	36 95       	lsr	r19
    255c:	36 95       	lsr	r19
    255e:	33 0f       	add	r19, r19
    2560:	43 2f       	mov	r20, r19
    2562:	44 0f       	add	r20, r20
    2564:	44 0f       	add	r20, r20
    2566:	34 0f       	add	r19, r20
    2568:	23 1b       	sub	r18, r19
    256a:	20 5d       	subi	r18, 0xD0	; 208
    256c:	2f 83       	std	Y+7, r18	; 0x07
	buf[5] =  ':' ;
    256e:	9e 83       	std	Y+6, r25	; 0x06
	buf[4] = system_Minute / 10 +48 ;
    2570:	20 91 c6 02 	lds	r18, 0x02C6
    2574:	28 9f       	mul	r18, r24
    2576:	21 2d       	mov	r18, r1
    2578:	11 24       	eor	r1, r1
    257a:	26 95       	lsr	r18
    257c:	26 95       	lsr	r18
    257e:	26 95       	lsr	r18
    2580:	20 5d       	subi	r18, 0xD0	; 208
    2582:	2d 83       	std	Y+5, r18	; 0x05
	buf[3] =  system_Minute % 10 +48 ;
    2584:	20 91 c6 02 	lds	r18, 0x02C6
    2588:	28 9f       	mul	r18, r24
    258a:	31 2d       	mov	r19, r1
    258c:	11 24       	eor	r1, r1
    258e:	36 95       	lsr	r19
    2590:	36 95       	lsr	r19
    2592:	36 95       	lsr	r19
    2594:	33 0f       	add	r19, r19
    2596:	43 2f       	mov	r20, r19
    2598:	44 0f       	add	r20, r20
    259a:	44 0f       	add	r20, r20
    259c:	34 0f       	add	r19, r20
    259e:	23 1b       	sub	r18, r19
    25a0:	20 5d       	subi	r18, 0xD0	; 208
    25a2:	2c 83       	std	Y+4, r18	; 0x04
	buf[2] =  ':' ;
    25a4:	9b 83       	std	Y+3, r25	; 0x03
	buf[1] = system_Second / 10 +48 ;
    25a6:	90 91 c7 02 	lds	r25, 0x02C7
    25aa:	98 9f       	mul	r25, r24
    25ac:	91 2d       	mov	r25, r1
    25ae:	11 24       	eor	r1, r1
    25b0:	96 95       	lsr	r25
    25b2:	96 95       	lsr	r25
    25b4:	96 95       	lsr	r25
    25b6:	90 5d       	subi	r25, 0xD0	; 208
    25b8:	9a 83       	std	Y+2, r25	; 0x02
	buf[0] =  system_Second % 10 +48 ;
    25ba:	90 91 c7 02 	lds	r25, 0x02C7
    25be:	98 9f       	mul	r25, r24
    25c0:	81 2d       	mov	r24, r1
    25c2:	11 24       	eor	r1, r1
    25c4:	86 95       	lsr	r24
    25c6:	86 95       	lsr	r24
    25c8:	86 95       	lsr	r24
    25ca:	88 0f       	add	r24, r24
    25cc:	28 2f       	mov	r18, r24
    25ce:	22 0f       	add	r18, r18
    25d0:	22 0f       	add	r18, r18
    25d2:	82 0f       	add	r24, r18
    25d4:	98 1b       	sub	r25, r24
    25d6:	90 5d       	subi	r25, 0xD0	; 208
    25d8:	99 83       	std	Y+1, r25	; 0x01
    25da:	8e 01       	movw	r16, r28
    25dc:	04 5f       	subi	r16, 0xF4	; 244
    25de:	1f 4f       	sbci	r17, 0xFF	; 255
    25e0:	ce 01       	movw	r24, r28
    25e2:	01 96       	adiw	r24, 0x01	; 1
    25e4:	7c 01       	movw	r14, r24
	
	for(int k = 10; k >= 0; k--)
	{
		LCDsendChar(buf[k]);
    25e6:	f8 01       	movw	r30, r16
    25e8:	82 91       	ld	r24, -Z
    25ea:	8f 01       	movw	r16, r30
    25ec:	0e 94 20 1c 	call	0x3840	; 0x3840 <LCDsendChar>
	buf[3] =  system_Minute % 10 +48 ;
	buf[2] =  ':' ;
	buf[1] = system_Second / 10 +48 ;
	buf[0] =  system_Second % 10 +48 ;
	
	for(int k = 10; k >= 0; k--)
    25f0:	0e 15       	cp	r16, r14
    25f2:	1f 05       	cpc	r17, r15
    25f4:	c1 f7       	brne	.-16     	; 0x25e6 <printTime+0x106>
	{
		LCDsendChar(buf[k]);
	}
}
    25f6:	60 96       	adiw	r28, 0x10	; 16
    25f8:	0f b6       	in	r0, 0x3f	; 63
    25fa:	f8 94       	cli
    25fc:	de bf       	out	0x3e, r29	; 62
    25fe:	0f be       	out	0x3f, r0	; 63
    2600:	cd bf       	out	0x3d, r28	; 61
    2602:	df 91       	pop	r29
    2604:	cf 91       	pop	r28
    2606:	1f 91       	pop	r17
    2608:	0f 91       	pop	r16
    260a:	ff 90       	pop	r15
    260c:	ef 90       	pop	r14
    260e:	08 95       	ret

00002610 <printAccelMil>:
void printAccelMil(uint8_t x, uint8_t y, int accel)
{
    2610:	ef 92       	push	r14
    2612:	ff 92       	push	r15
    2614:	0f 93       	push	r16
    2616:	1f 93       	push	r17
    2618:	cf 93       	push	r28
    261a:	df 93       	push	r29
    261c:	cd b7       	in	r28, 0x3d	; 61
    261e:	de b7       	in	r29, 0x3e	; 62
    2620:	60 97       	sbiw	r28, 0x10	; 16
    2622:	0f b6       	in	r0, 0x3f	; 63
    2624:	f8 94       	cli
    2626:	de bf       	out	0x3e, r29	; 62
    2628:	0f be       	out	0x3f, r0	; 63
    262a:	cd bf       	out	0x3d, r28	; 61
    262c:	8a 01       	movw	r16, r20
	//accel = asin(accel)*1018.59163579;
	LCDGotoXY(x, y);
    262e:	0e 94 56 1c 	call	0x38ac	; 0x38ac <LCDGotoXY>
	char buf[PRINT_INT_BUFSIZE];
	int8_t sign = 1;
	if (accel < 0) { // look for the sign
    2632:	11 23       	and	r17, r17
    2634:	ac f5       	brge	.+106    	; 0x26a0 <printAccelMil+0x90>
		sign = -1;
		accel= -accel;
    2636:	11 95       	neg	r17
    2638:	01 95       	neg	r16
    263a:	11 09       	sbc	r17, r1
	}
	
	if (sign < 0)
	{	// don't forget to add the sign
		buf[4] = '-';
    263c:	8d e2       	ldi	r24, 0x2D	; 45
    263e:	8d 83       	std	Y+5, r24	; 0x05
	}
	else
	{
		buf[4] = ' ';
	}
	buf[3] = accel / 1000 +48 ;
    2640:	c8 01       	movw	r24, r16
    2642:	68 ee       	ldi	r22, 0xE8	; 232
    2644:	73 e0       	ldi	r23, 0x03	; 3
    2646:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <__divmodhi4>
    264a:	60 5d       	subi	r22, 0xD0	; 208
    264c:	6c 83       	std	Y+4, r22	; 0x04
	buf[2] = (accel / 100) %10 +48 ;
    264e:	c8 01       	movw	r24, r16
    2650:	64 e6       	ldi	r22, 0x64	; 100
    2652:	70 e0       	ldi	r23, 0x00	; 0
    2654:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <__divmodhi4>
    2658:	cb 01       	movw	r24, r22
    265a:	2a e0       	ldi	r18, 0x0A	; 10
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	b9 01       	movw	r22, r18
    2660:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <__divmodhi4>
    2664:	80 5d       	subi	r24, 0xD0	; 208
    2666:	8b 83       	std	Y+3, r24	; 0x03
	buf[1] = (accel / 10)%10 +48 ;
    2668:	c8 01       	movw	r24, r16
    266a:	b9 01       	movw	r22, r18
    266c:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <__divmodhi4>
    2670:	48 2f       	mov	r20, r24
    2672:	cb 01       	movw	r24, r22
    2674:	b9 01       	movw	r22, r18
    2676:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <__divmodhi4>
    267a:	80 5d       	subi	r24, 0xD0	; 208
    267c:	8a 83       	std	Y+2, r24	; 0x02
	buf[0] =  accel % 10 +48 ;
    267e:	40 5d       	subi	r20, 0xD0	; 208
    2680:	49 83       	std	Y+1, r20	; 0x01
    2682:	8e 01       	movw	r16, r28
    2684:	0a 5f       	subi	r16, 0xFA	; 250
    2686:	1f 4f       	sbci	r17, 0xFF	; 255
    2688:	ce 01       	movw	r24, r28
    268a:	01 96       	adiw	r24, 0x01	; 1
    268c:	7c 01       	movw	r14, r24
	
	for(int k = 4; k >= 0; k--)
	{
		LCDsendChar(buf[k]);
    268e:	f8 01       	movw	r30, r16
    2690:	82 91       	ld	r24, -Z
    2692:	8f 01       	movw	r16, r30
    2694:	0e 94 20 1c 	call	0x3840	; 0x3840 <LCDsendChar>
	buf[3] = accel / 1000 +48 ;
	buf[2] = (accel / 100) %10 +48 ;
	buf[1] = (accel / 10)%10 +48 ;
	buf[0] =  accel % 10 +48 ;
	
	for(int k = 4; k >= 0; k--)
    2698:	0e 15       	cp	r16, r14
    269a:	1f 05       	cpc	r17, r15
    269c:	c1 f7       	brne	.-16     	; 0x268e <printAccelMil+0x7e>
    269e:	03 c0       	rjmp	.+6      	; 0x26a6 <printAccelMil+0x96>
	{	// don't forget to add the sign
		buf[4] = '-';
	}
	else
	{
		buf[4] = ' ';
    26a0:	80 e2       	ldi	r24, 0x20	; 32
    26a2:	8d 83       	std	Y+5, r24	; 0x05
    26a4:	cd cf       	rjmp	.-102    	; 0x2640 <printAccelMil+0x30>
	
	for(int k = 4; k >= 0; k--)
	{
		LCDsendChar(buf[k]);
	}
}
    26a6:	60 96       	adiw	r28, 0x10	; 16
    26a8:	0f b6       	in	r0, 0x3f	; 63
    26aa:	f8 94       	cli
    26ac:	de bf       	out	0x3e, r29	; 62
    26ae:	0f be       	out	0x3f, r0	; 63
    26b0:	cd bf       	out	0x3d, r28	; 61
    26b2:	df 91       	pop	r29
    26b4:	cf 91       	pop	r28
    26b6:	1f 91       	pop	r17
    26b8:	0f 91       	pop	r16
    26ba:	ff 90       	pop	r15
    26bc:	ef 90       	pop	r14
    26be:	08 95       	ret

000026c0 <printAccelDeg>:

void printAccelDeg(uint8_t x, uint8_t y, int accel)
{
    26c0:	0f 93       	push	r16
    26c2:	1f 93       	push	r17
    26c4:	cf 93       	push	r28
    26c6:	df 93       	push	r29
    26c8:	cd b7       	in	r28, 0x3d	; 61
    26ca:	de b7       	in	r29, 0x3e	; 62
    26cc:	60 97       	sbiw	r28, 0x10	; 16
    26ce:	0f b6       	in	r0, 0x3f	; 63
    26d0:	f8 94       	cli
    26d2:	de bf       	out	0x3e, r29	; 62
    26d4:	0f be       	out	0x3f, r0	; 63
    26d6:	cd bf       	out	0x3d, r28	; 61
    26d8:	8a 01       	movw	r16, r20
	//accel = asin(accel)*57.2957795;
	LCDGotoXY(x, y);
    26da:	0e 94 56 1c 	call	0x38ac	; 0x38ac <LCDGotoXY>
	char buf[PRINT_INT_BUFSIZE];
	int8_t sign = 1;
	if (accel < 0) { // look for the sign
    26de:	11 23       	and	r17, r17
    26e0:	f4 f4       	brge	.+60     	; 0x271e <printAccelDeg+0x5e>
		sign = -1;
		accel= -accel;
    26e2:	11 95       	neg	r17
    26e4:	01 95       	neg	r16
    26e6:	11 09       	sbc	r17, r1
	}
	
	if (sign < 0)
	{	// don't forget to add the sign
		buf[2] = '-';
    26e8:	8d e2       	ldi	r24, 0x2D	; 45
    26ea:	8b 83       	std	Y+3, r24	; 0x03
	else
	{
		buf[2] = ' ';
	}

	buf[1] = (accel / 10)%10 +48 ;
    26ec:	2a e0       	ldi	r18, 0x0A	; 10
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	c8 01       	movw	r24, r16
    26f2:	b9 01       	movw	r22, r18
    26f4:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <__divmodhi4>
    26f8:	48 2f       	mov	r20, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	b9 01       	movw	r22, r18
    26fe:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <__divmodhi4>
    2702:	80 5d       	subi	r24, 0xD0	; 208
    2704:	8a 83       	std	Y+2, r24	; 0x02
	buf[0] =  accel % 10 +48 ;
    2706:	40 5d       	subi	r20, 0xD0	; 208
    2708:	49 83       	std	Y+1, r20	; 0x01
	
	for(int k = 2; k >= 0; k--)
	{
		LCDsendChar(buf[k]);
    270a:	8b 81       	ldd	r24, Y+3	; 0x03
    270c:	0e 94 20 1c 	call	0x3840	; 0x3840 <LCDsendChar>
    2710:	8a 81       	ldd	r24, Y+2	; 0x02
    2712:	0e 94 20 1c 	call	0x3840	; 0x3840 <LCDsendChar>
    2716:	89 81       	ldd	r24, Y+1	; 0x01
    2718:	0e 94 20 1c 	call	0x3840	; 0x3840 <LCDsendChar>
    271c:	03 c0       	rjmp	.+6      	; 0x2724 <printAccelDeg+0x64>
	{	// don't forget to add the sign
		buf[2] = '-';
	}
	else
	{
		buf[2] = ' ';
    271e:	80 e2       	ldi	r24, 0x20	; 32
    2720:	8b 83       	std	Y+3, r24	; 0x03
    2722:	e4 cf       	rjmp	.-56     	; 0x26ec <printAccelDeg+0x2c>
	
	for(int k = 2; k >= 0; k--)
	{
		LCDsendChar(buf[k]);
	}
}
    2724:	60 96       	adiw	r28, 0x10	; 16
    2726:	0f b6       	in	r0, 0x3f	; 63
    2728:	f8 94       	cli
    272a:	de bf       	out	0x3e, r29	; 62
    272c:	0f be       	out	0x3f, r0	; 63
    272e:	cd bf       	out	0x3d, r28	; 61
    2730:	df 91       	pop	r29
    2732:	cf 91       	pop	r28
    2734:	1f 91       	pop	r17
    2736:	0f 91       	pop	r16
    2738:	08 95       	ret

0000273a <printInt>:
void printInt(uint8_t x, uint8_t y, int32_t i)
{
    273a:	7f 92       	push	r7
    273c:	8f 92       	push	r8
    273e:	9f 92       	push	r9
    2740:	af 92       	push	r10
    2742:	bf 92       	push	r11
    2744:	cf 92       	push	r12
    2746:	df 92       	push	r13
    2748:	ef 92       	push	r14
    274a:	ff 92       	push	r15
    274c:	0f 93       	push	r16
    274e:	1f 93       	push	r17
    2750:	cf 93       	push	r28
    2752:	df 93       	push	r29
    2754:	69 01       	movw	r12, r18
    2756:	7a 01       	movw	r14, r20
	LCDGotoXY(x, y);
    2758:	0e 94 56 1c 	call	0x38ac	; 0x38ac <LCDGotoXY>
	char buf[PRINT_INT_BUFSIZE];
	int8_t sign = 1;
	//int8_t len = 0;
	if (i < 0) { // look for the sign
    275c:	ff 20       	and	r15, r15
    275e:	0c f0       	brlt	.+2      	; 0x2762 <printInt+0x28>
    2760:	72 c0       	rjmp	.+228    	; 0x2846 <printInt+0x10c>
		sign = -1;
		i = -i;
    2762:	f0 94       	com	r15
    2764:	e0 94       	com	r14
    2766:	d0 94       	com	r13
    2768:	c0 94       	com	r12
    276a:	c1 1c       	adc	r12, r1
    276c:	d1 1c       	adc	r13, r1
    276e:	e1 1c       	adc	r14, r1
    2770:	f1 1c       	adc	r15, r1
	}
	
	buf[3] = i / 1000 + 48;
	buf[2] = (i / 100)%10 +48 ;
	buf[1] = (i / 10)%10 +48 ;
	buf[0] =  i % 10 +48 ;
    2772:	c7 01       	movw	r24, r14
    2774:	b6 01       	movw	r22, r12
    2776:	2a e0       	ldi	r18, 0x0A	; 10
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	40 e0       	ldi	r20, 0x00	; 0
    277c:	50 e0       	ldi	r21, 0x00	; 0
    277e:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <__divmodsi4>
    2782:	d0 e3       	ldi	r29, 0x30	; 48
    2784:	d6 0f       	add	r29, r22
	
	if (sign < 0) 
	{	// don't forget to add the sign
		buf[4] = '-';
    2786:	cd e2       	ldi	r28, 0x2D	; 45
	else
	{
		buf[4] = ' ';
	}
	
	if(i < 1000)
    2788:	88 ee       	ldi	r24, 0xE8	; 232
    278a:	c8 16       	cp	r12, r24
    278c:	83 e0       	ldi	r24, 0x03	; 3
    278e:	d8 06       	cpc	r13, r24
    2790:	e1 04       	cpc	r14, r1
    2792:	f1 04       	cpc	r15, r1
    2794:	5c f0       	brlt	.+22     	; 0x27ac <printInt+0x72>
	if (i < 0) { // look for the sign
		sign = -1;
		i = -i;
	}
	
	buf[3] = i / 1000 + 48;
    2796:	c7 01       	movw	r24, r14
    2798:	b6 01       	movw	r22, r12
    279a:	28 ee       	ldi	r18, 0xE8	; 232
    279c:	33 e0       	ldi	r19, 0x03	; 3
    279e:	40 e0       	ldi	r20, 0x00	; 0
    27a0:	50 e0       	ldi	r21, 0x00	; 0
    27a2:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <__divmodsi4>
    27a6:	10 e3       	ldi	r17, 0x30	; 48
    27a8:	12 0f       	add	r17, r18
    27aa:	01 c0       	rjmp	.+2      	; 0x27ae <printInt+0x74>
		buf[4] = ' ';
	}
	
	if(i < 1000)
	{
		buf[3] = ' ';
    27ac:	10 e2       	ldi	r17, 0x20	; 32
	}
	if(i < 100)
    27ae:	84 e6       	ldi	r24, 0x64	; 100
    27b0:	c8 16       	cp	r12, r24
    27b2:	d1 04       	cpc	r13, r1
    27b4:	e1 04       	cpc	r14, r1
    27b6:	f1 04       	cpc	r15, r1
    27b8:	b4 f0       	brlt	.+44     	; 0x27e6 <printInt+0xac>
		sign = -1;
		i = -i;
	}
	
	buf[3] = i / 1000 + 48;
	buf[2] = (i / 100)%10 +48 ;
    27ba:	c7 01       	movw	r24, r14
    27bc:	b6 01       	movw	r22, r12
    27be:	24 e6       	ldi	r18, 0x64	; 100
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	40 e0       	ldi	r20, 0x00	; 0
    27c4:	50 e0       	ldi	r21, 0x00	; 0
    27c6:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <__divmodsi4>
    27ca:	ca 01       	movw	r24, r20
    27cc:	b9 01       	movw	r22, r18
    27ce:	2a e0       	ldi	r18, 0x0A	; 10
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	40 e0       	ldi	r20, 0x00	; 0
    27d4:	50 e0       	ldi	r21, 0x00	; 0
    27d6:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <__divmodsi4>
    27da:	0f 2e       	mov	r0, r31
    27dc:	f0 e3       	ldi	r31, 0x30	; 48
    27de:	7f 2e       	mov	r7, r31
    27e0:	f0 2d       	mov	r31, r0
    27e2:	76 0e       	add	r7, r22
    27e4:	03 c0       	rjmp	.+6      	; 0x27ec <printInt+0xb2>
	{
		buf[3] = ' ';
	}
	if(i < 100)
	{
		buf[2] = ' ';
    27e6:	68 94       	set
    27e8:	77 24       	eor	r7, r7
    27ea:	75 f8       	bld	r7, 5
	}
	if(i < 10)
    27ec:	8a e0       	ldi	r24, 0x0A	; 10
    27ee:	c8 16       	cp	r12, r24
    27f0:	d1 04       	cpc	r13, r1
    27f2:	e1 04       	cpc	r14, r1
    27f4:	f1 04       	cpc	r15, r1
    27f6:	b4 f0       	brlt	.+44     	; 0x2824 <printInt+0xea>
		i = -i;
	}
	
	buf[3] = i / 1000 + 48;
	buf[2] = (i / 100)%10 +48 ;
	buf[1] = (i / 10)%10 +48 ;
    27f8:	0f 2e       	mov	r0, r31
    27fa:	fa e0       	ldi	r31, 0x0A	; 10
    27fc:	8f 2e       	mov	r8, r31
    27fe:	91 2c       	mov	r9, r1
    2800:	a1 2c       	mov	r10, r1
    2802:	b1 2c       	mov	r11, r1
    2804:	f0 2d       	mov	r31, r0
    2806:	c7 01       	movw	r24, r14
    2808:	b6 01       	movw	r22, r12
    280a:	a5 01       	movw	r20, r10
    280c:	94 01       	movw	r18, r8
    280e:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <__divmodsi4>
    2812:	ca 01       	movw	r24, r20
    2814:	b9 01       	movw	r22, r18
    2816:	a5 01       	movw	r20, r10
    2818:	94 01       	movw	r18, r8
    281a:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <__divmodsi4>
    281e:	00 e3       	ldi	r16, 0x30	; 48
    2820:	06 0f       	add	r16, r22
    2822:	01 c0       	rjmp	.+2      	; 0x2826 <printInt+0xec>
	{
		buf[2] = ' ';
	}
	if(i < 10)
	{
		buf[1] = ' ';
    2824:	00 e2       	ldi	r16, 0x20	; 32
	}
	LCDsendChar(buf[4]);
    2826:	8c 2f       	mov	r24, r28
    2828:	0e 94 20 1c 	call	0x3840	; 0x3840 <LCDsendChar>
	LCDsendChar(buf[3]);
    282c:	81 2f       	mov	r24, r17
    282e:	0e 94 20 1c 	call	0x3840	; 0x3840 <LCDsendChar>
	LCDsendChar(buf[2]);
    2832:	87 2d       	mov	r24, r7
    2834:	0e 94 20 1c 	call	0x3840	; 0x3840 <LCDsendChar>
	LCDsendChar(buf[1]);
    2838:	80 2f       	mov	r24, r16
    283a:	0e 94 20 1c 	call	0x3840	; 0x3840 <LCDsendChar>
	LCDsendChar(buf[0]);
    283e:	8d 2f       	mov	r24, r29
    2840:	0e 94 20 1c 	call	0x3840	; 0x3840 <LCDsendChar>
    2844:	0c c0       	rjmp	.+24     	; 0x285e <printInt+0x124>
	}
	
	buf[3] = i / 1000 + 48;
	buf[2] = (i / 100)%10 +48 ;
	buf[1] = (i / 10)%10 +48 ;
	buf[0] =  i % 10 +48 ;
    2846:	c7 01       	movw	r24, r14
    2848:	b6 01       	movw	r22, r12
    284a:	2a e0       	ldi	r18, 0x0A	; 10
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	40 e0       	ldi	r20, 0x00	; 0
    2850:	50 e0       	ldi	r21, 0x00	; 0
    2852:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <__divmodsi4>
    2856:	d0 e3       	ldi	r29, 0x30	; 48
    2858:	d6 0f       	add	r29, r22
	{	// don't forget to add the sign
		buf[4] = '-';
	}
	else
	{
		buf[4] = ' ';
    285a:	c0 e2       	ldi	r28, 0x20	; 32
    285c:	95 cf       	rjmp	.-214    	; 0x2788 <printInt+0x4e>
	LCDsendChar(buf[4]);
	LCDsendChar(buf[3]);
	LCDsendChar(buf[2]);
	LCDsendChar(buf[1]);
	LCDsendChar(buf[0]);
}
    285e:	df 91       	pop	r29
    2860:	cf 91       	pop	r28
    2862:	1f 91       	pop	r17
    2864:	0f 91       	pop	r16
    2866:	ff 90       	pop	r15
    2868:	ef 90       	pop	r14
    286a:	df 90       	pop	r13
    286c:	cf 90       	pop	r12
    286e:	bf 90       	pop	r11
    2870:	af 90       	pop	r10
    2872:	9f 90       	pop	r9
    2874:	8f 90       	pop	r8
    2876:	7f 90       	pop	r7
    2878:	08 95       	ret

0000287a <timer0_init>:
	timer0Overflows++;
}

void timer0_init(void) // Initialize timer 0
{
	TCCR0A |= (0<<COM0A1)|(0<<COM0A0)|(0<<COM0B1)|(0<<COM0B0)|(0<<WGM01)|(0<<WGM00);
    287a:	84 b5       	in	r24, 0x24	; 36
    287c:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (0<<FOC0A)|(0<<FOC0B)|(0<<WGM02)|(1<<CS02)|(0<<CS01)|(1<<CS00);
    287e:	85 b5       	in	r24, 0x25	; 37
    2880:	85 60       	ori	r24, 0x05	; 5
    2882:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (0<<OCIE0B)|(0<<OCIE0A)|(1<<TOIE0);
    2884:	ee e6       	ldi	r30, 0x6E	; 110
    2886:	f0 e0       	ldi	r31, 0x00	; 0
    2888:	80 81       	ld	r24, Z
    288a:	81 60       	ori	r24, 0x01	; 1
    288c:	80 83       	st	Z, r24
	TIFR0 |=  (0<<OCF0B)|(0<<OCF0A)|(0<<TOV0);
    288e:	85 b3       	in	r24, 0x15	; 21
    2890:	85 bb       	out	0x15, r24	; 21
	

	timer0Overflows = 0; // Start timer overflows at 0
    2892:	10 92 ce 02 	sts	0x02CE, r1
    2896:	10 92 cd 02 	sts	0x02CD, r1
    289a:	08 95       	ret

0000289c <delay1s>:
}

//delay 1s
void delay1s(void)
{
    289c:	84 e6       	ldi	r24, 0x64	; 100
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    289e:	ef e1       	ldi	r30, 0x1F	; 31
    28a0:	fe e4       	ldi	r31, 0x4E	; 78
    28a2:	31 97       	sbiw	r30, 0x01	; 1
    28a4:	f1 f7       	brne	.-4      	; 0x28a2 <delay1s+0x6>
    28a6:	00 c0       	rjmp	.+0      	; 0x28a8 <delay1s+0xc>
    28a8:	00 00       	nop
    28aa:	81 50       	subi	r24, 0x01	; 1
	uint8_t i;
	for(i=0;i<100;i++)
    28ac:	c1 f7       	brne	.-16     	; 0x289e <delay1s+0x2>
	{
		_delay_ms(10);
	}
}
    28ae:	08 95       	ret

000028b0 <setupI2C>:
void setupI2C(void)
{
	unsigned char c;

	// Read the WHO_AM_I register, this is a good test of communication
	c = readRegister(0x0D);  // Read WHO_AM_I register
    28b0:	8d e0       	ldi	r24, 0x0D	; 13
    28b2:	0e 94 84 11 	call	0x2308	; 0x2308 <readRegister>
	if (c == 0x2A) // WHO_AM_I should always be 0x2A
    28b6:	8a 32       	cpi	r24, 0x2A	; 42
    28b8:	29 f4       	brne	.+10     	; 0x28c4 <setupI2C+0x14>
	{
		initMMA8452(SCALE, dataRate);  // init the accelerometer if communication is OK
    28ba:	60 e0       	ldi	r22, 0x00	; 0
    28bc:	82 e0       	ldi	r24, 0x02	; 2
    28be:	0e 94 c3 11 	call	0x2386	; 0x2386 <initMMA8452>
    28c2:	08 95       	ret
	}
	else
	{
		while(1)
		{
			output_high(PORTD, GreenLED);
    28c4:	5f 9a       	sbi	0x0b, 7	; 11
    28c6:	2f ef       	ldi	r18, 0xFF	; 255
    28c8:	84 e3       	ldi	r24, 0x34	; 52
    28ca:	9c e0       	ldi	r25, 0x0C	; 12
    28cc:	21 50       	subi	r18, 0x01	; 1
    28ce:	80 40       	sbci	r24, 0x00	; 0
    28d0:	90 40       	sbci	r25, 0x00	; 0
    28d2:	e1 f7       	brne	.-8      	; 0x28cc <setupI2C+0x1c>
    28d4:	00 c0       	rjmp	.+0      	; 0x28d6 <setupI2C+0x26>
    28d6:	00 00       	nop
			_delay_ms(500);
			
			output_low(PORTD, GreenLED);
    28d8:	5f 98       	cbi	0x0b, 7	; 11
    28da:	2f ef       	ldi	r18, 0xFF	; 255
    28dc:	84 e3       	ldi	r24, 0x34	; 52
    28de:	9c e0       	ldi	r25, 0x0C	; 12
    28e0:	21 50       	subi	r18, 0x01	; 1
    28e2:	80 40       	sbci	r24, 0x00	; 0
    28e4:	90 40       	sbci	r25, 0x00	; 0
    28e6:	e1 f7       	brne	.-8      	; 0x28e0 <setupI2C+0x30>
    28e8:	00 c0       	rjmp	.+0      	; 0x28ea <setupI2C+0x3a>
    28ea:	00 00       	nop
    28ec:	eb cf       	rjmp	.-42     	; 0x28c4 <setupI2C+0x14>

000028ee <trans>:
		} // Loop forever if communication doesn't happen
	}
}

int trans(int elv, char * shltyp, int charge)
{
    28ee:	af 92       	push	r10
    28f0:	bf 92       	push	r11
    28f2:	cf 92       	push	r12
    28f4:	df 92       	push	r13
    28f6:	ef 92       	push	r14
    28f8:	ff 92       	push	r15
    28fa:	0f 93       	push	r16
    28fc:	1f 93       	push	r17
    28fe:	cf 93       	push	r28
    2900:	df 93       	push	r29
    2902:	8c 01       	movw	r16, r24
    2904:	6b 01       	movw	r12, r22
    2906:	5a 01       	movw	r10, r20


	/* generate pointers to correct shell type table ..
	initially ignoring illumination differences */

	fztime = 0;	/* assume 0 overwrite for illum rds */
    2908:	10 92 01 07 	sts	0x0701, r1

	for(currentFT = firstFT; currentFT <= lastFT; currentFT++)
    290c:	c0 91 02 01 	lds	r28, 0x0102
    2910:	d0 91 03 01 	lds	r29, 0x0103
    2914:	d0 93 18 03 	sts	0x0318, r29
    2918:	c0 93 17 03 	sts	0x0317, r28
    291c:	e0 90 00 01 	lds	r14, 0x0100
    2920:	f0 90 01 01 	lds	r15, 0x0101
    2924:	ec 16       	cp	r14, r28
    2926:	fd 06       	cpc	r15, r29
    2928:	c0 f1       	brcs	.+112    	; 0x299a <trans+0xac>
	{
		if(!(strcmp(shltyp,currentFT->shelltype)))
    292a:	68 81       	ld	r22, Y
    292c:	79 81       	ldd	r23, Y+1	; 0x01
    292e:	c6 01       	movw	r24, r12
    2930:	0e 94 08 20 	call	0x4010	; 0x4010 <strcmp>
    2934:	89 2b       	or	r24, r25
    2936:	49 f5       	brne	.+82     	; 0x298a <trans+0x9c>
		{
			if(charge == 0)
    2938:	a1 14       	cp	r10, r1
    293a:	b1 04       	cpc	r11, r1
    293c:	79 f4       	brne	.+30     	; 0x295c <trans+0x6e>
			{
				first = currentFT->firstch0;
    293e:	8a 81       	ldd	r24, Y+2	; 0x02
    2940:	9b 81       	ldd	r25, Y+3	; 0x03
    2942:	90 93 03 07 	sts	0x0703, r25
    2946:	80 93 02 07 	sts	0x0702, r24

				/* check if charge 0 is a valid value..is except for illums normally */
				if(first == (const struct lookup *)0)
    294a:	89 2b       	or	r24, r25
    294c:	69 f0       	breq	.+26     	; 0x2968 <trans+0x7a>
				{
					charge = 1;
					goto chg1;
				}
				/* above being true means only charge 1 valid */
				last = currentFT->lastch0;
    294e:	8c 81       	ldd	r24, Y+4	; 0x04
    2950:	9d 81       	ldd	r25, Y+5	; 0x05
    2952:	90 93 e6 02 	sts	0x02E6, r25
    2956:	80 93 e5 02 	sts	0x02E5, r24
				break;
    295a:	1f c0       	rjmp	.+62     	; 0x299a <trans+0xac>
			}
			chg1:
			if(charge == 1)
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	a8 16       	cp	r10, r24
    2960:	b1 04       	cpc	r11, r1
    2962:	99 f4       	brne	.+38     	; 0x298a <trans+0x9c>
    2964:	fe 01       	movw	r30, r28
    2966:	01 c0       	rjmp	.+2      	; 0x296a <trans+0x7c>
    2968:	fe 01       	movw	r30, r28
			{ /* would be else except for invalid charge 0 above */
				first = currentFT->firstch1;
    296a:	86 81       	ldd	r24, Z+6	; 0x06
    296c:	97 81       	ldd	r25, Z+7	; 0x07
    296e:	90 93 03 07 	sts	0x0703, r25
    2972:	80 93 02 07 	sts	0x0702, r24
				last = currentFT->lastch1;
    2976:	80 85       	ldd	r24, Z+8	; 0x08
    2978:	91 85       	ldd	r25, Z+9	; 0x09
    297a:	90 93 e6 02 	sts	0x02E6, r25
    297e:	80 93 e5 02 	sts	0x02E5, r24
				break;
    2982:	aa 24       	eor	r10, r10
    2984:	a3 94       	inc	r10
    2986:	b1 2c       	mov	r11, r1
    2988:	08 c0       	rjmp	.+16     	; 0x299a <trans+0xac>
	/* generate pointers to correct shell type table ..
	initially ignoring illumination differences */

	fztime = 0;	/* assume 0 overwrite for illum rds */

	for(currentFT = firstFT; currentFT <= lastFT; currentFT++)
    298a:	2c 96       	adiw	r28, 0x0c	; 12
    298c:	d0 93 18 03 	sts	0x0318, r29
    2990:	c0 93 17 03 	sts	0x0317, r28
    2994:	ec 16       	cp	r14, r28
    2996:	fd 06       	cpc	r15, r29
    2998:	40 f6       	brcc	.-112    	; 0x292a <trans+0x3c>
				break;
			}
		}
	}

	gblcharge = charge;	/* usually the same as in but can override above */
    299a:	a0 92 22 07 	sts	0x0722, r10
	/* translate from elevation to range */

	if(pgm_read_word(&(first->mils)) < elv) return(-1);	/* too high */
    299e:	a0 91 02 07 	lds	r26, 0x0702
    29a2:	b0 91 03 07 	lds	r27, 0x0703
    29a6:	fd 01       	movw	r30, r26
    29a8:	32 96       	adiw	r30, 0x02	; 2
    29aa:	25 91       	lpm	r18, Z+
    29ac:	34 91       	lpm	r19, Z
    29ae:	c8 01       	movw	r24, r16
    29b0:	20 17       	cp	r18, r16
    29b2:	31 07       	cpc	r19, r17
    29b4:	08 f4       	brcc	.+2      	; 0x29b8 <trans+0xca>
    29b6:	84 c0       	rjmp	.+264    	; 0x2ac0 <trans+0x1d2>
	if(pgm_read_word(&(last->mils)) > elv)  return(-2);	/* too low */
    29b8:	60 91 e5 02 	lds	r22, 0x02E5
    29bc:	70 91 e6 02 	lds	r23, 0x02E6
    29c0:	fb 01       	movw	r30, r22
    29c2:	32 96       	adiw	r30, 0x02	; 2
    29c4:	25 91       	lpm	r18, Z+
    29c6:	34 91       	lpm	r19, Z
    29c8:	02 17       	cp	r16, r18
    29ca:	13 07       	cpc	r17, r19
    29cc:	08 f4       	brcc	.+2      	; 0x29d0 <trans+0xe2>
    29ce:	7b c0       	rjmp	.+246    	; 0x2ac6 <trans+0x1d8>

	for(current = first; current < last ; current++) { /* here elv in bounds, get range in meters*/
    29d0:	b0 93 12 03 	sts	0x0312, r27
    29d4:	a0 93 11 03 	sts	0x0311, r26
    29d8:	a6 17       	cp	r26, r22
    29da:	b7 07       	cpc	r27, r23
    29dc:	08 f0       	brcs	.+2      	; 0x29e0 <trans+0xf2>
    29de:	58 c0       	rjmp	.+176    	; 0x2a90 <trans+0x1a2>
    29e0:	9d 01       	movw	r18, r26
    29e2:	a9 01       	movw	r20, r18
    29e4:	4e 5f       	subi	r20, 0xFE	; 254
    29e6:	5f 4f       	sbci	r21, 0xFF	; 255
		if(pgm_read_word(&(current->mils)) >= elv && pgm_read_word(&((current + 1)->mils)) < elv) {
    29e8:	fa 01       	movw	r30, r20
    29ea:	e5 90       	lpm	r14, Z+
    29ec:	f4 90       	lpm	r15, Z
    29ee:	e8 16       	cp	r14, r24
    29f0:	f9 06       	cpc	r15, r25
    29f2:	08 f4       	brcc	.+2      	; 0x29f6 <trans+0x108>
    29f4:	43 c0       	rjmp	.+134    	; 0x2a7c <trans+0x18e>
    29f6:	79 01       	movw	r14, r18
    29f8:	e6 e0       	ldi	r30, 0x06	; 6
    29fa:	ee 0e       	add	r14, r30
    29fc:	f1 1c       	adc	r15, r1
    29fe:	f7 01       	movw	r30, r14
    2a00:	c5 90       	lpm	r12, Z+
    2a02:	d4 90       	lpm	r13, Z
    2a04:	c8 16       	cp	r12, r24
    2a06:	d9 06       	cpc	r13, r25
    2a08:	08 f0       	brcs	.+2      	; 0x2a0c <trans+0x11e>
    2a0a:	38 c0       	rjmp	.+112    	; 0x2a7c <trans+0x18e>
    2a0c:	30 93 12 03 	sts	0x0312, r19
    2a10:	20 93 11 03 	sts	0x0311, r18

			if((pgm_read_word(&(current->mils))  - elv) < (elv - pgm_read_word(&((current + 1)->mils))) ) { range = pgm_read_word(&(current->meters));
    2a14:	fa 01       	movw	r30, r20
    2a16:	45 91       	lpm	r20, Z+
    2a18:	54 91       	lpm	r21, Z
    2a1a:	f7 01       	movw	r30, r14
    2a1c:	85 91       	lpm	r24, Z+
    2a1e:	94 91       	lpm	r25, Z
    2a20:	40 1b       	sub	r20, r16
    2a22:	51 0b       	sbc	r21, r17
    2a24:	08 1b       	sub	r16, r24
    2a26:	19 0b       	sbc	r17, r25
    2a28:	40 17       	cp	r20, r16
    2a2a:	51 07       	cpc	r21, r17
    2a2c:	58 f4       	brcc	.+22     	; 0x2a44 <trans+0x156>
    2a2e:	f9 01       	movw	r30, r18
    2a30:	85 91       	lpm	r24, Z+
    2a32:	94 91       	lpm	r25, Z
				i = current - first;
    2a34:	2a 1b       	sub	r18, r26
    2a36:	3b 0b       	sbc	r19, r27
    2a38:	a9 01       	movw	r20, r18
    2a3a:	55 95       	asr	r21
    2a3c:	47 95       	ror	r20
    2a3e:	55 95       	asr	r21
    2a40:	47 95       	ror	r20
    2a42:	0d c0       	rjmp	.+26     	; 0x2a5e <trans+0x170>

			}
			else {range = pgm_read_word(&((current + 1)->meters));
    2a44:	f9 01       	movw	r30, r18
    2a46:	34 96       	adiw	r30, 0x04	; 4
    2a48:	85 91       	lpm	r24, Z+
    2a4a:	94 91       	lpm	r25, Z
				i = current + 1 - first;
    2a4c:	2c 5f       	subi	r18, 0xFC	; 252
    2a4e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a50:	2a 1b       	sub	r18, r26
    2a52:	3b 0b       	sbc	r19, r27
    2a54:	a9 01       	movw	r20, r18
    2a56:	55 95       	asr	r21
    2a58:	47 95       	ror	r20
    2a5a:	55 95       	asr	r21
    2a5c:	47 95       	ror	r20

			}
			if(pgm_read_word(&(currentFT->fuzetimes))) fztime = (uint8_t*)((pgm_read_word(&(currentFT->fuzetimes))) + i); //fztime =*
    2a5e:	2a 96       	adiw	r28, 0x0a	; 10
    2a60:	fe 01       	movw	r30, r28
    2a62:	25 91       	lpm	r18, Z+
    2a64:	34 91       	lpm	r19, Z
    2a66:	23 2b       	or	r18, r19
    2a68:	09 f4       	brne	.+2      	; 0x2a6c <trans+0x17e>
    2a6a:	2f c0       	rjmp	.+94     	; 0x2aca <trans+0x1dc>
    2a6c:	fe 01       	movw	r30, r28
    2a6e:	25 91       	lpm	r18, Z+
    2a70:	34 91       	lpm	r19, Z
    2a72:	42 0f       	add	r20, r18
    2a74:	53 1f       	adc	r21, r19
    2a76:	40 93 01 07 	sts	0x0701, r20
    2a7a:	27 c0       	rjmp	.+78     	; 0x2aca <trans+0x1dc>
	/* translate from elevation to range */

	if(pgm_read_word(&(first->mils)) < elv) return(-1);	/* too high */
	if(pgm_read_word(&(last->mils)) > elv)  return(-2);	/* too low */

	for(current = first; current < last ; current++) { /* here elv in bounds, get range in meters*/
    2a7c:	2c 5f       	subi	r18, 0xFC	; 252
    2a7e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a80:	26 17       	cp	r18, r22
    2a82:	37 07       	cpc	r19, r23
    2a84:	08 f4       	brcc	.+2      	; 0x2a88 <trans+0x19a>
    2a86:	ad cf       	rjmp	.-166    	; 0x29e2 <trans+0xf4>
    2a88:	30 93 12 03 	sts	0x0312, r19
    2a8c:	20 93 11 03 	sts	0x0311, r18
		}
	}
	/**** here the elevation is exactly the value of the last elevation otherwise done above **/
	i = last - first;

	if(pgm_read_word(&(currentFT->fuzetimes))) fztime = (uint8_t*)((pgm_read_word(&(currentFT->fuzetimes))) + i); //fztime =*
    2a90:	2a 96       	adiw	r28, 0x0a	; 10
    2a92:	fe 01       	movw	r30, r28
    2a94:	85 91       	lpm	r24, Z+
    2a96:	94 91       	lpm	r25, Z
    2a98:	89 2b       	or	r24, r25
    2a9a:	71 f0       	breq	.+28     	; 0x2ab8 <trans+0x1ca>
    2a9c:	fe 01       	movw	r30, r28
    2a9e:	85 91       	lpm	r24, Z+
    2aa0:	94 91       	lpm	r25, Z
			if(pgm_read_word(&(currentFT->fuzetimes))) fztime = (uint8_t*)((pgm_read_word(&(currentFT->fuzetimes))) + i); //fztime =*
			return(range);
		}
	}
	/**** here the elevation is exactly the value of the last elevation otherwise done above **/
	i = last - first;
    2aa2:	9b 01       	movw	r18, r22
    2aa4:	2a 1b       	sub	r18, r26
    2aa6:	3b 0b       	sbc	r19, r27
    2aa8:	35 95       	asr	r19
    2aaa:	27 95       	ror	r18
    2aac:	35 95       	asr	r19
    2aae:	27 95       	ror	r18

	if(pgm_read_word(&(currentFT->fuzetimes))) fztime = (uint8_t*)((pgm_read_word(&(currentFT->fuzetimes))) + i); //fztime =*
    2ab0:	82 0f       	add	r24, r18
    2ab2:	93 1f       	adc	r25, r19
    2ab4:	80 93 01 07 	sts	0x0701, r24
	return(pgm_read_word(&(last->meters)));
    2ab8:	fb 01       	movw	r30, r22
    2aba:	85 91       	lpm	r24, Z+
    2abc:	94 91       	lpm	r25, Z
    2abe:	05 c0       	rjmp	.+10     	; 0x2aca <trans+0x1dc>
	}

	gblcharge = charge;	/* usually the same as in but can override above */
	/* translate from elevation to range */

	if(pgm_read_word(&(first->mils)) < elv) return(-1);	/* too high */
    2ac0:	8f ef       	ldi	r24, 0xFF	; 255
    2ac2:	9f ef       	ldi	r25, 0xFF	; 255
    2ac4:	02 c0       	rjmp	.+4      	; 0x2aca <trans+0x1dc>
	if(pgm_read_word(&(last->mils)) > elv)  return(-2);	/* too low */
    2ac6:	8e ef       	ldi	r24, 0xFE	; 254
    2ac8:	9f ef       	ldi	r25, 0xFF	; 255
	/**** here the elevation is exactly the value of the last elevation otherwise done above **/
	i = last - first;

	if(pgm_read_word(&(currentFT->fuzetimes))) fztime = (uint8_t*)((pgm_read_word(&(currentFT->fuzetimes))) + i); //fztime =*
	return(pgm_read_word(&(last->meters)));
}
    2aca:	df 91       	pop	r29
    2acc:	cf 91       	pop	r28
    2ace:	1f 91       	pop	r17
    2ad0:	0f 91       	pop	r16
    2ad2:	ff 90       	pop	r15
    2ad4:	ef 90       	pop	r14
    2ad6:	df 90       	pop	r13
    2ad8:	cf 90       	pop	r12
    2ada:	bf 90       	pop	r11
    2adc:	af 90       	pop	r10
    2ade:	08 95       	ret

00002ae0 <update_Display>:
	LCDsendChar(buf[1]);
	LCDsendChar(buf[0]);
}

void update_Display(void) //
{
    2ae0:	0f 93       	push	r16
    2ae2:	1f 93       	push	r17
    2ae4:	cf 93       	push	r28
    2ae6:	df 93       	push	r29
	if(switch_state == 0 ) //
    2ae8:	80 91 5c 01 	lds	r24, 0x015C
    2aec:	81 11       	cpse	r24, r1
    2aee:	26 c0       	rjmp	.+76     	; 0x2b3c <update_Display+0x5c>
	{
		CopyStringtoLCD(State0, 3, 0);
    2af0:	40 e0       	ldi	r20, 0x00	; 0
    2af2:	63 e0       	ldi	r22, 0x03	; 3
    2af4:	8a e3       	ldi	r24, 0x3A	; 58
    2af6:	91 e2       	ldi	r25, 0x21	; 33
    2af8:	0e 94 65 1c 	call	0x38ca	; 0x38ca <CopyStringtoLCD>
		printInt(11, 0 , i);
    2afc:	20 91 5a 01 	lds	r18, 0x015A
    2b00:	30 91 5b 01 	lds	r19, 0x015B
    2b04:	44 27       	eor	r20, r20
    2b06:	37 fd       	sbrc	r19, 7
    2b08:	40 95       	com	r20
    2b0a:	54 2f       	mov	r21, r20
    2b0c:	60 e0       	ldi	r22, 0x00	; 0
    2b0e:	8b e0       	ldi	r24, 0x0B	; 11
    2b10:	0e 94 9d 13 	call	0x273a	; 0x273a <printInt>
		printInt(5, 1 , system_Clock);
    2b14:	20 91 c8 02 	lds	r18, 0x02C8
    2b18:	30 91 c9 02 	lds	r19, 0x02C9
    2b1c:	40 91 ca 02 	lds	r20, 0x02CA
    2b20:	50 91 cb 02 	lds	r21, 0x02CB
    2b24:	61 e0       	ldi	r22, 0x01	; 1
    2b26:	85 e0       	ldi	r24, 0x05	; 5
    2b28:	0e 94 9d 13 	call	0x273a	; 0x273a <printInt>
		lcd_puts(" GREG");
    2b2c:	8d e5       	ldi	r24, 0x5D	; 93
    2b2e:	91 e0       	ldi	r25, 0x01	; 1
    2b30:	0e 94 46 1c 	call	0x388c	; 0x388c <lcd_puts>
		output_low(PORTD, GreenLED);
    2b34:	5f 98       	cbi	0x0b, 7	; 11
		updateSpeed = 32;
    2b36:	80 e2       	ldi	r24, 0x20	; 32
    2b38:	80 93 57 01 	sts	0x0157, r24
		
	}
	if(switch_state == 1)	//Red
    2b3c:	80 91 5c 01 	lds	r24, 0x015C
    2b40:	81 30       	cpi	r24, 0x01	; 1
    2b42:	b9 f4       	brne	.+46     	; 0x2b72 <update_Display+0x92>
	{
		CopyStringtoLCD(State1, 3, 0);
    2b44:	40 e0       	ldi	r20, 0x00	; 0
    2b46:	63 e0       	ldi	r22, 0x03	; 3
    2b48:	82 e3       	ldi	r24, 0x32	; 50
    2b4a:	91 e2       	ldi	r25, 0x21	; 33
    2b4c:	0e 94 65 1c 	call	0x38ca	; 0x38ca <CopyStringtoLCD>
		printInt(11, 0 , i);
    2b50:	20 91 5a 01 	lds	r18, 0x015A
    2b54:	30 91 5b 01 	lds	r19, 0x015B
    2b58:	44 27       	eor	r20, r20
    2b5a:	37 fd       	sbrc	r19, 7
    2b5c:	40 95       	com	r20
    2b5e:	54 2f       	mov	r21, r20
    2b60:	60 e0       	ldi	r22, 0x00	; 0
    2b62:	8b e0       	ldi	r24, 0x0B	; 11
    2b64:	0e 94 9d 13 	call	0x273a	; 0x273a <printInt>
		output_high(PORTD, GreenLED);
    2b68:	5f 9a       	sbi	0x0b, 7	; 11
		updateSpeed = 16;
    2b6a:	80 e1       	ldi	r24, 0x10	; 16
    2b6c:	80 93 57 01 	sts	0x0157, r24
    2b70:	a9 c4       	rjmp	.+2386   	; 0x34c4 <update_Display+0x9e4>
	}
	else if(switch_state == 2)	//Orange
    2b72:	80 91 5c 01 	lds	r24, 0x015C
    2b76:	82 30       	cpi	r24, 0x02	; 2
    2b78:	d9 f4       	brne	.+54     	; 0x2bb0 <update_Display+0xd0>
	{
		CopyStringtoLCD(State2, 3, 0);
    2b7a:	40 e0       	ldi	r20, 0x00	; 0
    2b7c:	63 e0       	ldi	r22, 0x03	; 3
    2b7e:	8a e2       	ldi	r24, 0x2A	; 42
    2b80:	91 e2       	ldi	r25, 0x21	; 33
    2b82:	0e 94 65 1c 	call	0x38ca	; 0x38ca <CopyStringtoLCD>
		printInt(11, 0 , i);
    2b86:	20 91 5a 01 	lds	r18, 0x015A
    2b8a:	30 91 5b 01 	lds	r19, 0x015B
    2b8e:	44 27       	eor	r20, r20
    2b90:	37 fd       	sbrc	r19, 7
    2b92:	40 95       	com	r20
    2b94:	54 2f       	mov	r21, r20
    2b96:	60 e0       	ldi	r22, 0x00	; 0
    2b98:	8b e0       	ldi	r24, 0x0B	; 11
    2b9a:	0e 94 9d 13 	call	0x273a	; 0x273a <printInt>
		printTime(3,1);
    2b9e:	61 e0       	ldi	r22, 0x01	; 1
    2ba0:	83 e0       	ldi	r24, 0x03	; 3
    2ba2:	0e 94 70 12 	call	0x24e0	; 0x24e0 <printTime>
		output_low(PORTD, GreenLED);
    2ba6:	5f 98       	cbi	0x0b, 7	; 11
		updateSpeed = 8;
    2ba8:	88 e0       	ldi	r24, 0x08	; 8
    2baa:	80 93 57 01 	sts	0x0157, r24
    2bae:	8a c4       	rjmp	.+2324   	; 0x34c4 <update_Display+0x9e4>
	}
	else if(switch_state == 3)	//Yellow
    2bb0:	80 91 5c 01 	lds	r24, 0x015C
    2bb4:	83 30       	cpi	r24, 0x03	; 3
    2bb6:	b9 f5       	brne	.+110    	; 0x2c26 <update_Display+0x146>
	{
		CopyStringtoLCD(State3, 3, 0);
    2bb8:	40 e0       	ldi	r20, 0x00	; 0
    2bba:	63 e0       	ldi	r22, 0x03	; 3
    2bbc:	82 e2       	ldi	r24, 0x22	; 34
    2bbe:	91 e2       	ldi	r25, 0x21	; 33
    2bc0:	0e 94 65 1c 	call	0x38ca	; 0x38ca <CopyStringtoLCD>
		LCDGotoXY(0,1);
    2bc4:	61 e0       	ldi	r22, 0x01	; 1
    2bc6:	80 e0       	ldi	r24, 0x00	; 0
    2bc8:	0e 94 56 1c 	call	0x38ac	; 0x38ac <LCDGotoXY>
		LCDsendChar('X');
    2bcc:	88 e5       	ldi	r24, 0x58	; 88
    2bce:	0e 94 20 1c 	call	0x3840	; 0x3840 <LCDsendChar>
		printAccelDeg(1, 1 , (int)accelD[0]);
    2bd2:	60 91 06 07 	lds	r22, 0x0706
    2bd6:	70 91 07 07 	lds	r23, 0x0707
    2bda:	80 91 08 07 	lds	r24, 0x0708
    2bde:	90 91 09 07 	lds	r25, 0x0709
    2be2:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__fixsfsi>
    2be6:	ab 01       	movw	r20, r22
    2be8:	61 e0       	ldi	r22, 0x01	; 1
    2bea:	81 e0       	ldi	r24, 0x01	; 1
    2bec:	0e 94 60 13 	call	0x26c0	; 0x26c0 <printAccelDeg>
		LCDGotoXY(9,1);
    2bf0:	61 e0       	ldi	r22, 0x01	; 1
    2bf2:	89 e0       	ldi	r24, 0x09	; 9
    2bf4:	0e 94 56 1c 	call	0x38ac	; 0x38ac <LCDGotoXY>
		LCDsendChar('Y');
    2bf8:	89 e5       	ldi	r24, 0x59	; 89
    2bfa:	0e 94 20 1c 	call	0x3840	; 0x3840 <LCDsendChar>
		printAccelDeg(10, 1 , (int)accelD[1]);
    2bfe:	60 91 0a 07 	lds	r22, 0x070A
    2c02:	70 91 0b 07 	lds	r23, 0x070B
    2c06:	80 91 0c 07 	lds	r24, 0x070C
    2c0a:	90 91 0d 07 	lds	r25, 0x070D
    2c0e:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__fixsfsi>
    2c12:	ab 01       	movw	r20, r22
    2c14:	61 e0       	ldi	r22, 0x01	; 1
    2c16:	8a e0       	ldi	r24, 0x0A	; 10
    2c18:	0e 94 60 13 	call	0x26c0	; 0x26c0 <printAccelDeg>
		output_high(PORTD, GreenLED);
    2c1c:	5f 9a       	sbi	0x0b, 7	; 11
		updateSpeed = 4;
    2c1e:	84 e0       	ldi	r24, 0x04	; 4
    2c20:	80 93 57 01 	sts	0x0157, r24
    2c24:	4f c4       	rjmp	.+2206   	; 0x34c4 <update_Display+0x9e4>
	}
	
	else if(switch_state == 4)	//Green
    2c26:	80 91 5c 01 	lds	r24, 0x015C
    2c2a:	84 30       	cpi	r24, 0x04	; 4
    2c2c:	b9 f5       	brne	.+110    	; 0x2c9c <update_Display+0x1bc>
	{
		CopyStringtoLCD(State4, 3, 0);
    2c2e:	40 e0       	ldi	r20, 0x00	; 0
    2c30:	63 e0       	ldi	r22, 0x03	; 3
    2c32:	8a e1       	ldi	r24, 0x1A	; 26
    2c34:	91 e2       	ldi	r25, 0x21	; 33
    2c36:	0e 94 65 1c 	call	0x38ca	; 0x38ca <CopyStringtoLCD>
		LCDGotoXY(0,1);
    2c3a:	61 e0       	ldi	r22, 0x01	; 1
    2c3c:	80 e0       	ldi	r24, 0x00	; 0
    2c3e:	0e 94 56 1c 	call	0x38ac	; 0x38ac <LCDGotoXY>
		LCDsendChar('X');
    2c42:	88 e5       	ldi	r24, 0x58	; 88
    2c44:	0e 94 20 1c 	call	0x3840	; 0x3840 <LCDsendChar>
		printAccelMil(1, 1 , (int)accelM[0]);
    2c48:	60 91 16 07 	lds	r22, 0x0716
    2c4c:	70 91 17 07 	lds	r23, 0x0717
    2c50:	80 91 18 07 	lds	r24, 0x0718
    2c54:	90 91 19 07 	lds	r25, 0x0719
    2c58:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__fixsfsi>
    2c5c:	ab 01       	movw	r20, r22
    2c5e:	61 e0       	ldi	r22, 0x01	; 1
    2c60:	81 e0       	ldi	r24, 0x01	; 1
    2c62:	0e 94 08 13 	call	0x2610	; 0x2610 <printAccelMil>
		LCDGotoXY(9,1);
    2c66:	61 e0       	ldi	r22, 0x01	; 1
    2c68:	89 e0       	ldi	r24, 0x09	; 9
    2c6a:	0e 94 56 1c 	call	0x38ac	; 0x38ac <LCDGotoXY>
		LCDsendChar('Y');
    2c6e:	89 e5       	ldi	r24, 0x59	; 89
    2c70:	0e 94 20 1c 	call	0x3840	; 0x3840 <LCDsendChar>
		printAccelMil(10, 1 , (int)accelM[1]);
    2c74:	60 91 1a 07 	lds	r22, 0x071A
    2c78:	70 91 1b 07 	lds	r23, 0x071B
    2c7c:	80 91 1c 07 	lds	r24, 0x071C
    2c80:	90 91 1d 07 	lds	r25, 0x071D
    2c84:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__fixsfsi>
    2c88:	ab 01       	movw	r20, r22
    2c8a:	61 e0       	ldi	r22, 0x01	; 1
    2c8c:	8a e0       	ldi	r24, 0x0A	; 10
    2c8e:	0e 94 08 13 	call	0x2610	; 0x2610 <printAccelMil>
		//LCDGotoXY(12,1);
		//LCDsendChar('Z');
		//printAccel(13, 1 , (int)accelD[2]);
		
		output_low(PORTD, GreenLED);
    2c92:	5f 98       	cbi	0x0b, 7	; 11
		updateSpeed = 2;
    2c94:	82 e0       	ldi	r24, 0x02	; 2
    2c96:	80 93 57 01 	sts	0x0157, r24
    2c9a:	14 c4       	rjmp	.+2088   	; 0x34c4 <update_Display+0x9e4>
	}
	else if(switch_state == 5)	//Blue
    2c9c:	80 91 5c 01 	lds	r24, 0x015C
    2ca0:	85 30       	cpi	r24, 0x05	; 5
    2ca2:	09 f0       	breq	.+2      	; 0x2ca6 <update_Display+0x1c6>
    2ca4:	b3 c0       	rjmp	.+358    	; 0x2e0c <update_Display+0x32c>
	{
		CopyStringtoLCD(State5, 3, 0);
    2ca6:	40 e0       	ldi	r20, 0x00	; 0
    2ca8:	63 e0       	ldi	r22, 0x03	; 3
    2caa:	82 e1       	ldi	r24, 0x12	; 18
    2cac:	91 e2       	ldi	r25, 0x21	; 33
    2cae:	0e 94 65 1c 	call	0x38ca	; 0x38ca <CopyStringtoLCD>
		printInt(11, 0 , i);
    2cb2:	20 91 5a 01 	lds	r18, 0x015A
    2cb6:	30 91 5b 01 	lds	r19, 0x015B
    2cba:	44 27       	eor	r20, r20
    2cbc:	37 fd       	sbrc	r19, 7
    2cbe:	40 95       	com	r20
    2cc0:	54 2f       	mov	r21, r20
    2cc2:	60 e0       	ldi	r22, 0x00	; 0
    2cc4:	8b e0       	ldi	r24, 0x0B	; 11
    2cc6:	0e 94 9d 13 	call	0x273a	; 0x273a <printInt>
		//printInt(5, 1 , system_Clock);
		sprintf(rangestring,"%5d",(int)accelM[0]);
    2cca:	60 91 16 07 	lds	r22, 0x0716
    2cce:	70 91 17 07 	lds	r23, 0x0717
    2cd2:	80 91 18 07 	lds	r24, 0x0718
    2cd6:	90 91 19 07 	lds	r25, 0x0719
    2cda:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__fixsfsi>
    2cde:	7f 93       	push	r23
    2ce0:	6f 93       	push	r22
    2ce2:	83 e6       	ldi	r24, 0x63	; 99
    2ce4:	91 e0       	ldi	r25, 0x01	; 1
    2ce6:	9f 93       	push	r25
    2ce8:	8f 93       	push	r24
    2cea:	c2 e5       	ldi	r28, 0x52	; 82
    2cec:	d1 e0       	ldi	r29, 0x01	; 1
    2cee:	df 93       	push	r29
    2cf0:	cf 93       	push	r28
    2cf2:	0e 94 11 20 	call	0x4022	; 0x4022 <sprintf>
		/* convert leading zeros to leading blanks */
		index = 0;
    2cf6:	10 92 c0 02 	sts	0x02C0, r1
		while(rangestring[index] == '\0') {rangestring[index] = ' ' ; index++;}
    2cfa:	0f 90       	pop	r0
    2cfc:	0f 90       	pop	r0
    2cfe:	0f 90       	pop	r0
    2d00:	0f 90       	pop	r0
    2d02:	0f 90       	pop	r0
    2d04:	0f 90       	pop	r0
    2d06:	88 81       	ld	r24, Y
    2d08:	81 11       	cpse	r24, r1
    2d0a:	c6 c3       	rjmp	.+1932   	; 0x3498 <update_Display+0x9b8>
    2d0c:	21 e0       	ldi	r18, 0x01	; 1
    2d0e:	80 e0       	ldi	r24, 0x00	; 0
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	50 e2       	ldi	r21, 0x20	; 32
    2d14:	fc 01       	movw	r30, r24
    2d16:	ee 5a       	subi	r30, 0xAE	; 174
    2d18:	fe 4f       	sbci	r31, 0xFE	; 254
    2d1a:	50 83       	st	Z, r21
    2d1c:	82 2f       	mov	r24, r18
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	41 e0       	ldi	r20, 0x01	; 1
    2d22:	42 0f       	add	r20, r18
    2d24:	fc 01       	movw	r30, r24
    2d26:	ee 5a       	subi	r30, 0xAE	; 174
    2d28:	fe 4f       	sbci	r31, 0xFE	; 254
    2d2a:	30 81       	ld	r19, Z
    2d2c:	31 11       	cpse	r19, r1
    2d2e:	02 c0       	rjmp	.+4      	; 0x2d34 <update_Display+0x254>
    2d30:	24 2f       	mov	r18, r20
    2d32:	f0 cf       	rjmp	.-32     	; 0x2d14 <update_Display+0x234>
    2d34:	20 93 c0 02 	sts	0x02C0, r18
		LCDGotoXY(0,1);
    2d38:	61 e0       	ldi	r22, 0x01	; 1
    2d3a:	80 e0       	ldi	r24, 0x00	; 0
    2d3c:	0e 94 56 1c 	call	0x38ac	; 0x38ac <LCDGotoXY>
		LCDsendChar('X');
    2d40:	88 e5       	ldi	r24, 0x58	; 88
    2d42:	0e 94 20 1c 	call	0x3840	; 0x3840 <LCDsendChar>
		for(index = 0; index < 5; index++)
    2d46:	10 92 c0 02 	sts	0x02C0, r1
    2d4a:	af c3       	rjmp	.+1886   	; 0x34aa <update_Display+0x9ca>
		{
			LCDsendChar(rangestring[index]);
    2d4c:	f0 e0       	ldi	r31, 0x00	; 0
    2d4e:	ee 5a       	subi	r30, 0xAE	; 174
    2d50:	fe 4f       	sbci	r31, 0xFE	; 254
    2d52:	80 81       	ld	r24, Z
    2d54:	0e 94 20 1c 	call	0x3840	; 0x3840 <LCDsendChar>
		/* convert leading zeros to leading blanks */
		index = 0;
		while(rangestring[index] == '\0') {rangestring[index] = ' ' ; index++;}
		LCDGotoXY(0,1);
		LCDsendChar('X');
		for(index = 0; index < 5; index++)
    2d58:	e0 91 c0 02 	lds	r30, 0x02C0
    2d5c:	ef 5f       	subi	r30, 0xFF	; 255
    2d5e:	e0 93 c0 02 	sts	0x02C0, r30
    2d62:	e5 30       	cpi	r30, 0x05	; 5
    2d64:	98 f3       	brcs	.-26     	; 0x2d4c <update_Display+0x26c>
		{
			LCDsendChar(rangestring[index]);
		}
		sprintf(rangestring,"%5d",(int)accelM[1]);
    2d66:	60 91 1a 07 	lds	r22, 0x071A
    2d6a:	70 91 1b 07 	lds	r23, 0x071B
    2d6e:	80 91 1c 07 	lds	r24, 0x071C
    2d72:	90 91 1d 07 	lds	r25, 0x071D
    2d76:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__fixsfsi>
    2d7a:	7f 93       	push	r23
    2d7c:	6f 93       	push	r22
    2d7e:	83 e6       	ldi	r24, 0x63	; 99
    2d80:	91 e0       	ldi	r25, 0x01	; 1
    2d82:	9f 93       	push	r25
    2d84:	8f 93       	push	r24
    2d86:	c2 e5       	ldi	r28, 0x52	; 82
    2d88:	d1 e0       	ldi	r29, 0x01	; 1
    2d8a:	df 93       	push	r29
    2d8c:	cf 93       	push	r28
    2d8e:	0e 94 11 20 	call	0x4022	; 0x4022 <sprintf>
		/* convert leading zeros to leading blanks */
		index = 0;
    2d92:	10 92 c0 02 	sts	0x02C0, r1
		while(rangestring[index] == '\0') {rangestring[index] = ' ' ; index++;}
    2d96:	0f 90       	pop	r0
    2d98:	0f 90       	pop	r0
    2d9a:	0f 90       	pop	r0
    2d9c:	0f 90       	pop	r0
    2d9e:	0f 90       	pop	r0
    2da0:	0f 90       	pop	r0
    2da2:	88 81       	ld	r24, Y
    2da4:	81 11       	cpse	r24, r1
    2da6:	83 c3       	rjmp	.+1798   	; 0x34ae <update_Display+0x9ce>
    2da8:	21 e0       	ldi	r18, 0x01	; 1
    2daa:	80 e0       	ldi	r24, 0x00	; 0
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	50 e2       	ldi	r21, 0x20	; 32
    2db0:	fc 01       	movw	r30, r24
    2db2:	ee 5a       	subi	r30, 0xAE	; 174
    2db4:	fe 4f       	sbci	r31, 0xFE	; 254
    2db6:	50 83       	st	Z, r21
    2db8:	82 2f       	mov	r24, r18
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	41 e0       	ldi	r20, 0x01	; 1
    2dbe:	42 0f       	add	r20, r18
    2dc0:	fc 01       	movw	r30, r24
    2dc2:	ee 5a       	subi	r30, 0xAE	; 174
    2dc4:	fe 4f       	sbci	r31, 0xFE	; 254
    2dc6:	30 81       	ld	r19, Z
    2dc8:	31 11       	cpse	r19, r1
    2dca:	02 c0       	rjmp	.+4      	; 0x2dd0 <update_Display+0x2f0>
    2dcc:	24 2f       	mov	r18, r20
    2dce:	f0 cf       	rjmp	.-32     	; 0x2db0 <update_Display+0x2d0>
    2dd0:	20 93 c0 02 	sts	0x02C0, r18
		LCDGotoXY(9,1);
    2dd4:	61 e0       	ldi	r22, 0x01	; 1
    2dd6:	89 e0       	ldi	r24, 0x09	; 9
    2dd8:	0e 94 56 1c 	call	0x38ac	; 0x38ac <LCDGotoXY>
		LCDsendChar('Y');
    2ddc:	89 e5       	ldi	r24, 0x59	; 89
    2dde:	0e 94 20 1c 	call	0x3840	; 0x3840 <LCDsendChar>
		for(index = 0; index < 5; index++)
    2de2:	10 92 c0 02 	sts	0x02C0, r1
    2de6:	6c c3       	rjmp	.+1752   	; 0x34c0 <update_Display+0x9e0>
		{
			LCDsendChar(rangestring[index]);
    2de8:	f0 e0       	ldi	r31, 0x00	; 0
    2dea:	ee 5a       	subi	r30, 0xAE	; 174
    2dec:	fe 4f       	sbci	r31, 0xFE	; 254
    2dee:	80 81       	ld	r24, Z
    2df0:	0e 94 20 1c 	call	0x3840	; 0x3840 <LCDsendChar>
		/* convert leading zeros to leading blanks */
		index = 0;
		while(rangestring[index] == '\0') {rangestring[index] = ' ' ; index++;}
		LCDGotoXY(9,1);
		LCDsendChar('Y');
		for(index = 0; index < 5; index++)
    2df4:	e0 91 c0 02 	lds	r30, 0x02C0
    2df8:	ef 5f       	subi	r30, 0xFF	; 255
    2dfa:	e0 93 c0 02 	sts	0x02C0, r30
    2dfe:	e5 30       	cpi	r30, 0x05	; 5
    2e00:	98 f3       	brcs	.-26     	; 0x2de8 <update_Display+0x308>
		{
			LCDsendChar(rangestring[index]);
		}
		output_high(PORTD, GreenLED);
    2e02:	5f 9a       	sbi	0x0b, 7	; 11
		updateSpeed = 1;
    2e04:	81 e0       	ldi	r24, 0x01	; 1
    2e06:	80 93 57 01 	sts	0x0157, r24
    2e0a:	5c c3       	rjmp	.+1720   	; 0x34c4 <update_Display+0x9e4>
	}
	else if(switch_state == 6)	//Blue
    2e0c:	80 91 5c 01 	lds	r24, 0x015C
    2e10:	86 30       	cpi	r24, 0x06	; 6
    2e12:	09 f0       	breq	.+2      	; 0x2e16 <update_Display+0x336>
    2e14:	68 c0       	rjmp	.+208    	; 0x2ee6 <update_Display+0x406>
	{
		CopyStringtoLCD(State6, 3, 0);
    2e16:	40 e0       	ldi	r20, 0x00	; 0
    2e18:	63 e0       	ldi	r22, 0x03	; 3
    2e1a:	8a e0       	ldi	r24, 0x0A	; 10
    2e1c:	91 e2       	ldi	r25, 0x21	; 33
    2e1e:	0e 94 65 1c 	call	0x38ca	; 0x38ca <CopyStringtoLCD>
		printInt(11, 0 , i);
    2e22:	20 91 5a 01 	lds	r18, 0x015A
    2e26:	30 91 5b 01 	lds	r19, 0x015B
    2e2a:	44 27       	eor	r20, r20
    2e2c:	37 fd       	sbrc	r19, 7
    2e2e:	40 95       	com	r20
    2e30:	54 2f       	mov	r21, r20
    2e32:	60 e0       	ldi	r22, 0x00	; 0
    2e34:	8b e0       	ldi	r24, 0x0B	; 11
    2e36:	0e 94 9d 13 	call	0x273a	; 0x273a <printInt>
		LCDGotoXY(0,1);
    2e3a:	61 e0       	ldi	r22, 0x01	; 1
    2e3c:	80 e0       	ldi	r24, 0x00	; 0
    2e3e:	0e 94 56 1c 	call	0x38ac	; 0x38ac <LCDGotoXY>
		for(z = 0; z < 16; z++) outstring[z] = ' ';
    2e42:	10 92 c3 02 	sts	0x02C3, r1
    2e46:	80 91 c3 02 	lds	r24, 0x02C3
    2e4a:	80 31       	cpi	r24, 0x10	; 16
    2e4c:	80 f4       	brcc	.+32     	; 0x2e6e <update_Display+0x38e>
    2e4e:	90 e2       	ldi	r25, 0x20	; 32
    2e50:	e0 91 c3 02 	lds	r30, 0x02C3
    2e54:	f0 e0       	ldi	r31, 0x00	; 0
    2e56:	e8 50       	subi	r30, 0x08	; 8
    2e58:	fd 4f       	sbci	r31, 0xFD	; 253
    2e5a:	90 83       	st	Z, r25
    2e5c:	80 91 c3 02 	lds	r24, 0x02C3
    2e60:	8f 5f       	subi	r24, 0xFF	; 255
    2e62:	80 93 c3 02 	sts	0x02C3, r24
    2e66:	80 91 c3 02 	lds	r24, 0x02C3
    2e6a:	80 31       	cpi	r24, 0x10	; 16
    2e6c:	88 f3       	brcs	.-30     	; 0x2e50 <update_Display+0x370>
		outstring[16]= '\0';
    2e6e:	10 92 08 03 	sts	0x0308, r1
		charptr = (char *)group[groupnum];
    2e72:	e0 91 ba 02 	lds	r30, 0x02BA
    2e76:	f0 91 bb 02 	lds	r31, 0x02BB
    2e7a:	ee 0f       	add	r30, r30
    2e7c:	ff 1f       	adc	r31, r31
    2e7e:	ec 5f       	subi	r30, 0xFC	; 252
    2e80:	fe 4f       	sbci	r31, 0xFE	; 254
    2e82:	a0 81       	ld	r26, Z
    2e84:	b1 81       	ldd	r27, Z+1	; 0x01
    2e86:	b0 93 05 07 	sts	0x0705, r27
    2e8a:	a0 93 04 07 	sts	0x0704, r26
		tptr = &outstring[0];
    2e8e:	88 ef       	ldi	r24, 0xF8	; 248
    2e90:	92 e0       	ldi	r25, 0x02	; 2
    2e92:	90 93 16 03 	sts	0x0316, r25
    2e96:	80 93 15 03 	sts	0x0315, r24
		while (*charptr) *tptr++ = *charptr++ ; /* COPY Group STRING TO OUTSTRING */
    2e9a:	fd 01       	movw	r30, r26
    2e9c:	8c 91       	ld	r24, X
    2e9e:	88 23       	and	r24, r24
    2ea0:	c9 f0       	breq	.+50     	; 0x2ed4 <update_Display+0x3f4>
    2ea2:	a0 91 15 03 	lds	r26, 0x0315
    2ea6:	b0 91 16 03 	lds	r27, 0x0316
    2eaa:	cd 01       	movw	r24, r26
    2eac:	01 96       	adiw	r24, 0x01	; 1
    2eae:	90 93 16 03 	sts	0x0316, r25
    2eb2:	80 93 15 03 	sts	0x0315, r24
    2eb6:	cf 01       	movw	r24, r30
    2eb8:	01 96       	adiw	r24, 0x01	; 1
    2eba:	90 93 05 07 	sts	0x0705, r25
    2ebe:	80 93 04 07 	sts	0x0704, r24
    2ec2:	80 81       	ld	r24, Z
    2ec4:	8c 93       	st	X, r24
    2ec6:	e0 91 04 07 	lds	r30, 0x0704
    2eca:	f0 91 05 07 	lds	r31, 0x0705
    2ece:	80 81       	ld	r24, Z
    2ed0:	81 11       	cpse	r24, r1
    2ed2:	e7 cf       	rjmp	.-50     	; 0x2ea2 <update_Display+0x3c2>
		lcd_puts(outstring);
    2ed4:	88 ef       	ldi	r24, 0xF8	; 248
    2ed6:	92 e0       	ldi	r25, 0x02	; 2
    2ed8:	0e 94 46 1c 	call	0x388c	; 0x388c <lcd_puts>
		output_low(PORTD, GreenLED);
    2edc:	5f 98       	cbi	0x0b, 7	; 11
		updateSpeed = 64;
    2ede:	80 e4       	ldi	r24, 0x40	; 64
    2ee0:	80 93 57 01 	sts	0x0157, r24
    2ee4:	ef c2       	rjmp	.+1502   	; 0x34c4 <update_Display+0x9e4>
	}
	else if(switch_state == 7)	//Blue
    2ee6:	80 91 5c 01 	lds	r24, 0x015C
    2eea:	87 30       	cpi	r24, 0x07	; 7
    2eec:	09 f0       	breq	.+2      	; 0x2ef0 <update_Display+0x410>
    2eee:	76 c0       	rjmp	.+236    	; 0x2fdc <update_Display+0x4fc>
	{
		CopyStringtoLCD(State7, 3, 0);
    2ef0:	40 e0       	ldi	r20, 0x00	; 0
    2ef2:	63 e0       	ldi	r22, 0x03	; 3
    2ef4:	82 e0       	ldi	r24, 0x02	; 2
    2ef6:	91 e2       	ldi	r25, 0x21	; 33
    2ef8:	0e 94 65 1c 	call	0x38ca	; 0x38ca <CopyStringtoLCD>
		printInt(11, 0 , i);
    2efc:	20 91 5a 01 	lds	r18, 0x015A
    2f00:	30 91 5b 01 	lds	r19, 0x015B
    2f04:	44 27       	eor	r20, r20
    2f06:	37 fd       	sbrc	r19, 7
    2f08:	40 95       	com	r20
    2f0a:	54 2f       	mov	r21, r20
    2f0c:	60 e0       	ldi	r22, 0x00	; 0
    2f0e:	8b e0       	ldi	r24, 0x0B	; 11
    2f10:	0e 94 9d 13 	call	0x273a	; 0x273a <printInt>
		LCDGotoXY(0,1);
    2f14:	61 e0       	ldi	r22, 0x01	; 1
    2f16:	80 e0       	ldi	r24, 0x00	; 0
    2f18:	0e 94 56 1c 	call	0x38ac	; 0x38ac <LCDGotoXY>
		for(z = 0; z < 16; z++) outstring[z] = ' ';
    2f1c:	10 92 c3 02 	sts	0x02C3, r1
    2f20:	80 91 c3 02 	lds	r24, 0x02C3
    2f24:	80 31       	cpi	r24, 0x10	; 16
    2f26:	80 f4       	brcc	.+32     	; 0x2f48 <update_Display+0x468>
    2f28:	90 e2       	ldi	r25, 0x20	; 32
    2f2a:	e0 91 c3 02 	lds	r30, 0x02C3
    2f2e:	f0 e0       	ldi	r31, 0x00	; 0
    2f30:	e8 50       	subi	r30, 0x08	; 8
    2f32:	fd 4f       	sbci	r31, 0xFD	; 253
    2f34:	90 83       	st	Z, r25
    2f36:	80 91 c3 02 	lds	r24, 0x02C3
    2f3a:	8f 5f       	subi	r24, 0xFF	; 255
    2f3c:	80 93 c3 02 	sts	0x02C3, r24
    2f40:	80 91 c3 02 	lds	r24, 0x02C3
    2f44:	80 31       	cpi	r24, 0x10	; 16
    2f46:	88 f3       	brcs	.-30     	; 0x2f2a <update_Display+0x44a>
		outstring[16]= '\0';
    2f48:	10 92 08 03 	sts	0x0308, r1
		charptr = (char *)ammotype[groupnum][ammonum];
    2f4c:	80 91 ba 02 	lds	r24, 0x02BA
    2f50:	90 91 bb 02 	lds	r25, 0x02BB
    2f54:	fc 01       	movw	r30, r24
    2f56:	ee 0f       	add	r30, r30
    2f58:	ff 1f       	adc	r31, r31
    2f5a:	8e 0f       	add	r24, r30
    2f5c:	9f 1f       	adc	r25, r31
    2f5e:	fc 01       	movw	r30, r24
    2f60:	ee 0f       	add	r30, r30
    2f62:	ff 1f       	adc	r31, r31
    2f64:	20 91 be 02 	lds	r18, 0x02BE
    2f68:	30 91 bf 02 	lds	r19, 0x02BF
    2f6c:	e2 0f       	add	r30, r18
    2f6e:	f3 1f       	adc	r31, r19
    2f70:	ee 0f       	add	r30, r30
    2f72:	ff 1f       	adc	r31, r31
    2f74:	ee 5e       	subi	r30, 0xEE	; 238
    2f76:	fe 4f       	sbci	r31, 0xFE	; 254
    2f78:	a0 81       	ld	r26, Z
    2f7a:	b1 81       	ldd	r27, Z+1	; 0x01
    2f7c:	b0 93 05 07 	sts	0x0705, r27
    2f80:	a0 93 04 07 	sts	0x0704, r26
		tptr = &outstring[0];
    2f84:	88 ef       	ldi	r24, 0xF8	; 248
    2f86:	92 e0       	ldi	r25, 0x02	; 2
    2f88:	90 93 16 03 	sts	0x0316, r25
    2f8c:	80 93 15 03 	sts	0x0315, r24
		while (*charptr) *tptr++ = *charptr++ ; /* COPY AMMO TYPE STRING TO OUTSTRING */
    2f90:	fd 01       	movw	r30, r26
    2f92:	8c 91       	ld	r24, X
    2f94:	88 23       	and	r24, r24
    2f96:	c9 f0       	breq	.+50     	; 0x2fca <update_Display+0x4ea>
    2f98:	a0 91 15 03 	lds	r26, 0x0315
    2f9c:	b0 91 16 03 	lds	r27, 0x0316
    2fa0:	cd 01       	movw	r24, r26
    2fa2:	01 96       	adiw	r24, 0x01	; 1
    2fa4:	90 93 16 03 	sts	0x0316, r25
    2fa8:	80 93 15 03 	sts	0x0315, r24
    2fac:	cf 01       	movw	r24, r30
    2fae:	01 96       	adiw	r24, 0x01	; 1
    2fb0:	90 93 05 07 	sts	0x0705, r25
    2fb4:	80 93 04 07 	sts	0x0704, r24
    2fb8:	80 81       	ld	r24, Z
    2fba:	8c 93       	st	X, r24
    2fbc:	e0 91 04 07 	lds	r30, 0x0704
    2fc0:	f0 91 05 07 	lds	r31, 0x0705
    2fc4:	80 81       	ld	r24, Z
    2fc6:	81 11       	cpse	r24, r1
    2fc8:	e7 cf       	rjmp	.-50     	; 0x2f98 <update_Display+0x4b8>
		lcd_puts(outstring);
    2fca:	88 ef       	ldi	r24, 0xF8	; 248
    2fcc:	92 e0       	ldi	r25, 0x02	; 2
    2fce:	0e 94 46 1c 	call	0x388c	; 0x388c <lcd_puts>
		output_high(PORTD, GreenLED);
    2fd2:	5f 9a       	sbi	0x0b, 7	; 11
		updateSpeed = 8;
    2fd4:	88 e0       	ldi	r24, 0x08	; 8
    2fd6:	80 93 57 01 	sts	0x0157, r24
    2fda:	74 c2       	rjmp	.+1256   	; 0x34c4 <update_Display+0x9e4>
	}
	else if(switch_state == 8)	//Blue
    2fdc:	80 91 5c 01 	lds	r24, 0x015C
    2fe0:	88 30       	cpi	r24, 0x08	; 8
    2fe2:	09 f0       	breq	.+2      	; 0x2fe6 <update_Display+0x506>
    2fe4:	34 c2       	rjmp	.+1128   	; 0x344e <update_Display+0x96e>
		//angle = (int)accelM[1];
		//angle = (int)accelM[0];
		//angle = 1297;
		//sscanf(elev,"%d",&angle);
		//sprintf(elev,"%4d",angle);
		ostr2[16]= '\0';
    2fe6:	10 92 f7 02 	sts	0x02F7, r1
		sprintf(elev,"%5d",(int)accelM[0]);
    2fea:	60 91 16 07 	lds	r22, 0x0716
    2fee:	70 91 17 07 	lds	r23, 0x0717
    2ff2:	80 91 18 07 	lds	r24, 0x0718
    2ff6:	90 91 19 07 	lds	r25, 0x0719
    2ffa:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__fixsfsi>
    2ffe:	7f 93       	push	r23
    3000:	6f 93       	push	r22
    3002:	83 e6       	ldi	r24, 0x63	; 99
    3004:	91 e0       	ldi	r25, 0x01	; 1
    3006:	9f 93       	push	r25
    3008:	8f 93       	push	r24
    300a:	cc e0       	ldi	r28, 0x0C	; 12
    300c:	d3 e0       	ldi	r29, 0x03	; 3
    300e:	df 93       	push	r29
    3010:	cf 93       	push	r28
    3012:	0e 94 11 20 	call	0x4022	; 0x4022 <sprintf>
		fptr = elev;
    3016:	d0 93 d0 02 	sts	0x02D0, r29
    301a:	c0 93 cf 02 	sts	0x02CF, r28
		tptr = &ostr2[0];
    301e:	87 ee       	ldi	r24, 0xE7	; 231
    3020:	92 e0       	ldi	r25, 0x02	; 2
    3022:	90 93 16 03 	sts	0x0316, r25
    3026:	80 93 15 03 	sts	0x0315, r24
		for(z = 0; z < 5 ; z++) *tptr++ = *fptr++;
    302a:	10 92 c3 02 	sts	0x02C3, r1
    302e:	80 91 c3 02 	lds	r24, 0x02C3
    3032:	0f 90       	pop	r0
    3034:	0f 90       	pop	r0
    3036:	0f 90       	pop	r0
    3038:	0f 90       	pop	r0
    303a:	0f 90       	pop	r0
    303c:	0f 90       	pop	r0
    303e:	85 30       	cpi	r24, 0x05	; 5
    3040:	f8 f4       	brcc	.+62     	; 0x3080 <update_Display+0x5a0>
    3042:	e0 91 15 03 	lds	r30, 0x0315
    3046:	f0 91 16 03 	lds	r31, 0x0316
    304a:	cf 01       	movw	r24, r30
    304c:	01 96       	adiw	r24, 0x01	; 1
    304e:	90 93 16 03 	sts	0x0316, r25
    3052:	80 93 15 03 	sts	0x0315, r24
    3056:	a0 91 cf 02 	lds	r26, 0x02CF
    305a:	b0 91 d0 02 	lds	r27, 0x02D0
    305e:	cd 01       	movw	r24, r26
    3060:	01 96       	adiw	r24, 0x01	; 1
    3062:	90 93 d0 02 	sts	0x02D0, r25
    3066:	80 93 cf 02 	sts	0x02CF, r24
    306a:	8c 91       	ld	r24, X
    306c:	80 83       	st	Z, r24
    306e:	80 91 c3 02 	lds	r24, 0x02C3
    3072:	8f 5f       	subi	r24, 0xFF	; 255
    3074:	80 93 c3 02 	sts	0x02C3, r24
    3078:	80 91 c3 02 	lds	r24, 0x02C3
    307c:	85 30       	cpi	r24, 0x05	; 5
    307e:	08 f3       	brcs	.-62     	; 0x3042 <update_Display+0x562>
		//LCDGotoXY(10,1);
		 //pgm_read_ptr(&(ammotype[groupnum][ammonum]));
		range = trans((int)accelM[0],(char *)ammotype[groupnum][ammonum],chargenum);
    3080:	00 91 bc 02 	lds	r16, 0x02BC
    3084:	10 91 bd 02 	lds	r17, 0x02BD
    3088:	80 91 ba 02 	lds	r24, 0x02BA
    308c:	90 91 bb 02 	lds	r25, 0x02BB
    3090:	fc 01       	movw	r30, r24
    3092:	ee 0f       	add	r30, r30
    3094:	ff 1f       	adc	r31, r31
    3096:	8e 0f       	add	r24, r30
    3098:	9f 1f       	adc	r25, r31
    309a:	fc 01       	movw	r30, r24
    309c:	ee 0f       	add	r30, r30
    309e:	ff 1f       	adc	r31, r31
    30a0:	20 91 be 02 	lds	r18, 0x02BE
    30a4:	30 91 bf 02 	lds	r19, 0x02BF
    30a8:	e2 0f       	add	r30, r18
    30aa:	f3 1f       	adc	r31, r19
    30ac:	ee 0f       	add	r30, r30
    30ae:	ff 1f       	adc	r31, r31
    30b0:	ee 5e       	subi	r30, 0xEE	; 238
    30b2:	fe 4f       	sbci	r31, 0xFE	; 254
    30b4:	c0 81       	ld	r28, Z
    30b6:	d1 81       	ldd	r29, Z+1	; 0x01
    30b8:	60 91 16 07 	lds	r22, 0x0716
    30bc:	70 91 17 07 	lds	r23, 0x0717
    30c0:	80 91 18 07 	lds	r24, 0x0718
    30c4:	90 91 19 07 	lds	r25, 0x0719
    30c8:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__fixsfsi>
    30cc:	dc 01       	movw	r26, r24
    30ce:	cb 01       	movw	r24, r22
    30d0:	a8 01       	movw	r20, r16
    30d2:	be 01       	movw	r22, r28
    30d4:	0e 94 77 14 	call	0x28ee	; 0x28ee <trans>
    30d8:	90 93 c2 02 	sts	0x02C2, r25
    30dc:	80 93 c1 02 	sts	0x02C1, r24
		//range = trans((int)accelM[0],(char*)pgm_read_word(ammotype[groupnum][ammonum]),chargenum);
		chargenum = gblcharge;	/* change charge if ammotype only supports charge 1 */
    30e0:	80 91 22 07 	lds	r24, 0x0722
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	90 93 bd 02 	sts	0x02BD, r25
    30ea:	80 93 bc 02 	sts	0x02BC, r24
		/* check for too high or too low returns first */
		//	if(range == -1) for(i = 0; i < 16; i++) outstring[i] = toohigh[i];

		/*** changed 24 March 2011...here checking also for past vertical the == '-' part **/
		if(range == -1)
    30ee:	80 91 c1 02 	lds	r24, 0x02C1
    30f2:	90 91 c2 02 	lds	r25, 0x02C2
    30f6:	01 96       	adiw	r24, 0x01	; 1
    30f8:	41 f5       	brne	.+80     	; 0x314a <update_Display+0x66a>
		{
			for(z = 0; z < 16; z++)
    30fa:	10 92 c3 02 	sts	0x02C3, r1
    30fe:	80 91 c3 02 	lds	r24, 0x02C3
    3102:	80 31       	cpi	r24, 0x10	; 16
    3104:	c8 f4       	brcc	.+50     	; 0x3138 <update_Display+0x658>
			{
				outstring[z] = toohigh[z];
    3106:	80 91 4e 01 	lds	r24, 0x014E
    310a:	90 91 4f 01 	lds	r25, 0x014F
    310e:	e0 91 c3 02 	lds	r30, 0x02C3
    3112:	20 91 c3 02 	lds	r18, 0x02C3
    3116:	dc 01       	movw	r26, r24
    3118:	a2 0f       	add	r26, r18
    311a:	b1 1d       	adc	r27, r1
    311c:	2c 91       	ld	r18, X
    311e:	f0 e0       	ldi	r31, 0x00	; 0
    3120:	e8 50       	subi	r30, 0x08	; 8
    3122:	fd 4f       	sbci	r31, 0xFD	; 253
    3124:	20 83       	st	Z, r18
		//	if(range == -1) for(i = 0; i < 16; i++) outstring[i] = toohigh[i];

		/*** changed 24 March 2011...here checking also for past vertical the == '-' part **/
		if(range == -1)
		{
			for(z = 0; z < 16; z++)
    3126:	20 91 c3 02 	lds	r18, 0x02C3
    312a:	2f 5f       	subi	r18, 0xFF	; 255
    312c:	20 93 c3 02 	sts	0x02C3, r18
    3130:	20 91 c3 02 	lds	r18, 0x02C3
    3134:	20 31       	cpi	r18, 0x10	; 16
    3136:	58 f3       	brcs	.-42     	; 0x310e <update_Display+0x62e>
			{
				outstring[z] = toohigh[z];
			} 
			LCDGotoXY(0,0);
    3138:	60 e0       	ldi	r22, 0x00	; 0
    313a:	80 e0       	ldi	r24, 0x00	; 0
    313c:	0e 94 56 1c 	call	0x38ac	; 0x38ac <LCDGotoXY>
			lcd_puts(outstring);
    3140:	88 ef       	ldi	r24, 0xF8	; 248
    3142:	92 e0       	ldi	r25, 0x02	; 2
    3144:	0e 94 46 1c 	call	0x388c	; 0x388c <lcd_puts>
    3148:	d5 c0       	rjmp	.+426    	; 0x32f4 <update_Display+0x814>
		}
		else if(range == -2)
    314a:	80 91 c1 02 	lds	r24, 0x02C1
    314e:	90 91 c2 02 	lds	r25, 0x02C2
    3152:	02 96       	adiw	r24, 0x02	; 2
    3154:	41 f5       	brne	.+80     	; 0x31a6 <update_Display+0x6c6>
		{
			 for(z = 0; z < 16; z++) 
    3156:	10 92 c3 02 	sts	0x02C3, r1
    315a:	80 91 c3 02 	lds	r24, 0x02C3
    315e:	80 31       	cpi	r24, 0x10	; 16
    3160:	c8 f4       	brcc	.+50     	; 0x3194 <update_Display+0x6b4>
			 {
				outstring[z] = toolow[z];
    3162:	80 91 50 01 	lds	r24, 0x0150
    3166:	90 91 51 01 	lds	r25, 0x0151
    316a:	e0 91 c3 02 	lds	r30, 0x02C3
    316e:	20 91 c3 02 	lds	r18, 0x02C3
    3172:	dc 01       	movw	r26, r24
    3174:	a2 0f       	add	r26, r18
    3176:	b1 1d       	adc	r27, r1
    3178:	2c 91       	ld	r18, X
    317a:	f0 e0       	ldi	r31, 0x00	; 0
    317c:	e8 50       	subi	r30, 0x08	; 8
    317e:	fd 4f       	sbci	r31, 0xFD	; 253
    3180:	20 83       	st	Z, r18
			LCDGotoXY(0,0);
			lcd_puts(outstring);
		}
		else if(range == -2)
		{
			 for(z = 0; z < 16; z++) 
    3182:	20 91 c3 02 	lds	r18, 0x02C3
    3186:	2f 5f       	subi	r18, 0xFF	; 255
    3188:	20 93 c3 02 	sts	0x02C3, r18
    318c:	20 91 c3 02 	lds	r18, 0x02C3
    3190:	20 31       	cpi	r18, 0x10	; 16
    3192:	58 f3       	brcs	.-42     	; 0x316a <update_Display+0x68a>
			 {
				outstring[z] = toolow[z];
			 }
			 LCDGotoXY(0,0);
    3194:	60 e0       	ldi	r22, 0x00	; 0
    3196:	80 e0       	ldi	r24, 0x00	; 0
    3198:	0e 94 56 1c 	call	0x38ac	; 0x38ac <LCDGotoXY>
			 lcd_puts(outstring);
    319c:	88 ef       	ldi	r24, 0xF8	; 248
    319e:	92 e0       	ldi	r25, 0x02	; 2
    31a0:	0e 94 46 1c 	call	0x388c	; 0x388c <lcd_puts>
    31a4:	a7 c0       	rjmp	.+334    	; 0x32f4 <update_Display+0x814>
		}
		else /* is in range */ 
		{	
			sprintf(rangestring,"%4d",range);
    31a6:	80 91 c1 02 	lds	r24, 0x02C1
    31aa:	90 91 c2 02 	lds	r25, 0x02C2
    31ae:	9f 93       	push	r25
    31b0:	8f 93       	push	r24
    31b2:	87 e6       	ldi	r24, 0x67	; 103
    31b4:	91 e0       	ldi	r25, 0x01	; 1
    31b6:	9f 93       	push	r25
    31b8:	8f 93       	push	r24
    31ba:	82 e5       	ldi	r24, 0x52	; 82
    31bc:	91 e0       	ldi	r25, 0x01	; 1
    31be:	9f 93       	push	r25
    31c0:	8f 93       	push	r24
    31c2:	0e 94 11 20 	call	0x4022	; 0x4022 <sprintf>
				/* convert leading zeros to leading blanks */
				z = 0;
    31c6:	10 92 c3 02 	sts	0x02C3, r1
				while(rangestring[z] == '\0') {rangestring[z] = ' ' ; z++;}
    31ca:	e0 91 c3 02 	lds	r30, 0x02C3
    31ce:	f0 e0       	ldi	r31, 0x00	; 0
    31d0:	ee 5a       	subi	r30, 0xAE	; 174
    31d2:	fe 4f       	sbci	r31, 0xFE	; 254
    31d4:	0f 90       	pop	r0
    31d6:	0f 90       	pop	r0
    31d8:	0f 90       	pop	r0
    31da:	0f 90       	pop	r0
    31dc:	0f 90       	pop	r0
    31de:	0f 90       	pop	r0
    31e0:	80 81       	ld	r24, Z
    31e2:	81 11       	cpse	r24, r1
    31e4:	14 c0       	rjmp	.+40     	; 0x320e <update_Display+0x72e>
    31e6:	90 e2       	ldi	r25, 0x20	; 32
    31e8:	e0 91 c3 02 	lds	r30, 0x02C3
    31ec:	f0 e0       	ldi	r31, 0x00	; 0
    31ee:	ee 5a       	subi	r30, 0xAE	; 174
    31f0:	fe 4f       	sbci	r31, 0xFE	; 254
    31f2:	90 83       	st	Z, r25
    31f4:	80 91 c3 02 	lds	r24, 0x02C3
    31f8:	8f 5f       	subi	r24, 0xFF	; 255
    31fa:	80 93 c3 02 	sts	0x02C3, r24
    31fe:	e0 91 c3 02 	lds	r30, 0x02C3
    3202:	f0 e0       	ldi	r31, 0x00	; 0
    3204:	ee 5a       	subi	r30, 0xAE	; 174
    3206:	fe 4f       	sbci	r31, 0xFE	; 254
    3208:	80 81       	ld	r24, Z
    320a:	88 23       	and	r24, r24
    320c:	69 f3       	breq	.-38     	; 0x31e8 <update_Display+0x708>
				if(fztime) sprintf(fuzestring,"%3d",fztime);
    320e:	80 91 01 07 	lds	r24, 0x0701
    3212:	88 23       	and	r24, r24
    3214:	a1 f0       	breq	.+40     	; 0x323e <update_Display+0x75e>
    3216:	80 91 01 07 	lds	r24, 0x0701
    321a:	1f 92       	push	r1
    321c:	8f 93       	push	r24
    321e:	8b e6       	ldi	r24, 0x6B	; 107
    3220:	91 e0       	ldi	r25, 0x01	; 1
    3222:	9f 93       	push	r25
    3224:	8f 93       	push	r24
    3226:	82 e1       	ldi	r24, 0x12	; 18
    3228:	97 e0       	ldi	r25, 0x07	; 7
    322a:	9f 93       	push	r25
    322c:	8f 93       	push	r24
    322e:	0e 94 11 20 	call	0x4022	; 0x4022 <sprintf>
    3232:	0f 90       	pop	r0
    3234:	0f 90       	pop	r0
    3236:	0f 90       	pop	r0
    3238:	0f 90       	pop	r0
    323a:	0f 90       	pop	r0
    323c:	0f 90       	pop	r0
				/* now assemble the output buffer */
				for(z = 0; z < 16; z++) outstring[z] = ' ' ;
    323e:	10 92 c3 02 	sts	0x02C3, r1
    3242:	80 91 c3 02 	lds	r24, 0x02C3
    3246:	80 31       	cpi	r24, 0x10	; 16
    3248:	80 f4       	brcc	.+32     	; 0x326a <update_Display+0x78a>
    324a:	90 e2       	ldi	r25, 0x20	; 32
    324c:	e0 91 c3 02 	lds	r30, 0x02C3
    3250:	f0 e0       	ldi	r31, 0x00	; 0
    3252:	e8 50       	subi	r30, 0x08	; 8
    3254:	fd 4f       	sbci	r31, 0xFD	; 253
    3256:	90 83       	st	Z, r25
    3258:	80 91 c3 02 	lds	r24, 0x02C3
    325c:	8f 5f       	subi	r24, 0xFF	; 255
    325e:	80 93 c3 02 	sts	0x02C3, r24
    3262:	80 91 c3 02 	lds	r24, 0x02C3
    3266:	80 31       	cpi	r24, 0x10	; 16
    3268:	88 f3       	brcs	.-30     	; 0x324c <update_Display+0x76c>
				for(z = 0; z < 4; z++) outstring[z + 5] = rangestring[z];
    326a:	10 92 c3 02 	sts	0x02C3, r1
    326e:	80 91 c3 02 	lds	r24, 0x02C3
    3272:	84 30       	cpi	r24, 0x04	; 4
    3274:	a8 f4       	brcc	.+42     	; 0x32a0 <update_Display+0x7c0>
    3276:	e0 91 c3 02 	lds	r30, 0x02C3
    327a:	a0 91 c3 02 	lds	r26, 0x02C3
    327e:	f0 e0       	ldi	r31, 0x00	; 0
    3280:	e8 50       	subi	r30, 0x08	; 8
    3282:	fd 4f       	sbci	r31, 0xFD	; 253
    3284:	b0 e0       	ldi	r27, 0x00	; 0
    3286:	ae 5a       	subi	r26, 0xAE	; 174
    3288:	be 4f       	sbci	r27, 0xFE	; 254
    328a:	8c 91       	ld	r24, X
    328c:	85 83       	std	Z+5, r24	; 0x05
    328e:	80 91 c3 02 	lds	r24, 0x02C3
    3292:	8f 5f       	subi	r24, 0xFF	; 255
    3294:	80 93 c3 02 	sts	0x02C3, r24
    3298:	80 91 c3 02 	lds	r24, 0x02C3
    329c:	84 30       	cpi	r24, 0x04	; 4
    329e:	58 f3       	brcs	.-42     	; 0x3276 <update_Display+0x796>
				outstring[10] = 'm';	/* unit is meters */
    32a0:	8d e6       	ldi	r24, 0x6D	; 109
    32a2:	80 93 02 03 	sts	0x0302, r24
				//if(fztime)
				if(!strcmp(group[groupnum],"Illum"))
    32a6:	e0 91 ba 02 	lds	r30, 0x02BA
    32aa:	f0 91 bb 02 	lds	r31, 0x02BB
    32ae:	ee 0f       	add	r30, r30
    32b0:	ff 1f       	adc	r31, r31
    32b2:	ec 5f       	subi	r30, 0xFC	; 252
    32b4:	fe 4f       	sbci	r31, 0xFE	; 254
    32b6:	6f e6       	ldi	r22, 0x6F	; 111
    32b8:	71 e0       	ldi	r23, 0x01	; 1
    32ba:	80 81       	ld	r24, Z
    32bc:	91 81       	ldd	r25, Z+1	; 0x01
    32be:	0e 94 08 20 	call	0x4010	; 0x4010 <strcmp>
    32c2:	89 2b       	or	r24, r25
    32c4:	79 f4       	brne	.+30     	; 0x32e4 <update_Display+0x804>
				{
					outstring[12] = fuzestring[0];
    32c6:	80 91 12 07 	lds	r24, 0x0712
    32ca:	80 93 04 03 	sts	0x0304, r24
					outstring[13] = fuzestring[1];
    32ce:	80 91 13 07 	lds	r24, 0x0713
    32d2:	80 93 05 03 	sts	0x0305, r24
					outstring[14] = '.';
    32d6:	8e e2       	ldi	r24, 0x2E	; 46
    32d8:	80 93 06 03 	sts	0x0306, r24
					outstring[15] = fuzestring[2];
    32dc:	80 91 14 07 	lds	r24, 0x0714
    32e0:	80 93 07 03 	sts	0x0307, r24
				}
				LCDGotoXY(0,0);
    32e4:	60 e0       	ldi	r22, 0x00	; 0
    32e6:	80 e0       	ldi	r24, 0x00	; 0
    32e8:	0e 94 56 1c 	call	0x38ac	; 0x38ac <LCDGotoXY>
				lcd_puts(outstring);
    32ec:	88 ef       	ldi	r24, 0xF8	; 248
    32ee:	92 e0       	ldi	r25, 0x02	; 2
    32f0:	0e 94 46 1c 	call	0x388c	; 0x388c <lcd_puts>
				}
				for(z = 0; z < 16; z++) outstring[z] = ' ' ; /* 17th character already null */
    32f4:	10 92 c3 02 	sts	0x02C3, r1
    32f8:	80 91 c3 02 	lds	r24, 0x02C3
    32fc:	80 31       	cpi	r24, 0x10	; 16
    32fe:	80 f4       	brcc	.+32     	; 0x3320 <update_Display+0x840>
    3300:	90 e2       	ldi	r25, 0x20	; 32
    3302:	e0 91 c3 02 	lds	r30, 0x02C3
    3306:	f0 e0       	ldi	r31, 0x00	; 0
    3308:	e8 50       	subi	r30, 0x08	; 8
    330a:	fd 4f       	sbci	r31, 0xFD	; 253
    330c:	90 83       	st	Z, r25
    330e:	80 91 c3 02 	lds	r24, 0x02C3
    3312:	8f 5f       	subi	r24, 0xFF	; 255
    3314:	80 93 c3 02 	sts	0x02C3, r24
    3318:	80 91 c3 02 	lds	r24, 0x02C3
    331c:	80 31       	cpi	r24, 0x10	; 16
    331e:	88 f3       	brcs	.-30     	; 0x3302 <update_Display+0x822>
				outstring[16]= '\0';
    3320:	10 92 08 03 	sts	0x0308, r1
				/* overwrite start of outstring with ammo type and charge */
				fptr = (char *)ammotype[groupnum][ammonum];
    3324:	80 91 ba 02 	lds	r24, 0x02BA
    3328:	90 91 bb 02 	lds	r25, 0x02BB
    332c:	fc 01       	movw	r30, r24
    332e:	ee 0f       	add	r30, r30
    3330:	ff 1f       	adc	r31, r31
    3332:	8e 0f       	add	r24, r30
    3334:	9f 1f       	adc	r25, r31
    3336:	fc 01       	movw	r30, r24
    3338:	ee 0f       	add	r30, r30
    333a:	ff 1f       	adc	r31, r31
    333c:	20 91 be 02 	lds	r18, 0x02BE
    3340:	30 91 bf 02 	lds	r19, 0x02BF
    3344:	e2 0f       	add	r30, r18
    3346:	f3 1f       	adc	r31, r19
    3348:	ee 0f       	add	r30, r30
    334a:	ff 1f       	adc	r31, r31
    334c:	ee 5e       	subi	r30, 0xEE	; 238
    334e:	fe 4f       	sbci	r31, 0xFE	; 254
    3350:	a0 81       	ld	r26, Z
    3352:	b1 81       	ldd	r27, Z+1	; 0x01
    3354:	b0 93 d0 02 	sts	0x02D0, r27
    3358:	a0 93 cf 02 	sts	0x02CF, r26
				tptr = outstring;
    335c:	88 ef       	ldi	r24, 0xF8	; 248
    335e:	92 e0       	ldi	r25, 0x02	; 2
    3360:	90 93 16 03 	sts	0x0316, r25
    3364:	80 93 15 03 	sts	0x0315, r24
				while(*fptr)(*tptr++ = *fptr++);
    3368:	fd 01       	movw	r30, r26
    336a:	8c 91       	ld	r24, X
    336c:	88 23       	and	r24, r24
    336e:	c9 f0       	breq	.+50     	; 0x33a2 <update_Display+0x8c2>
    3370:	a0 91 15 03 	lds	r26, 0x0315
    3374:	b0 91 16 03 	lds	r27, 0x0316
    3378:	cd 01       	movw	r24, r26
    337a:	01 96       	adiw	r24, 0x01	; 1
    337c:	90 93 16 03 	sts	0x0316, r25
    3380:	80 93 15 03 	sts	0x0315, r24
    3384:	cf 01       	movw	r24, r30
    3386:	01 96       	adiw	r24, 0x01	; 1
    3388:	90 93 d0 02 	sts	0x02D0, r25
    338c:	80 93 cf 02 	sts	0x02CF, r24
    3390:	80 81       	ld	r24, Z
    3392:	8c 93       	st	X, r24
    3394:	e0 91 cf 02 	lds	r30, 0x02CF
    3398:	f0 91 d0 02 	lds	r31, 0x02D0
    339c:	80 81       	ld	r24, Z
    339e:	81 11       	cpse	r24, r1
    33a0:	e7 cf       	rjmp	.-50     	; 0x3370 <update_Display+0x890>
				fptr = (char *)charge[chargenum];
    33a2:	e0 91 bc 02 	lds	r30, 0x02BC
    33a6:	f0 91 bd 02 	lds	r31, 0x02BD
    33aa:	ee 0f       	add	r30, r30
    33ac:	ff 1f       	adc	r31, r31
    33ae:	e2 5f       	subi	r30, 0xF2	; 242
    33b0:	fe 4f       	sbci	r31, 0xFE	; 254
    33b2:	a0 81       	ld	r26, Z
    33b4:	b1 81       	ldd	r27, Z+1	; 0x01
    33b6:	b0 93 d0 02 	sts	0x02D0, r27
    33ba:	a0 93 cf 02 	sts	0x02CF, r26
				tptr = &outstring[7];
    33be:	8f ef       	ldi	r24, 0xFF	; 255
    33c0:	92 e0       	ldi	r25, 0x02	; 2
    33c2:	90 93 16 03 	sts	0x0316, r25
    33c6:	80 93 15 03 	sts	0x0315, r24
				while (*fptr)(*tptr++ = *fptr++);
    33ca:	fd 01       	movw	r30, r26
    33cc:	8c 91       	ld	r24, X
    33ce:	88 23       	and	r24, r24
    33d0:	c9 f0       	breq	.+50     	; 0x3404 <update_Display+0x924>
    33d2:	a0 91 15 03 	lds	r26, 0x0315
    33d6:	b0 91 16 03 	lds	r27, 0x0316
    33da:	cd 01       	movw	r24, r26
    33dc:	01 96       	adiw	r24, 0x01	; 1
    33de:	90 93 16 03 	sts	0x0316, r25
    33e2:	80 93 15 03 	sts	0x0315, r24
    33e6:	cf 01       	movw	r24, r30
    33e8:	01 96       	adiw	r24, 0x01	; 1
    33ea:	90 93 d0 02 	sts	0x02D0, r25
    33ee:	80 93 cf 02 	sts	0x02CF, r24
    33f2:	80 81       	ld	r24, Z
    33f4:	8c 93       	st	X, r24
    33f6:	e0 91 cf 02 	lds	r30, 0x02CF
    33fa:	f0 91 d0 02 	lds	r31, 0x02D0
    33fe:	80 81       	ld	r24, Z
    3400:	81 11       	cpse	r24, r1
    3402:	e7 cf       	rjmp	.-50     	; 0x33d2 <update_Display+0x8f2>
				//for(z = 9; z < 16; z++) 
				outstring[9] = ostr2[0];
    3404:	80 91 e7 02 	lds	r24, 0x02E7
    3408:	80 93 01 03 	sts	0x0301, r24
				outstring[10] = ostr2[1];
    340c:	80 91 e8 02 	lds	r24, 0x02E8
    3410:	80 93 02 03 	sts	0x0302, r24
				outstring[11] = ostr2[2];
    3414:	80 91 e9 02 	lds	r24, 0x02E9
    3418:	80 93 03 03 	sts	0x0303, r24
				outstring[12] = ostr2[3];
    341c:	80 91 ea 02 	lds	r24, 0x02EA
    3420:	80 93 04 03 	sts	0x0304, r24
				outstring[13] = ostr2[4];
    3424:	80 91 eb 02 	lds	r24, 0x02EB
    3428:	80 93 05 03 	sts	0x0305, r24
				outstring[14] = ostr2[5];
    342c:	80 91 ec 02 	lds	r24, 0x02EC
    3430:	80 93 06 03 	sts	0x0306, r24
				outstring[15] = ostr2[6];
    3434:	80 91 ed 02 	lds	r24, 0x02ED
    3438:	80 93 07 03 	sts	0x0307, r24
				LCDGotoXY(0,1);
    343c:	61 e0       	ldi	r22, 0x01	; 1
    343e:	80 e0       	ldi	r24, 0x00	; 0
    3440:	0e 94 56 1c 	call	0x38ac	; 0x38ac <LCDGotoXY>
				lcd_puts(outstring);
    3444:	88 ef       	ldi	r24, 0xF8	; 248
    3446:	92 e0       	ldi	r25, 0x02	; 2
    3448:	0e 94 46 1c 	call	0x388c	; 0x388c <lcd_puts>
    344c:	3b c0       	rjmp	.+118    	; 0x34c4 <update_Display+0x9e4>
				//printAccelMil(11, 1 , (int)accelM[0]);	
		
	}
	else
	{
		CopyStringtoLCD(State0, 3, 0);
    344e:	40 e0       	ldi	r20, 0x00	; 0
    3450:	63 e0       	ldi	r22, 0x03	; 3
    3452:	8a e3       	ldi	r24, 0x3A	; 58
    3454:	91 e2       	ldi	r25, 0x21	; 33
    3456:	0e 94 65 1c 	call	0x38ca	; 0x38ca <CopyStringtoLCD>
		printInt(11, 0 , i);
    345a:	20 91 5a 01 	lds	r18, 0x015A
    345e:	30 91 5b 01 	lds	r19, 0x015B
    3462:	44 27       	eor	r20, r20
    3464:	37 fd       	sbrc	r19, 7
    3466:	40 95       	com	r20
    3468:	54 2f       	mov	r21, r20
    346a:	60 e0       	ldi	r22, 0x00	; 0
    346c:	8b e0       	ldi	r24, 0x0B	; 11
    346e:	0e 94 9d 13 	call	0x273a	; 0x273a <printInt>
		printInt(5, 1 , system_Clock);
    3472:	20 91 c8 02 	lds	r18, 0x02C8
    3476:	30 91 c9 02 	lds	r19, 0x02C9
    347a:	40 91 ca 02 	lds	r20, 0x02CA
    347e:	50 91 cb 02 	lds	r21, 0x02CB
    3482:	61 e0       	ldi	r22, 0x01	; 1
    3484:	85 e0       	ldi	r24, 0x05	; 5
    3486:	0e 94 9d 13 	call	0x273a	; 0x273a <printInt>
		output_low(PORTD, GreenLED);
    348a:	5f 98       	cbi	0x0b, 7	; 11
		updateSpeed = 32;
    348c:	80 e2       	ldi	r24, 0x20	; 32
    348e:	80 93 57 01 	sts	0x0157, r24
		switch_state = 0; // set switch state to 0 if the state is above 9
    3492:	10 92 5c 01 	sts	0x015C, r1
    3496:	16 c0       	rjmp	.+44     	; 0x34c4 <update_Display+0x9e4>
		//printInt(5, 1 , system_Clock);
		sprintf(rangestring,"%5d",(int)accelM[0]);
		/* convert leading zeros to leading blanks */
		index = 0;
		while(rangestring[index] == '\0') {rangestring[index] = ' ' ; index++;}
		LCDGotoXY(0,1);
    3498:	61 e0       	ldi	r22, 0x01	; 1
    349a:	80 e0       	ldi	r24, 0x00	; 0
    349c:	0e 94 56 1c 	call	0x38ac	; 0x38ac <LCDGotoXY>
		LCDsendChar('X');
    34a0:	88 e5       	ldi	r24, 0x58	; 88
    34a2:	0e 94 20 1c 	call	0x3840	; 0x3840 <LCDsendChar>
		for(index = 0; index < 5; index++)
    34a6:	10 92 c0 02 	sts	0x02C0, r1
		printInt(11, 0 , i);
		//printInt(5, 1 , system_Clock);
		sprintf(rangestring,"%5d",(int)accelM[0]);
		/* convert leading zeros to leading blanks */
		index = 0;
		while(rangestring[index] == '\0') {rangestring[index] = ' ' ; index++;}
    34aa:	e0 e0       	ldi	r30, 0x00	; 0
    34ac:	4f cc       	rjmp	.-1890   	; 0x2d4c <update_Display+0x26c>
		}
		sprintf(rangestring,"%5d",(int)accelM[1]);
		/* convert leading zeros to leading blanks */
		index = 0;
		while(rangestring[index] == '\0') {rangestring[index] = ' ' ; index++;}
		LCDGotoXY(9,1);
    34ae:	61 e0       	ldi	r22, 0x01	; 1
    34b0:	89 e0       	ldi	r24, 0x09	; 9
    34b2:	0e 94 56 1c 	call	0x38ac	; 0x38ac <LCDGotoXY>
		LCDsendChar('Y');
    34b6:	89 e5       	ldi	r24, 0x59	; 89
    34b8:	0e 94 20 1c 	call	0x3840	; 0x3840 <LCDsendChar>
		for(index = 0; index < 5; index++)
    34bc:	10 92 c0 02 	sts	0x02C0, r1
			LCDsendChar(rangestring[index]);
		}
		sprintf(rangestring,"%5d",(int)accelM[1]);
		/* convert leading zeros to leading blanks */
		index = 0;
		while(rangestring[index] == '\0') {rangestring[index] = ' ' ; index++;}
    34c0:	e0 e0       	ldi	r30, 0x00	; 0
    34c2:	92 cc       	rjmp	.-1756   	; 0x2de8 <update_Display+0x308>
		output_low(PORTD, GreenLED);
		updateSpeed = 32;
		switch_state = 0; // set switch state to 0 if the state is above 9
	}

}
    34c4:	df 91       	pop	r29
    34c6:	cf 91       	pop	r28
    34c8:	1f 91       	pop	r17
    34ca:	0f 91       	pop	r16
    34cc:	08 95       	ret

000034ce <__vector_18>:

ISR(TIMER0_OVF_vect) // timer 0 overflow interrupt
{
    34ce:	1f 92       	push	r1
    34d0:	0f 92       	push	r0
    34d2:	0f b6       	in	r0, 0x3f	; 63
    34d4:	0f 92       	push	r0
    34d6:	11 24       	eor	r1, r1
    34d8:	4f 92       	push	r4
    34da:	5f 92       	push	r5
    34dc:	6f 92       	push	r6
    34de:	7f 92       	push	r7
    34e0:	af 92       	push	r10
    34e2:	bf 92       	push	r11
    34e4:	cf 92       	push	r12
    34e6:	df 92       	push	r13
    34e8:	ef 92       	push	r14
    34ea:	ff 92       	push	r15
    34ec:	0f 93       	push	r16
    34ee:	1f 93       	push	r17
    34f0:	2f 93       	push	r18
    34f2:	3f 93       	push	r19
    34f4:	4f 93       	push	r20
    34f6:	5f 93       	push	r21
    34f8:	6f 93       	push	r22
    34fa:	7f 93       	push	r23
    34fc:	8f 93       	push	r24
    34fe:	9f 93       	push	r25
    3500:	af 93       	push	r26
    3502:	bf 93       	push	r27
    3504:	cf 93       	push	r28
    3506:	df 93       	push	r29
    3508:	ef 93       	push	r30
    350a:	ff 93       	push	r31
	TCNT0 += 6;
    350c:	86 b5       	in	r24, 0x26	; 38
    350e:	8a 5f       	subi	r24, 0xFA	; 250
    3510:	86 bd       	out	0x26, r24	; 38
	if((timer0Overflows % 1) == 0) // push button polling 195 1 sec /975 5 sec/ 11700 1 min/
    3512:	80 91 cd 02 	lds	r24, 0x02CD
    3516:	90 91 ce 02 	lds	r25, 0x02CE
	{
		if(is_clear(PINA, Switch1)) // if the push button is held down connecting pin B2 to ground
    351a:	00 99       	sbic	0x00, 0	; 0
    351c:	03 c0       	rjmp	.+6      	; 0x3524 <__vector_18+0x56>
		{
			BTN_Down = 1; // button down is true
    351e:	81 e0       	ldi	r24, 0x01	; 1
    3520:	80 93 cc 02 	sts	0x02CC, r24
		}
	}
	if((timer0Overflows % 2) == 0) // push button polling on the release
    3524:	80 91 cd 02 	lds	r24, 0x02CD
    3528:	90 91 ce 02 	lds	r25, 0x02CE
    352c:	80 fd       	sbrc	r24, 0
    352e:	4b c0       	rjmp	.+150    	; 0x35c6 <__vector_18+0xf8>
	{

		if(is_set(PINA, Switch1) && BTN_Down == 1) //
    3530:	00 9b       	sbis	0x00, 0	; 0
    3532:	49 c0       	rjmp	.+146    	; 0x35c6 <__vector_18+0xf8>
    3534:	80 91 cc 02 	lds	r24, 0x02CC
    3538:	81 30       	cpi	r24, 0x01	; 1
    353a:	09 f0       	breq	.+2      	; 0x353e <__vector_18+0x70>
    353c:	44 c0       	rjmp	.+136    	; 0x35c6 <__vector_18+0xf8>
		{
			//switch_state++; // increment mode states by 1 i.e. red -> yellow, green - > blue
			if (switch_state == 6)
    353e:	80 91 5c 01 	lds	r24, 0x015C
    3542:	86 30       	cpi	r24, 0x06	; 6
    3544:	89 f4       	brne	.+34     	; 0x3568 <__vector_18+0x9a>
			{
		
				if (groupnum >= 4) 
    3546:	80 91 ba 02 	lds	r24, 0x02BA
    354a:	90 91 bb 02 	lds	r25, 0x02BB
    354e:	84 30       	cpi	r24, 0x04	; 4
    3550:	91 05       	cpc	r25, r1
    3552:	2c f0       	brlt	.+10     	; 0x355e <__vector_18+0x90>
				{
					groupnum = 0;
    3554:	10 92 bb 02 	sts	0x02BB, r1
    3558:	10 92 ba 02 	sts	0x02BA, r1
    355c:	05 c0       	rjmp	.+10     	; 0x3568 <__vector_18+0x9a>
				}
				else 
				{
					groupnum++;
    355e:	01 96       	adiw	r24, 0x01	; 1
    3560:	90 93 bb 02 	sts	0x02BB, r25
    3564:	80 93 ba 02 	sts	0x02BA, r24
				}
			}
			if (switch_state == 7)
    3568:	80 91 5c 01 	lds	r24, 0x015C
    356c:	87 30       	cpi	r24, 0x07	; 7
    356e:	d9 f4       	brne	.+54     	; 0x35a6 <__vector_18+0xd8>
			{
				if (ammonum >= ammolim[groupnum])
    3570:	80 91 be 02 	lds	r24, 0x02BE
    3574:	90 91 bf 02 	lds	r25, 0x02BF
    3578:	e0 91 ba 02 	lds	r30, 0x02BA
    357c:	f0 91 bb 02 	lds	r31, 0x02BB
    3580:	ee 0f       	add	r30, r30
    3582:	ff 1f       	adc	r31, r31
    3584:	e1 55       	subi	r30, 0x51	; 81
    3586:	fd 4f       	sbci	r31, 0xFD	; 253
    3588:	20 81       	ld	r18, Z
    358a:	31 81       	ldd	r19, Z+1	; 0x01
    358c:	82 17       	cp	r24, r18
    358e:	93 07       	cpc	r25, r19
    3590:	2c f0       	brlt	.+10     	; 0x359c <__vector_18+0xce>
				{
					 ammonum = 0;
    3592:	10 92 bf 02 	sts	0x02BF, r1
    3596:	10 92 be 02 	sts	0x02BE, r1
    359a:	05 c0       	rjmp	.+10     	; 0x35a6 <__vector_18+0xd8>
				}
				else 
				{
					ammonum++;
    359c:	01 96       	adiw	r24, 0x01	; 1
    359e:	90 93 bf 02 	sts	0x02BF, r25
    35a2:	80 93 be 02 	sts	0x02BE, r24
				}
			}
			if (switch_state == 8)
    35a6:	80 91 5c 01 	lds	r24, 0x015C
    35aa:	88 30       	cpi	r24, 0x08	; 8
    35ac:	51 f4       	brne	.+20     	; 0x35c2 <__vector_18+0xf4>
			{
				chargenum ^= 1;
    35ae:	80 91 bc 02 	lds	r24, 0x02BC
    35b2:	90 91 bd 02 	lds	r25, 0x02BD
    35b6:	21 e0       	ldi	r18, 0x01	; 1
    35b8:	82 27       	eor	r24, r18
    35ba:	90 93 bd 02 	sts	0x02BD, r25
    35be:	80 93 bc 02 	sts	0x02BC, r24
			}
			BTN_Down = 0; // push button is released so the button is no longer held down
    35c2:	10 92 cc 02 	sts	0x02CC, r1
			//LCDclr();
		}
	}
	if((timer0Overflows % 16) == 0) // push button polling on the release % 16
    35c6:	80 91 cd 02 	lds	r24, 0x02CD
    35ca:	90 91 ce 02 	lds	r25, 0x02CE
    35ce:	8f 70       	andi	r24, 0x0F	; 15
    35d0:	99 27       	eor	r25, r25
    35d2:	89 2b       	or	r24, r25
    35d4:	09 f0       	breq	.+2      	; 0x35d8 <__vector_18+0x10a>
    35d6:	63 c0       	rjmp	.+198    	; 0x369e <__vector_18+0x1d0>
	{
		if(is_clear(PIND, Switch2)) // if the push button is held down connecting pin B2 to ground
    35d8:	4d 99       	sbic	0x09, 5	; 9
    35da:	07 c0       	rjmp	.+14     	; 0x35ea <__vector_18+0x11c>
		{
			switch_state--;
    35dc:	80 91 5c 01 	lds	r24, 0x015C
    35e0:	81 50       	subi	r24, 0x01	; 1
    35e2:	80 93 5c 01 	sts	0x015C, r24
			LCDclr();
    35e6:	0e 94 42 1c 	call	0x3884	; 0x3884 <LCDclr>
		}
		if(is_clear(PIND, Switch3)) // if the push button is held down connecting pin B2 to ground
    35ea:	4e 99       	sbic	0x09, 6	; 9
    35ec:	07 c0       	rjmp	.+14     	; 0x35fc <__vector_18+0x12e>
		{
			switch_state++;
    35ee:	80 91 5c 01 	lds	r24, 0x015C
    35f2:	8f 5f       	subi	r24, 0xFF	; 255
    35f4:	80 93 5c 01 	sts	0x015C, r24
			LCDclr();
    35f8:	0e 94 42 1c 	call	0x3884	; 0x3884 <LCDclr>
		}
		readAccelData(accelCount);
    35fc:	81 ed       	ldi	r24, 0xD1	; 209
    35fe:	92 e0       	ldi	r25, 0x02	; 2
    3600:	0e 94 2c 12 	call	0x2458	; 0x2458 <readAccelData>
    3604:	c1 ed       	ldi	r28, 0xD1	; 209
    3606:	d2 e0       	ldi	r29, 0x02	; 2
    3608:	0f 2e       	mov	r0, r31
    360a:	f7 ed       	ldi	r31, 0xD7	; 215
    360c:	cf 2e       	mov	r12, r31
    360e:	f2 e0       	ldi	r31, 0x02	; 2
    3610:	df 2e       	mov	r13, r31
    3612:	f0 2d       	mov	r31, r0
    3614:	0f 2e       	mov	r0, r31
    3616:	f6 e0       	ldi	r31, 0x06	; 6
    3618:	ef 2e       	mov	r14, r31
    361a:	f7 e0       	ldi	r31, 0x07	; 7
    361c:	ff 2e       	mov	r15, r31
    361e:	f0 2d       	mov	r31, r0
    3620:	06 e1       	ldi	r16, 0x16	; 22
    3622:	17 e0       	ldi	r17, 0x07	; 7
    3624:	0f 2e       	mov	r0, r31
    3626:	f7 ed       	ldi	r31, 0xD7	; 215
    3628:	af 2e       	mov	r10, r31
    362a:	f2 e0       	ldi	r31, 0x02	; 2
    362c:	bf 2e       	mov	r11, r31
    362e:	f0 2d       	mov	r31, r0
		for (int i=0; i<3; i++)
		{
			accelG[i] = (float)accelCount[i]/((1<<12)/(2*SCALE));  // get actual g value, this depends on scale being set
    3630:	69 91       	ld	r22, Y+
    3632:	79 91       	ld	r23, Y+
    3634:	88 27       	eor	r24, r24
    3636:	77 fd       	sbrc	r23, 7
    3638:	80 95       	com	r24
    363a:	98 2f       	mov	r25, r24
    363c:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <__floatsisf>
    3640:	20 e0       	ldi	r18, 0x00	; 0
    3642:	30 e0       	ldi	r19, 0x00	; 0
    3644:	40 e8       	ldi	r20, 0x80	; 128
    3646:	5a e3       	ldi	r21, 0x3A	; 58
    3648:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <__mulsf3>
    364c:	f6 01       	movw	r30, r12
    364e:	61 93       	st	Z+, r22
    3650:	71 93       	st	Z+, r23
    3652:	81 93       	st	Z+, r24
    3654:	91 93       	st	Z+, r25
    3656:	6f 01       	movw	r12, r30
			accelD[i] = asin(accelG[i])*57.2957795;
    3658:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <asin>
    365c:	2b 01       	movw	r4, r22
    365e:	3c 01       	movw	r6, r24
    3660:	21 ee       	ldi	r18, 0xE1	; 225
    3662:	3e e2       	ldi	r19, 0x2E	; 46
    3664:	45 e6       	ldi	r20, 0x65	; 101
    3666:	52 e4       	ldi	r21, 0x42	; 66
    3668:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <__mulsf3>
    366c:	f7 01       	movw	r30, r14
    366e:	61 93       	st	Z+, r22
    3670:	71 93       	st	Z+, r23
    3672:	81 93       	st	Z+, r24
    3674:	91 93       	st	Z+, r25
    3676:	7f 01       	movw	r14, r30
			accelM[i] = asin(accelG[i])*1018.59163579;
    3678:	2d ed       	ldi	r18, 0xDD	; 221
    367a:	35 ea       	ldi	r19, 0xA5	; 165
    367c:	4e e7       	ldi	r20, 0x7E	; 126
    367e:	54 e4       	ldi	r21, 0x44	; 68
    3680:	c3 01       	movw	r24, r6
    3682:	b2 01       	movw	r22, r4
    3684:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <__mulsf3>
    3688:	f8 01       	movw	r30, r16
    368a:	61 93       	st	Z+, r22
    368c:	71 93       	st	Z+, r23
    368e:	81 93       	st	Z+, r24
    3690:	91 93       	st	Z+, r25
    3692:	8f 01       	movw	r16, r30
		{
			switch_state++;
			LCDclr();
		}
		readAccelData(accelCount);
		for (int i=0; i<3; i++)
    3694:	ca 15       	cp	r28, r10
    3696:	db 05       	cpc	r29, r11
    3698:	59 f6       	brne	.-106    	; 0x3630 <__vector_18+0x162>
		{
			accelG[i] = (float)accelCount[i]/((1<<12)/(2*SCALE));  // get actual g value, this depends on scale being set
			accelD[i] = asin(accelG[i])*57.2957795;
			accelM[i] = asin(accelG[i])*1018.59163579;
		}
		update_Display();
    369a:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <update_Display>
	}
	if((timer0Overflows % 32) == 0) // push button polling on the release
    369e:	80 91 cd 02 	lds	r24, 0x02CD
    36a2:	90 91 ce 02 	lds	r25, 0x02CE
    36a6:	8f 71       	andi	r24, 0x1F	; 31
    36a8:	99 27       	eor	r25, r25
    36aa:	89 2b       	or	r24, r25
    36ac:	09 f0       	breq	.+2      	; 0x36b0 <__vector_18+0x1e2>
    36ae:	59 c0       	rjmp	.+178    	; 0x3762 <__vector_18+0x294>
	{
		
		system_Clock++;
    36b0:	80 91 c8 02 	lds	r24, 0x02C8
    36b4:	90 91 c9 02 	lds	r25, 0x02C9
    36b8:	a0 91 ca 02 	lds	r26, 0x02CA
    36bc:	b0 91 cb 02 	lds	r27, 0x02CB
    36c0:	01 96       	adiw	r24, 0x01	; 1
    36c2:	a1 1d       	adc	r26, r1
    36c4:	b1 1d       	adc	r27, r1
    36c6:	80 93 c8 02 	sts	0x02C8, r24
    36ca:	90 93 c9 02 	sts	0x02C9, r25
    36ce:	a0 93 ca 02 	sts	0x02CA, r26
    36d2:	b0 93 cb 02 	sts	0x02CB, r27
		system_Second++;
    36d6:	80 91 c7 02 	lds	r24, 0x02C7
    36da:	8f 5f       	subi	r24, 0xFF	; 255
    36dc:	80 93 c7 02 	sts	0x02C7, r24
		
		if((system_Second % 60) == 0) //
    36e0:	80 91 c7 02 	lds	r24, 0x02C7
    36e4:	99 e8       	ldi	r25, 0x89	; 137
    36e6:	89 9f       	mul	r24, r25
    36e8:	91 2d       	mov	r25, r1
    36ea:	11 24       	eor	r1, r1
    36ec:	92 95       	swap	r25
    36ee:	96 95       	lsr	r25
    36f0:	97 70       	andi	r25, 0x07	; 7
    36f2:	fc e3       	ldi	r31, 0x3C	; 60
    36f4:	9f 9f       	mul	r25, r31
    36f6:	80 19       	sub	r24, r0
    36f8:	11 24       	eor	r1, r1
    36fa:	81 11       	cpse	r24, r1
    36fc:	32 c0       	rjmp	.+100    	; 0x3762 <__vector_18+0x294>
		{
			system_Minute++;
    36fe:	80 91 c6 02 	lds	r24, 0x02C6
    3702:	8f 5f       	subi	r24, 0xFF	; 255
    3704:	80 93 c6 02 	sts	0x02C6, r24
			system_Second = 0;
    3708:	10 92 c7 02 	sts	0x02C7, r1
			if((system_Minute % 60) == 0)
    370c:	80 91 c6 02 	lds	r24, 0x02C6
    3710:	99 e8       	ldi	r25, 0x89	; 137
    3712:	89 9f       	mul	r24, r25
    3714:	91 2d       	mov	r25, r1
    3716:	11 24       	eor	r1, r1
    3718:	92 95       	swap	r25
    371a:	96 95       	lsr	r25
    371c:	97 70       	andi	r25, 0x07	; 7
    371e:	2c e3       	ldi	r18, 0x3C	; 60
    3720:	92 9f       	mul	r25, r18
    3722:	80 19       	sub	r24, r0
    3724:	11 24       	eor	r1, r1
    3726:	81 11       	cpse	r24, r1
    3728:	1c c0       	rjmp	.+56     	; 0x3762 <__vector_18+0x294>
			{
				system_Hour++;
    372a:	80 91 c5 02 	lds	r24, 0x02C5
    372e:	8f 5f       	subi	r24, 0xFF	; 255
    3730:	80 93 c5 02 	sts	0x02C5, r24
				system_Minute = 0;
    3734:	10 92 c6 02 	sts	0x02C6, r1
				if((system_Hour % 24) == 0)
    3738:	80 91 c5 02 	lds	r24, 0x02C5
    373c:	9b ea       	ldi	r25, 0xAB	; 171
    373e:	89 9f       	mul	r24, r25
    3740:	91 2d       	mov	r25, r1
    3742:	11 24       	eor	r1, r1
    3744:	92 95       	swap	r25
    3746:	9f 70       	andi	r25, 0x0F	; 15
    3748:	e8 e1       	ldi	r30, 0x18	; 24
    374a:	9e 9f       	mul	r25, r30
    374c:	80 19       	sub	r24, r0
    374e:	11 24       	eor	r1, r1
    3750:	81 11       	cpse	r24, r1
    3752:	07 c0       	rjmp	.+14     	; 0x3762 <__vector_18+0x294>
				{
					system_Day++;
    3754:	80 91 c4 02 	lds	r24, 0x02C4
    3758:	8f 5f       	subi	r24, 0xFF	; 255
    375a:	80 93 c4 02 	sts	0x02C4, r24
					system_Hour = 0;
    375e:	10 92 c5 02 	sts	0x02C5, r1
				}
			}
		}
		
	}
	if((timer0Overflows % updateSpeed) == 0) // push button polling on the release
    3762:	80 91 cd 02 	lds	r24, 0x02CD
    3766:	90 91 ce 02 	lds	r25, 0x02CE
    376a:	60 91 57 01 	lds	r22, 0x0157
    376e:	70 e0       	ldi	r23, 0x00	; 0
    3770:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <__udivmodhi4>
    3774:	89 2b       	or	r24, r25
    3776:	51 f5       	brne	.+84     	; 0x37cc <__vector_18+0x2fe>
	{
		if (i == 1023) d = -1;   // count down
    3778:	80 91 5a 01 	lds	r24, 0x015A
    377c:	90 91 5b 01 	lds	r25, 0x015B
    3780:	8f 3f       	cpi	r24, 0xFF	; 255
    3782:	93 40       	sbci	r25, 0x03	; 3
    3784:	31 f4       	brne	.+12     	; 0x3792 <__vector_18+0x2c4>
    3786:	8f ef       	ldi	r24, 0xFF	; 255
    3788:	9f ef       	ldi	r25, 0xFF	; 255
    378a:	90 93 59 01 	sts	0x0159, r25
    378e:	80 93 58 01 	sts	0x0158, r24
		if (i == -1024) d = 1;   // count up
    3792:	80 91 5a 01 	lds	r24, 0x015A
    3796:	90 91 5b 01 	lds	r25, 0x015B
    379a:	81 15       	cp	r24, r1
    379c:	9c 4f       	sbci	r25, 0xFC	; 252
    379e:	31 f4       	brne	.+12     	; 0x37ac <__vector_18+0x2de>
    37a0:	81 e0       	ldi	r24, 0x01	; 1
    37a2:	90 e0       	ldi	r25, 0x00	; 0
    37a4:	90 93 59 01 	sts	0x0159, r25
    37a8:	80 93 58 01 	sts	0x0158, r24
		i += d;
    37ac:	20 91 5a 01 	lds	r18, 0x015A
    37b0:	30 91 5b 01 	lds	r19, 0x015B
    37b4:	80 91 58 01 	lds	r24, 0x0158
    37b8:	90 91 59 01 	lds	r25, 0x0159
    37bc:	82 0f       	add	r24, r18
    37be:	93 1f       	adc	r25, r19
    37c0:	90 93 5b 01 	sts	0x015B, r25
    37c4:	80 93 5a 01 	sts	0x015A, r24
		update_Display();
    37c8:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <update_Display>
	}
	timer0Overflows++;
    37cc:	80 91 cd 02 	lds	r24, 0x02CD
    37d0:	90 91 ce 02 	lds	r25, 0x02CE
    37d4:	01 96       	adiw	r24, 0x01	; 1
    37d6:	90 93 ce 02 	sts	0x02CE, r25
    37da:	80 93 cd 02 	sts	0x02CD, r24
}
    37de:	ff 91       	pop	r31
    37e0:	ef 91       	pop	r30
    37e2:	df 91       	pop	r29
    37e4:	cf 91       	pop	r28
    37e6:	bf 91       	pop	r27
    37e8:	af 91       	pop	r26
    37ea:	9f 91       	pop	r25
    37ec:	8f 91       	pop	r24
    37ee:	7f 91       	pop	r23
    37f0:	6f 91       	pop	r22
    37f2:	5f 91       	pop	r21
    37f4:	4f 91       	pop	r20
    37f6:	3f 91       	pop	r19
    37f8:	2f 91       	pop	r18
    37fa:	1f 91       	pop	r17
    37fc:	0f 91       	pop	r16
    37fe:	ff 90       	pop	r15
    3800:	ef 90       	pop	r14
    3802:	df 90       	pop	r13
    3804:	cf 90       	pop	r12
    3806:	bf 90       	pop	r11
    3808:	af 90       	pop	r10
    380a:	7f 90       	pop	r7
    380c:	6f 90       	pop	r6
    380e:	5f 90       	pop	r5
    3810:	4f 90       	pop	r4
    3812:	0f 90       	pop	r0
    3814:	0f be       	out	0x3f, r0	; 63
    3816:	0f 90       	pop	r0
    3818:	1f 90       	pop	r1
    381a:	18 95       	reti

0000381c <main>:
}

int main(void)
{

	set_input(DDRA, Switch1);
    381c:	08 98       	cbi	0x01, 0	; 1
	set_input(DDRD, Switch2);
    381e:	55 98       	cbi	0x0a, 5	; 10
	set_input(DDRD, Switch3);
    3820:	56 98       	cbi	0x0a, 6	; 10
	set_output(DDRD, GreenLED);
    3822:	57 9a       	sbi	0x0a, 7	; 10

	LCDinit();//init LCD bit, dual line, cursor right
    3824:	0e 94 a7 1c 	call	0x394e	; 0x394e <LCDinit>
	LCDclr();//clears LCD
    3828:	0e 94 42 1c 	call	0x3884	; 0x3884 <LCDclr>
	//progress();
	delay1s();
    382c:	0e 94 4e 14 	call	0x289c	; 0x289c <delay1s>
	setupI2C();
    3830:	0e 94 58 14 	call	0x28b0	; 0x28b0 <setupI2C>
	MMA8452Active();
    3834:	0e 94 b1 11 	call	0x2362	; 0x2362 <MMA8452Active>
	timer0_init();
    3838:	0e 94 3d 14 	call	0x287a	; 0x287a <timer0_init>
	sei();
    383c:	78 94       	sei
    383e:	ff cf       	rjmp	.-2      	; 0x383e <main+0x22>

00003840 <LCDsendChar>:
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#else
	//8 bit part
	LDP=ch;
    3840:	85 b9       	out	0x05, r24	; 5
	LCP|=1<<LCD_RS;
    3842:	5a 9a       	sbi	0x0b, 2	; 11
	LCP|=1<<LCD_E;		
    3844:	5c 9a       	sbi	0x0b, 4	; 11
    3846:	8f ec       	ldi	r24, 0xCF	; 207
    3848:	97 e0       	ldi	r25, 0x07	; 7
    384a:	01 97       	sbiw	r24, 0x01	; 1
    384c:	f1 f7       	brne	.-4      	; 0x384a <LCDsendChar+0xa>
    384e:	00 c0       	rjmp	.+0      	; 0x3850 <LCDsendChar+0x10>
    3850:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
    3852:	5c 98       	cbi	0x0b, 4	; 11
	LCP&=~(1<<LCD_RS);
    3854:	5a 98       	cbi	0x0b, 2	; 11
    3856:	8f ec       	ldi	r24, 0xCF	; 207
    3858:	97 e0       	ldi	r25, 0x07	; 7
    385a:	01 97       	sbiw	r24, 0x01	; 1
    385c:	f1 f7       	brne	.-4      	; 0x385a <LCDsendChar+0x1a>
    385e:	00 c0       	rjmp	.+0      	; 0x3860 <LCDsendChar+0x20>
    3860:	00 00       	nop
    3862:	08 95       	ret

00003864 <LCDsendCommand>:
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);
#else
	//8 bit part
	LDP=cmd;
    3864:	85 b9       	out	0x05, r24	; 5
	LCP|=1<<LCD_E;		
    3866:	5c 9a       	sbi	0x0b, 4	; 11
    3868:	8f ec       	ldi	r24, 0xCF	; 207
    386a:	97 e0       	ldi	r25, 0x07	; 7
    386c:	01 97       	sbiw	r24, 0x01	; 1
    386e:	f1 f7       	brne	.-4      	; 0x386c <LCDsendCommand+0x8>
    3870:	00 c0       	rjmp	.+0      	; 0x3872 <LCDsendCommand+0xe>
    3872:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    3874:	5c 98       	cbi	0x0b, 4	; 11
    3876:	8f ec       	ldi	r24, 0xCF	; 207
    3878:	97 e0       	ldi	r25, 0x07	; 7
    387a:	01 97       	sbiw	r24, 0x01	; 1
    387c:	f1 f7       	brne	.-4      	; 0x387a <LCDsendCommand+0x16>
    387e:	00 c0       	rjmp	.+0      	; 0x3880 <LCDsendCommand+0x1c>
    3880:	00 00       	nop
    3882:	08 95       	ret

00003884 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
    3884:	81 e0       	ldi	r24, 0x01	; 1
    3886:	0e 94 32 1c 	call	0x3864	; 0x3864 <LCDsendCommand>
    388a:	08 95       	ret

0000388c <lcd_puts>:
		LCDsendChar(data[i]);
	}
}
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    388c:	cf 93       	push	r28
    388e:	df 93       	push	r29
	register char c;

	while ( (c = *s++) ) {
    3890:	ec 01       	movw	r28, r24
    3892:	21 96       	adiw	r28, 0x01	; 1
    3894:	fc 01       	movw	r30, r24
    3896:	80 81       	ld	r24, Z
    3898:	88 23       	and	r24, r24
    389a:	29 f0       	breq	.+10     	; 0x38a6 <lcd_puts+0x1a>
		LCDsendChar(c);
    389c:	0e 94 20 1c 	call	0x3840	; 0x3840 <LCDsendChar>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
	register char c;

	while ( (c = *s++) ) {
    38a0:	89 91       	ld	r24, Y+
    38a2:	81 11       	cpse	r24, r1
    38a4:	fb cf       	rjmp	.-10     	; 0x389c <lcd_puts+0x10>
		LCDsendChar(c);
	}

}
    38a6:	df 91       	pop	r29
    38a8:	cf 91       	pop	r28
    38aa:	08 95       	ret

000038ac <LCDGotoXY>:
	}/* lcd_puts_p */
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
    38ac:	62 30       	cpi	r22, 0x02	; 2
    38ae:	31 f0       	breq	.+12     	; 0x38bc <LCDGotoXY+0x10>
    38b0:	63 30       	cpi	r22, 0x03	; 3
    38b2:	31 f0       	breq	.+12     	; 0x38c0 <LCDGotoXY+0x14>
    38b4:	61 30       	cpi	r22, 0x01	; 1
    38b6:	29 f4       	brne	.+10     	; 0x38c2 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
    38b8:	80 5c       	subi	r24, 0xC0	; 192
    38ba:	03 c0       	rjmp	.+6      	; 0x38c2 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
    38bc:	8c 5e       	subi	r24, 0xEC	; 236
    38be:	01 c0       	rjmp	.+2      	; 0x38c2 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
    38c0:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
    38c2:	80 68       	ori	r24, 0x80	; 128
    38c4:	0e 94 32 1c 	call	0x3864	; 0x3864 <LCDsendCommand>
    38c8:	08 95       	ret

000038ca <CopyStringtoLCD>:
}
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
    38ca:	1f 93       	push	r17
    38cc:	cf 93       	push	r28
    38ce:	df 93       	push	r29
    38d0:	ec 01       	movw	r28, r24
    38d2:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
    38d4:	64 2f       	mov	r22, r20
    38d6:	0e 94 56 1c 	call	0x38ac	; 0x38ac <LCDGotoXY>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    38da:	9e 01       	movw	r18, r28
    38dc:	fe 01       	movw	r30, r28
    38de:	84 91       	lpm	r24, Z
    38e0:	88 23       	and	r24, r24
    38e2:	69 f0       	breq	.+26     	; 0x38fe <CopyStringtoLCD+0x34>
    38e4:	10 e0       	ldi	r17, 0x00	; 0
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
    38e6:	f9 01       	movw	r30, r18
    38e8:	84 91       	lpm	r24, Z
    38ea:	0e 94 20 1c 	call	0x3840	; 0x3840 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    38ee:	1f 5f       	subi	r17, 0xFF	; 255
    38f0:	9e 01       	movw	r18, r28
    38f2:	21 0f       	add	r18, r17
    38f4:	31 1d       	adc	r19, r1
    38f6:	f9 01       	movw	r30, r18
    38f8:	84 91       	lpm	r24, Z
    38fa:	81 11       	cpse	r24, r1
    38fc:	f4 cf       	rjmp	.-24     	; 0x38e6 <CopyStringtoLCD+0x1c>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
    38fe:	df 91       	pop	r29
    3900:	cf 91       	pop	r28
    3902:	1f 91       	pop	r17
    3904:	08 95       	ret

00003906 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
    3906:	ef 92       	push	r14
    3908:	ff 92       	push	r15
    390a:	0f 93       	push	r16
    390c:	1f 93       	push	r17
    390e:	cf 93       	push	r28
    3910:	df 93       	push	r29
    3912:	8c 01       	movw	r16, r24
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
    3914:	66 0f       	add	r22, r22
    3916:	66 0f       	add	r22, r22
    3918:	66 0f       	add	r22, r22
    391a:	60 64       	ori	r22, 0x40	; 64
    391c:	e6 2e       	mov	r14, r22
	for (i=0; i<8; i++){
    391e:	c0 e0       	ldi	r28, 0x00	; 0
    3920:	d0 e0       	ldi	r29, 0x00	; 0
    3922:	f8 01       	movw	r30, r16
    3924:	ec 0f       	add	r30, r28
    3926:	fd 1f       	adc	r31, r29
		pcc=pgm_read_byte(&pc[i]);
    3928:	f4 90       	lpm	r15, Z
		LCDsendCommand(a++);
    392a:	8c 2f       	mov	r24, r28
    392c:	8e 0d       	add	r24, r14
    392e:	0e 94 32 1c 	call	0x3864	; 0x3864 <LCDsendCommand>
		LCDsendChar(pcc);
    3932:	8f 2d       	mov	r24, r15
    3934:	0e 94 20 1c 	call	0x3840	; 0x3840 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
    3938:	21 96       	adiw	r28, 0x01	; 1
    393a:	c8 30       	cpi	r28, 0x08	; 8
    393c:	d1 05       	cpc	r29, r1
    393e:	89 f7       	brne	.-30     	; 0x3922 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
    3940:	df 91       	pop	r29
    3942:	cf 91       	pop	r28
    3944:	1f 91       	pop	r17
    3946:	0f 91       	pop	r16
    3948:	ff 90       	pop	r15
    394a:	ef 90       	pop	r14
    394c:	08 95       	ret

0000394e <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
    394e:	1f 93       	push	r17
    3950:	cf 93       	push	r28
    3952:	df 93       	push	r29
    3954:	8f e2       	ldi	r24, 0x2F	; 47
    3956:	95 e7       	ldi	r25, 0x75	; 117
    3958:	01 97       	sbiw	r24, 0x01	; 1
    395a:	f1 f7       	brne	.-4      	; 0x3958 <LCDinit+0xa>
    395c:	00 c0       	rjmp	.+0      	; 0x395e <LCDinit+0x10>
    395e:	00 00       	nop


#else
	//8 bit part
	_delay_ms(15);
	LDP=0x00;
    3960:	15 b8       	out	0x05, r1	; 5
	LCP=0x00;
    3962:	1b b8       	out	0x0b, r1	; 11
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4|1<<LCD_D3
    3964:	84 b1       	in	r24, 0x04	; 4
    3966:	8f ef       	ldi	r24, 0xFF	; 255
    3968:	84 b9       	out	0x04, r24	; 4
			|1<<LCD_D2|1<<LCD_D1|1<<LCD_D0;
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
    396a:	8a b1       	in	r24, 0x0a	; 10
    396c:	8c 61       	ori	r24, 0x1C	; 28
    396e:	8a b9       	out	0x0a, r24	; 10
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4|1<<LCD_D3
    3970:	88 e3       	ldi	r24, 0x38	; 56
    3972:	85 b9       	out	0x05, r24	; 5
			|0<<LCD_D2|0<<LCD_D1|0<<LCD_D0; //8 it mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    3974:	5c 9a       	sbi	0x0b, 4	; 11
    3976:	8f ec       	ldi	r24, 0xCF	; 207
    3978:	97 e0       	ldi	r25, 0x07	; 7
    397a:	01 97       	sbiw	r24, 0x01	; 1
    397c:	f1 f7       	brne	.-4      	; 0x397a <LCDinit+0x2c>
    397e:	00 c0       	rjmp	.+0      	; 0x3980 <LCDinit+0x32>
    3980:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    3982:	5c 98       	cbi	0x0b, 4	; 11
    3984:	8f ec       	ldi	r24, 0xCF	; 207
    3986:	97 e0       	ldi	r25, 0x07	; 7
    3988:	01 97       	sbiw	r24, 0x01	; 1
    398a:	f1 f7       	brne	.-4      	; 0x3988 <LCDinit+0x3a>
    398c:	00 c0       	rjmp	.+0      	; 0x398e <LCDinit+0x40>
    398e:	00 00       	nop
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4|1<<LCD_D3
    3990:	88 e3       	ldi	r24, 0x38	; 56
    3992:	85 b9       	out	0x05, r24	; 5
			|0<<LCD_D2|0<<LCD_D1|0<<LCD_D0; //8 it mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    3994:	5c 9a       	sbi	0x0b, 4	; 11
    3996:	8f ec       	ldi	r24, 0xCF	; 207
    3998:	97 e0       	ldi	r25, 0x07	; 7
    399a:	01 97       	sbiw	r24, 0x01	; 1
    399c:	f1 f7       	brne	.-4      	; 0x399a <LCDinit+0x4c>
    399e:	00 c0       	rjmp	.+0      	; 0x39a0 <LCDinit+0x52>
    39a0:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    39a2:	5c 98       	cbi	0x0b, 4	; 11
    39a4:	8f ec       	ldi	r24, 0xCF	; 207
    39a6:	97 e0       	ldi	r25, 0x07	; 7
    39a8:	01 97       	sbiw	r24, 0x01	; 1
    39aa:	f1 f7       	brne	.-4      	; 0x39a8 <LCDinit+0x5a>
    39ac:	00 c0       	rjmp	.+0      	; 0x39ae <LCDinit+0x60>
    39ae:	00 00       	nop
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4|1<<LCD_D3
    39b0:	88 e3       	ldi	r24, 0x38	; 56
    39b2:	85 b9       	out	0x05, r24	; 5
			|0<<LCD_D2|0<<LCD_D1|0<<LCD_D0; //8 it mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    39b4:	5c 9a       	sbi	0x0b, 4	; 11
    39b6:	8f ec       	ldi	r24, 0xCF	; 207
    39b8:	97 e0       	ldi	r25, 0x07	; 7
    39ba:	01 97       	sbiw	r24, 0x01	; 1
    39bc:	f1 f7       	brne	.-4      	; 0x39ba <LCDinit+0x6c>
    39be:	00 c0       	rjmp	.+0      	; 0x39c0 <LCDinit+0x72>
    39c0:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    39c2:	5c 98       	cbi	0x0b, 4	; 11
    39c4:	8f ec       	ldi	r24, 0xCF	; 207
    39c6:	97 e0       	ldi	r25, 0x07	; 7
    39c8:	01 97       	sbiw	r24, 0x01	; 1
    39ca:	f1 f7       	brne	.-4      	; 0x39c8 <LCDinit+0x7a>
    39cc:	00 c0       	rjmp	.+0      	; 0x39ce <LCDinit+0x80>
    39ce:	00 00       	nop
	_delay_ms(1);
	
	//--------8 bit dual line----------
	LDP=0<<LCD_D7|0<<LCD_D6|0<<LCD_D5|1<<LCD_D4|0<<LCD_D3
    39d0:	84 e1       	ldi	r24, 0x14	; 20
    39d2:	85 b9       	out	0x05, r24	; 5
	|1<<LCD_D2|0<<LCD_D1|0<<LCD_D0; //8 it mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;
    39d4:	5c 9a       	sbi	0x0b, 4	; 11
    39d6:	8f ec       	ldi	r24, 0xCF	; 207
    39d8:	97 e0       	ldi	r25, 0x07	; 7
    39da:	01 97       	sbiw	r24, 0x01	; 1
    39dc:	f1 f7       	brne	.-4      	; 0x39da <LCDinit+0x8c>
    39de:	00 c0       	rjmp	.+0      	; 0x39e0 <LCDinit+0x92>
    39e0:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    39e2:	5c 98       	cbi	0x0b, 4	; 11
    39e4:	8f ec       	ldi	r24, 0xCF	; 207
    39e6:	97 e0       	ldi	r25, 0x07	; 7
    39e8:	01 97       	sbiw	r24, 0x01	; 1
    39ea:	f1 f7       	brne	.-4      	; 0x39e8 <LCDinit+0x9a>
    39ec:	00 c0       	rjmp	.+0      	; 0x39ee <LCDinit+0xa0>
    39ee:	00 00       	nop
	_delay_ms(1);
	//-----increment address, invisible cursor shift------
	LDP=0<<LCD_D7|0<<LCD_D6|0<<LCD_D5|1<<LCD_D4|0<<LCD_D3
    39f0:	84 e1       	ldi	r24, 0x14	; 20
    39f2:	85 b9       	out	0x05, r24	; 5
	|1<<LCD_D2|0<<LCD_D1|0<<LCD_D0; //8 it mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;
    39f4:	5c 9a       	sbi	0x0b, 4	; 11
    39f6:	8f ec       	ldi	r24, 0xCF	; 207
    39f8:	97 e0       	ldi	r25, 0x07	; 7
    39fa:	01 97       	sbiw	r24, 0x01	; 1
    39fc:	f1 f7       	brne	.-4      	; 0x39fa <LCDinit+0xac>
    39fe:	00 c0       	rjmp	.+0      	; 0x3a00 <LCDinit+0xb2>
    3a00:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    3a02:	5c 98       	cbi	0x0b, 4	; 11
    3a04:	8f ec       	ldi	r24, 0xCF	; 207
    3a06:	97 e0       	ldi	r25, 0x07	; 7
    3a08:	01 97       	sbiw	r24, 0x01	; 1
    3a0a:	f1 f7       	brne	.-4      	; 0x3a08 <LCDinit+0xba>
    3a0c:	00 c0       	rjmp	.+0      	; 0x3a0e <LCDinit+0xc0>
    3a0e:	00 00       	nop
	_delay_ms(1);
	
	LDP=0<<LCD_D7|0<<LCD_D6|0<<LCD_D5|0<<LCD_D4|1<<LCD_D3
    3a10:	8c e0       	ldi	r24, 0x0C	; 12
    3a12:	85 b9       	out	0x05, r24	; 5
	|1<<LCD_D2|0<<LCD_D1|0<<LCD_D0; //8 it mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;
    3a14:	5c 9a       	sbi	0x0b, 4	; 11
    3a16:	8f ec       	ldi	r24, 0xCF	; 207
    3a18:	97 e0       	ldi	r25, 0x07	; 7
    3a1a:	01 97       	sbiw	r24, 0x01	; 1
    3a1c:	f1 f7       	brne	.-4      	; 0x3a1a <LCDinit+0xcc>
    3a1e:	00 c0       	rjmp	.+0      	; 0x3a20 <LCDinit+0xd2>
    3a20:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    3a22:	5c 98       	cbi	0x0b, 4	; 11
    3a24:	8f ec       	ldi	r24, 0xCF	; 207
    3a26:	97 e0       	ldi	r25, 0x07	; 7
    3a28:	01 97       	sbiw	r24, 0x01	; 1
    3a2a:	f1 f7       	brne	.-4      	; 0x3a28 <LCDinit+0xda>
    3a2c:	00 c0       	rjmp	.+0      	; 0x3a2e <LCDinit+0xe0>
    3a2e:	00 00       	nop
	_delay_ms(1);
	//-----increment address, invisible cursor shift------
	LDP=0<<LCD_D7|0<<LCD_D6|0<<LCD_D5|0<<LCD_D4|1<<LCD_D3
    3a30:	8c e0       	ldi	r24, 0x0C	; 12
    3a32:	85 b9       	out	0x05, r24	; 5
	|1<<LCD_D2|0<<LCD_D1|0<<LCD_D0; //8 it mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;
    3a34:	5c 9a       	sbi	0x0b, 4	; 11
    3a36:	8f ec       	ldi	r24, 0xCF	; 207
    3a38:	97 e0       	ldi	r25, 0x07	; 7
    3a3a:	01 97       	sbiw	r24, 0x01	; 1
    3a3c:	f1 f7       	brne	.-4      	; 0x3a3a <LCDinit+0xec>
    3a3e:	00 c0       	rjmp	.+0      	; 0x3a40 <LCDinit+0xf2>
    3a40:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    3a42:	5c 98       	cbi	0x0b, 4	; 11
    3a44:	8f ec       	ldi	r24, 0xCF	; 207
    3a46:	97 e0       	ldi	r25, 0x07	; 7
    3a48:	01 97       	sbiw	r24, 0x01	; 1
    3a4a:	f1 f7       	brne	.-4      	; 0x3a48 <LCDinit+0xfa>
    3a4c:	00 c0       	rjmp	.+0      	; 0x3a4e <LCDinit+0x100>
    3a4e:	00 00       	nop
	_delay_ms(1);
	
	//--------8 bit dual line----------
	LDP=0<<LCD_D7|0<<LCD_D6|0<<LCD_D5|0<<LCD_D4|0<<LCD_D3
    3a50:	86 e0       	ldi	r24, 0x06	; 6
    3a52:	85 b9       	out	0x05, r24	; 5
			|1<<LCD_D2|1<<LCD_D1|0<<LCD_D0; //8 it mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    3a54:	5c 9a       	sbi	0x0b, 4	; 11
    3a56:	8f ec       	ldi	r24, 0xCF	; 207
    3a58:	97 e0       	ldi	r25, 0x07	; 7
    3a5a:	01 97       	sbiw	r24, 0x01	; 1
    3a5c:	f1 f7       	brne	.-4      	; 0x3a5a <LCDinit+0x10c>
    3a5e:	00 c0       	rjmp	.+0      	; 0x3a60 <LCDinit+0x112>
    3a60:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    3a62:	5c 98       	cbi	0x0b, 4	; 11
    3a64:	8f ec       	ldi	r24, 0xCF	; 207
    3a66:	97 e0       	ldi	r25, 0x07	; 7
    3a68:	01 97       	sbiw	r24, 0x01	; 1
    3a6a:	f1 f7       	brne	.-4      	; 0x3a68 <LCDinit+0x11a>
    3a6c:	00 c0       	rjmp	.+0      	; 0x3a6e <LCDinit+0x120>
    3a6e:	00 00       	nop
	_delay_ms(1);
   //-----increment address, invisible cursor shift------
	LDP=0<<LCD_D7|0<<LCD_D6|0<<LCD_D5|0<<LCD_D4|0<<LCD_D3
    3a70:	86 e0       	ldi	r24, 0x06	; 6
    3a72:	85 b9       	out	0x05, r24	; 5
			|1<<LCD_D2|1<<LCD_D1|0<<LCD_D0; //8 it mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    3a74:	5c 9a       	sbi	0x0b, 4	; 11
    3a76:	8f ec       	ldi	r24, 0xCF	; 207
    3a78:	97 e0       	ldi	r25, 0x07	; 7
    3a7a:	01 97       	sbiw	r24, 0x01	; 1
    3a7c:	f1 f7       	brne	.-4      	; 0x3a7a <LCDinit+0x12c>
    3a7e:	00 c0       	rjmp	.+0      	; 0x3a80 <LCDinit+0x132>
    3a80:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    3a82:	5c 98       	cbi	0x0b, 4	; 11
    3a84:	8f e0       	ldi	r24, 0x0F	; 15
    3a86:	97 e2       	ldi	r25, 0x27	; 39
    3a88:	01 97       	sbiw	r24, 0x01	; 1
    3a8a:	f1 f7       	brne	.-4      	; 0x3a88 <LCDinit+0x13a>
    3a8c:	00 c0       	rjmp	.+0      	; 0x3a8e <LCDinit+0x140>
    3a8e:	00 00       	nop
    3a90:	c2 e4       	ldi	r28, 0x42	; 66
    3a92:	d1 e2       	ldi	r29, 0x21	; 33
	_delay_ms(5);

		//init custom chars
	uint8_t ch=0, chn=0;
    3a94:	60 e0       	ldi	r22, 0x00	; 0
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
    3a96:	11 e0       	ldi	r17, 0x01	; 1
    3a98:	16 0f       	add	r17, r22
    3a9a:	ce 01       	movw	r24, r28
    3a9c:	0e 94 83 1c 	call	0x3906	; 0x3906 <LCDdefinechar>
    3aa0:	28 96       	adiw	r28, 0x08	; 8
	LCP&=~(1<<LCD_E);
	_delay_ms(5);

		//init custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
    3aa2:	18 30       	cpi	r17, 0x08	; 8
    3aa4:	11 f0       	breq	.+4      	; 0x3aaa <LCDinit+0x15c>
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
    3aa6:	61 2f       	mov	r22, r17
    3aa8:	f6 cf       	rjmp	.-20     	; 0x3a96 <LCDinit+0x148>
		ch=ch+8;
	}

#endif
}			
    3aaa:	df 91       	pop	r29
    3aac:	cf 91       	pop	r28
    3aae:	1f 91       	pop	r17
    3ab0:	08 95       	ret

00003ab2 <asin>:
    3ab2:	9f 93       	push	r25
    3ab4:	9f 77       	andi	r25, 0x7F	; 127
    3ab6:	ee e3       	ldi	r30, 0x3E	; 62
    3ab8:	89 37       	cpi	r24, 0x79	; 121
    3aba:	9e 07       	cpc	r25, r30
    3abc:	20 f4       	brcc	.+8      	; 0x3ac6 <asin+0x14>
    3abe:	ec e7       	ldi	r30, 0x7C	; 124
    3ac0:	f0 e0       	ldi	r31, 0x00	; 0
    3ac2:	bc d0       	rcall	.+376    	; 0x3c3c <__fp_powsodd>
    3ac4:	09 c0       	rjmp	.+18     	; 0x3ad8 <asin+0x26>
    3ac6:	7a d0       	rcall	.+244    	; 0x3bbc <__fp_arccos>
    3ac8:	90 58       	subi	r25, 0x80	; 128
    3aca:	a2 ea       	ldi	r26, 0xA2	; 162
    3acc:	2a ed       	ldi	r18, 0xDA	; 218
    3ace:	3f e0       	ldi	r19, 0x0F	; 15
    3ad0:	49 ec       	ldi	r20, 0xC9	; 201
    3ad2:	5f e3       	ldi	r21, 0x3F	; 63
    3ad4:	b5 d1       	rcall	.+874    	; 0x3e40 <__addsf3x>
    3ad6:	c3 d0       	rcall	.+390    	; 0x3c5e <__fp_round>
    3ad8:	0f 90       	pop	r0
    3ada:	07 fc       	sbrc	r0, 7
    3adc:	90 58       	subi	r25, 0x80	; 128
    3ade:	08 95       	ret

00003ae0 <__fixsfsi>:
    3ae0:	04 d0       	rcall	.+8      	; 0x3aea <__fixunssfsi>
    3ae2:	68 94       	set
    3ae4:	b1 11       	cpse	r27, r1
    3ae6:	ef c0       	rjmp	.+478    	; 0x3cc6 <__fp_szero>
    3ae8:	08 95       	ret

00003aea <__fixunssfsi>:
    3aea:	d2 d0       	rcall	.+420    	; 0x3c90 <__fp_splitA>
    3aec:	88 f0       	brcs	.+34     	; 0x3b10 <__fixunssfsi+0x26>
    3aee:	9f 57       	subi	r25, 0x7F	; 127
    3af0:	90 f0       	brcs	.+36     	; 0x3b16 <__fixunssfsi+0x2c>
    3af2:	b9 2f       	mov	r27, r25
    3af4:	99 27       	eor	r25, r25
    3af6:	b7 51       	subi	r27, 0x17	; 23
    3af8:	a0 f0       	brcs	.+40     	; 0x3b22 <__fixunssfsi+0x38>
    3afa:	d1 f0       	breq	.+52     	; 0x3b30 <__fixunssfsi+0x46>
    3afc:	66 0f       	add	r22, r22
    3afe:	77 1f       	adc	r23, r23
    3b00:	88 1f       	adc	r24, r24
    3b02:	99 1f       	adc	r25, r25
    3b04:	1a f0       	brmi	.+6      	; 0x3b0c <__fixunssfsi+0x22>
    3b06:	ba 95       	dec	r27
    3b08:	c9 f7       	brne	.-14     	; 0x3afc <__fixunssfsi+0x12>
    3b0a:	12 c0       	rjmp	.+36     	; 0x3b30 <__fixunssfsi+0x46>
    3b0c:	b1 30       	cpi	r27, 0x01	; 1
    3b0e:	81 f0       	breq	.+32     	; 0x3b30 <__fixunssfsi+0x46>
    3b10:	d9 d0       	rcall	.+434    	; 0x3cc4 <__fp_zero>
    3b12:	b1 e0       	ldi	r27, 0x01	; 1
    3b14:	08 95       	ret
    3b16:	d6 c0       	rjmp	.+428    	; 0x3cc4 <__fp_zero>
    3b18:	67 2f       	mov	r22, r23
    3b1a:	78 2f       	mov	r23, r24
    3b1c:	88 27       	eor	r24, r24
    3b1e:	b8 5f       	subi	r27, 0xF8	; 248
    3b20:	39 f0       	breq	.+14     	; 0x3b30 <__fixunssfsi+0x46>
    3b22:	b9 3f       	cpi	r27, 0xF9	; 249
    3b24:	cc f3       	brlt	.-14     	; 0x3b18 <__fixunssfsi+0x2e>
    3b26:	86 95       	lsr	r24
    3b28:	77 95       	ror	r23
    3b2a:	67 95       	ror	r22
    3b2c:	b3 95       	inc	r27
    3b2e:	d9 f7       	brne	.-10     	; 0x3b26 <__fixunssfsi+0x3c>
    3b30:	3e f4       	brtc	.+14     	; 0x3b40 <__fixunssfsi+0x56>
    3b32:	90 95       	com	r25
    3b34:	80 95       	com	r24
    3b36:	70 95       	com	r23
    3b38:	61 95       	neg	r22
    3b3a:	7f 4f       	sbci	r23, 0xFF	; 255
    3b3c:	8f 4f       	sbci	r24, 0xFF	; 255
    3b3e:	9f 4f       	sbci	r25, 0xFF	; 255
    3b40:	08 95       	ret

00003b42 <__floatunsisf>:
    3b42:	e8 94       	clt
    3b44:	09 c0       	rjmp	.+18     	; 0x3b58 <__floatsisf+0x12>

00003b46 <__floatsisf>:
    3b46:	97 fb       	bst	r25, 7
    3b48:	3e f4       	brtc	.+14     	; 0x3b58 <__floatsisf+0x12>
    3b4a:	90 95       	com	r25
    3b4c:	80 95       	com	r24
    3b4e:	70 95       	com	r23
    3b50:	61 95       	neg	r22
    3b52:	7f 4f       	sbci	r23, 0xFF	; 255
    3b54:	8f 4f       	sbci	r24, 0xFF	; 255
    3b56:	9f 4f       	sbci	r25, 0xFF	; 255
    3b58:	99 23       	and	r25, r25
    3b5a:	a9 f0       	breq	.+42     	; 0x3b86 <__floatsisf+0x40>
    3b5c:	f9 2f       	mov	r31, r25
    3b5e:	96 e9       	ldi	r25, 0x96	; 150
    3b60:	bb 27       	eor	r27, r27
    3b62:	93 95       	inc	r25
    3b64:	f6 95       	lsr	r31
    3b66:	87 95       	ror	r24
    3b68:	77 95       	ror	r23
    3b6a:	67 95       	ror	r22
    3b6c:	b7 95       	ror	r27
    3b6e:	f1 11       	cpse	r31, r1
    3b70:	f8 cf       	rjmp	.-16     	; 0x3b62 <__floatsisf+0x1c>
    3b72:	fa f4       	brpl	.+62     	; 0x3bb2 <__floatsisf+0x6c>
    3b74:	bb 0f       	add	r27, r27
    3b76:	11 f4       	brne	.+4      	; 0x3b7c <__floatsisf+0x36>
    3b78:	60 ff       	sbrs	r22, 0
    3b7a:	1b c0       	rjmp	.+54     	; 0x3bb2 <__floatsisf+0x6c>
    3b7c:	6f 5f       	subi	r22, 0xFF	; 255
    3b7e:	7f 4f       	sbci	r23, 0xFF	; 255
    3b80:	8f 4f       	sbci	r24, 0xFF	; 255
    3b82:	9f 4f       	sbci	r25, 0xFF	; 255
    3b84:	16 c0       	rjmp	.+44     	; 0x3bb2 <__floatsisf+0x6c>
    3b86:	88 23       	and	r24, r24
    3b88:	11 f0       	breq	.+4      	; 0x3b8e <__floatsisf+0x48>
    3b8a:	96 e9       	ldi	r25, 0x96	; 150
    3b8c:	11 c0       	rjmp	.+34     	; 0x3bb0 <__floatsisf+0x6a>
    3b8e:	77 23       	and	r23, r23
    3b90:	21 f0       	breq	.+8      	; 0x3b9a <__floatsisf+0x54>
    3b92:	9e e8       	ldi	r25, 0x8E	; 142
    3b94:	87 2f       	mov	r24, r23
    3b96:	76 2f       	mov	r23, r22
    3b98:	05 c0       	rjmp	.+10     	; 0x3ba4 <__floatsisf+0x5e>
    3b9a:	66 23       	and	r22, r22
    3b9c:	71 f0       	breq	.+28     	; 0x3bba <__floatsisf+0x74>
    3b9e:	96 e8       	ldi	r25, 0x86	; 134
    3ba0:	86 2f       	mov	r24, r22
    3ba2:	70 e0       	ldi	r23, 0x00	; 0
    3ba4:	60 e0       	ldi	r22, 0x00	; 0
    3ba6:	2a f0       	brmi	.+10     	; 0x3bb2 <__floatsisf+0x6c>
    3ba8:	9a 95       	dec	r25
    3baa:	66 0f       	add	r22, r22
    3bac:	77 1f       	adc	r23, r23
    3bae:	88 1f       	adc	r24, r24
    3bb0:	da f7       	brpl	.-10     	; 0x3ba8 <__floatsisf+0x62>
    3bb2:	88 0f       	add	r24, r24
    3bb4:	96 95       	lsr	r25
    3bb6:	87 95       	ror	r24
    3bb8:	97 f9       	bld	r25, 7
    3bba:	08 95       	ret

00003bbc <__fp_arccos>:
    3bbc:	df 93       	push	r29
    3bbe:	cf 93       	push	r28
    3bc0:	1f 93       	push	r17
    3bc2:	0f 93       	push	r16
    3bc4:	8b 01       	movw	r16, r22
    3bc6:	ec 01       	movw	r28, r24
    3bc8:	e0 e9       	ldi	r30, 0x90	; 144
    3bca:	f0 e0       	ldi	r31, 0x00	; 0
    3bcc:	12 d0       	rcall	.+36     	; 0x3bf2 <__fp_powser>
    3bce:	47 d0       	rcall	.+142    	; 0x3c5e <__fp_round>
    3bd0:	98 01       	movw	r18, r16
    3bd2:	ae 01       	movw	r20, r28
    3bd4:	8b 01       	movw	r16, r22
    3bd6:	ec 01       	movw	r28, r24
    3bd8:	60 e0       	ldi	r22, 0x00	; 0
    3bda:	70 e0       	ldi	r23, 0x00	; 0
    3bdc:	80 e8       	ldi	r24, 0x80	; 128
    3bde:	9f e3       	ldi	r25, 0x3F	; 63
    3be0:	1d d1       	rcall	.+570    	; 0x3e1c <__subsf3>
    3be2:	de d0       	rcall	.+444    	; 0x3da0 <sqrt>
    3be4:	98 01       	movw	r18, r16
    3be6:	ae 01       	movw	r20, r28
    3be8:	0f 91       	pop	r16
    3bea:	1f 91       	pop	r17
    3bec:	cf 91       	pop	r28
    3bee:	df 91       	pop	r29
    3bf0:	7c c0       	rjmp	.+248    	; 0x3cea <__mulsf3x>

00003bf2 <__fp_powser>:
    3bf2:	df 93       	push	r29
    3bf4:	cf 93       	push	r28
    3bf6:	1f 93       	push	r17
    3bf8:	0f 93       	push	r16
    3bfa:	ff 92       	push	r15
    3bfc:	ef 92       	push	r14
    3bfe:	df 92       	push	r13
    3c00:	7b 01       	movw	r14, r22
    3c02:	8c 01       	movw	r16, r24
    3c04:	68 94       	set
    3c06:	05 c0       	rjmp	.+10     	; 0x3c12 <__fp_powser+0x20>
    3c08:	da 2e       	mov	r13, r26
    3c0a:	ef 01       	movw	r28, r30
    3c0c:	6e d0       	rcall	.+220    	; 0x3cea <__mulsf3x>
    3c0e:	fe 01       	movw	r30, r28
    3c10:	e8 94       	clt
    3c12:	a5 91       	lpm	r26, Z+
    3c14:	25 91       	lpm	r18, Z+
    3c16:	35 91       	lpm	r19, Z+
    3c18:	45 91       	lpm	r20, Z+
    3c1a:	55 91       	lpm	r21, Z+
    3c1c:	ae f3       	brts	.-22     	; 0x3c08 <__fp_powser+0x16>
    3c1e:	ef 01       	movw	r28, r30
    3c20:	0f d1       	rcall	.+542    	; 0x3e40 <__addsf3x>
    3c22:	fe 01       	movw	r30, r28
    3c24:	97 01       	movw	r18, r14
    3c26:	a8 01       	movw	r20, r16
    3c28:	da 94       	dec	r13
    3c2a:	79 f7       	brne	.-34     	; 0x3c0a <__fp_powser+0x18>
    3c2c:	df 90       	pop	r13
    3c2e:	ef 90       	pop	r14
    3c30:	ff 90       	pop	r15
    3c32:	0f 91       	pop	r16
    3c34:	1f 91       	pop	r17
    3c36:	cf 91       	pop	r28
    3c38:	df 91       	pop	r29
    3c3a:	08 95       	ret

00003c3c <__fp_powsodd>:
    3c3c:	9f 93       	push	r25
    3c3e:	8f 93       	push	r24
    3c40:	7f 93       	push	r23
    3c42:	6f 93       	push	r22
    3c44:	ff 93       	push	r31
    3c46:	ef 93       	push	r30
    3c48:	9b 01       	movw	r18, r22
    3c4a:	ac 01       	movw	r20, r24
    3c4c:	42 d0       	rcall	.+132    	; 0x3cd2 <__mulsf3>
    3c4e:	ef 91       	pop	r30
    3c50:	ff 91       	pop	r31
    3c52:	cf df       	rcall	.-98     	; 0x3bf2 <__fp_powser>
    3c54:	2f 91       	pop	r18
    3c56:	3f 91       	pop	r19
    3c58:	4f 91       	pop	r20
    3c5a:	5f 91       	pop	r21
    3c5c:	3a c0       	rjmp	.+116    	; 0x3cd2 <__mulsf3>

00003c5e <__fp_round>:
    3c5e:	09 2e       	mov	r0, r25
    3c60:	03 94       	inc	r0
    3c62:	00 0c       	add	r0, r0
    3c64:	11 f4       	brne	.+4      	; 0x3c6a <__fp_round+0xc>
    3c66:	88 23       	and	r24, r24
    3c68:	52 f0       	brmi	.+20     	; 0x3c7e <__fp_round+0x20>
    3c6a:	bb 0f       	add	r27, r27
    3c6c:	40 f4       	brcc	.+16     	; 0x3c7e <__fp_round+0x20>
    3c6e:	bf 2b       	or	r27, r31
    3c70:	11 f4       	brne	.+4      	; 0x3c76 <__fp_round+0x18>
    3c72:	60 ff       	sbrs	r22, 0
    3c74:	04 c0       	rjmp	.+8      	; 0x3c7e <__fp_round+0x20>
    3c76:	6f 5f       	subi	r22, 0xFF	; 255
    3c78:	7f 4f       	sbci	r23, 0xFF	; 255
    3c7a:	8f 4f       	sbci	r24, 0xFF	; 255
    3c7c:	9f 4f       	sbci	r25, 0xFF	; 255
    3c7e:	08 95       	ret

00003c80 <__fp_split3>:
    3c80:	57 fd       	sbrc	r21, 7
    3c82:	90 58       	subi	r25, 0x80	; 128
    3c84:	44 0f       	add	r20, r20
    3c86:	55 1f       	adc	r21, r21
    3c88:	59 f0       	breq	.+22     	; 0x3ca0 <__fp_splitA+0x10>
    3c8a:	5f 3f       	cpi	r21, 0xFF	; 255
    3c8c:	71 f0       	breq	.+28     	; 0x3caa <__fp_splitA+0x1a>
    3c8e:	47 95       	ror	r20

00003c90 <__fp_splitA>:
    3c90:	88 0f       	add	r24, r24
    3c92:	97 fb       	bst	r25, 7
    3c94:	99 1f       	adc	r25, r25
    3c96:	61 f0       	breq	.+24     	; 0x3cb0 <__fp_splitA+0x20>
    3c98:	9f 3f       	cpi	r25, 0xFF	; 255
    3c9a:	79 f0       	breq	.+30     	; 0x3cba <__fp_splitA+0x2a>
    3c9c:	87 95       	ror	r24
    3c9e:	08 95       	ret
    3ca0:	12 16       	cp	r1, r18
    3ca2:	13 06       	cpc	r1, r19
    3ca4:	14 06       	cpc	r1, r20
    3ca6:	55 1f       	adc	r21, r21
    3ca8:	f2 cf       	rjmp	.-28     	; 0x3c8e <__fp_split3+0xe>
    3caa:	46 95       	lsr	r20
    3cac:	f1 df       	rcall	.-30     	; 0x3c90 <__fp_splitA>
    3cae:	08 c0       	rjmp	.+16     	; 0x3cc0 <__fp_splitA+0x30>
    3cb0:	16 16       	cp	r1, r22
    3cb2:	17 06       	cpc	r1, r23
    3cb4:	18 06       	cpc	r1, r24
    3cb6:	99 1f       	adc	r25, r25
    3cb8:	f1 cf       	rjmp	.-30     	; 0x3c9c <__fp_splitA+0xc>
    3cba:	86 95       	lsr	r24
    3cbc:	71 05       	cpc	r23, r1
    3cbe:	61 05       	cpc	r22, r1
    3cc0:	08 94       	sec
    3cc2:	08 95       	ret

00003cc4 <__fp_zero>:
    3cc4:	e8 94       	clt

00003cc6 <__fp_szero>:
    3cc6:	bb 27       	eor	r27, r27
    3cc8:	66 27       	eor	r22, r22
    3cca:	77 27       	eor	r23, r23
    3ccc:	cb 01       	movw	r24, r22
    3cce:	97 f9       	bld	r25, 7
    3cd0:	08 95       	ret

00003cd2 <__mulsf3>:
    3cd2:	0b d0       	rcall	.+22     	; 0x3cea <__mulsf3x>
    3cd4:	c4 cf       	rjmp	.-120    	; 0x3c5e <__fp_round>
    3cd6:	25 d1       	rcall	.+586    	; 0x3f22 <__fp_pscA>
    3cd8:	28 f0       	brcs	.+10     	; 0x3ce4 <__mulsf3+0x12>
    3cda:	2a d1       	rcall	.+596    	; 0x3f30 <__fp_pscB>
    3cdc:	18 f0       	brcs	.+6      	; 0x3ce4 <__mulsf3+0x12>
    3cde:	95 23       	and	r25, r21
    3ce0:	09 f0       	breq	.+2      	; 0x3ce4 <__mulsf3+0x12>
    3ce2:	01 c1       	rjmp	.+514    	; 0x3ee6 <__fp_inf>
    3ce4:	14 c1       	rjmp	.+552    	; 0x3f0e <__fp_nan>
    3ce6:	11 24       	eor	r1, r1
    3ce8:	ee cf       	rjmp	.-36     	; 0x3cc6 <__fp_szero>

00003cea <__mulsf3x>:
    3cea:	ca df       	rcall	.-108    	; 0x3c80 <__fp_split3>
    3cec:	a0 f3       	brcs	.-24     	; 0x3cd6 <__mulsf3+0x4>

00003cee <__mulsf3_pse>:
    3cee:	95 9f       	mul	r25, r21
    3cf0:	d1 f3       	breq	.-12     	; 0x3ce6 <__mulsf3+0x14>
    3cf2:	95 0f       	add	r25, r21
    3cf4:	50 e0       	ldi	r21, 0x00	; 0
    3cf6:	55 1f       	adc	r21, r21
    3cf8:	62 9f       	mul	r22, r18
    3cfa:	f0 01       	movw	r30, r0
    3cfc:	72 9f       	mul	r23, r18
    3cfe:	bb 27       	eor	r27, r27
    3d00:	f0 0d       	add	r31, r0
    3d02:	b1 1d       	adc	r27, r1
    3d04:	63 9f       	mul	r22, r19
    3d06:	aa 27       	eor	r26, r26
    3d08:	f0 0d       	add	r31, r0
    3d0a:	b1 1d       	adc	r27, r1
    3d0c:	aa 1f       	adc	r26, r26
    3d0e:	64 9f       	mul	r22, r20
    3d10:	66 27       	eor	r22, r22
    3d12:	b0 0d       	add	r27, r0
    3d14:	a1 1d       	adc	r26, r1
    3d16:	66 1f       	adc	r22, r22
    3d18:	82 9f       	mul	r24, r18
    3d1a:	22 27       	eor	r18, r18
    3d1c:	b0 0d       	add	r27, r0
    3d1e:	a1 1d       	adc	r26, r1
    3d20:	62 1f       	adc	r22, r18
    3d22:	73 9f       	mul	r23, r19
    3d24:	b0 0d       	add	r27, r0
    3d26:	a1 1d       	adc	r26, r1
    3d28:	62 1f       	adc	r22, r18
    3d2a:	83 9f       	mul	r24, r19
    3d2c:	a0 0d       	add	r26, r0
    3d2e:	61 1d       	adc	r22, r1
    3d30:	22 1f       	adc	r18, r18
    3d32:	74 9f       	mul	r23, r20
    3d34:	33 27       	eor	r19, r19
    3d36:	a0 0d       	add	r26, r0
    3d38:	61 1d       	adc	r22, r1
    3d3a:	23 1f       	adc	r18, r19
    3d3c:	84 9f       	mul	r24, r20
    3d3e:	60 0d       	add	r22, r0
    3d40:	21 1d       	adc	r18, r1
    3d42:	82 2f       	mov	r24, r18
    3d44:	76 2f       	mov	r23, r22
    3d46:	6a 2f       	mov	r22, r26
    3d48:	11 24       	eor	r1, r1
    3d4a:	9f 57       	subi	r25, 0x7F	; 127
    3d4c:	50 40       	sbci	r21, 0x00	; 0
    3d4e:	8a f0       	brmi	.+34     	; 0x3d72 <__mulsf3_pse+0x84>
    3d50:	e1 f0       	breq	.+56     	; 0x3d8a <__mulsf3_pse+0x9c>
    3d52:	88 23       	and	r24, r24
    3d54:	4a f0       	brmi	.+18     	; 0x3d68 <__mulsf3_pse+0x7a>
    3d56:	ee 0f       	add	r30, r30
    3d58:	ff 1f       	adc	r31, r31
    3d5a:	bb 1f       	adc	r27, r27
    3d5c:	66 1f       	adc	r22, r22
    3d5e:	77 1f       	adc	r23, r23
    3d60:	88 1f       	adc	r24, r24
    3d62:	91 50       	subi	r25, 0x01	; 1
    3d64:	50 40       	sbci	r21, 0x00	; 0
    3d66:	a9 f7       	brne	.-22     	; 0x3d52 <__mulsf3_pse+0x64>
    3d68:	9e 3f       	cpi	r25, 0xFE	; 254
    3d6a:	51 05       	cpc	r21, r1
    3d6c:	70 f0       	brcs	.+28     	; 0x3d8a <__mulsf3_pse+0x9c>
    3d6e:	bb c0       	rjmp	.+374    	; 0x3ee6 <__fp_inf>
    3d70:	aa cf       	rjmp	.-172    	; 0x3cc6 <__fp_szero>
    3d72:	5f 3f       	cpi	r21, 0xFF	; 255
    3d74:	ec f3       	brlt	.-6      	; 0x3d70 <__mulsf3_pse+0x82>
    3d76:	98 3e       	cpi	r25, 0xE8	; 232
    3d78:	dc f3       	brlt	.-10     	; 0x3d70 <__mulsf3_pse+0x82>
    3d7a:	86 95       	lsr	r24
    3d7c:	77 95       	ror	r23
    3d7e:	67 95       	ror	r22
    3d80:	b7 95       	ror	r27
    3d82:	f7 95       	ror	r31
    3d84:	e7 95       	ror	r30
    3d86:	9f 5f       	subi	r25, 0xFF	; 255
    3d88:	c1 f7       	brne	.-16     	; 0x3d7a <__mulsf3_pse+0x8c>
    3d8a:	fe 2b       	or	r31, r30
    3d8c:	88 0f       	add	r24, r24
    3d8e:	91 1d       	adc	r25, r1
    3d90:	96 95       	lsr	r25
    3d92:	87 95       	ror	r24
    3d94:	97 f9       	bld	r25, 7
    3d96:	08 95       	ret
    3d98:	11 f4       	brne	.+4      	; 0x3d9e <__mulsf3_pse+0xb0>
    3d9a:	0e f4       	brtc	.+2      	; 0x3d9e <__mulsf3_pse+0xb0>
    3d9c:	b8 c0       	rjmp	.+368    	; 0x3f0e <__fp_nan>
    3d9e:	a9 c0       	rjmp	.+338    	; 0x3ef2 <__fp_mpack>

00003da0 <sqrt>:
    3da0:	77 df       	rcall	.-274    	; 0x3c90 <__fp_splitA>
    3da2:	d0 f3       	brcs	.-12     	; 0x3d98 <__mulsf3_pse+0xaa>
    3da4:	99 23       	and	r25, r25
    3da6:	d9 f3       	breq	.-10     	; 0x3d9e <__mulsf3_pse+0xb0>
    3da8:	ce f3       	brts	.-14     	; 0x3d9c <__mulsf3_pse+0xae>
    3daa:	9f 57       	subi	r25, 0x7F	; 127
    3dac:	55 0b       	sbc	r21, r21
    3dae:	87 ff       	sbrs	r24, 7
    3db0:	b1 d0       	rcall	.+354    	; 0x3f14 <__fp_norm2>
    3db2:	00 24       	eor	r0, r0
    3db4:	a0 e6       	ldi	r26, 0x60	; 96
    3db6:	40 ea       	ldi	r20, 0xA0	; 160
    3db8:	90 01       	movw	r18, r0
    3dba:	80 58       	subi	r24, 0x80	; 128
    3dbc:	56 95       	lsr	r21
    3dbe:	97 95       	ror	r25
    3dc0:	28 f4       	brcc	.+10     	; 0x3dcc <sqrt+0x2c>
    3dc2:	80 5c       	subi	r24, 0xC0	; 192
    3dc4:	66 0f       	add	r22, r22
    3dc6:	77 1f       	adc	r23, r23
    3dc8:	88 1f       	adc	r24, r24
    3dca:	20 f0       	brcs	.+8      	; 0x3dd4 <sqrt+0x34>
    3dcc:	26 17       	cp	r18, r22
    3dce:	37 07       	cpc	r19, r23
    3dd0:	48 07       	cpc	r20, r24
    3dd2:	30 f4       	brcc	.+12     	; 0x3de0 <sqrt+0x40>
    3dd4:	62 1b       	sub	r22, r18
    3dd6:	73 0b       	sbc	r23, r19
    3dd8:	84 0b       	sbc	r24, r20
    3dda:	20 29       	or	r18, r0
    3ddc:	31 29       	or	r19, r1
    3dde:	4a 2b       	or	r20, r26
    3de0:	a6 95       	lsr	r26
    3de2:	17 94       	ror	r1
    3de4:	07 94       	ror	r0
    3de6:	20 25       	eor	r18, r0
    3de8:	31 25       	eor	r19, r1
    3dea:	4a 27       	eor	r20, r26
    3dec:	58 f7       	brcc	.-42     	; 0x3dc4 <sqrt+0x24>
    3dee:	66 0f       	add	r22, r22
    3df0:	77 1f       	adc	r23, r23
    3df2:	88 1f       	adc	r24, r24
    3df4:	20 f0       	brcs	.+8      	; 0x3dfe <sqrt+0x5e>
    3df6:	26 17       	cp	r18, r22
    3df8:	37 07       	cpc	r19, r23
    3dfa:	48 07       	cpc	r20, r24
    3dfc:	30 f4       	brcc	.+12     	; 0x3e0a <sqrt+0x6a>
    3dfe:	62 0b       	sbc	r22, r18
    3e00:	73 0b       	sbc	r23, r19
    3e02:	84 0b       	sbc	r24, r20
    3e04:	20 0d       	add	r18, r0
    3e06:	31 1d       	adc	r19, r1
    3e08:	41 1d       	adc	r20, r1
    3e0a:	a0 95       	com	r26
    3e0c:	81 f7       	brne	.-32     	; 0x3dee <sqrt+0x4e>
    3e0e:	b9 01       	movw	r22, r18
    3e10:	84 2f       	mov	r24, r20
    3e12:	91 58       	subi	r25, 0x81	; 129
    3e14:	88 0f       	add	r24, r24
    3e16:	96 95       	lsr	r25
    3e18:	87 95       	ror	r24
    3e1a:	08 95       	ret

00003e1c <__subsf3>:
    3e1c:	50 58       	subi	r21, 0x80	; 128

00003e1e <__addsf3>:
    3e1e:	bb 27       	eor	r27, r27
    3e20:	aa 27       	eor	r26, r26
    3e22:	0e d0       	rcall	.+28     	; 0x3e40 <__addsf3x>
    3e24:	1c cf       	rjmp	.-456    	; 0x3c5e <__fp_round>
    3e26:	7d d0       	rcall	.+250    	; 0x3f22 <__fp_pscA>
    3e28:	30 f0       	brcs	.+12     	; 0x3e36 <__addsf3+0x18>
    3e2a:	82 d0       	rcall	.+260    	; 0x3f30 <__fp_pscB>
    3e2c:	20 f0       	brcs	.+8      	; 0x3e36 <__addsf3+0x18>
    3e2e:	31 f4       	brne	.+12     	; 0x3e3c <__addsf3+0x1e>
    3e30:	9f 3f       	cpi	r25, 0xFF	; 255
    3e32:	11 f4       	brne	.+4      	; 0x3e38 <__addsf3+0x1a>
    3e34:	1e f4       	brtc	.+6      	; 0x3e3c <__addsf3+0x1e>
    3e36:	6b c0       	rjmp	.+214    	; 0x3f0e <__fp_nan>
    3e38:	0e f4       	brtc	.+2      	; 0x3e3c <__addsf3+0x1e>
    3e3a:	e0 95       	com	r30
    3e3c:	e7 fb       	bst	r30, 7
    3e3e:	53 c0       	rjmp	.+166    	; 0x3ee6 <__fp_inf>

00003e40 <__addsf3x>:
    3e40:	e9 2f       	mov	r30, r25
    3e42:	1e df       	rcall	.-452    	; 0x3c80 <__fp_split3>
    3e44:	80 f3       	brcs	.-32     	; 0x3e26 <__addsf3+0x8>
    3e46:	ba 17       	cp	r27, r26
    3e48:	62 07       	cpc	r22, r18
    3e4a:	73 07       	cpc	r23, r19
    3e4c:	84 07       	cpc	r24, r20
    3e4e:	95 07       	cpc	r25, r21
    3e50:	18 f0       	brcs	.+6      	; 0x3e58 <__addsf3x+0x18>
    3e52:	71 f4       	brne	.+28     	; 0x3e70 <__addsf3x+0x30>
    3e54:	9e f5       	brtc	.+102    	; 0x3ebc <__addsf3x+0x7c>
    3e56:	36 cf       	rjmp	.-404    	; 0x3cc4 <__fp_zero>
    3e58:	0e f4       	brtc	.+2      	; 0x3e5c <__addsf3x+0x1c>
    3e5a:	e0 95       	com	r30
    3e5c:	0b 2e       	mov	r0, r27
    3e5e:	ba 2f       	mov	r27, r26
    3e60:	a0 2d       	mov	r26, r0
    3e62:	0b 01       	movw	r0, r22
    3e64:	b9 01       	movw	r22, r18
    3e66:	90 01       	movw	r18, r0
    3e68:	0c 01       	movw	r0, r24
    3e6a:	ca 01       	movw	r24, r20
    3e6c:	a0 01       	movw	r20, r0
    3e6e:	11 24       	eor	r1, r1
    3e70:	ff 27       	eor	r31, r31
    3e72:	59 1b       	sub	r21, r25
    3e74:	99 f0       	breq	.+38     	; 0x3e9c <__addsf3x+0x5c>
    3e76:	59 3f       	cpi	r21, 0xF9	; 249
    3e78:	50 f4       	brcc	.+20     	; 0x3e8e <__addsf3x+0x4e>
    3e7a:	50 3e       	cpi	r21, 0xE0	; 224
    3e7c:	68 f1       	brcs	.+90     	; 0x3ed8 <__addsf3x+0x98>
    3e7e:	1a 16       	cp	r1, r26
    3e80:	f0 40       	sbci	r31, 0x00	; 0
    3e82:	a2 2f       	mov	r26, r18
    3e84:	23 2f       	mov	r18, r19
    3e86:	34 2f       	mov	r19, r20
    3e88:	44 27       	eor	r20, r20
    3e8a:	58 5f       	subi	r21, 0xF8	; 248
    3e8c:	f3 cf       	rjmp	.-26     	; 0x3e74 <__addsf3x+0x34>
    3e8e:	46 95       	lsr	r20
    3e90:	37 95       	ror	r19
    3e92:	27 95       	ror	r18
    3e94:	a7 95       	ror	r26
    3e96:	f0 40       	sbci	r31, 0x00	; 0
    3e98:	53 95       	inc	r21
    3e9a:	c9 f7       	brne	.-14     	; 0x3e8e <__addsf3x+0x4e>
    3e9c:	7e f4       	brtc	.+30     	; 0x3ebc <__addsf3x+0x7c>
    3e9e:	1f 16       	cp	r1, r31
    3ea0:	ba 0b       	sbc	r27, r26
    3ea2:	62 0b       	sbc	r22, r18
    3ea4:	73 0b       	sbc	r23, r19
    3ea6:	84 0b       	sbc	r24, r20
    3ea8:	ba f0       	brmi	.+46     	; 0x3ed8 <__addsf3x+0x98>
    3eaa:	91 50       	subi	r25, 0x01	; 1
    3eac:	a1 f0       	breq	.+40     	; 0x3ed6 <__addsf3x+0x96>
    3eae:	ff 0f       	add	r31, r31
    3eb0:	bb 1f       	adc	r27, r27
    3eb2:	66 1f       	adc	r22, r22
    3eb4:	77 1f       	adc	r23, r23
    3eb6:	88 1f       	adc	r24, r24
    3eb8:	c2 f7       	brpl	.-16     	; 0x3eaa <__addsf3x+0x6a>
    3eba:	0e c0       	rjmp	.+28     	; 0x3ed8 <__addsf3x+0x98>
    3ebc:	ba 0f       	add	r27, r26
    3ebe:	62 1f       	adc	r22, r18
    3ec0:	73 1f       	adc	r23, r19
    3ec2:	84 1f       	adc	r24, r20
    3ec4:	48 f4       	brcc	.+18     	; 0x3ed8 <__addsf3x+0x98>
    3ec6:	87 95       	ror	r24
    3ec8:	77 95       	ror	r23
    3eca:	67 95       	ror	r22
    3ecc:	b7 95       	ror	r27
    3ece:	f7 95       	ror	r31
    3ed0:	9e 3f       	cpi	r25, 0xFE	; 254
    3ed2:	08 f0       	brcs	.+2      	; 0x3ed6 <__addsf3x+0x96>
    3ed4:	b3 cf       	rjmp	.-154    	; 0x3e3c <__addsf3+0x1e>
    3ed6:	93 95       	inc	r25
    3ed8:	88 0f       	add	r24, r24
    3eda:	08 f0       	brcs	.+2      	; 0x3ede <__addsf3x+0x9e>
    3edc:	99 27       	eor	r25, r25
    3ede:	ee 0f       	add	r30, r30
    3ee0:	97 95       	ror	r25
    3ee2:	87 95       	ror	r24
    3ee4:	08 95       	ret

00003ee6 <__fp_inf>:
    3ee6:	97 f9       	bld	r25, 7
    3ee8:	9f 67       	ori	r25, 0x7F	; 127
    3eea:	80 e8       	ldi	r24, 0x80	; 128
    3eec:	70 e0       	ldi	r23, 0x00	; 0
    3eee:	60 e0       	ldi	r22, 0x00	; 0
    3ef0:	08 95       	ret

00003ef2 <__fp_mpack>:
    3ef2:	9f 3f       	cpi	r25, 0xFF	; 255
    3ef4:	31 f0       	breq	.+12     	; 0x3f02 <__fp_mpack_finite+0xc>

00003ef6 <__fp_mpack_finite>:
    3ef6:	91 50       	subi	r25, 0x01	; 1
    3ef8:	20 f4       	brcc	.+8      	; 0x3f02 <__fp_mpack_finite+0xc>
    3efa:	87 95       	ror	r24
    3efc:	77 95       	ror	r23
    3efe:	67 95       	ror	r22
    3f00:	b7 95       	ror	r27
    3f02:	88 0f       	add	r24, r24
    3f04:	91 1d       	adc	r25, r1
    3f06:	96 95       	lsr	r25
    3f08:	87 95       	ror	r24
    3f0a:	97 f9       	bld	r25, 7
    3f0c:	08 95       	ret

00003f0e <__fp_nan>:
    3f0e:	9f ef       	ldi	r25, 0xFF	; 255
    3f10:	80 ec       	ldi	r24, 0xC0	; 192
    3f12:	08 95       	ret

00003f14 <__fp_norm2>:
    3f14:	91 50       	subi	r25, 0x01	; 1
    3f16:	50 40       	sbci	r21, 0x00	; 0
    3f18:	66 0f       	add	r22, r22
    3f1a:	77 1f       	adc	r23, r23
    3f1c:	88 1f       	adc	r24, r24
    3f1e:	d2 f7       	brpl	.-12     	; 0x3f14 <__fp_norm2>
    3f20:	08 95       	ret

00003f22 <__fp_pscA>:
    3f22:	00 24       	eor	r0, r0
    3f24:	0a 94       	dec	r0
    3f26:	16 16       	cp	r1, r22
    3f28:	17 06       	cpc	r1, r23
    3f2a:	18 06       	cpc	r1, r24
    3f2c:	09 06       	cpc	r0, r25
    3f2e:	08 95       	ret

00003f30 <__fp_pscB>:
    3f30:	00 24       	eor	r0, r0
    3f32:	0a 94       	dec	r0
    3f34:	12 16       	cp	r1, r18
    3f36:	13 06       	cpc	r1, r19
    3f38:	14 06       	cpc	r1, r20
    3f3a:	05 06       	cpc	r0, r21
    3f3c:	08 95       	ret

00003f3e <__udivmodhi4>:
    3f3e:	aa 1b       	sub	r26, r26
    3f40:	bb 1b       	sub	r27, r27
    3f42:	51 e1       	ldi	r21, 0x11	; 17
    3f44:	07 c0       	rjmp	.+14     	; 0x3f54 <__udivmodhi4_ep>

00003f46 <__udivmodhi4_loop>:
    3f46:	aa 1f       	adc	r26, r26
    3f48:	bb 1f       	adc	r27, r27
    3f4a:	a6 17       	cp	r26, r22
    3f4c:	b7 07       	cpc	r27, r23
    3f4e:	10 f0       	brcs	.+4      	; 0x3f54 <__udivmodhi4_ep>
    3f50:	a6 1b       	sub	r26, r22
    3f52:	b7 0b       	sbc	r27, r23

00003f54 <__udivmodhi4_ep>:
    3f54:	88 1f       	adc	r24, r24
    3f56:	99 1f       	adc	r25, r25
    3f58:	5a 95       	dec	r21
    3f5a:	a9 f7       	brne	.-22     	; 0x3f46 <__udivmodhi4_loop>
    3f5c:	80 95       	com	r24
    3f5e:	90 95       	com	r25
    3f60:	bc 01       	movw	r22, r24
    3f62:	cd 01       	movw	r24, r26
    3f64:	08 95       	ret

00003f66 <__divmodhi4>:
    3f66:	97 fb       	bst	r25, 7
    3f68:	07 2e       	mov	r0, r23
    3f6a:	16 f4       	brtc	.+4      	; 0x3f70 <__divmodhi4+0xa>
    3f6c:	00 94       	com	r0
    3f6e:	07 d0       	rcall	.+14     	; 0x3f7e <__divmodhi4_neg1>
    3f70:	77 fd       	sbrc	r23, 7
    3f72:	09 d0       	rcall	.+18     	; 0x3f86 <__divmodhi4_neg2>
    3f74:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <__udivmodhi4>
    3f78:	07 fc       	sbrc	r0, 7
    3f7a:	05 d0       	rcall	.+10     	; 0x3f86 <__divmodhi4_neg2>
    3f7c:	3e f4       	brtc	.+14     	; 0x3f8c <__divmodhi4_exit>

00003f7e <__divmodhi4_neg1>:
    3f7e:	90 95       	com	r25
    3f80:	81 95       	neg	r24
    3f82:	9f 4f       	sbci	r25, 0xFF	; 255
    3f84:	08 95       	ret

00003f86 <__divmodhi4_neg2>:
    3f86:	70 95       	com	r23
    3f88:	61 95       	neg	r22
    3f8a:	7f 4f       	sbci	r23, 0xFF	; 255

00003f8c <__divmodhi4_exit>:
    3f8c:	08 95       	ret

00003f8e <__divmodsi4>:
    3f8e:	05 2e       	mov	r0, r21
    3f90:	97 fb       	bst	r25, 7
    3f92:	1e f4       	brtc	.+6      	; 0x3f9a <__divmodsi4+0xc>
    3f94:	00 94       	com	r0
    3f96:	0e 94 de 1f 	call	0x3fbc	; 0x3fbc <__negsi2>
    3f9a:	57 fd       	sbrc	r21, 7
    3f9c:	07 d0       	rcall	.+14     	; 0x3fac <__divmodsi4_neg2>
    3f9e:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <__udivmodsi4>
    3fa2:	07 fc       	sbrc	r0, 7
    3fa4:	03 d0       	rcall	.+6      	; 0x3fac <__divmodsi4_neg2>
    3fa6:	4e f4       	brtc	.+18     	; 0x3fba <__divmodsi4_exit>
    3fa8:	0c 94 de 1f 	jmp	0x3fbc	; 0x3fbc <__negsi2>

00003fac <__divmodsi4_neg2>:
    3fac:	50 95       	com	r21
    3fae:	40 95       	com	r20
    3fb0:	30 95       	com	r19
    3fb2:	21 95       	neg	r18
    3fb4:	3f 4f       	sbci	r19, 0xFF	; 255
    3fb6:	4f 4f       	sbci	r20, 0xFF	; 255
    3fb8:	5f 4f       	sbci	r21, 0xFF	; 255

00003fba <__divmodsi4_exit>:
    3fba:	08 95       	ret

00003fbc <__negsi2>:
    3fbc:	90 95       	com	r25
    3fbe:	80 95       	com	r24
    3fc0:	70 95       	com	r23
    3fc2:	61 95       	neg	r22
    3fc4:	7f 4f       	sbci	r23, 0xFF	; 255
    3fc6:	8f 4f       	sbci	r24, 0xFF	; 255
    3fc8:	9f 4f       	sbci	r25, 0xFF	; 255
    3fca:	08 95       	ret

00003fcc <__udivmodsi4>:
    3fcc:	a1 e2       	ldi	r26, 0x21	; 33
    3fce:	1a 2e       	mov	r1, r26
    3fd0:	aa 1b       	sub	r26, r26
    3fd2:	bb 1b       	sub	r27, r27
    3fd4:	fd 01       	movw	r30, r26
    3fd6:	0d c0       	rjmp	.+26     	; 0x3ff2 <__udivmodsi4_ep>

00003fd8 <__udivmodsi4_loop>:
    3fd8:	aa 1f       	adc	r26, r26
    3fda:	bb 1f       	adc	r27, r27
    3fdc:	ee 1f       	adc	r30, r30
    3fde:	ff 1f       	adc	r31, r31
    3fe0:	a2 17       	cp	r26, r18
    3fe2:	b3 07       	cpc	r27, r19
    3fe4:	e4 07       	cpc	r30, r20
    3fe6:	f5 07       	cpc	r31, r21
    3fe8:	20 f0       	brcs	.+8      	; 0x3ff2 <__udivmodsi4_ep>
    3fea:	a2 1b       	sub	r26, r18
    3fec:	b3 0b       	sbc	r27, r19
    3fee:	e4 0b       	sbc	r30, r20
    3ff0:	f5 0b       	sbc	r31, r21

00003ff2 <__udivmodsi4_ep>:
    3ff2:	66 1f       	adc	r22, r22
    3ff4:	77 1f       	adc	r23, r23
    3ff6:	88 1f       	adc	r24, r24
    3ff8:	99 1f       	adc	r25, r25
    3ffa:	1a 94       	dec	r1
    3ffc:	69 f7       	brne	.-38     	; 0x3fd8 <__udivmodsi4_loop>
    3ffe:	60 95       	com	r22
    4000:	70 95       	com	r23
    4002:	80 95       	com	r24
    4004:	90 95       	com	r25
    4006:	9b 01       	movw	r18, r22
    4008:	ac 01       	movw	r20, r24
    400a:	bd 01       	movw	r22, r26
    400c:	cf 01       	movw	r24, r30
    400e:	08 95       	ret

00004010 <strcmp>:
    4010:	fb 01       	movw	r30, r22
    4012:	dc 01       	movw	r26, r24
    4014:	8d 91       	ld	r24, X+
    4016:	01 90       	ld	r0, Z+
    4018:	80 19       	sub	r24, r0
    401a:	01 10       	cpse	r0, r1
    401c:	d9 f3       	breq	.-10     	; 0x4014 <strcmp+0x4>
    401e:	99 0b       	sbc	r25, r25
    4020:	08 95       	ret

00004022 <sprintf>:
    4022:	ae e0       	ldi	r26, 0x0E	; 14
    4024:	b0 e0       	ldi	r27, 0x00	; 0
    4026:	e7 e1       	ldi	r30, 0x17	; 23
    4028:	f0 e2       	ldi	r31, 0x20	; 32
    402a:	0c 94 b9 22 	jmp	0x4572	; 0x4572 <__prologue_saves__+0x1c>
    402e:	0d 89       	ldd	r16, Y+21	; 0x15
    4030:	1e 89       	ldd	r17, Y+22	; 0x16
    4032:	86 e0       	ldi	r24, 0x06	; 6
    4034:	8c 83       	std	Y+4, r24	; 0x04
    4036:	1a 83       	std	Y+2, r17	; 0x02
    4038:	09 83       	std	Y+1, r16	; 0x01
    403a:	8f ef       	ldi	r24, 0xFF	; 255
    403c:	9f e7       	ldi	r25, 0x7F	; 127
    403e:	9e 83       	std	Y+6, r25	; 0x06
    4040:	8d 83       	std	Y+5, r24	; 0x05
    4042:	ae 01       	movw	r20, r28
    4044:	47 5e       	subi	r20, 0xE7	; 231
    4046:	5f 4f       	sbci	r21, 0xFF	; 255
    4048:	6f 89       	ldd	r22, Y+23	; 0x17
    404a:	78 8d       	ldd	r23, Y+24	; 0x18
    404c:	ce 01       	movw	r24, r28
    404e:	01 96       	adiw	r24, 0x01	; 1
    4050:	0e 94 33 20 	call	0x4066	; 0x4066 <vfprintf>
    4054:	ef 81       	ldd	r30, Y+7	; 0x07
    4056:	f8 85       	ldd	r31, Y+8	; 0x08
    4058:	e0 0f       	add	r30, r16
    405a:	f1 1f       	adc	r31, r17
    405c:	10 82       	st	Z, r1
    405e:	2e 96       	adiw	r28, 0x0e	; 14
    4060:	e4 e0       	ldi	r30, 0x04	; 4
    4062:	0c 94 d5 22 	jmp	0x45aa	; 0x45aa <__epilogue_restores__+0x1c>

00004066 <vfprintf>:
    4066:	ac e0       	ldi	r26, 0x0C	; 12
    4068:	b0 e0       	ldi	r27, 0x00	; 0
    406a:	e9 e3       	ldi	r30, 0x39	; 57
    406c:	f0 e2       	ldi	r31, 0x20	; 32
    406e:	0c 94 ab 22 	jmp	0x4556	; 0x4556 <__prologue_saves__>
    4072:	7c 01       	movw	r14, r24
    4074:	6b 01       	movw	r12, r22
    4076:	8a 01       	movw	r16, r20
    4078:	fc 01       	movw	r30, r24
    407a:	17 82       	std	Z+7, r1	; 0x07
    407c:	16 82       	std	Z+6, r1	; 0x06
    407e:	83 81       	ldd	r24, Z+3	; 0x03
    4080:	81 ff       	sbrs	r24, 1
    4082:	bd c1       	rjmp	.+890    	; 0x43fe <vfprintf+0x398>
    4084:	ce 01       	movw	r24, r28
    4086:	01 96       	adiw	r24, 0x01	; 1
    4088:	4c 01       	movw	r8, r24
    408a:	f7 01       	movw	r30, r14
    408c:	93 81       	ldd	r25, Z+3	; 0x03
    408e:	f6 01       	movw	r30, r12
    4090:	93 fd       	sbrc	r25, 3
    4092:	85 91       	lpm	r24, Z+
    4094:	93 ff       	sbrs	r25, 3
    4096:	81 91       	ld	r24, Z+
    4098:	6f 01       	movw	r12, r30
    409a:	88 23       	and	r24, r24
    409c:	09 f4       	brne	.+2      	; 0x40a0 <vfprintf+0x3a>
    409e:	ab c1       	rjmp	.+854    	; 0x43f6 <vfprintf+0x390>
    40a0:	85 32       	cpi	r24, 0x25	; 37
    40a2:	39 f4       	brne	.+14     	; 0x40b2 <vfprintf+0x4c>
    40a4:	93 fd       	sbrc	r25, 3
    40a6:	85 91       	lpm	r24, Z+
    40a8:	93 ff       	sbrs	r25, 3
    40aa:	81 91       	ld	r24, Z+
    40ac:	6f 01       	movw	r12, r30
    40ae:	85 32       	cpi	r24, 0x25	; 37
    40b0:	29 f4       	brne	.+10     	; 0x40bc <vfprintf+0x56>
    40b2:	b7 01       	movw	r22, r14
    40b4:	90 e0       	ldi	r25, 0x00	; 0
    40b6:	0e 94 1b 22 	call	0x4436	; 0x4436 <fputc>
    40ba:	e7 cf       	rjmp	.-50     	; 0x408a <vfprintf+0x24>
    40bc:	51 2c       	mov	r5, r1
    40be:	31 2c       	mov	r3, r1
    40c0:	20 e0       	ldi	r18, 0x00	; 0
    40c2:	20 32       	cpi	r18, 0x20	; 32
    40c4:	a0 f4       	brcc	.+40     	; 0x40ee <vfprintf+0x88>
    40c6:	8b 32       	cpi	r24, 0x2B	; 43
    40c8:	69 f0       	breq	.+26     	; 0x40e4 <vfprintf+0x7e>
    40ca:	30 f4       	brcc	.+12     	; 0x40d8 <vfprintf+0x72>
    40cc:	80 32       	cpi	r24, 0x20	; 32
    40ce:	59 f0       	breq	.+22     	; 0x40e6 <vfprintf+0x80>
    40d0:	83 32       	cpi	r24, 0x23	; 35
    40d2:	69 f4       	brne	.+26     	; 0x40ee <vfprintf+0x88>
    40d4:	20 61       	ori	r18, 0x10	; 16
    40d6:	2c c0       	rjmp	.+88     	; 0x4130 <vfprintf+0xca>
    40d8:	8d 32       	cpi	r24, 0x2D	; 45
    40da:	39 f0       	breq	.+14     	; 0x40ea <vfprintf+0x84>
    40dc:	80 33       	cpi	r24, 0x30	; 48
    40de:	39 f4       	brne	.+14     	; 0x40ee <vfprintf+0x88>
    40e0:	21 60       	ori	r18, 0x01	; 1
    40e2:	26 c0       	rjmp	.+76     	; 0x4130 <vfprintf+0xca>
    40e4:	22 60       	ori	r18, 0x02	; 2
    40e6:	24 60       	ori	r18, 0x04	; 4
    40e8:	23 c0       	rjmp	.+70     	; 0x4130 <vfprintf+0xca>
    40ea:	28 60       	ori	r18, 0x08	; 8
    40ec:	21 c0       	rjmp	.+66     	; 0x4130 <vfprintf+0xca>
    40ee:	27 fd       	sbrc	r18, 7
    40f0:	27 c0       	rjmp	.+78     	; 0x4140 <vfprintf+0xda>
    40f2:	30 ed       	ldi	r19, 0xD0	; 208
    40f4:	38 0f       	add	r19, r24
    40f6:	3a 30       	cpi	r19, 0x0A	; 10
    40f8:	78 f4       	brcc	.+30     	; 0x4118 <vfprintf+0xb2>
    40fa:	26 ff       	sbrs	r18, 6
    40fc:	06 c0       	rjmp	.+12     	; 0x410a <vfprintf+0xa4>
    40fe:	fa e0       	ldi	r31, 0x0A	; 10
    4100:	5f 9e       	mul	r5, r31
    4102:	30 0d       	add	r19, r0
    4104:	11 24       	eor	r1, r1
    4106:	53 2e       	mov	r5, r19
    4108:	13 c0       	rjmp	.+38     	; 0x4130 <vfprintf+0xca>
    410a:	8a e0       	ldi	r24, 0x0A	; 10
    410c:	38 9e       	mul	r3, r24
    410e:	30 0d       	add	r19, r0
    4110:	11 24       	eor	r1, r1
    4112:	33 2e       	mov	r3, r19
    4114:	20 62       	ori	r18, 0x20	; 32
    4116:	0c c0       	rjmp	.+24     	; 0x4130 <vfprintf+0xca>
    4118:	8e 32       	cpi	r24, 0x2E	; 46
    411a:	21 f4       	brne	.+8      	; 0x4124 <vfprintf+0xbe>
    411c:	26 fd       	sbrc	r18, 6
    411e:	6b c1       	rjmp	.+726    	; 0x43f6 <vfprintf+0x390>
    4120:	20 64       	ori	r18, 0x40	; 64
    4122:	06 c0       	rjmp	.+12     	; 0x4130 <vfprintf+0xca>
    4124:	8c 36       	cpi	r24, 0x6C	; 108
    4126:	11 f4       	brne	.+4      	; 0x412c <vfprintf+0xc6>
    4128:	20 68       	ori	r18, 0x80	; 128
    412a:	02 c0       	rjmp	.+4      	; 0x4130 <vfprintf+0xca>
    412c:	88 36       	cpi	r24, 0x68	; 104
    412e:	41 f4       	brne	.+16     	; 0x4140 <vfprintf+0xda>
    4130:	f6 01       	movw	r30, r12
    4132:	93 fd       	sbrc	r25, 3
    4134:	85 91       	lpm	r24, Z+
    4136:	93 ff       	sbrs	r25, 3
    4138:	81 91       	ld	r24, Z+
    413a:	6f 01       	movw	r12, r30
    413c:	81 11       	cpse	r24, r1
    413e:	c1 cf       	rjmp	.-126    	; 0x40c2 <vfprintf+0x5c>
    4140:	98 2f       	mov	r25, r24
    4142:	9f 7d       	andi	r25, 0xDF	; 223
    4144:	95 54       	subi	r25, 0x45	; 69
    4146:	93 30       	cpi	r25, 0x03	; 3
    4148:	28 f4       	brcc	.+10     	; 0x4154 <vfprintf+0xee>
    414a:	0c 5f       	subi	r16, 0xFC	; 252
    414c:	1f 4f       	sbci	r17, 0xFF	; 255
    414e:	ff e3       	ldi	r31, 0x3F	; 63
    4150:	f9 83       	std	Y+1, r31	; 0x01
    4152:	0d c0       	rjmp	.+26     	; 0x416e <vfprintf+0x108>
    4154:	83 36       	cpi	r24, 0x63	; 99
    4156:	31 f0       	breq	.+12     	; 0x4164 <vfprintf+0xfe>
    4158:	83 37       	cpi	r24, 0x73	; 115
    415a:	71 f0       	breq	.+28     	; 0x4178 <vfprintf+0x112>
    415c:	83 35       	cpi	r24, 0x53	; 83
    415e:	09 f0       	breq	.+2      	; 0x4162 <vfprintf+0xfc>
    4160:	5b c0       	rjmp	.+182    	; 0x4218 <vfprintf+0x1b2>
    4162:	22 c0       	rjmp	.+68     	; 0x41a8 <vfprintf+0x142>
    4164:	f8 01       	movw	r30, r16
    4166:	80 81       	ld	r24, Z
    4168:	89 83       	std	Y+1, r24	; 0x01
    416a:	0e 5f       	subi	r16, 0xFE	; 254
    416c:	1f 4f       	sbci	r17, 0xFF	; 255
    416e:	44 24       	eor	r4, r4
    4170:	43 94       	inc	r4
    4172:	51 2c       	mov	r5, r1
    4174:	54 01       	movw	r10, r8
    4176:	15 c0       	rjmp	.+42     	; 0x41a2 <vfprintf+0x13c>
    4178:	38 01       	movw	r6, r16
    417a:	f2 e0       	ldi	r31, 0x02	; 2
    417c:	6f 0e       	add	r6, r31
    417e:	71 1c       	adc	r7, r1
    4180:	f8 01       	movw	r30, r16
    4182:	a0 80       	ld	r10, Z
    4184:	b1 80       	ldd	r11, Z+1	; 0x01
    4186:	26 ff       	sbrs	r18, 6
    4188:	03 c0       	rjmp	.+6      	; 0x4190 <vfprintf+0x12a>
    418a:	65 2d       	mov	r22, r5
    418c:	70 e0       	ldi	r23, 0x00	; 0
    418e:	02 c0       	rjmp	.+4      	; 0x4194 <vfprintf+0x12e>
    4190:	6f ef       	ldi	r22, 0xFF	; 255
    4192:	7f ef       	ldi	r23, 0xFF	; 255
    4194:	c5 01       	movw	r24, r10
    4196:	2c 87       	std	Y+12, r18	; 0x0c
    4198:	0e 94 10 22 	call	0x4420	; 0x4420 <strnlen>
    419c:	2c 01       	movw	r4, r24
    419e:	83 01       	movw	r16, r6
    41a0:	2c 85       	ldd	r18, Y+12	; 0x0c
    41a2:	2f 77       	andi	r18, 0x7F	; 127
    41a4:	22 2e       	mov	r2, r18
    41a6:	17 c0       	rjmp	.+46     	; 0x41d6 <vfprintf+0x170>
    41a8:	38 01       	movw	r6, r16
    41aa:	f2 e0       	ldi	r31, 0x02	; 2
    41ac:	6f 0e       	add	r6, r31
    41ae:	71 1c       	adc	r7, r1
    41b0:	f8 01       	movw	r30, r16
    41b2:	a0 80       	ld	r10, Z
    41b4:	b1 80       	ldd	r11, Z+1	; 0x01
    41b6:	26 ff       	sbrs	r18, 6
    41b8:	03 c0       	rjmp	.+6      	; 0x41c0 <vfprintf+0x15a>
    41ba:	65 2d       	mov	r22, r5
    41bc:	70 e0       	ldi	r23, 0x00	; 0
    41be:	02 c0       	rjmp	.+4      	; 0x41c4 <vfprintf+0x15e>
    41c0:	6f ef       	ldi	r22, 0xFF	; 255
    41c2:	7f ef       	ldi	r23, 0xFF	; 255
    41c4:	c5 01       	movw	r24, r10
    41c6:	2c 87       	std	Y+12, r18	; 0x0c
    41c8:	0e 94 05 22 	call	0x440a	; 0x440a <strnlen_P>
    41cc:	2c 01       	movw	r4, r24
    41ce:	2c 85       	ldd	r18, Y+12	; 0x0c
    41d0:	20 68       	ori	r18, 0x80	; 128
    41d2:	22 2e       	mov	r2, r18
    41d4:	83 01       	movw	r16, r6
    41d6:	23 fc       	sbrc	r2, 3
    41d8:	1b c0       	rjmp	.+54     	; 0x4210 <vfprintf+0x1aa>
    41da:	83 2d       	mov	r24, r3
    41dc:	90 e0       	ldi	r25, 0x00	; 0
    41de:	48 16       	cp	r4, r24
    41e0:	59 06       	cpc	r5, r25
    41e2:	b0 f4       	brcc	.+44     	; 0x4210 <vfprintf+0x1aa>
    41e4:	b7 01       	movw	r22, r14
    41e6:	80 e2       	ldi	r24, 0x20	; 32
    41e8:	90 e0       	ldi	r25, 0x00	; 0
    41ea:	0e 94 1b 22 	call	0x4436	; 0x4436 <fputc>
    41ee:	3a 94       	dec	r3
    41f0:	f4 cf       	rjmp	.-24     	; 0x41da <vfprintf+0x174>
    41f2:	f5 01       	movw	r30, r10
    41f4:	27 fc       	sbrc	r2, 7
    41f6:	85 91       	lpm	r24, Z+
    41f8:	27 fe       	sbrs	r2, 7
    41fa:	81 91       	ld	r24, Z+
    41fc:	5f 01       	movw	r10, r30
    41fe:	b7 01       	movw	r22, r14
    4200:	90 e0       	ldi	r25, 0x00	; 0
    4202:	0e 94 1b 22 	call	0x4436	; 0x4436 <fputc>
    4206:	31 10       	cpse	r3, r1
    4208:	3a 94       	dec	r3
    420a:	f1 e0       	ldi	r31, 0x01	; 1
    420c:	4f 1a       	sub	r4, r31
    420e:	51 08       	sbc	r5, r1
    4210:	41 14       	cp	r4, r1
    4212:	51 04       	cpc	r5, r1
    4214:	71 f7       	brne	.-36     	; 0x41f2 <vfprintf+0x18c>
    4216:	e5 c0       	rjmp	.+458    	; 0x43e2 <vfprintf+0x37c>
    4218:	84 36       	cpi	r24, 0x64	; 100
    421a:	11 f0       	breq	.+4      	; 0x4220 <vfprintf+0x1ba>
    421c:	89 36       	cpi	r24, 0x69	; 105
    421e:	39 f5       	brne	.+78     	; 0x426e <vfprintf+0x208>
    4220:	f8 01       	movw	r30, r16
    4222:	27 ff       	sbrs	r18, 7
    4224:	07 c0       	rjmp	.+14     	; 0x4234 <vfprintf+0x1ce>
    4226:	60 81       	ld	r22, Z
    4228:	71 81       	ldd	r23, Z+1	; 0x01
    422a:	82 81       	ldd	r24, Z+2	; 0x02
    422c:	93 81       	ldd	r25, Z+3	; 0x03
    422e:	0c 5f       	subi	r16, 0xFC	; 252
    4230:	1f 4f       	sbci	r17, 0xFF	; 255
    4232:	08 c0       	rjmp	.+16     	; 0x4244 <vfprintf+0x1de>
    4234:	60 81       	ld	r22, Z
    4236:	71 81       	ldd	r23, Z+1	; 0x01
    4238:	88 27       	eor	r24, r24
    423a:	77 fd       	sbrc	r23, 7
    423c:	80 95       	com	r24
    423e:	98 2f       	mov	r25, r24
    4240:	0e 5f       	subi	r16, 0xFE	; 254
    4242:	1f 4f       	sbci	r17, 0xFF	; 255
    4244:	2f 76       	andi	r18, 0x6F	; 111
    4246:	b2 2e       	mov	r11, r18
    4248:	97 ff       	sbrs	r25, 7
    424a:	09 c0       	rjmp	.+18     	; 0x425e <vfprintf+0x1f8>
    424c:	90 95       	com	r25
    424e:	80 95       	com	r24
    4250:	70 95       	com	r23
    4252:	61 95       	neg	r22
    4254:	7f 4f       	sbci	r23, 0xFF	; 255
    4256:	8f 4f       	sbci	r24, 0xFF	; 255
    4258:	9f 4f       	sbci	r25, 0xFF	; 255
    425a:	20 68       	ori	r18, 0x80	; 128
    425c:	b2 2e       	mov	r11, r18
    425e:	2a e0       	ldi	r18, 0x0A	; 10
    4260:	30 e0       	ldi	r19, 0x00	; 0
    4262:	a4 01       	movw	r20, r8
    4264:	0e 94 4d 22 	call	0x449a	; 0x449a <__ultoa_invert>
    4268:	a8 2e       	mov	r10, r24
    426a:	a8 18       	sub	r10, r8
    426c:	44 c0       	rjmp	.+136    	; 0x42f6 <vfprintf+0x290>
    426e:	85 37       	cpi	r24, 0x75	; 117
    4270:	29 f4       	brne	.+10     	; 0x427c <vfprintf+0x216>
    4272:	2f 7e       	andi	r18, 0xEF	; 239
    4274:	b2 2e       	mov	r11, r18
    4276:	2a e0       	ldi	r18, 0x0A	; 10
    4278:	30 e0       	ldi	r19, 0x00	; 0
    427a:	25 c0       	rjmp	.+74     	; 0x42c6 <vfprintf+0x260>
    427c:	f2 2f       	mov	r31, r18
    427e:	f9 7f       	andi	r31, 0xF9	; 249
    4280:	bf 2e       	mov	r11, r31
    4282:	8f 36       	cpi	r24, 0x6F	; 111
    4284:	c1 f0       	breq	.+48     	; 0x42b6 <vfprintf+0x250>
    4286:	18 f4       	brcc	.+6      	; 0x428e <vfprintf+0x228>
    4288:	88 35       	cpi	r24, 0x58	; 88
    428a:	79 f0       	breq	.+30     	; 0x42aa <vfprintf+0x244>
    428c:	b4 c0       	rjmp	.+360    	; 0x43f6 <vfprintf+0x390>
    428e:	80 37       	cpi	r24, 0x70	; 112
    4290:	19 f0       	breq	.+6      	; 0x4298 <vfprintf+0x232>
    4292:	88 37       	cpi	r24, 0x78	; 120
    4294:	21 f0       	breq	.+8      	; 0x429e <vfprintf+0x238>
    4296:	af c0       	rjmp	.+350    	; 0x43f6 <vfprintf+0x390>
    4298:	2f 2f       	mov	r18, r31
    429a:	20 61       	ori	r18, 0x10	; 16
    429c:	b2 2e       	mov	r11, r18
    429e:	b4 fe       	sbrs	r11, 4
    42a0:	0d c0       	rjmp	.+26     	; 0x42bc <vfprintf+0x256>
    42a2:	8b 2d       	mov	r24, r11
    42a4:	84 60       	ori	r24, 0x04	; 4
    42a6:	b8 2e       	mov	r11, r24
    42a8:	09 c0       	rjmp	.+18     	; 0x42bc <vfprintf+0x256>
    42aa:	24 ff       	sbrs	r18, 4
    42ac:	0a c0       	rjmp	.+20     	; 0x42c2 <vfprintf+0x25c>
    42ae:	9f 2f       	mov	r25, r31
    42b0:	96 60       	ori	r25, 0x06	; 6
    42b2:	b9 2e       	mov	r11, r25
    42b4:	06 c0       	rjmp	.+12     	; 0x42c2 <vfprintf+0x25c>
    42b6:	28 e0       	ldi	r18, 0x08	; 8
    42b8:	30 e0       	ldi	r19, 0x00	; 0
    42ba:	05 c0       	rjmp	.+10     	; 0x42c6 <vfprintf+0x260>
    42bc:	20 e1       	ldi	r18, 0x10	; 16
    42be:	30 e0       	ldi	r19, 0x00	; 0
    42c0:	02 c0       	rjmp	.+4      	; 0x42c6 <vfprintf+0x260>
    42c2:	20 e1       	ldi	r18, 0x10	; 16
    42c4:	32 e0       	ldi	r19, 0x02	; 2
    42c6:	f8 01       	movw	r30, r16
    42c8:	b7 fe       	sbrs	r11, 7
    42ca:	07 c0       	rjmp	.+14     	; 0x42da <vfprintf+0x274>
    42cc:	60 81       	ld	r22, Z
    42ce:	71 81       	ldd	r23, Z+1	; 0x01
    42d0:	82 81       	ldd	r24, Z+2	; 0x02
    42d2:	93 81       	ldd	r25, Z+3	; 0x03
    42d4:	0c 5f       	subi	r16, 0xFC	; 252
    42d6:	1f 4f       	sbci	r17, 0xFF	; 255
    42d8:	06 c0       	rjmp	.+12     	; 0x42e6 <vfprintf+0x280>
    42da:	60 81       	ld	r22, Z
    42dc:	71 81       	ldd	r23, Z+1	; 0x01
    42de:	80 e0       	ldi	r24, 0x00	; 0
    42e0:	90 e0       	ldi	r25, 0x00	; 0
    42e2:	0e 5f       	subi	r16, 0xFE	; 254
    42e4:	1f 4f       	sbci	r17, 0xFF	; 255
    42e6:	a4 01       	movw	r20, r8
    42e8:	0e 94 4d 22 	call	0x449a	; 0x449a <__ultoa_invert>
    42ec:	a8 2e       	mov	r10, r24
    42ee:	a8 18       	sub	r10, r8
    42f0:	fb 2d       	mov	r31, r11
    42f2:	ff 77       	andi	r31, 0x7F	; 127
    42f4:	bf 2e       	mov	r11, r31
    42f6:	b6 fe       	sbrs	r11, 6
    42f8:	0b c0       	rjmp	.+22     	; 0x4310 <vfprintf+0x2aa>
    42fa:	2b 2d       	mov	r18, r11
    42fc:	2e 7f       	andi	r18, 0xFE	; 254
    42fe:	a5 14       	cp	r10, r5
    4300:	50 f4       	brcc	.+20     	; 0x4316 <vfprintf+0x2b0>
    4302:	b4 fe       	sbrs	r11, 4
    4304:	0a c0       	rjmp	.+20     	; 0x431a <vfprintf+0x2b4>
    4306:	b2 fc       	sbrc	r11, 2
    4308:	08 c0       	rjmp	.+16     	; 0x431a <vfprintf+0x2b4>
    430a:	2b 2d       	mov	r18, r11
    430c:	2e 7e       	andi	r18, 0xEE	; 238
    430e:	05 c0       	rjmp	.+10     	; 0x431a <vfprintf+0x2b4>
    4310:	7a 2c       	mov	r7, r10
    4312:	2b 2d       	mov	r18, r11
    4314:	03 c0       	rjmp	.+6      	; 0x431c <vfprintf+0x2b6>
    4316:	7a 2c       	mov	r7, r10
    4318:	01 c0       	rjmp	.+2      	; 0x431c <vfprintf+0x2b6>
    431a:	75 2c       	mov	r7, r5
    431c:	24 ff       	sbrs	r18, 4
    431e:	0d c0       	rjmp	.+26     	; 0x433a <vfprintf+0x2d4>
    4320:	fe 01       	movw	r30, r28
    4322:	ea 0d       	add	r30, r10
    4324:	f1 1d       	adc	r31, r1
    4326:	80 81       	ld	r24, Z
    4328:	80 33       	cpi	r24, 0x30	; 48
    432a:	11 f4       	brne	.+4      	; 0x4330 <vfprintf+0x2ca>
    432c:	29 7e       	andi	r18, 0xE9	; 233
    432e:	09 c0       	rjmp	.+18     	; 0x4342 <vfprintf+0x2dc>
    4330:	22 ff       	sbrs	r18, 2
    4332:	06 c0       	rjmp	.+12     	; 0x4340 <vfprintf+0x2da>
    4334:	73 94       	inc	r7
    4336:	73 94       	inc	r7
    4338:	04 c0       	rjmp	.+8      	; 0x4342 <vfprintf+0x2dc>
    433a:	82 2f       	mov	r24, r18
    433c:	86 78       	andi	r24, 0x86	; 134
    433e:	09 f0       	breq	.+2      	; 0x4342 <vfprintf+0x2dc>
    4340:	73 94       	inc	r7
    4342:	23 fd       	sbrc	r18, 3
    4344:	13 c0       	rjmp	.+38     	; 0x436c <vfprintf+0x306>
    4346:	20 ff       	sbrs	r18, 0
    4348:	06 c0       	rjmp	.+12     	; 0x4356 <vfprintf+0x2f0>
    434a:	5a 2c       	mov	r5, r10
    434c:	73 14       	cp	r7, r3
    434e:	18 f4       	brcc	.+6      	; 0x4356 <vfprintf+0x2f0>
    4350:	53 0c       	add	r5, r3
    4352:	57 18       	sub	r5, r7
    4354:	73 2c       	mov	r7, r3
    4356:	73 14       	cp	r7, r3
    4358:	68 f4       	brcc	.+26     	; 0x4374 <vfprintf+0x30e>
    435a:	b7 01       	movw	r22, r14
    435c:	80 e2       	ldi	r24, 0x20	; 32
    435e:	90 e0       	ldi	r25, 0x00	; 0
    4360:	2c 87       	std	Y+12, r18	; 0x0c
    4362:	0e 94 1b 22 	call	0x4436	; 0x4436 <fputc>
    4366:	73 94       	inc	r7
    4368:	2c 85       	ldd	r18, Y+12	; 0x0c
    436a:	f5 cf       	rjmp	.-22     	; 0x4356 <vfprintf+0x2f0>
    436c:	73 14       	cp	r7, r3
    436e:	10 f4       	brcc	.+4      	; 0x4374 <vfprintf+0x30e>
    4370:	37 18       	sub	r3, r7
    4372:	01 c0       	rjmp	.+2      	; 0x4376 <vfprintf+0x310>
    4374:	31 2c       	mov	r3, r1
    4376:	24 ff       	sbrs	r18, 4
    4378:	12 c0       	rjmp	.+36     	; 0x439e <vfprintf+0x338>
    437a:	b7 01       	movw	r22, r14
    437c:	80 e3       	ldi	r24, 0x30	; 48
    437e:	90 e0       	ldi	r25, 0x00	; 0
    4380:	2c 87       	std	Y+12, r18	; 0x0c
    4382:	0e 94 1b 22 	call	0x4436	; 0x4436 <fputc>
    4386:	2c 85       	ldd	r18, Y+12	; 0x0c
    4388:	22 ff       	sbrs	r18, 2
    438a:	17 c0       	rjmp	.+46     	; 0x43ba <vfprintf+0x354>
    438c:	21 ff       	sbrs	r18, 1
    438e:	03 c0       	rjmp	.+6      	; 0x4396 <vfprintf+0x330>
    4390:	88 e5       	ldi	r24, 0x58	; 88
    4392:	90 e0       	ldi	r25, 0x00	; 0
    4394:	02 c0       	rjmp	.+4      	; 0x439a <vfprintf+0x334>
    4396:	88 e7       	ldi	r24, 0x78	; 120
    4398:	90 e0       	ldi	r25, 0x00	; 0
    439a:	b7 01       	movw	r22, r14
    439c:	0c c0       	rjmp	.+24     	; 0x43b6 <vfprintf+0x350>
    439e:	82 2f       	mov	r24, r18
    43a0:	86 78       	andi	r24, 0x86	; 134
    43a2:	59 f0       	breq	.+22     	; 0x43ba <vfprintf+0x354>
    43a4:	21 fd       	sbrc	r18, 1
    43a6:	02 c0       	rjmp	.+4      	; 0x43ac <vfprintf+0x346>
    43a8:	80 e2       	ldi	r24, 0x20	; 32
    43aa:	01 c0       	rjmp	.+2      	; 0x43ae <vfprintf+0x348>
    43ac:	8b e2       	ldi	r24, 0x2B	; 43
    43ae:	27 fd       	sbrc	r18, 7
    43b0:	8d e2       	ldi	r24, 0x2D	; 45
    43b2:	b7 01       	movw	r22, r14
    43b4:	90 e0       	ldi	r25, 0x00	; 0
    43b6:	0e 94 1b 22 	call	0x4436	; 0x4436 <fputc>
    43ba:	a5 14       	cp	r10, r5
    43bc:	38 f4       	brcc	.+14     	; 0x43cc <vfprintf+0x366>
    43be:	b7 01       	movw	r22, r14
    43c0:	80 e3       	ldi	r24, 0x30	; 48
    43c2:	90 e0       	ldi	r25, 0x00	; 0
    43c4:	0e 94 1b 22 	call	0x4436	; 0x4436 <fputc>
    43c8:	5a 94       	dec	r5
    43ca:	f7 cf       	rjmp	.-18     	; 0x43ba <vfprintf+0x354>
    43cc:	aa 94       	dec	r10
    43ce:	f4 01       	movw	r30, r8
    43d0:	ea 0d       	add	r30, r10
    43d2:	f1 1d       	adc	r31, r1
    43d4:	80 81       	ld	r24, Z
    43d6:	b7 01       	movw	r22, r14
    43d8:	90 e0       	ldi	r25, 0x00	; 0
    43da:	0e 94 1b 22 	call	0x4436	; 0x4436 <fputc>
    43de:	a1 10       	cpse	r10, r1
    43e0:	f5 cf       	rjmp	.-22     	; 0x43cc <vfprintf+0x366>
    43e2:	33 20       	and	r3, r3
    43e4:	09 f4       	brne	.+2      	; 0x43e8 <vfprintf+0x382>
    43e6:	51 ce       	rjmp	.-862    	; 0x408a <vfprintf+0x24>
    43e8:	b7 01       	movw	r22, r14
    43ea:	80 e2       	ldi	r24, 0x20	; 32
    43ec:	90 e0       	ldi	r25, 0x00	; 0
    43ee:	0e 94 1b 22 	call	0x4436	; 0x4436 <fputc>
    43f2:	3a 94       	dec	r3
    43f4:	f6 cf       	rjmp	.-20     	; 0x43e2 <vfprintf+0x37c>
    43f6:	f7 01       	movw	r30, r14
    43f8:	86 81       	ldd	r24, Z+6	; 0x06
    43fa:	97 81       	ldd	r25, Z+7	; 0x07
    43fc:	02 c0       	rjmp	.+4      	; 0x4402 <vfprintf+0x39c>
    43fe:	8f ef       	ldi	r24, 0xFF	; 255
    4400:	9f ef       	ldi	r25, 0xFF	; 255
    4402:	2c 96       	adiw	r28, 0x0c	; 12
    4404:	e2 e1       	ldi	r30, 0x12	; 18
    4406:	0c 94 c7 22 	jmp	0x458e	; 0x458e <__epilogue_restores__>

0000440a <strnlen_P>:
    440a:	fc 01       	movw	r30, r24
    440c:	05 90       	lpm	r0, Z+
    440e:	61 50       	subi	r22, 0x01	; 1
    4410:	70 40       	sbci	r23, 0x00	; 0
    4412:	01 10       	cpse	r0, r1
    4414:	d8 f7       	brcc	.-10     	; 0x440c <strnlen_P+0x2>
    4416:	80 95       	com	r24
    4418:	90 95       	com	r25
    441a:	8e 0f       	add	r24, r30
    441c:	9f 1f       	adc	r25, r31
    441e:	08 95       	ret

00004420 <strnlen>:
    4420:	fc 01       	movw	r30, r24
    4422:	61 50       	subi	r22, 0x01	; 1
    4424:	70 40       	sbci	r23, 0x00	; 0
    4426:	01 90       	ld	r0, Z+
    4428:	01 10       	cpse	r0, r1
    442a:	d8 f7       	brcc	.-10     	; 0x4422 <strnlen+0x2>
    442c:	80 95       	com	r24
    442e:	90 95       	com	r25
    4430:	8e 0f       	add	r24, r30
    4432:	9f 1f       	adc	r25, r31
    4434:	08 95       	ret

00004436 <fputc>:
    4436:	0f 93       	push	r16
    4438:	1f 93       	push	r17
    443a:	cf 93       	push	r28
    443c:	df 93       	push	r29
    443e:	18 2f       	mov	r17, r24
    4440:	09 2f       	mov	r16, r25
    4442:	eb 01       	movw	r28, r22
    4444:	8b 81       	ldd	r24, Y+3	; 0x03
    4446:	81 fd       	sbrc	r24, 1
    4448:	03 c0       	rjmp	.+6      	; 0x4450 <fputc+0x1a>
    444a:	8f ef       	ldi	r24, 0xFF	; 255
    444c:	9f ef       	ldi	r25, 0xFF	; 255
    444e:	20 c0       	rjmp	.+64     	; 0x4490 <fputc+0x5a>
    4450:	82 ff       	sbrs	r24, 2
    4452:	10 c0       	rjmp	.+32     	; 0x4474 <fputc+0x3e>
    4454:	4e 81       	ldd	r20, Y+6	; 0x06
    4456:	5f 81       	ldd	r21, Y+7	; 0x07
    4458:	2c 81       	ldd	r18, Y+4	; 0x04
    445a:	3d 81       	ldd	r19, Y+5	; 0x05
    445c:	42 17       	cp	r20, r18
    445e:	53 07       	cpc	r21, r19
    4460:	7c f4       	brge	.+30     	; 0x4480 <fputc+0x4a>
    4462:	e8 81       	ld	r30, Y
    4464:	f9 81       	ldd	r31, Y+1	; 0x01
    4466:	9f 01       	movw	r18, r30
    4468:	2f 5f       	subi	r18, 0xFF	; 255
    446a:	3f 4f       	sbci	r19, 0xFF	; 255
    446c:	39 83       	std	Y+1, r19	; 0x01
    446e:	28 83       	st	Y, r18
    4470:	10 83       	st	Z, r17
    4472:	06 c0       	rjmp	.+12     	; 0x4480 <fputc+0x4a>
    4474:	e8 85       	ldd	r30, Y+8	; 0x08
    4476:	f9 85       	ldd	r31, Y+9	; 0x09
    4478:	81 2f       	mov	r24, r17
    447a:	09 95       	icall
    447c:	89 2b       	or	r24, r25
    447e:	29 f7       	brne	.-54     	; 0x444a <fputc+0x14>
    4480:	2e 81       	ldd	r18, Y+6	; 0x06
    4482:	3f 81       	ldd	r19, Y+7	; 0x07
    4484:	2f 5f       	subi	r18, 0xFF	; 255
    4486:	3f 4f       	sbci	r19, 0xFF	; 255
    4488:	3f 83       	std	Y+7, r19	; 0x07
    448a:	2e 83       	std	Y+6, r18	; 0x06
    448c:	81 2f       	mov	r24, r17
    448e:	90 2f       	mov	r25, r16
    4490:	df 91       	pop	r29
    4492:	cf 91       	pop	r28
    4494:	1f 91       	pop	r17
    4496:	0f 91       	pop	r16
    4498:	08 95       	ret

0000449a <__ultoa_invert>:
    449a:	fa 01       	movw	r30, r20
    449c:	aa 27       	eor	r26, r26
    449e:	28 30       	cpi	r18, 0x08	; 8
    44a0:	51 f1       	breq	.+84     	; 0x44f6 <__ultoa_invert+0x5c>
    44a2:	20 31       	cpi	r18, 0x10	; 16
    44a4:	81 f1       	breq	.+96     	; 0x4506 <__ultoa_invert+0x6c>
    44a6:	e8 94       	clt
    44a8:	6f 93       	push	r22
    44aa:	6e 7f       	andi	r22, 0xFE	; 254
    44ac:	6e 5f       	subi	r22, 0xFE	; 254
    44ae:	7f 4f       	sbci	r23, 0xFF	; 255
    44b0:	8f 4f       	sbci	r24, 0xFF	; 255
    44b2:	9f 4f       	sbci	r25, 0xFF	; 255
    44b4:	af 4f       	sbci	r26, 0xFF	; 255
    44b6:	b1 e0       	ldi	r27, 0x01	; 1
    44b8:	3e d0       	rcall	.+124    	; 0x4536 <__ultoa_invert+0x9c>
    44ba:	b4 e0       	ldi	r27, 0x04	; 4
    44bc:	3c d0       	rcall	.+120    	; 0x4536 <__ultoa_invert+0x9c>
    44be:	67 0f       	add	r22, r23
    44c0:	78 1f       	adc	r23, r24
    44c2:	89 1f       	adc	r24, r25
    44c4:	9a 1f       	adc	r25, r26
    44c6:	a1 1d       	adc	r26, r1
    44c8:	68 0f       	add	r22, r24
    44ca:	79 1f       	adc	r23, r25
    44cc:	8a 1f       	adc	r24, r26
    44ce:	91 1d       	adc	r25, r1
    44d0:	a1 1d       	adc	r26, r1
    44d2:	6a 0f       	add	r22, r26
    44d4:	71 1d       	adc	r23, r1
    44d6:	81 1d       	adc	r24, r1
    44d8:	91 1d       	adc	r25, r1
    44da:	a1 1d       	adc	r26, r1
    44dc:	20 d0       	rcall	.+64     	; 0x451e <__ultoa_invert+0x84>
    44de:	09 f4       	brne	.+2      	; 0x44e2 <__ultoa_invert+0x48>
    44e0:	68 94       	set
    44e2:	3f 91       	pop	r19
    44e4:	2a e0       	ldi	r18, 0x0A	; 10
    44e6:	26 9f       	mul	r18, r22
    44e8:	11 24       	eor	r1, r1
    44ea:	30 19       	sub	r19, r0
    44ec:	30 5d       	subi	r19, 0xD0	; 208
    44ee:	31 93       	st	Z+, r19
    44f0:	de f6       	brtc	.-74     	; 0x44a8 <__ultoa_invert+0xe>
    44f2:	cf 01       	movw	r24, r30
    44f4:	08 95       	ret
    44f6:	46 2f       	mov	r20, r22
    44f8:	47 70       	andi	r20, 0x07	; 7
    44fa:	40 5d       	subi	r20, 0xD0	; 208
    44fc:	41 93       	st	Z+, r20
    44fe:	b3 e0       	ldi	r27, 0x03	; 3
    4500:	0f d0       	rcall	.+30     	; 0x4520 <__ultoa_invert+0x86>
    4502:	c9 f7       	brne	.-14     	; 0x44f6 <__ultoa_invert+0x5c>
    4504:	f6 cf       	rjmp	.-20     	; 0x44f2 <__ultoa_invert+0x58>
    4506:	46 2f       	mov	r20, r22
    4508:	4f 70       	andi	r20, 0x0F	; 15
    450a:	40 5d       	subi	r20, 0xD0	; 208
    450c:	4a 33       	cpi	r20, 0x3A	; 58
    450e:	18 f0       	brcs	.+6      	; 0x4516 <__ultoa_invert+0x7c>
    4510:	49 5d       	subi	r20, 0xD9	; 217
    4512:	31 fd       	sbrc	r19, 1
    4514:	40 52       	subi	r20, 0x20	; 32
    4516:	41 93       	st	Z+, r20
    4518:	02 d0       	rcall	.+4      	; 0x451e <__ultoa_invert+0x84>
    451a:	a9 f7       	brne	.-22     	; 0x4506 <__ultoa_invert+0x6c>
    451c:	ea cf       	rjmp	.-44     	; 0x44f2 <__ultoa_invert+0x58>
    451e:	b4 e0       	ldi	r27, 0x04	; 4
    4520:	a6 95       	lsr	r26
    4522:	97 95       	ror	r25
    4524:	87 95       	ror	r24
    4526:	77 95       	ror	r23
    4528:	67 95       	ror	r22
    452a:	ba 95       	dec	r27
    452c:	c9 f7       	brne	.-14     	; 0x4520 <__ultoa_invert+0x86>
    452e:	00 97       	sbiw	r24, 0x00	; 0
    4530:	61 05       	cpc	r22, r1
    4532:	71 05       	cpc	r23, r1
    4534:	08 95       	ret
    4536:	9b 01       	movw	r18, r22
    4538:	ac 01       	movw	r20, r24
    453a:	0a 2e       	mov	r0, r26
    453c:	06 94       	lsr	r0
    453e:	57 95       	ror	r21
    4540:	47 95       	ror	r20
    4542:	37 95       	ror	r19
    4544:	27 95       	ror	r18
    4546:	ba 95       	dec	r27
    4548:	c9 f7       	brne	.-14     	; 0x453c <__ultoa_invert+0xa2>
    454a:	62 0f       	add	r22, r18
    454c:	73 1f       	adc	r23, r19
    454e:	84 1f       	adc	r24, r20
    4550:	95 1f       	adc	r25, r21
    4552:	a0 1d       	adc	r26, r0
    4554:	08 95       	ret

00004556 <__prologue_saves__>:
    4556:	2f 92       	push	r2
    4558:	3f 92       	push	r3
    455a:	4f 92       	push	r4
    455c:	5f 92       	push	r5
    455e:	6f 92       	push	r6
    4560:	7f 92       	push	r7
    4562:	8f 92       	push	r8
    4564:	9f 92       	push	r9
    4566:	af 92       	push	r10
    4568:	bf 92       	push	r11
    456a:	cf 92       	push	r12
    456c:	df 92       	push	r13
    456e:	ef 92       	push	r14
    4570:	ff 92       	push	r15
    4572:	0f 93       	push	r16
    4574:	1f 93       	push	r17
    4576:	cf 93       	push	r28
    4578:	df 93       	push	r29
    457a:	cd b7       	in	r28, 0x3d	; 61
    457c:	de b7       	in	r29, 0x3e	; 62
    457e:	ca 1b       	sub	r28, r26
    4580:	db 0b       	sbc	r29, r27
    4582:	0f b6       	in	r0, 0x3f	; 63
    4584:	f8 94       	cli
    4586:	de bf       	out	0x3e, r29	; 62
    4588:	0f be       	out	0x3f, r0	; 63
    458a:	cd bf       	out	0x3d, r28	; 61
    458c:	09 94       	ijmp

0000458e <__epilogue_restores__>:
    458e:	2a 88       	ldd	r2, Y+18	; 0x12
    4590:	39 88       	ldd	r3, Y+17	; 0x11
    4592:	48 88       	ldd	r4, Y+16	; 0x10
    4594:	5f 84       	ldd	r5, Y+15	; 0x0f
    4596:	6e 84       	ldd	r6, Y+14	; 0x0e
    4598:	7d 84       	ldd	r7, Y+13	; 0x0d
    459a:	8c 84       	ldd	r8, Y+12	; 0x0c
    459c:	9b 84       	ldd	r9, Y+11	; 0x0b
    459e:	aa 84       	ldd	r10, Y+10	; 0x0a
    45a0:	b9 84       	ldd	r11, Y+9	; 0x09
    45a2:	c8 84       	ldd	r12, Y+8	; 0x08
    45a4:	df 80       	ldd	r13, Y+7	; 0x07
    45a6:	ee 80       	ldd	r14, Y+6	; 0x06
    45a8:	fd 80       	ldd	r15, Y+5	; 0x05
    45aa:	0c 81       	ldd	r16, Y+4	; 0x04
    45ac:	1b 81       	ldd	r17, Y+3	; 0x03
    45ae:	aa 81       	ldd	r26, Y+2	; 0x02
    45b0:	b9 81       	ldd	r27, Y+1	; 0x01
    45b2:	ce 0f       	add	r28, r30
    45b4:	d1 1d       	adc	r29, r1
    45b6:	0f b6       	in	r0, 0x3f	; 63
    45b8:	f8 94       	cli
    45ba:	de bf       	out	0x3e, r29	; 62
    45bc:	0f be       	out	0x3f, r0	; 63
    45be:	cd bf       	out	0x3d, r28	; 61
    45c0:	ed 01       	movw	r28, r26
    45c2:	08 95       	ret

000045c4 <_exit>:
    45c4:	f8 94       	cli

000045c6 <__stop_program>:
    45c6:	ff cf       	rjmp	.-2      	; 0x45c6 <__stop_program>
