
644_testV1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010a  00800100  00000e46  00000eda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000190  0080020a  0080020a  00000fe4  2**0
                  ALLOC
  3 .debug_aranges 000001d0  00000000  00000000  00000fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000003bc  00000000  00000000  000011b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001214  00000000  00000000  00001570  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ef  00000000  00000000  00002784  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000013db  00000000  00000000  00002e73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002c0  00000000  00000000  00004250  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ae  00000000  00000000  00004510  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007b9  00000000  00000000  000049be  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000260  00000000  00000000  00005177  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	
	DIDR0 |= (0<<ADC7D)|(0<<ADC6D)|(0<<ADC5D)|(0<<ADC4D)|(0<<ADC3D)|(0<<ADC2D)|(0<<ADC1D)|(0<<ADC0D);
} 
 
unsigned int adc_get_value(unsigned char ch) 
{ 
   0:	0c 94 65 00 	jmp	0xca	; 0xca <__ctors_end>
}

// y = 0,1
// x = 0~15
void Lcm1_ShowString_xy(unsigned char x, unsigned char y, char *msg) 
{
   4:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts_p(const char *progmem_s )
{
   8:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
   c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  10:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  14:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  18:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  1c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  20:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  24:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  28:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  2c:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <__vector_11>
  30:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  34:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  38:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  3c:	0c 94 45 03 	jmp	0x68a	; 0x68a <__vector_15>
  40:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  44:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  48:	0c 94 c1 03 	jmp	0x782	; 0x782 <__vector_18>
  4c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  50:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__vector_20>
  54:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__vector_21>
  58:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  5c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  60:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  64:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  68:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  6c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  70:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  74:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  78:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>

0000007c <LCDanimation>:
  7c:	20 47 72 65 67 20 42 79 72 6e 65 20 00 00            Greg Byrne ..

0000008a <LcdCustomChar>:
  8a:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  9a:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  aa:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  ba:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000ca <__ctors_end>:
  ca:	11 24       	eor	r1, r1
  cc:	1f be       	out	0x3f, r1	; 63
  ce:	cf ef       	ldi	r28, 0xFF	; 255
  d0:	d0 e1       	ldi	r29, 0x10	; 16
  d2:	de bf       	out	0x3e, r29	; 62
  d4:	cd bf       	out	0x3d, r28	; 61

000000d6 <__do_copy_data>:
  d6:	12 e0       	ldi	r17, 0x02	; 2
  d8:	a0 e0       	ldi	r26, 0x00	; 0
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	e6 e4       	ldi	r30, 0x46	; 70
  de:	fe e0       	ldi	r31, 0x0E	; 14
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <.do_copy_data_start>

000000e2 <.do_copy_data_loop>:
  e2:	05 90       	lpm	r0, Z+
  e4:	0d 92       	st	X+, r0

000000e6 <.do_copy_data_start>:
  e6:	aa 30       	cpi	r26, 0x0A	; 10
  e8:	b1 07       	cpc	r27, r17
  ea:	d9 f7       	brne	.-10     	; 0xe2 <.do_copy_data_loop>

000000ec <__do_clear_bss>:
  ec:	13 e0       	ldi	r17, 0x03	; 3
  ee:	aa e0       	ldi	r26, 0x0A	; 10
  f0:	b2 e0       	ldi	r27, 0x02	; 2
  f2:	01 c0       	rjmp	.+2      	; 0xf6 <.do_clear_bss_start>

000000f4 <.do_clear_bss_loop>:
  f4:	1d 92       	st	X+, r1

000000f6 <.do_clear_bss_start>:
  f6:	aa 39       	cpi	r26, 0x9A	; 154
  f8:	b1 07       	cpc	r27, r17
  fa:	e1 f7       	brne	.-8      	; 0xf4 <.do_clear_bss_loop>
  fc:	0e 94 01 03 	call	0x602	; 0x602 <main>
 100:	0c 94 21 07 	jmp	0xe42	; 0xe42 <_exit>

00000104 <__bad_interrupt>:
 104:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000108 <adc_init>:
{ 
    // divider = 2  
	// fadc =  f = 4.0000 MHz  
	//set_input(ADC7_DIR, ADC7_PIN_BIT);
	
	ADMUX |= (0<<REFS1)|(1<<REFS0)|(0<<ADLAR)|(0<<MUX4)|(0<<MUX3)|(0<<MUX2)|(0<<MUX1)|(0<<MUX0); // 5V 
 108:	ec e7       	ldi	r30, 0x7C	; 124
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	80 64       	ori	r24, 0x40	; 64
 110:	80 83       	st	Z, r24
    //ADCSRA |= 0xE1; 
	ADCSRA |= (1<<ADEN)|(1<<ADSC)|(0<<ADATE)|(0<<ADIF)|(0<<ADIE)|(0<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 112:	ea e7       	ldi	r30, 0x7A	; 122
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	83 6c       	ori	r24, 0xC3	; 195
 11a:	80 83       	st	Z, r24
	
	ADCSRB |= (0<<ACME)|(0<<ADTS2)|(0<<ADTS1)|(0<<ADTS0);
 11c:	eb e7       	ldi	r30, 0x7B	; 123
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	80 83       	st	Z, r24
	
	DIDR0 |= (0<<ADC7D)|(0<<ADC6D)|(0<<ADC5D)|(0<<ADC4D)|(0<<ADC3D)|(0<<ADC2D)|(0<<ADC1D)|(0<<ADC0D);
 124:	ee e7       	ldi	r30, 0x7E	; 126
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	80 83       	st	Z, r24
} 
 12c:	08 95       	ret

0000012e <adc_get_value_ref>:
} 

unsigned int adc_get_value_ref(unsigned char ref, unsigned char ch)
{
	ref = ref << 6;
	ADMUX = (ADMUX & ~0xC7) | ref;
 12e:	ec e7       	ldi	r30, 0x7C	; 124
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	90 81       	ld	r25, Z
 134:	82 95       	swap	r24
 136:	88 0f       	add	r24, r24
 138:	88 0f       	add	r24, r24
 13a:	80 7c       	andi	r24, 0xC0	; 192
 13c:	98 73       	andi	r25, 0x38	; 56
 13e:	89 2b       	or	r24, r25
 140:	80 83       	st	Z, r24
	ADMUX |= ch; //clear mux then or with new channel value
 142:	80 81       	ld	r24, Z
 144:	68 2b       	or	r22, r24
 146:	60 83       	st	Z, r22
	ADCSRA |= (1<<ADSC);
 148:	ea e7       	ldi	r30, 0x7A	; 122
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	80 64       	ori	r24, 0x40	; 64
 150:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 152:	80 e2       	ldi	r24, 0x20	; 32
 154:	9e e4       	ldi	r25, 0x4E	; 78
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <adc_get_value_ref+0x28>
	_delay_ms(10);
	return ( (unsigned int ) ( ADCL + (ADCH<<8) ) );
 15a:	90 91 78 00 	lds	r25, 0x0078
 15e:	80 91 79 00 	lds	r24, 0x0079
 162:	38 2f       	mov	r19, r24
 164:	20 e0       	ldi	r18, 0x00	; 0
 166:	29 0f       	add	r18, r25
 168:	31 1d       	adc	r19, r1
}
 16a:	82 2f       	mov	r24, r18
 16c:	93 2f       	mov	r25, r19
 16e:	08 95       	ret

00000170 <initButtons>:

#include "prj.h"

void initButtons(void)
{
	set_input(Button1_DIR, Button1_PIN_BIT);
 170:	ea e2       	ldi	r30, 0x2A	; 42
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	8f 7b       	andi	r24, 0xBF	; 191
 178:	80 83       	st	Z, r24
	set_input(Button2_DIR, Button2_PIN_BIT);
 17a:	80 81       	ld	r24, Z
 17c:	8f 77       	andi	r24, 0x7F	; 127
 17e:	80 83       	st	Z, r24
}
 180:	08 95       	ret

00000182 <buttonIsPressed>:

unsigned int buttonIsPressed(int button)
{
	if(button == 1)
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	91 05       	cpc	r25, r1
 186:	89 f4       	brne	.+34     	; 0x1aa <buttonIsPressed+0x28>
	{
		if(Button1_press())
 188:	89 b1       	in	r24, 0x09	; 9
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	00 24       	eor	r0, r0
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	00 1c       	adc	r0, r0
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	00 1c       	adc	r0, r0
 19a:	89 2f       	mov	r24, r25
 19c:	90 2d       	mov	r25, r0
 19e:	80 95       	com	r24
 1a0:	90 95       	com	r25
 1a2:	9c 01       	movw	r18, r24
 1a4:	21 70       	andi	r18, 0x01	; 1
 1a6:	30 70       	andi	r19, 0x00	; 0
 1a8:	11 c0       	rjmp	.+34     	; 0x1cc <buttonIsPressed+0x4a>
		else
		{
			return 0;
		}
	}
	if(button == 2)
 1aa:	02 97       	sbiw	r24, 0x02	; 2
 1ac:	19 f0       	breq	.+6      	; 0x1b4 <buttonIsPressed+0x32>
 1ae:	20 e0       	ldi	r18, 0x00	; 0
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	0c c0       	rjmp	.+24     	; 0x1cc <buttonIsPressed+0x4a>
	{
		if(Button2_press())
 1b4:	89 b1       	in	r24, 0x09	; 9
 1b6:	88 23       	and	r24, r24
 1b8:	99 27       	eor	r25, r25
 1ba:	87 fd       	sbrc	r24, 7
 1bc:	90 95       	com	r25
 1be:	80 95       	com	r24
 1c0:	90 95       	com	r25
 1c2:	9c 01       	movw	r18, r24
 1c4:	22 27       	eor	r18, r18
 1c6:	33 0f       	add	r19, r19
 1c8:	22 1f       	adc	r18, r18
 1ca:	33 27       	eor	r19, r19
	}
	else
	{
		return 0;
	}
 1cc:	82 2f       	mov	r24, r18
 1ce:	93 2f       	mov	r25, r19
 1d0:	08 95       	ret

000001d2 <Lcm1_CheckBusy>:
		ch=ch+8;
	}
}
 
void Lcm1_CheckBusy(void) 
{
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
    char status = 0x80;

	Lcm1_DATA_DIR = 0x00; // input 
 1d6:	14 b8       	out	0x04, r1	; 4

    while( status & 0x80)
    {
	    Lcm1_RS_0(); Lcm1_RW_1(); 
 1d8:	eb e2       	ldi	r30, 0x2B	; 43
 1da:	f0 e0       	ldi	r31, 0x00	; 0
		Lcm1_DATA_DIR = 0x00; // input
 1dc:	c4 e2       	ldi	r28, 0x24	; 36
 1de:	d0 e0       	ldi	r29, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1e0:	2a e1       	ldi	r18, 0x1A	; 26
		Lcm1_EN_1(); 
		_delay_us(10);
        status  = Lcm1_DATA_PIN;
 1e2:	a3 e2       	ldi	r26, 0x23	; 35
 1e4:	b0 e0       	ldi	r27, 0x00	; 0

	Lcm1_DATA_DIR = 0x00; // input 

    while( status & 0x80)
    {
	    Lcm1_RS_0(); Lcm1_RW_1(); 
 1e6:	80 81       	ld	r24, Z
 1e8:	8b 7f       	andi	r24, 0xFB	; 251
 1ea:	80 83       	st	Z, r24
 1ec:	80 81       	ld	r24, Z
 1ee:	88 60       	ori	r24, 0x08	; 8
 1f0:	80 83       	st	Z, r24
		Lcm1_DATA_DIR = 0x00; // input
 1f2:	18 82       	st	Y, r1
		Lcm1_EN_1(); 
 1f4:	80 81       	ld	r24, Z
 1f6:	80 61       	ori	r24, 0x10	; 16
 1f8:	80 83       	st	Z, r24
 1fa:	82 2f       	mov	r24, r18
 1fc:	8a 95       	dec	r24
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <Lcm1_CheckBusy+0x2a>
		_delay_us(10);
        status  = Lcm1_DATA_PIN;
 200:	9c 91       	ld	r25, X
        Lcm1_EN_0();    
 202:	80 81       	ld	r24, Z
 204:	8f 7e       	andi	r24, 0xEF	; 239
 206:	80 83       	st	Z, r24
{
    char status = 0x80;

	Lcm1_DATA_DIR = 0x00; // input 

    while( status & 0x80)
 208:	99 23       	and	r25, r25
 20a:	6c f3       	brlt	.-38     	; 0x1e6 <Lcm1_CheckBusy+0x14>
		Lcm1_EN_1(); 
		_delay_us(10);
        status  = Lcm1_DATA_PIN;
        Lcm1_EN_0();    
  }  
   Lcm1_DATA_DIR = 0xff; // output 
 20c:	8f ef       	ldi	r24, 0xFF	; 255
 20e:	84 b9       	out	0x04, r24	; 4
} 
 210:	df 91       	pop	r29
 212:	cf 91       	pop	r28
 214:	08 95       	ret

00000216 <Lcm1_Write_Instruction>:

void Lcm1_Write_Instruction(char instruction)
{

	Lcm1_RS_0(); Lcm1_RW_0();
 216:	eb e2       	ldi	r30, 0x2B	; 43
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	90 81       	ld	r25, Z
 21c:	9b 7f       	andi	r25, 0xFB	; 251
 21e:	90 83       	st	Z, r25
 220:	90 81       	ld	r25, Z
 222:	97 7f       	andi	r25, 0xF7	; 247
 224:	90 83       	st	Z, r25
	
	Lcm1_EN_1();	 
 226:	90 81       	ld	r25, Z
 228:	90 61       	ori	r25, 0x10	; 16
 22a:	90 83       	st	Z, r25
	Lcm1_DATA_PORT = instruction; 
 22c:	85 b9       	out	0x05, r24	; 5
	Lcm1_EN_0(); 
 22e:	80 81       	ld	r24, Z
 230:	8f 7e       	andi	r24, 0xEF	; 239
 232:	80 83       	st	Z, r24
	Lcm1_CheckBusy(); 
 234:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <Lcm1_CheckBusy>
} 
 238:	08 95       	ret

0000023a <Lcm1_WriteData>:


void Lcm1_WriteData(char value) 
{
   
	Lcm1_RS_1(); Lcm1_RW_0();
 23a:	eb e2       	ldi	r30, 0x2B	; 43
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	90 81       	ld	r25, Z
 240:	94 60       	ori	r25, 0x04	; 4
 242:	90 83       	st	Z, r25
 244:	90 81       	ld	r25, Z
 246:	97 7f       	andi	r25, 0xF7	; 247
 248:	90 83       	st	Z, r25
	
	Lcm1_EN_1();	 
 24a:	90 81       	ld	r25, Z
 24c:	90 61       	ori	r25, 0x10	; 16
 24e:	90 83       	st	Z, r25
	Lcm1_DATA_PORT = value; 
 250:	85 b9       	out	0x05, r24	; 5
	Lcm1_EN_0(); 
 252:	80 81       	ld	r24, Z
 254:	8f 7e       	andi	r24, 0xEF	; 239
 256:	80 83       	st	Z, r24
	Lcm1_CheckBusy(); 
 258:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <Lcm1_CheckBusy>
} 
 25c:	08 95       	ret

0000025e <Lcm1_ShowString>:


void Lcm1_ShowString(char *msg) 
{
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	fc 01       	movw	r30, r24
    int idx =0;
    if (msg==0)
 264:	00 97       	sbiw	r24, 0x00	; 0
 266:	51 f0       	breq	.+20     	; 0x27c <Lcm1_ShowString+0x1e>
        return;
    while (msg[idx] !=0)
 268:	80 81       	ld	r24, Z
 26a:	88 23       	and	r24, r24
 26c:	39 f0       	breq	.+14     	; 0x27c <Lcm1_ShowString+0x1e>
 26e:	ef 01       	movw	r28, r30
    {
      Lcm1_WriteData(msg[idx++]); 
 270:	0e 94 1d 01 	call	0x23a	; 0x23a <Lcm1_WriteData>
void Lcm1_ShowString(char *msg) 
{
    int idx =0;
    if (msg==0)
        return;
    while (msg[idx] !=0)
 274:	89 81       	ldd	r24, Y+1	; 0x01
 276:	21 96       	adiw	r28, 0x01	; 1
 278:	88 23       	and	r24, r24
 27a:	d1 f7       	brne	.-12     	; 0x270 <Lcm1_ShowString+0x12>
    {
      Lcm1_WriteData(msg[idx++]); 
    } 
} 
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	08 95       	ret

00000282 <Lcm1_SetCursor>:

// y = 0,1
// x = 0~15
void Lcm1_SetCursor(unsigned char x, unsigned char y) 
{
    if (y==0) // row 0
 282:	66 23       	and	r22, r22
 284:	21 f4       	brne	.+8      	; 0x28e <Lcm1_SetCursor+0xc>
        Lcm1_Write_Instruction(0x80 + x); // DDRAM, Row1 
 286:	80 58       	subi	r24, 0x80	; 128
 288:	0e 94 0b 01 	call	0x216	; 0x216 <Lcm1_Write_Instruction>
 28c:	08 95       	ret
    else if (y==1)
 28e:	61 30       	cpi	r22, 0x01	; 1
 290:	21 f4       	brne	.+8      	; 0x29a <Lcm1_SetCursor+0x18>
        Lcm1_Write_Instruction(0xc0 + x); // DDRAM, Row2 
 292:	80 54       	subi	r24, 0x40	; 64
 294:	0e 94 0b 01 	call	0x216	; 0x216 <Lcm1_Write_Instruction>
 298:	08 95       	ret
    else if (y==2)
 29a:	62 30       	cpi	r22, 0x02	; 2
 29c:	21 f4       	brne	.+8      	; 0x2a6 <Lcm1_SetCursor+0x24>
        Lcm1_Write_Instruction(0x80 + Lcm1_LCM_COL + x);  
 29e:	80 57       	subi	r24, 0x70	; 112
 2a0:	0e 94 0b 01 	call	0x216	; 0x216 <Lcm1_Write_Instruction>
 2a4:	08 95       	ret
    else if (y==3)
 2a6:	63 30       	cpi	r22, 0x03	; 3
 2a8:	19 f4       	brne	.+6      	; 0x2b0 <Lcm1_SetCursor+0x2e>
        Lcm1_Write_Instruction(0xc0 + Lcm1_LCM_COL + x);  
 2aa:	80 53       	subi	r24, 0x30	; 48
 2ac:	0e 94 0b 01 	call	0x216	; 0x216 <Lcm1_Write_Instruction>
 2b0:	08 95       	ret

000002b2 <Lcm1_Clearscreen>:
    Lcm1_ShowString(msg);   
}

void Lcm1_Clearscreen() 
{
    Lcm1_Write_Instruction(LCD_CMD_CLEAR_DISPLAY); 
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	0e 94 0b 01 	call	0x216	; 0x216 <Lcm1_Write_Instruction>
}
 2b8:	08 95       	ret

000002ba <LCDdefinechar>:

void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
 2ba:	ef 92       	push	r14
 2bc:	ff 92       	push	r15
 2be:	0f 93       	push	r16
 2c0:	1f 93       	push	r17
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	7c 01       	movw	r14, r24
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 2c8:	66 0f       	add	r22, r22
 2ca:	66 0f       	add	r22, r22
 2cc:	66 0f       	add	r22, r22
 2ce:	06 2f       	mov	r16, r22
 2d0:	00 64       	ori	r16, 0x40	; 64
 2d2:	c0 e0       	ldi	r28, 0x00	; 0
 2d4:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
 2d6:	f7 01       	movw	r30, r14
 2d8:	ec 0f       	add	r30, r28
 2da:	fd 1f       	adc	r31, r29
 2dc:	14 91       	lpm	r17, Z+
		Lcm1_Write_Instruction(a++);
 2de:	80 2f       	mov	r24, r16
 2e0:	8c 0f       	add	r24, r28
 2e2:	0e 94 0b 01 	call	0x216	; 0x216 <Lcm1_Write_Instruction>
		Lcm1_WriteData(pcc);
 2e6:	81 2f       	mov	r24, r17
 2e8:	0e 94 1d 01 	call	0x23a	; 0x23a <Lcm1_WriteData>

void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 2ec:	21 96       	adiw	r28, 0x01	; 1
 2ee:	c8 30       	cpi	r28, 0x08	; 8
 2f0:	d1 05       	cpc	r29, r1
 2f2:	89 f7       	brne	.-30     	; 0x2d6 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		Lcm1_Write_Instruction(a++);
		Lcm1_WriteData(pcc);
	}
}
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	1f 91       	pop	r17
 2fa:	0f 91       	pop	r16
 2fc:	ff 90       	pop	r15
 2fe:	ef 90       	pop	r14
 300:	08 95       	ret

00000302 <oledMod_Init>:
		ch=ch+8;
	}
} 

void oledMod_Init(void) //from modular OLED data sheet
{
 302:	1f 93       	push	r17
 304:	cf 93       	push	r28
 306:	df 93       	push	r29

	Lcm1_DATA_DIR	 = 0xff; // output
 308:	8f ef       	ldi	r24, 0xFF	; 255
 30a:	84 b9       	out	0x04, r24	; 4
	Lcm1_DATA_PORT = 0x00;
 30c:	15 b8       	out	0x05, r1	; 5

	Lcm1_RS_DIR |= _BV(Lcm1_RS_BIT); // output
 30e:	ea e2       	ldi	r30, 0x2A	; 42
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	80 81       	ld	r24, Z
 314:	84 60       	ori	r24, 0x04	; 4
 316:	80 83       	st	Z, r24
	Lcm1_RW_DIR |= _BV(Lcm1_RW_BIT); // output
 318:	80 81       	ld	r24, Z
 31a:	88 60       	ori	r24, 0x08	; 8
 31c:	80 83       	st	Z, r24
	Lcm1_EN_DIR |= _BV(Lcm1_EN_BIT); // output
 31e:	80 81       	ld	r24, Z
 320:	80 61       	ori	r24, 0x10	; 16
 322:	80 83       	st	Z, r24

	Lcm1_RS_PORT |= _BV(Lcm1_RS_BIT);
 324:	eb e2       	ldi	r30, 0x2B	; 43
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	80 81       	ld	r24, Z
 32a:	84 60       	ori	r24, 0x04	; 4
 32c:	80 83       	st	Z, r24
	Lcm1_RW_PORT |= _BV(Lcm1_RW_BIT);
 32e:	80 81       	ld	r24, Z
 330:	88 60       	ori	r24, 0x08	; 8
 332:	80 83       	st	Z, r24
	Lcm1_EN_PORT |= _BV(Lcm1_EN_BIT);
 334:	80 81       	ld	r24, Z
 336:	80 61       	ori	r24, 0x10	; 16
 338:	80 83       	st	Z, r24
 33a:	8a e1       	ldi	r24, 0x1A	; 26
 33c:	8a 95       	dec	r24
 33e:	f1 f7       	brne	.-4      	; 0x33c <oledMod_Init+0x3a>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 340:	80 ed       	ldi	r24, 0xD0	; 208
 342:	97 e0       	ldi	r25, 0x07	; 7
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	f1 f7       	brne	.-4      	; 0x344 <oledMod_Init+0x42>

	_delay_us(10);

	_delay_ms(1);
	Lcm1_Write_Instruction(0x2A); 
 348:	8a e2       	ldi	r24, 0x2A	; 42
 34a:	0e 94 0b 01 	call	0x216	; 0x216 <Lcm1_Write_Instruction>
	Lcm1_Write_Instruction(0x71); 
 34e:	81 e7       	ldi	r24, 0x71	; 113
 350:	0e 94 0b 01 	call	0x216	; 0x216 <Lcm1_Write_Instruction>
	Lcm1_WriteData(0x5C);
 354:	8c e5       	ldi	r24, 0x5C	; 92
 356:	0e 94 1d 01 	call	0x23a	; 0x23a <Lcm1_WriteData>
	Lcm1_Write_Instruction(0x28);
 35a:	88 e2       	ldi	r24, 0x28	; 40
 35c:	0e 94 0b 01 	call	0x216	; 0x216 <Lcm1_Write_Instruction>
	Lcm1_Write_Instruction(0x08);
 360:	88 e0       	ldi	r24, 0x08	; 8
 362:	0e 94 0b 01 	call	0x216	; 0x216 <Lcm1_Write_Instruction>
	Lcm1_Write_Instruction(0x2A);
 366:	8a e2       	ldi	r24, 0x2A	; 42
 368:	0e 94 0b 01 	call	0x216	; 0x216 <Lcm1_Write_Instruction>
	Lcm1_Write_Instruction(0x79);
 36c:	89 e7       	ldi	r24, 0x79	; 121
 36e:	0e 94 0b 01 	call	0x216	; 0x216 <Lcm1_Write_Instruction>
	Lcm1_Write_Instruction(0xD5);
 372:	85 ed       	ldi	r24, 0xD5	; 213
 374:	0e 94 0b 01 	call	0x216	; 0x216 <Lcm1_Write_Instruction>
	Lcm1_Write_Instruction(0x70);
 378:	80 e7       	ldi	r24, 0x70	; 112
 37a:	0e 94 0b 01 	call	0x216	; 0x216 <Lcm1_Write_Instruction>
	Lcm1_Write_Instruction(0x78);
 37e:	88 e7       	ldi	r24, 0x78	; 120
 380:	0e 94 0b 01 	call	0x216	; 0x216 <Lcm1_Write_Instruction>
	Lcm1_Write_Instruction(0x08);
 384:	88 e0       	ldi	r24, 0x08	; 8
 386:	0e 94 0b 01 	call	0x216	; 0x216 <Lcm1_Write_Instruction>
	Lcm1_Write_Instruction(0x06);
 38a:	86 e0       	ldi	r24, 0x06	; 6
 38c:	0e 94 0b 01 	call	0x216	; 0x216 <Lcm1_Write_Instruction>
	Lcm1_Write_Instruction(0x72);
 390:	82 e7       	ldi	r24, 0x72	; 114
 392:	0e 94 0b 01 	call	0x216	; 0x216 <Lcm1_Write_Instruction>
	Lcm1_WriteData(0x00);
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	0e 94 1d 01 	call	0x23a	; 0x23a <Lcm1_WriteData>
	Lcm1_Write_Instruction(0x2A);
 39c:	8a e2       	ldi	r24, 0x2A	; 42
 39e:	0e 94 0b 01 	call	0x216	; 0x216 <Lcm1_Write_Instruction>
	Lcm1_Write_Instruction(0x79);
 3a2:	89 e7       	ldi	r24, 0x79	; 121
 3a4:	0e 94 0b 01 	call	0x216	; 0x216 <Lcm1_Write_Instruction>
	Lcm1_Write_Instruction(0xDA);
 3a8:	8a ed       	ldi	r24, 0xDA	; 218
 3aa:	0e 94 0b 01 	call	0x216	; 0x216 <Lcm1_Write_Instruction>
	Lcm1_Write_Instruction(0x00);
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	0e 94 0b 01 	call	0x216	; 0x216 <Lcm1_Write_Instruction>
	Lcm1_Write_Instruction(0xDC);
 3b4:	8c ed       	ldi	r24, 0xDC	; 220
 3b6:	0e 94 0b 01 	call	0x216	; 0x216 <Lcm1_Write_Instruction>
	Lcm1_Write_Instruction(0x00);
 3ba:	80 e0       	ldi	r24, 0x00	; 0
 3bc:	0e 94 0b 01 	call	0x216	; 0x216 <Lcm1_Write_Instruction>
	Lcm1_Write_Instruction(0x81);
 3c0:	81 e8       	ldi	r24, 0x81	; 129
 3c2:	0e 94 0b 01 	call	0x216	; 0x216 <Lcm1_Write_Instruction>
	Lcm1_Write_Instruction(0x7F);
 3c6:	8f e7       	ldi	r24, 0x7F	; 127
 3c8:	0e 94 0b 01 	call	0x216	; 0x216 <Lcm1_Write_Instruction>
	Lcm1_Write_Instruction(0xD9);
 3cc:	89 ed       	ldi	r24, 0xD9	; 217
 3ce:	0e 94 0b 01 	call	0x216	; 0x216 <Lcm1_Write_Instruction>
	Lcm1_Write_Instruction(0xF1);
 3d2:	81 ef       	ldi	r24, 0xF1	; 241
 3d4:	0e 94 0b 01 	call	0x216	; 0x216 <Lcm1_Write_Instruction>
	Lcm1_Write_Instruction(0xDB);
 3d8:	8b ed       	ldi	r24, 0xDB	; 219
 3da:	0e 94 0b 01 	call	0x216	; 0x216 <Lcm1_Write_Instruction>
	Lcm1_Write_Instruction(0x40);
 3de:	80 e4       	ldi	r24, 0x40	; 64
 3e0:	0e 94 0b 01 	call	0x216	; 0x216 <Lcm1_Write_Instruction>
	Lcm1_Write_Instruction(0x78);
 3e4:	88 e7       	ldi	r24, 0x78	; 120
 3e6:	0e 94 0b 01 	call	0x216	; 0x216 <Lcm1_Write_Instruction>
	Lcm1_Write_Instruction(0x28);
 3ea:	88 e2       	ldi	r24, 0x28	; 40
 3ec:	0e 94 0b 01 	call	0x216	; 0x216 <Lcm1_Write_Instruction>
	Lcm1_Write_Instruction(0x01);
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	0e 94 0b 01 	call	0x216	; 0x216 <Lcm1_Write_Instruction>
	Lcm1_Write_Instruction(0x80);
 3f6:	80 e8       	ldi	r24, 0x80	; 128
 3f8:	0e 94 0b 01 	call	0x216	; 0x216 <Lcm1_Write_Instruction>
	Lcm1_Write_Instruction(0x0C);
 3fc:	8c e0       	ldi	r24, 0x0C	; 12
 3fe:	0e 94 0b 01 	call	0x216	; 0x216 <Lcm1_Write_Instruction>
 402:	28 ee       	ldi	r18, 0xE8	; 232
 404:	33 e0       	ldi	r19, 0x03	; 3
 406:	48 ec       	ldi	r20, 0xC8	; 200
 408:	50 e0       	ldi	r21, 0x00	; 0
 40a:	ca 01       	movw	r24, r20
 40c:	01 97       	sbiw	r24, 0x01	; 1
 40e:	f1 f7       	brne	.-4      	; 0x40c <oledMod_Init+0x10a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 410:	21 50       	subi	r18, 0x01	; 1
 412:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 414:	d1 f7       	brne	.-12     	; 0x40a <oledMod_Init+0x108>
 416:	80 e3       	ldi	r24, 0x30	; 48
 418:	95 e7       	ldi	r25, 0x75	; 117
 41a:	01 97       	sbiw	r24, 0x01	; 1
 41c:	f1 f7       	brne	.-4      	; 0x41a <oledMod_Init+0x118>
 41e:	ca e8       	ldi	r28, 0x8A	; 138
 420:	d0 e0       	ldi	r29, 0x00	; 0
 422:	60 e0       	ldi	r22, 0x00	; 0
	
	
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 424:	16 2f       	mov	r17, r22
 426:	1f 5f       	subi	r17, 0xFF	; 255
 428:	ce 01       	movw	r24, r28
 42a:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCDdefinechar>
 42e:	28 96       	adiw	r28, 0x08	; 8
 430:	61 2f       	mov	r22, r17
	
	_delay_ms(15);
	
	
	uint8_t ch=0, chn=0;
	while(ch<64)
 432:	18 30       	cpi	r17, 0x08	; 8
 434:	b9 f7       	brne	.-18     	; 0x424 <oledMod_Init+0x122>
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}
}
 436:	df 91       	pop	r29
 438:	cf 91       	pop	r28
 43a:	1f 91       	pop	r17
 43c:	08 95       	ret

0000043e <LCDprogressBar>:
	}
}

//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
 43e:	bf 92       	push	r11
 440:	cf 92       	push	r12
 442:	df 92       	push	r13
 444:	ef 92       	push	r14
 446:	ff 92       	push	r15
 448:	0f 93       	push	r16
 44a:	1f 93       	push	r17
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
 450:	95 e0       	ldi	r25, 0x05	; 5
 452:	89 9f       	mul	r24, r25
 454:	c0 01       	movw	r24, r0
 456:	11 24       	eor	r1, r1
 458:	24 2f       	mov	r18, r20
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	fc 01       	movw	r30, r24
 45e:	e2 9f       	mul	r30, r18
 460:	c0 01       	movw	r24, r0
 462:	e3 9f       	mul	r30, r19
 464:	90 0d       	add	r25, r0
 466:	f2 9f       	mul	r31, r18
 468:	90 0d       	add	r25, r0
 46a:	11 24       	eor	r1, r1
 46c:	70 e0       	ldi	r23, 0x00	; 0
 46e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__divmodhi4>
 472:	86 2f       	mov	r24, r22
 474:	97 2f       	mov	r25, r23
 476:	8c 01       	movw	r16, r24
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
 478:	44 23       	and	r20, r20
 47a:	69 f1       	breq	.+90     	; 0x4d6 <LCDprogressBar+0x98>
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
 47c:	c8 01       	movw	r24, r16
 47e:	65 e0       	ldi	r22, 0x05	; 5
 480:	70 e0       	ldi	r23, 0x00	; 0
 482:	0e 94 c0 06 	call	0xd80	; 0xd80 <__udivmodhi4>
 486:	60 e0       	ldi	r22, 0x00	; 0
 488:	70 e0       	ldi	r23, 0x00	; 0
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
 48a:	d8 2e       	mov	r13, r24
 48c:	bb 24       	eor	r11, r11
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
 48e:	0f 2e       	mov	r0, r31
 490:	f5 e0       	ldi	r31, 0x05	; 5
 492:	cf 2e       	mov	r12, r31
 494:	f0 2d       	mov	r31, r0
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
 496:	84 2f       	mov	r24, r20
 498:	81 50       	subi	r24, 0x01	; 1
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	01 96       	adiw	r24, 0x01	; 1
 49e:	9c 01       	movw	r18, r24
 4a0:	22 0f       	add	r18, r18
 4a2:	33 1f       	adc	r19, r19
 4a4:	22 0f       	add	r18, r18
 4a6:	33 1f       	adc	r19, r19
 4a8:	79 01       	movw	r14, r18
 4aa:	e8 0e       	add	r14, r24
 4ac:	f9 1e       	adc	r15, r25
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
 4ae:	eb 01       	movw	r28, r22
 4b0:	25 96       	adiw	r28, 0x05	; 5
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
 4b2:	0c 17       	cp	r16, r28
 4b4:	1d 07       	cpc	r17, r29
 4b6:	10 f0       	brcs	.+4      	; 0x4bc <LCDprogressBar+0x7e>
 4b8:	8c 2d       	mov	r24, r12
 4ba:	06 c0       	rjmp	.+12     	; 0x4c8 <LCDprogressBar+0x8a>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
 4bc:	06 17       	cp	r16, r22
 4be:	17 07       	cpc	r17, r23
 4c0:	10 f4       	brcc	.+4      	; 0x4c6 <LCDprogressBar+0x88>
 4c2:	8b 2d       	mov	r24, r11
 4c4:	01 c0       	rjmp	.+2      	; 0x4c8 <LCDprogressBar+0x8a>
 4c6:	8d 2d       	mov	r24, r13
			// this is a full block
			c = 5;
		}
		
		// write character to display
		Lcm1_WriteData(c);
 4c8:	0e 94 1d 01 	call	0x23a	; 0x23a <Lcm1_WriteData>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
 4cc:	ce 15       	cp	r28, r14
 4ce:	df 05       	cpc	r29, r15
 4d0:	11 f0       	breq	.+4      	; 0x4d6 <LCDprogressBar+0x98>
 4d2:	be 01       	movw	r22, r28
 4d4:	ec cf       	rjmp	.-40     	; 0x4ae <LCDprogressBar+0x70>
		
		// write character to display
		Lcm1_WriteData(c);
	}

}
 4d6:	df 91       	pop	r29
 4d8:	cf 91       	pop	r28
 4da:	1f 91       	pop	r17
 4dc:	0f 91       	pop	r16
 4de:	ff 90       	pop	r15
 4e0:	ef 90       	pop	r14
 4e2:	df 90       	pop	r13
 4e4:	cf 90       	pop	r12
 4e6:	bf 90       	pop	r11
 4e8:	08 95       	ret

000004ea <initLEDs>:

#include "prj.h"

void initLEDs(void)
{
	set_output(Led1_DIR, Led1_PIN_BIT);
 4ea:	e7 e2       	ldi	r30, 0x27	; 39
 4ec:	f0 e0       	ldi	r31, 0x00	; 0
 4ee:	80 81       	ld	r24, Z
 4f0:	80 61       	ori	r24, 0x10	; 16
 4f2:	80 83       	st	Z, r24
	set_output(Led2_DIR, Led2_PIN_BIT);
 4f4:	80 81       	ld	r24, Z
 4f6:	80 62       	ori	r24, 0x20	; 32
 4f8:	80 83       	st	Z, r24
}
 4fa:	08 95       	ret

000004fc <toggleLED>:

void toggleLED(int ledNum)
{
	if(ledNum == 1)
 4fc:	81 30       	cpi	r24, 0x01	; 1
 4fe:	91 05       	cpc	r25, r1
 500:	39 f4       	brne	.+14     	; 0x510 <toggleLED+0x14>
	{
		output_toggle(Led1_DIR, Led1_PIN_BIT);
 502:	e7 e2       	ldi	r30, 0x27	; 39
 504:	f0 e0       	ldi	r31, 0x00	; 0
 506:	80 81       	ld	r24, Z
 508:	90 e1       	ldi	r25, 0x10	; 16
 50a:	89 27       	eor	r24, r25
 50c:	80 83       	st	Z, r24
 50e:	08 95       	ret
	}
	else if(ledNum == 2)
 510:	02 97       	sbiw	r24, 0x02	; 2
 512:	31 f4       	brne	.+12     	; 0x520 <toggleLED+0x24>
	{
		output_toggle(Led2_DIR, Led2_PIN_BIT);
 514:	e7 e2       	ldi	r30, 0x27	; 39
 516:	f0 e0       	ldi	r31, 0x00	; 0
 518:	80 81       	ld	r24, Z
 51a:	90 e2       	ldi	r25, 0x20	; 32
 51c:	89 27       	eor	r24, r25
 51e:	80 83       	st	Z, r24
 520:	08 95       	ret

00000522 <progress>:

// global variable

//demonstration of progress bar
void progress(void)
{
 522:	1f 93       	push	r17
 524:	cf 93       	push	r28
 526:	df 93       	push	r29
	Lcm1_SetCursor(4,0);
 528:	84 e0       	ldi	r24, 0x04	; 4
 52a:	60 e0       	ldi	r22, 0x00	; 0
 52c:	0e 94 41 01 	call	0x282	; 0x282 <Lcm1_SetCursor>
	Lcm1_ShowString("DRI V1.1");
 530:	80 e0       	ldi	r24, 0x00	; 0
 532:	91 e0       	ldi	r25, 0x01	; 1
 534:	0e 94 2f 01 	call	0x25e	; 0x25e <Lcm1_ShowString>
 538:	20 e1       	ldi	r18, 0x10	; 16
 53a:	37 e2       	ldi	r19, 0x27	; 39
 53c:	48 ec       	ldi	r20, 0xC8	; 200
 53e:	50 e0       	ldi	r21, 0x00	; 0
 540:	ca 01       	movw	r24, r20
 542:	01 97       	sbiw	r24, 0x01	; 1
 544:	f1 f7       	brne	.-4      	; 0x542 <progress+0x20>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 546:	21 50       	subi	r18, 0x01	; 1
 548:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 54a:	d1 f7       	brne	.-12     	; 0x540 <progress+0x1e>
 54c:	10 e0       	ldi	r17, 0x00	; 0
 54e:	c0 e2       	ldi	r28, 0x20	; 32
 550:	de e4       	ldi	r29, 0x4E	; 78
	_delay_ms(1000);
	for(uint8_t i=0;i<255;i++)
	{
		Lcm1_SetCursor(4,1);
 552:	84 e0       	ldi	r24, 0x04	; 4
 554:	61 e0       	ldi	r22, 0x01	; 1
 556:	0e 94 41 01 	call	0x282	; 0x282 <Lcm1_SetCursor>
		LCDprogressBar(i, 254, 8);
 55a:	81 2f       	mov	r24, r17
 55c:	6e ef       	ldi	r22, 0xFE	; 254
 55e:	48 e0       	ldi	r20, 0x08	; 8
 560:	0e 94 1f 02 	call	0x43e	; 0x43e <LCDprogressBar>
 564:	ce 01       	movw	r24, r28
 566:	01 97       	sbiw	r24, 0x01	; 1
 568:	f1 f7       	brne	.-4      	; 0x566 <progress+0x44>
void progress(void)
{
	Lcm1_SetCursor(4,0);
	Lcm1_ShowString("DRI V1.1");
	_delay_ms(1000);
	for(uint8_t i=0;i<255;i++)
 56a:	1f 5f       	subi	r17, 0xFF	; 255
 56c:	1f 3f       	cpi	r17, 0xFF	; 255
 56e:	89 f7       	brne	.-30     	; 0x552 <progress+0x30>
 570:	20 e1       	ldi	r18, 0x10	; 16
 572:	37 e2       	ldi	r19, 0x27	; 39
 574:	48 ec       	ldi	r20, 0xC8	; 200
 576:	50 e0       	ldi	r21, 0x00	; 0
 578:	ca 01       	movw	r24, r20
 57a:	01 97       	sbiw	r24, 0x01	; 1
 57c:	f1 f7       	brne	.-4      	; 0x57a <progress+0x58>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 57e:	21 50       	subi	r18, 0x01	; 1
 580:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 582:	d1 f7       	brne	.-12     	; 0x578 <progress+0x56>
		Lcm1_SetCursor(4,1);
		LCDprogressBar(i, 254, 8);
		_delay_ms(10);
	}
	_delay_ms(1000);
	Lcm1_Clearscreen();
 584:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Lcm1_Clearscreen>
}
 588:	df 91       	pop	r29
 58a:	cf 91       	pop	r28
 58c:	1f 91       	pop	r17
 58e:	08 95       	ret

00000590 <init>:

void init()
{
	initLEDs();
 590:	0e 94 75 02 	call	0x4ea	; 0x4ea <initLEDs>
	toggleLED(2);
 594:	82 e0       	ldi	r24, 0x02	; 2
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	0e 94 7e 02 	call	0x4fc	; 0x4fc <toggleLED>
	initButtons();
 59c:	0e 94 b8 00 	call	0x170	; 0x170 <initButtons>
	// Relay1 init
	//Relay1_DIR |= _BV(Relay1_BIT) ;
	//Relay1_off();
	//interrupt0_init();
	//interrupt1_init();
	Timer0_Init();
 5a0:	0e 94 05 03 	call	0x60a	; 0x60a <Timer0_Init>
	Timer1_Init();
 5a4:	0e 94 1a 03 	call	0x634	; 0x634 <Timer1_Init>
	Timer2_Init();
 5a8:	0e 94 33 03 	call	0x666	; 0x666 <Timer2_Init>
	uart_init(UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU));
 5ac:	83 e3       	ldi	r24, 0x33	; 51
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	0e 94 2e 06 	call	0xc5c	; 0xc5c <uart0_init>
	adc_init();
 5b4:	0e 94 84 00 	call	0x108	; 0x108 <adc_init>
	//Lcm1_Init();
	oledMod_Init();
 5b8:	0e 94 81 01 	call	0x302	; 0x302 <oledMod_Init>
	uart0_puts("Hardware Initialized\r\n");
 5bc:	89 e0       	ldi	r24, 0x09	; 9
 5be:	91 e0       	ldi	r25, 0x01	; 1
 5c0:	0e 94 9e 06 	call	0xd3c	; 0xd3c <uart0_puts>
	Lcm1_Clearscreen();
 5c4:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Lcm1_Clearscreen>
	progress();
 5c8:	0e 94 91 02 	call	0x522	; 0x522 <progress>
 5cc:	28 e8       	ldi	r18, 0x88	; 136
 5ce:	33 e1       	ldi	r19, 0x13	; 19
 5d0:	48 ec       	ldi	r20, 0xC8	; 200
 5d2:	50 e0       	ldi	r21, 0x00	; 0
 5d4:	ca 01       	movw	r24, r20
 5d6:	01 97       	sbiw	r24, 0x01	; 1
 5d8:	f1 f7       	brne	.-4      	; 0x5d6 <init+0x46>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5da:	21 50       	subi	r18, 0x01	; 1
 5dc:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5de:	d1 f7       	brne	.-12     	; 0x5d4 <init+0x44>
	_delay_ms(500);
	Lcm1_SetCursor(0,0);
 5e0:	80 e0       	ldi	r24, 0x00	; 0
 5e2:	60 e0       	ldi	r22, 0x00	; 0
 5e4:	0e 94 41 01 	call	0x282	; 0x282 <Lcm1_SetCursor>
	Lcm1_ShowString("Hardware");
 5e8:	80 e2       	ldi	r24, 0x20	; 32
 5ea:	91 e0       	ldi	r25, 0x01	; 1
 5ec:	0e 94 2f 01 	call	0x25e	; 0x25e <Lcm1_ShowString>
	Lcm1_SetCursor(0,1);
 5f0:	80 e0       	ldi	r24, 0x00	; 0
 5f2:	61 e0       	ldi	r22, 0x01	; 1
 5f4:	0e 94 41 01 	call	0x282	; 0x282 <Lcm1_SetCursor>
	Lcm1_ShowString("Initialized");
 5f8:	89 e2       	ldi	r24, 0x29	; 41
 5fa:	91 e0       	ldi	r25, 0x01	; 1
 5fc:	0e 94 2f 01 	call	0x25e	; 0x25e <Lcm1_ShowString>

	// watchdog enable
	//wdt_enable(WDTO_15MS);
	

}
 600:	08 95       	ret

00000602 <main>:

int main()
{
	// define variables

	init();
 602:	0e 94 c8 02 	call	0x590	; 0x590 <init>
	sei();  // enable interrup
 606:	78 94       	sei
 608:	ff cf       	rjmp	.-2      	; 0x608 <main+0x6>

0000060a <Timer0_Init>:
//=========================================
void Timer0_Init()
{
   // TCCR0 = 0x03; // divider 64

	TCCR0A |= (0<<COM0A1)|(0<<COM0A0)|(0<<COM0B1)|(0<<COM0B0)|(0<<WGM01)|(0<<WGM00);
 60a:	e4 e4       	ldi	r30, 0x44	; 68
 60c:	f0 e0       	ldi	r31, 0x00	; 0
 60e:	80 81       	ld	r24, Z
 610:	80 83       	st	Z, r24
	TCCR0B |= (0<<FOC0A)|(0<<FOC0B)|(0<<WGM02)|(0<<CS02)|(1<<CS01)|(1<<CS00); //64
 612:	e5 e4       	ldi	r30, 0x45	; 69
 614:	f0 e0       	ldi	r31, 0x00	; 0
 616:	80 81       	ld	r24, Z
 618:	83 60       	ori	r24, 0x03	; 3
 61a:	80 83       	st	Z, r24
	TIMSK0 |= (0<<OCIE0B)|(0<<OCIE0A)|(1<<TOIE0);
 61c:	ee e6       	ldi	r30, 0x6E	; 110
 61e:	f0 e0       	ldi	r31, 0x00	; 0
 620:	80 81       	ld	r24, Z
 622:	81 60       	ori	r24, 0x01	; 1
 624:	80 83       	st	Z, r24
	TIFR0 |=  (0<<OCF0B)|(0<<OCF0A)|(0<<TOV0);
 626:	e5 e3       	ldi	r30, 0x35	; 53
 628:	f0 e0       	ldi	r31, 0x00	; 0
 62a:	80 81       	ld	r24, Z
 62c:	80 83       	st	Z, r24
	TCNT0 = 256 - 125; 	 
 62e:	83 e8       	ldi	r24, 0x83	; 131
 630:	86 bd       	out	0x26, r24	; 38
}
 632:	08 95       	ret

00000634 <Timer1_Init>:

// Timer 1  timeout= 1.000 ms, fosc = 8.0000 MHz 
//=========================================
void Timer1_Init()
{
    TCCR1A |= (0<<COM1A1)|(0<<COM1A0)|(0<<COM1B1)|(0<<COM1B0)|(0<<WGM11)|(0<<WGM10);
 634:	e0 e8       	ldi	r30, 0x80	; 128
 636:	f0 e0       	ldi	r31, 0x00	; 0
 638:	80 81       	ld	r24, Z
 63a:	80 83       	st	Z, r24
	TCCR1B |= (0<<ICNC1)|(0<<ICES1)|(0<<WGM13)|(0<<WGM12)|(0<<CS12)|(0<<CS11)|(1<<CS10); // divider 1    
 63c:	e1 e8       	ldi	r30, 0x81	; 129
 63e:	f0 e0       	ldi	r31, 0x00	; 0
 640:	80 81       	ld	r24, Z
 642:	81 60       	ori	r24, 0x01	; 1
 644:	80 83       	st	Z, r24
	TCCR1C |= (0<<FOC1A)|(0<<FOC1B);
 646:	e2 e8       	ldi	r30, 0x82	; 130
 648:	f0 e0       	ldi	r31, 0x00	; 0
 64a:	80 81       	ld	r24, Z
 64c:	80 83       	st	Z, r24
	TIMSK1 |= (0<<ICIE1)|(0<<OCIE1B)|(0<<OCIE1A)|(1<<TOIE1);
 64e:	ef e6       	ldi	r30, 0x6F	; 111
 650:	f0 e0       	ldi	r31, 0x00	; 0
 652:	80 81       	ld	r24, Z
 654:	81 60       	ori	r24, 0x01	; 1
 656:	80 83       	st	Z, r24
	TCNT1  = 65536 - 8000;
 658:	80 ec       	ldi	r24, 0xC0	; 192
 65a:	90 ee       	ldi	r25, 0xE0	; 224
 65c:	90 93 85 00 	sts	0x0085, r25
 660:	80 93 84 00 	sts	0x0084, r24
}
 664:	08 95       	ret

00000666 <Timer2_Init>:

// Timer 2  timeout= 1.000 ms, fosc = 8.0000 MHz 
//=========================================
void Timer2_Init()
{
	TCCR2A |= (0<<COM2A1)|(0<<COM2A0)|(0<<COM2B1)|(0<<COM2B0)|(0<<WGM21)|(0<<WGM20);
 666:	e0 eb       	ldi	r30, 0xB0	; 176
 668:	f0 e0       	ldi	r31, 0x00	; 0
 66a:	80 81       	ld	r24, Z
 66c:	80 83       	st	Z, r24
	TCCR2B |= (0<<FOC2A)|(0<<FOC2B)|(0<<WGM22)|(0<<CS22)|(1<<CS21)|(1<<CS20); // divider 32
 66e:	e1 eb       	ldi	r30, 0xB1	; 177
 670:	f0 e0       	ldi	r31, 0x00	; 0
 672:	80 81       	ld	r24, Z
 674:	83 60       	ori	r24, 0x03	; 3
 676:	80 83       	st	Z, r24
	TIMSK2 |= (0<<OCIE2B)|(0<<OCIE2A)|(1<<TOIE2);
 678:	e0 e7       	ldi	r30, 0x70	; 112
 67a:	f0 e0       	ldi	r31, 0x00	; 0
 67c:	80 81       	ld	r24, Z
 67e:	81 60       	ori	r24, 0x01	; 1
 680:	80 83       	st	Z, r24
	TCNT2 = 256 - 250; 
 682:	86 e0       	ldi	r24, 0x06	; 6
 684:	80 93 b2 00 	sts	0x00B2, r24
}
 688:	08 95       	ret

0000068a <__vector_15>:
}
// Timer 1 interrupt service routine 
// timeout 1.000 ms , fosc = 8.0000 MHz 
//====================================
ISR (TIMER1_OVF_vect)
{
 68a:	1f 92       	push	r1
 68c:	0f 92       	push	r0
 68e:	0f b6       	in	r0, 0x3f	; 63
 690:	0f 92       	push	r0
 692:	11 24       	eor	r1, r1
 694:	8f 93       	push	r24
 696:	9f 93       	push	r25
    TCNT1 = 65536 - 8000; 
 698:	80 ec       	ldi	r24, 0xC0	; 192
 69a:	90 ee       	ldi	r25, 0xE0	; 224
 69c:	90 93 85 00 	sts	0x0085, r25
 6a0:	80 93 84 00 	sts	0x0084, r24
    if (++repeat_cnt1 == 1) 
 6a4:	80 91 0c 02 	lds	r24, 0x020C
 6a8:	90 91 0d 02 	lds	r25, 0x020D
 6ac:	01 96       	adiw	r24, 0x01	; 1
 6ae:	90 93 0d 02 	sts	0x020D, r25
 6b2:	80 93 0c 02 	sts	0x020C, r24
 6b6:	80 91 0c 02 	lds	r24, 0x020C
 6ba:	90 91 0d 02 	lds	r25, 0x020D
 6be:	01 97       	sbiw	r24, 0x01	; 1
 6c0:	21 f4       	brne	.+8      	; 0x6ca <__vector_15+0x40>
    {
        repeat_cnt1 = 0; 
 6c2:	10 92 0d 02 	sts	0x020D, r1
 6c6:	10 92 0c 02 	sts	0x020C, r1
	         toggleLED(2); 
		 }
		 */

	}
}
 6ca:	9f 91       	pop	r25
 6cc:	8f 91       	pop	r24
 6ce:	0f 90       	pop	r0
 6d0:	0f be       	out	0x3f, r0	; 63
 6d2:	0f 90       	pop	r0
 6d4:	1f 90       	pop	r1
 6d6:	18 95       	reti

000006d8 <__vector_11>:
// Timer 2 interrupt service routine 
// timeout 1.000 ms , fosc = 8.0000 MHz 

//====================================
ISR (TIMER2_OVF_vect)
{
 6d8:	1f 92       	push	r1
 6da:	0f 92       	push	r0
 6dc:	0f b6       	in	r0, 0x3f	; 63
 6de:	0f 92       	push	r0
 6e0:	11 24       	eor	r1, r1
 6e2:	2f 93       	push	r18
 6e4:	3f 93       	push	r19
 6e6:	4f 93       	push	r20
 6e8:	5f 93       	push	r21
 6ea:	6f 93       	push	r22
 6ec:	7f 93       	push	r23
 6ee:	8f 93       	push	r24
 6f0:	9f 93       	push	r25
 6f2:	af 93       	push	r26
 6f4:	bf 93       	push	r27
 6f6:	ef 93       	push	r30
 6f8:	ff 93       	push	r31
    TCNT2 = 256 - 250; 
 6fa:	86 e0       	ldi	r24, 0x06	; 6
 6fc:	80 93 b2 00 	sts	0x00B2, r24
    if (++repeat_cnt2 == 1) 
 700:	80 91 0e 02 	lds	r24, 0x020E
 704:	90 91 0f 02 	lds	r25, 0x020F
 708:	01 96       	adiw	r24, 0x01	; 1
 70a:	90 93 0f 02 	sts	0x020F, r25
 70e:	80 93 0e 02 	sts	0x020E, r24
 712:	80 91 0e 02 	lds	r24, 0x020E
 716:	90 91 0f 02 	lds	r25, 0x020F
 71a:	01 97       	sbiw	r24, 0x01	; 1
 71c:	09 f5       	brne	.+66     	; 0x760 <__vector_11+0x88>
    {
        repeat_cnt2 = 0; 
 71e:	10 92 0f 02 	sts	0x020F, r1
 722:	10 92 0e 02 	sts	0x020E, r1
         msCountedTimer2++;
 726:	80 91 12 02 	lds	r24, 0x0212
 72a:	90 91 13 02 	lds	r25, 0x0213
 72e:	01 96       	adiw	r24, 0x01	; 1
 730:	90 93 13 02 	sts	0x0213, r25
 734:	80 93 12 02 	sts	0x0212, r24
         if(msCountedTimer2 % toggleMsTime == 0)
 738:	80 91 12 02 	lds	r24, 0x0212
 73c:	90 91 13 02 	lds	r25, 0x0213
 740:	60 91 07 02 	lds	r22, 0x0207
 744:	70 91 08 02 	lds	r23, 0x0208
 748:	0e 94 c0 06 	call	0xd80	; 0xd80 <__udivmodhi4>
 74c:	89 2b       	or	r24, r25
 74e:	41 f4       	brne	.+16     	; 0x760 <__vector_11+0x88>
         {
	         //msCountedTimer2 = 0;
	         toggleLED(1);
 750:	81 e0       	ldi	r24, 0x01	; 1
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	0e 94 7e 02 	call	0x4fc	; 0x4fc <toggleLED>
	         toggleLED(2); 
 758:	82 e0       	ldi	r24, 0x02	; 2
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	0e 94 7e 02 	call	0x4fc	; 0x4fc <toggleLED>
		 }
    }
}
 760:	ff 91       	pop	r31
 762:	ef 91       	pop	r30
 764:	bf 91       	pop	r27
 766:	af 91       	pop	r26
 768:	9f 91       	pop	r25
 76a:	8f 91       	pop	r24
 76c:	7f 91       	pop	r23
 76e:	6f 91       	pop	r22
 770:	5f 91       	pop	r21
 772:	4f 91       	pop	r20
 774:	3f 91       	pop	r19
 776:	2f 91       	pop	r18
 778:	0f 90       	pop	r0
 77a:	0f be       	out	0x3f, r0	; 63
 77c:	0f 90       	pop	r0
 77e:	1f 90       	pop	r1
 780:	18 95       	reti

00000782 <__vector_18>:
}
// Timer 0 interrupt service routine 
// timeout 1.000 ms , fosc = 8.0000 MHz 
//====================================
ISR (TIMER0_OVF_vect)
{
 782:	1f 92       	push	r1
 784:	0f 92       	push	r0
 786:	0f b6       	in	r0, 0x3f	; 63
 788:	0f 92       	push	r0
 78a:	11 24       	eor	r1, r1
 78c:	ef 92       	push	r14
 78e:	ff 92       	push	r15
 790:	0f 93       	push	r16
 792:	1f 93       	push	r17
 794:	2f 93       	push	r18
 796:	3f 93       	push	r19
 798:	4f 93       	push	r20
 79a:	5f 93       	push	r21
 79c:	6f 93       	push	r22
 79e:	7f 93       	push	r23
 7a0:	8f 93       	push	r24
 7a2:	9f 93       	push	r25
 7a4:	af 93       	push	r26
 7a6:	bf 93       	push	r27
 7a8:	ef 93       	push	r30
 7aa:	ff 93       	push	r31
 7ac:	df 93       	push	r29
 7ae:	cf 93       	push	r28
 7b0:	cd b7       	in	r28, 0x3d	; 61
 7b2:	de b7       	in	r29, 0x3e	; 62
 7b4:	60 97       	sbiw	r28, 0x10	; 16
 7b6:	de bf       	out	0x3e, r29	; 62
 7b8:	cd bf       	out	0x3d, r28	; 61
	TCNT0 = 256 - 125; 
 7ba:	83 e8       	ldi	r24, 0x83	; 131
 7bc:	86 bd       	out	0x26, r24	; 38
	int adcValue = 0;
	char str[16];
	char *ptr;
	
    if (++repeat_cnt0 == 1) 
 7be:	80 91 0a 02 	lds	r24, 0x020A
 7c2:	90 91 0b 02 	lds	r25, 0x020B
 7c6:	01 96       	adiw	r24, 0x01	; 1
 7c8:	90 93 0b 02 	sts	0x020B, r25
 7cc:	80 93 0a 02 	sts	0x020A, r24
 7d0:	80 91 0a 02 	lds	r24, 0x020A
 7d4:	90 91 0b 02 	lds	r25, 0x020B
 7d8:	01 97       	sbiw	r24, 0x01	; 1
 7da:	09 f0       	breq	.+2      	; 0x7de <__vector_18+0x5c>
 7dc:	c8 c1       	rjmp	.+912    	; 0xb6e <__vector_18+0x3ec>
    {
        repeat_cnt0 = 0; 
 7de:	10 92 0b 02 	sts	0x020B, r1
 7e2:	10 92 0a 02 	sts	0x020A, r1
		
         msCountedTimer0++;
 7e6:	80 91 10 02 	lds	r24, 0x0210
 7ea:	90 91 11 02 	lds	r25, 0x0211
 7ee:	01 96       	adiw	r24, 0x01	; 1
 7f0:	90 93 11 02 	sts	0x0211, r25
 7f4:	80 93 10 02 	sts	0x0210, r24
         if(msCountedTimer0 % 100 == 0)
 7f8:	80 91 10 02 	lds	r24, 0x0210
 7fc:	90 91 11 02 	lds	r25, 0x0211
 800:	64 e6       	ldi	r22, 0x64	; 100
 802:	70 e0       	ldi	r23, 0x00	; 0
 804:	0e 94 c0 06 	call	0xd80	; 0xd80 <__udivmodhi4>
 808:	89 2b       	or	r24, r25
 80a:	09 f0       	breq	.+2      	; 0x80e <__vector_18+0x8c>
 80c:	b0 c1       	rjmp	.+864    	; 0xb6e <__vector_18+0x3ec>
         {
			 //msCountedTimer0 = 0;
			 if(uart0_available() != 0)
 80e:	0e 94 ad 06 	call	0xd5a	; 0xd5a <uart0_available>
 812:	89 2b       	or	r24, r25
 814:	99 f0       	breq	.+38     	; 0x83c <__vector_18+0xba>
			 {
				 if(uart0_peek() != '\r')
 816:	0e 94 67 06 	call	0xcce	; 0xcce <uart0_peek>
 81a:	0d 97       	sbiw	r24, 0x0d	; 13
 81c:	79 f0       	breq	.+30     	; 0x83c <__vector_18+0xba>
				 {
					 line[lineIndex++] = uart0_getc();
 81e:	10 91 14 02 	lds	r17, 0x0214
 822:	e1 2e       	mov	r14, r17
 824:	ff 24       	eor	r15, r15
 826:	0e 94 48 06 	call	0xc90	; 0xc90 <uart0_getc>
 82a:	2a e1       	ldi	r18, 0x1A	; 26
 82c:	33 e0       	ldi	r19, 0x03	; 3
 82e:	e2 0e       	add	r14, r18
 830:	f3 1e       	adc	r15, r19
 832:	f7 01       	movw	r30, r14
 834:	80 83       	st	Z, r24
 836:	1f 5f       	subi	r17, 0xFF	; 255
 838:	10 93 14 02 	sts	0x0214, r17
				 }
			 }
			 
			 
			 if(uart0_peek() == '\r')
 83c:	0e 94 67 06 	call	0xcce	; 0xcce <uart0_peek>
 840:	0d 97       	sbiw	r24, 0x0d	; 13
 842:	09 f0       	breq	.+2      	; 0x846 <__vector_18+0xc4>
 844:	75 c0       	rjmp	.+234    	; 0x930 <__vector_18+0x1ae>
			 {
				  ptr = (char *)line;
				  uart0_flush();
 846:	0e 94 bb 06 	call	0xd76	; 0xd76 <uart0_flush>
				  uart0_puts("\r\n");
 84a:	0f 2e       	mov	r0, r31
 84c:	f5 e3       	ldi	r31, 0x35	; 53
 84e:	ef 2e       	mov	r14, r31
 850:	f1 e0       	ldi	r31, 0x01	; 1
 852:	ff 2e       	mov	r15, r31
 854:	f0 2d       	mov	r31, r0
 856:	c7 01       	movw	r24, r14
 858:	0e 94 9e 06 	call	0xd3c	; 0xd3c <uart0_puts>
				  uart0_puts(ptr);
 85c:	0a e1       	ldi	r16, 0x1A	; 26
 85e:	13 e0       	ldi	r17, 0x03	; 3
 860:	c8 01       	movw	r24, r16
 862:	0e 94 9e 06 	call	0xd3c	; 0xd3c <uart0_puts>
				  uart0_puts("\r\n");
 866:	c7 01       	movw	r24, r14
 868:	0e 94 9e 06 	call	0xd3c	; 0xd3c <uart0_puts>
				  Lcm1_Clearscreen();
 86c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Lcm1_Clearscreen>
				  Lcm1_SetCursor(0,0);
 870:	80 e0       	ldi	r24, 0x00	; 0
 872:	60 e0       	ldi	r22, 0x00	; 0
 874:	0e 94 41 01 	call	0x282	; 0x282 <Lcm1_SetCursor>
				  Lcm1_ShowString(ptr);
 878:	c8 01       	movw	r24, r16
 87a:	0e 94 2f 01 	call	0x25e	; 0x25e <Lcm1_ShowString>
				  if(strcmp(ptr,"hello") == 0)
 87e:	c8 01       	movw	r24, r16
 880:	68 e3       	ldi	r22, 0x38	; 56
 882:	71 e0       	ldi	r23, 0x01	; 1
 884:	0e 94 e7 06 	call	0xdce	; 0xdce <strcmp>
 888:	28 2f       	mov	r18, r24
 88a:	39 2f       	mov	r19, r25
 88c:	23 2b       	or	r18, r19
 88e:	59 f4       	brne	.+22     	; 0x8a6 <__vector_18+0x124>
				  {
					  uart0_puts("\r\n");
 890:	c7 01       	movw	r24, r14
 892:	0e 94 9e 06 	call	0xd3c	; 0xd3c <uart0_puts>
					  uart0_puts(" Hello to you Goon !!!!");
 896:	8e e3       	ldi	r24, 0x3E	; 62
 898:	91 e0       	ldi	r25, 0x01	; 1
 89a:	0e 94 9e 06 	call	0xd3c	; 0xd3c <uart0_puts>
					  uart0_puts("\r\n");
 89e:	c7 01       	movw	r24, r14
 8a0:	0e 94 9e 06 	call	0xd3c	; 0xd3c <uart0_puts>
 8a4:	5f c1       	rjmp	.+702    	; 0xb64 <__vector_18+0x3e2>
				  }
				  else if(strcmp(ptr,"start") == 0)
 8a6:	8a e1       	ldi	r24, 0x1A	; 26
 8a8:	93 e0       	ldi	r25, 0x03	; 3
 8aa:	66 e5       	ldi	r22, 0x56	; 86
 8ac:	71 e0       	ldi	r23, 0x01	; 1
 8ae:	0e 94 e7 06 	call	0xdce	; 0xdce <strcmp>
 8b2:	28 2f       	mov	r18, r24
 8b4:	39 2f       	mov	r19, r25
 8b6:	23 2b       	or	r18, r19
 8b8:	69 f4       	brne	.+26     	; 0x8d4 <__vector_18+0x152>
				  {
					  uart0_puts("\r\n");
 8ba:	05 e3       	ldi	r16, 0x35	; 53
 8bc:	11 e0       	ldi	r17, 0x01	; 1
 8be:	c8 01       	movw	r24, r16
 8c0:	0e 94 9e 06 	call	0xd3c	; 0xd3c <uart0_puts>
					  uart0_puts("Starting !!!!");
 8c4:	8c e5       	ldi	r24, 0x5C	; 92
 8c6:	91 e0       	ldi	r25, 0x01	; 1
 8c8:	0e 94 9e 06 	call	0xd3c	; 0xd3c <uart0_puts>
					  uart0_puts("\r\n");
 8cc:	c8 01       	movw	r24, r16
 8ce:	0e 94 9e 06 	call	0xd3c	; 0xd3c <uart0_puts>
 8d2:	48 c1       	rjmp	.+656    	; 0xb64 <__vector_18+0x3e2>
				  }
				  else if(strcmp(ptr,"stop") == 0)
 8d4:	8a e1       	ldi	r24, 0x1A	; 26
 8d6:	93 e0       	ldi	r25, 0x03	; 3
 8d8:	6a e6       	ldi	r22, 0x6A	; 106
 8da:	71 e0       	ldi	r23, 0x01	; 1
 8dc:	0e 94 e7 06 	call	0xdce	; 0xdce <strcmp>
 8e0:	28 2f       	mov	r18, r24
 8e2:	39 2f       	mov	r19, r25
 8e4:	23 2b       	or	r18, r19
 8e6:	69 f4       	brne	.+26     	; 0x902 <__vector_18+0x180>
				  {
					  uart0_puts("\r\n");
 8e8:	05 e3       	ldi	r16, 0x35	; 53
 8ea:	11 e0       	ldi	r17, 0x01	; 1
 8ec:	c8 01       	movw	r24, r16
 8ee:	0e 94 9e 06 	call	0xd3c	; 0xd3c <uart0_puts>
					  uart0_puts("Stopping !!!!");
 8f2:	8f e6       	ldi	r24, 0x6F	; 111
 8f4:	91 e0       	ldi	r25, 0x01	; 1
 8f6:	0e 94 9e 06 	call	0xd3c	; 0xd3c <uart0_puts>
					  uart0_puts("\r\n");
 8fa:	c8 01       	movw	r24, r16
 8fc:	0e 94 9e 06 	call	0xd3c	; 0xd3c <uart0_puts>
 900:	31 c1       	rjmp	.+610    	; 0xb64 <__vector_18+0x3e2>
				  }
				  else
				  {
					  uart0_puts("\r\n");
 902:	05 e3       	ldi	r16, 0x35	; 53
 904:	11 e0       	ldi	r17, 0x01	; 1
 906:	c8 01       	movw	r24, r16
 908:	0e 94 9e 06 	call	0xd3c	; 0xd3c <uart0_puts>
					  uart0_puts("Invalid input");
 90c:	8d e7       	ldi	r24, 0x7D	; 125
 90e:	91 e0       	ldi	r25, 0x01	; 1
 910:	0e 94 9e 06 	call	0xd3c	; 0xd3c <uart0_puts>
					  uart0_puts("\r\n");
 914:	c8 01       	movw	r24, r16
 916:	0e 94 9e 06 	call	0xd3c	; 0xd3c <uart0_puts>
 91a:	24 c1       	rjmp	.+584    	; 0xb64 <__vector_18+0x3e2>
				  }
				  for(int i = 0; i<128; i++)
				  {
					  line[i] = '\0';
 91c:	f9 01       	movw	r30, r18
 91e:	e8 0f       	add	r30, r24
 920:	f9 1f       	adc	r31, r25
 922:	10 82       	st	Z, r1
				  {
					  uart0_puts("\r\n");
					  uart0_puts("Invalid input");
					  uart0_puts("\r\n");
				  }
				  for(int i = 0; i<128; i++)
 924:	01 96       	adiw	r24, 0x01	; 1
 926:	80 38       	cpi	r24, 0x80	; 128
 928:	91 05       	cpc	r25, r1
 92a:	c1 f7       	brne	.-16     	; 0x91c <__vector_18+0x19a>
				  {
					  line[i] = '\0';
				  }
				  lineIndex = 0;
 92c:	10 92 14 02 	sts	0x0214, r1
			 }
			 
	         if(buttonIsPressed(1))
 930:	81 e0       	ldi	r24, 0x01	; 1
 932:	90 e0       	ldi	r25, 0x00	; 0
 934:	0e 94 c1 00 	call	0x182	; 0x182 <buttonIsPressed>
 938:	89 2b       	or	r24, r25
 93a:	09 f4       	brne	.+2      	; 0x93e <__vector_18+0x1bc>
 93c:	49 c0       	rjmp	.+146    	; 0x9d0 <__vector_18+0x24e>
			 {
				 uart0_puts("Button 1 Pushed\r\n");
 93e:	8b e8       	ldi	r24, 0x8B	; 139
 940:	91 e0       	ldi	r25, 0x01	; 1
 942:	0e 94 9e 06 	call	0xd3c	; 0xd3c <uart0_puts>
				 uart0_puts("ADC Ref Value: VCC \r\n");
 946:	8d e9       	ldi	r24, 0x9D	; 157
 948:	91 e0       	ldi	r25, 0x01	; 1
 94a:	0e 94 9e 06 	call	0xd3c	; 0xd3c <uart0_puts>
				 uart0_puts("ADC Value: ");
 94e:	0f 2e       	mov	r0, r31
 950:	f3 eb       	ldi	r31, 0xB3	; 179
 952:	ef 2e       	mov	r14, r31
 954:	f1 e0       	ldi	r31, 0x01	; 1
 956:	ff 2e       	mov	r15, r31
 958:	f0 2d       	mov	r31, r0
 95a:	c7 01       	movw	r24, r14
 95c:	0e 94 9e 06 	call	0xd3c	; 0xd3c <uart0_puts>
				 adcValue = adc_get_value_ref(1,7);
 960:	81 e0       	ldi	r24, 0x01	; 1
 962:	67 e0       	ldi	r22, 0x07	; 7
 964:	0e 94 97 00 	call	0x12e	; 0x12e <adc_get_value_ref>
				 itoa(adcValue, str, 10);
 968:	8e 01       	movw	r16, r28
 96a:	0f 5f       	subi	r16, 0xFF	; 255
 96c:	1f 4f       	sbci	r17, 0xFF	; 255
 96e:	b8 01       	movw	r22, r16
 970:	4a e0       	ldi	r20, 0x0A	; 10
 972:	50 e0       	ldi	r21, 0x00	; 0
 974:	0e 94 f0 06 	call	0xde0	; 0xde0 <itoa>
				 uart0_puts(str);
 978:	c8 01       	movw	r24, r16
 97a:	0e 94 9e 06 	call	0xd3c	; 0xd3c <uart0_puts>
				 uart0_puts("\r\n");
 97e:	85 e3       	ldi	r24, 0x35	; 53
 980:	91 e0       	ldi	r25, 0x01	; 1
 982:	0e 94 9e 06 	call	0xd3c	; 0xd3c <uart0_puts>
				 Lcm1_Clearscreen();
 986:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Lcm1_Clearscreen>
				 Lcm1_SetCursor(0,0);
 98a:	80 e0       	ldi	r24, 0x00	; 0
 98c:	60 e0       	ldi	r22, 0x00	; 0
 98e:	0e 94 41 01 	call	0x282	; 0x282 <Lcm1_SetCursor>
				 Lcm1_ShowString("ADC Ref: VCC");
 992:	8f eb       	ldi	r24, 0xBF	; 191
 994:	91 e0       	ldi	r25, 0x01	; 1
 996:	0e 94 2f 01 	call	0x25e	; 0x25e <Lcm1_ShowString>
				 Lcm1_SetCursor(0,1);
 99a:	80 e0       	ldi	r24, 0x00	; 0
 99c:	61 e0       	ldi	r22, 0x01	; 1
 99e:	0e 94 41 01 	call	0x282	; 0x282 <Lcm1_SetCursor>
				 Lcm1_ShowString("ADC Value: ");
 9a2:	c7 01       	movw	r24, r14
 9a4:	0e 94 2f 01 	call	0x25e	; 0x25e <Lcm1_ShowString>
				 Lcm1_ShowString(str);
 9a8:	c8 01       	movw	r24, r16
 9aa:	0e 94 2f 01 	call	0x25e	; 0x25e <Lcm1_ShowString>
				 if(state > 2)
 9ae:	80 91 05 02 	lds	r24, 0x0205
 9b2:	90 91 06 02 	lds	r25, 0x0206
 9b6:	03 97       	sbiw	r24, 0x03	; 3
 9b8:	08 f4       	brcc	.+2      	; 0x9bc <__vector_18+0x23a>
 9ba:	58 c0       	rjmp	.+176    	; 0xa6c <__vector_18+0x2ea>
				 {
					 state--;
 9bc:	80 91 05 02 	lds	r24, 0x0205
 9c0:	90 91 06 02 	lds	r25, 0x0206
 9c4:	01 97       	sbiw	r24, 0x01	; 1
 9c6:	90 93 06 02 	sts	0x0206, r25
 9ca:	80 93 05 02 	sts	0x0205, r24
 9ce:	4e c0       	rjmp	.+156    	; 0xa6c <__vector_18+0x2ea>
				 }
				
			 }
			 else if(buttonIsPressed(2))
 9d0:	82 e0       	ldi	r24, 0x02	; 2
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	0e 94 c1 00 	call	0x182	; 0x182 <buttonIsPressed>
 9d8:	89 2b       	or	r24, r25
 9da:	09 f4       	brne	.+2      	; 0x9de <__vector_18+0x25c>
 9dc:	47 c0       	rjmp	.+142    	; 0xa6c <__vector_18+0x2ea>
			 {
				 uart0_puts("Button 2 Pushed\r\n");
 9de:	8c ec       	ldi	r24, 0xCC	; 204
 9e0:	91 e0       	ldi	r25, 0x01	; 1
 9e2:	0e 94 9e 06 	call	0xd3c	; 0xd3c <uart0_puts>
				 uart0_puts("ADC Ref Value: 2.56V \r\n");
 9e6:	8e ed       	ldi	r24, 0xDE	; 222
 9e8:	91 e0       	ldi	r25, 0x01	; 1
 9ea:	0e 94 9e 06 	call	0xd3c	; 0xd3c <uart0_puts>
				 uart0_puts("ADC Value: ");
 9ee:	0f 2e       	mov	r0, r31
 9f0:	f3 eb       	ldi	r31, 0xB3	; 179
 9f2:	ef 2e       	mov	r14, r31
 9f4:	f1 e0       	ldi	r31, 0x01	; 1
 9f6:	ff 2e       	mov	r15, r31
 9f8:	f0 2d       	mov	r31, r0
 9fa:	c7 01       	movw	r24, r14
 9fc:	0e 94 9e 06 	call	0xd3c	; 0xd3c <uart0_puts>
				 adcValue = adc_get_value_ref(3,6);
 a00:	83 e0       	ldi	r24, 0x03	; 3
 a02:	66 e0       	ldi	r22, 0x06	; 6
 a04:	0e 94 97 00 	call	0x12e	; 0x12e <adc_get_value_ref>
				 itoa(adcValue, str, 10);
 a08:	8e 01       	movw	r16, r28
 a0a:	0f 5f       	subi	r16, 0xFF	; 255
 a0c:	1f 4f       	sbci	r17, 0xFF	; 255
 a0e:	b8 01       	movw	r22, r16
 a10:	4a e0       	ldi	r20, 0x0A	; 10
 a12:	50 e0       	ldi	r21, 0x00	; 0
 a14:	0e 94 f0 06 	call	0xde0	; 0xde0 <itoa>
				 uart0_puts(str);
 a18:	c8 01       	movw	r24, r16
 a1a:	0e 94 9e 06 	call	0xd3c	; 0xd3c <uart0_puts>
				 uart0_puts("\r\n");
 a1e:	85 e3       	ldi	r24, 0x35	; 53
 a20:	91 e0       	ldi	r25, 0x01	; 1
 a22:	0e 94 9e 06 	call	0xd3c	; 0xd3c <uart0_puts>
				 Lcm1_Clearscreen();
 a26:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Lcm1_Clearscreen>
				 Lcm1_SetCursor(0,0);
 a2a:	80 e0       	ldi	r24, 0x00	; 0
 a2c:	60 e0       	ldi	r22, 0x00	; 0
 a2e:	0e 94 41 01 	call	0x282	; 0x282 <Lcm1_SetCursor>
				 Lcm1_ShowString("ADC Ref: 2.56V");
 a32:	86 ef       	ldi	r24, 0xF6	; 246
 a34:	91 e0       	ldi	r25, 0x01	; 1
 a36:	0e 94 2f 01 	call	0x25e	; 0x25e <Lcm1_ShowString>
				 Lcm1_SetCursor(0,1);
 a3a:	80 e0       	ldi	r24, 0x00	; 0
 a3c:	61 e0       	ldi	r22, 0x01	; 1
 a3e:	0e 94 41 01 	call	0x282	; 0x282 <Lcm1_SetCursor>
				 Lcm1_ShowString("ADC Value: ");
 a42:	c7 01       	movw	r24, r14
 a44:	0e 94 2f 01 	call	0x25e	; 0x25e <Lcm1_ShowString>
				 Lcm1_ShowString(str);
 a48:	c8 01       	movw	r24, r16
 a4a:	0e 94 2f 01 	call	0x25e	; 0x25e <Lcm1_ShowString>
				 if(state < 10)
 a4e:	80 91 05 02 	lds	r24, 0x0205
 a52:	90 91 06 02 	lds	r25, 0x0206
 a56:	0a 97       	sbiw	r24, 0x0a	; 10
 a58:	48 f4       	brcc	.+18     	; 0xa6c <__vector_18+0x2ea>
				 {
					 state++;
 a5a:	80 91 05 02 	lds	r24, 0x0205
 a5e:	90 91 06 02 	lds	r25, 0x0206
 a62:	01 96       	adiw	r24, 0x01	; 1
 a64:	90 93 06 02 	sts	0x0206, r25
 a68:	80 93 05 02 	sts	0x0205, r24
			 else
			 {
				 
			 }
			 
			 if(state == 1)
 a6c:	80 91 05 02 	lds	r24, 0x0205
 a70:	90 91 06 02 	lds	r25, 0x0206
 a74:	01 97       	sbiw	r24, 0x01	; 1
 a76:	39 f4       	brne	.+14     	; 0xa86 <__vector_18+0x304>
			 {
				 toggleMsTime = 50;
 a78:	82 e3       	ldi	r24, 0x32	; 50
 a7a:	90 e0       	ldi	r25, 0x00	; 0
 a7c:	90 93 08 02 	sts	0x0208, r25
 a80:	80 93 07 02 	sts	0x0207, r24
 a84:	74 c0       	rjmp	.+232    	; 0xb6e <__vector_18+0x3ec>
			 }
			 else if(state == 2)
 a86:	80 91 05 02 	lds	r24, 0x0205
 a8a:	90 91 06 02 	lds	r25, 0x0206
 a8e:	02 97       	sbiw	r24, 0x02	; 2
 a90:	39 f4       	brne	.+14     	; 0xaa0 <__vector_18+0x31e>
			 {
				 toggleMsTime = 100;
 a92:	84 e6       	ldi	r24, 0x64	; 100
 a94:	90 e0       	ldi	r25, 0x00	; 0
 a96:	90 93 08 02 	sts	0x0208, r25
 a9a:	80 93 07 02 	sts	0x0207, r24
 a9e:	67 c0       	rjmp	.+206    	; 0xb6e <__vector_18+0x3ec>
			 }
			 else if(state == 3)
 aa0:	80 91 05 02 	lds	r24, 0x0205
 aa4:	90 91 06 02 	lds	r25, 0x0206
 aa8:	03 97       	sbiw	r24, 0x03	; 3
 aaa:	39 f4       	brne	.+14     	; 0xaba <__vector_18+0x338>
			 {
				 toggleMsTime = 200;
 aac:	88 ec       	ldi	r24, 0xC8	; 200
 aae:	90 e0       	ldi	r25, 0x00	; 0
 ab0:	90 93 08 02 	sts	0x0208, r25
 ab4:	80 93 07 02 	sts	0x0207, r24
 ab8:	5a c0       	rjmp	.+180    	; 0xb6e <__vector_18+0x3ec>
			 }
			  else if(state == 4)
 aba:	80 91 05 02 	lds	r24, 0x0205
 abe:	90 91 06 02 	lds	r25, 0x0206
 ac2:	04 97       	sbiw	r24, 0x04	; 4
 ac4:	39 f4       	brne	.+14     	; 0xad4 <__vector_18+0x352>
			  {
				  toggleMsTime = 400;
 ac6:	80 e9       	ldi	r24, 0x90	; 144
 ac8:	91 e0       	ldi	r25, 0x01	; 1
 aca:	90 93 08 02 	sts	0x0208, r25
 ace:	80 93 07 02 	sts	0x0207, r24
 ad2:	4d c0       	rjmp	.+154    	; 0xb6e <__vector_18+0x3ec>
			  }
			  else if(state == 5)
 ad4:	80 91 05 02 	lds	r24, 0x0205
 ad8:	90 91 06 02 	lds	r25, 0x0206
 adc:	05 97       	sbiw	r24, 0x05	; 5
 ade:	39 f4       	brne	.+14     	; 0xaee <__vector_18+0x36c>
			  {
				  toggleMsTime = 500;
 ae0:	84 ef       	ldi	r24, 0xF4	; 244
 ae2:	91 e0       	ldi	r25, 0x01	; 1
 ae4:	90 93 08 02 	sts	0x0208, r25
 ae8:	80 93 07 02 	sts	0x0207, r24
 aec:	40 c0       	rjmp	.+128    	; 0xb6e <__vector_18+0x3ec>
			  }
			   else if(state == 6)
 aee:	80 91 05 02 	lds	r24, 0x0205
 af2:	90 91 06 02 	lds	r25, 0x0206
 af6:	06 97       	sbiw	r24, 0x06	; 6
 af8:	39 f4       	brne	.+14     	; 0xb08 <__vector_18+0x386>
			   {
				   toggleMsTime = 750;
 afa:	8e ee       	ldi	r24, 0xEE	; 238
 afc:	92 e0       	ldi	r25, 0x02	; 2
 afe:	90 93 08 02 	sts	0x0208, r25
 b02:	80 93 07 02 	sts	0x0207, r24
 b06:	33 c0       	rjmp	.+102    	; 0xb6e <__vector_18+0x3ec>
			   }
			   else if(state == 7)
 b08:	80 91 05 02 	lds	r24, 0x0205
 b0c:	90 91 06 02 	lds	r25, 0x0206
 b10:	07 97       	sbiw	r24, 0x07	; 7
 b12:	39 f4       	brne	.+14     	; 0xb22 <__vector_18+0x3a0>
			   {
				   toggleMsTime = 1000;
 b14:	88 ee       	ldi	r24, 0xE8	; 232
 b16:	93 e0       	ldi	r25, 0x03	; 3
 b18:	90 93 08 02 	sts	0x0208, r25
 b1c:	80 93 07 02 	sts	0x0207, r24
 b20:	26 c0       	rjmp	.+76     	; 0xb6e <__vector_18+0x3ec>
			   }
			   else if(state == 8)
 b22:	80 91 05 02 	lds	r24, 0x0205
 b26:	90 91 06 02 	lds	r25, 0x0206
 b2a:	08 97       	sbiw	r24, 0x08	; 8
 b2c:	39 f4       	brne	.+14     	; 0xb3c <__vector_18+0x3ba>
			   {
				   toggleMsTime = 1250;
 b2e:	82 ee       	ldi	r24, 0xE2	; 226
 b30:	94 e0       	ldi	r25, 0x04	; 4
 b32:	90 93 08 02 	sts	0x0208, r25
 b36:	80 93 07 02 	sts	0x0207, r24
 b3a:	19 c0       	rjmp	.+50     	; 0xb6e <__vector_18+0x3ec>
			   }
			   else if(state == 9)
 b3c:	80 91 05 02 	lds	r24, 0x0205
 b40:	90 91 06 02 	lds	r25, 0x0206
 b44:	09 97       	sbiw	r24, 0x09	; 9
 b46:	39 f4       	brne	.+14     	; 0xb56 <__vector_18+0x3d4>
			   {
				   toggleMsTime = 1500;
 b48:	8c ed       	ldi	r24, 0xDC	; 220
 b4a:	95 e0       	ldi	r25, 0x05	; 5
 b4c:	90 93 08 02 	sts	0x0208, r25
 b50:	80 93 07 02 	sts	0x0207, r24
 b54:	0c c0       	rjmp	.+24     	; 0xb6e <__vector_18+0x3ec>
			   }
			   else
			   {
				   toggleMsTime = 2000;
 b56:	80 ed       	ldi	r24, 0xD0	; 208
 b58:	97 e0       	ldi	r25, 0x07	; 7
 b5a:	90 93 08 02 	sts	0x0208, r25
 b5e:	80 93 07 02 	sts	0x0207, r24
 b62:	05 c0       	rjmp	.+10     	; 0xb6e <__vector_18+0x3ec>
			
		
		 }
		 
     }
}
 b64:	80 e0       	ldi	r24, 0x00	; 0
 b66:	90 e0       	ldi	r25, 0x00	; 0
					  uart0_puts("Invalid input");
					  uart0_puts("\r\n");
				  }
				  for(int i = 0; i<128; i++)
				  {
					  line[i] = '\0';
 b68:	2a e1       	ldi	r18, 0x1A	; 26
 b6a:	33 e0       	ldi	r19, 0x03	; 3
 b6c:	d7 ce       	rjmp	.-594    	; 0x91c <__vector_18+0x19a>
			
		
		 }
		 
     }
}
 b6e:	60 96       	adiw	r28, 0x10	; 16
 b70:	de bf       	out	0x3e, r29	; 62
 b72:	cd bf       	out	0x3d, r28	; 61
 b74:	cf 91       	pop	r28
 b76:	df 91       	pop	r29
 b78:	ff 91       	pop	r31
 b7a:	ef 91       	pop	r30
 b7c:	bf 91       	pop	r27
 b7e:	af 91       	pop	r26
 b80:	9f 91       	pop	r25
 b82:	8f 91       	pop	r24
 b84:	7f 91       	pop	r23
 b86:	6f 91       	pop	r22
 b88:	5f 91       	pop	r21
 b8a:	4f 91       	pop	r20
 b8c:	3f 91       	pop	r19
 b8e:	2f 91       	pop	r18
 b90:	1f 91       	pop	r17
 b92:	0f 91       	pop	r16
 b94:	ff 90       	pop	r15
 b96:	ef 90       	pop	r14
 b98:	0f 90       	pop	r0
 b9a:	0f be       	out	0x3f, r0	; 63
 b9c:	0f 90       	pop	r0
 b9e:	1f 90       	pop	r1
 ba0:	18 95       	reti

00000ba2 <__vector_20>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
 ba2:	1f 92       	push	r1
 ba4:	0f 92       	push	r0
 ba6:	0f b6       	in	r0, 0x3f	; 63
 ba8:	0f 92       	push	r0
 baa:	11 24       	eor	r1, r1
 bac:	2f 93       	push	r18
 bae:	3f 93       	push	r19
 bb0:	8f 93       	push	r24
 bb2:	9f 93       	push	r25
 bb4:	ef 93       	push	r30
 bb6:	ff 93       	push	r31
    uint8_t data;
    uint8_t usr;
    uint8_t lastRxError;
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
 bb8:	20 91 c0 00 	lds	r18, 0x00C0
    data = UART0_DATA;
 bbc:	30 91 c6 00 	lds	r19, 0x00C6
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX0_BUFFER_MASK;
 bc0:	80 91 17 03 	lds	r24, 0x0317
 bc4:	90 e0       	ldi	r25, 0x00	; 0
 bc6:	01 96       	adiw	r24, 0x01	; 1
 bc8:	fc 01       	movw	r30, r24
 bca:	ef 77       	andi	r30, 0x7F	; 127
 bcc:	f0 70       	andi	r31, 0x00	; 0
    
    if ( tmphead == UART_RxTail ) {
 bce:	80 91 18 03 	lds	r24, 0x0318
 bd2:	90 e0       	ldi	r25, 0x00	; 0
 bd4:	8e 17       	cp	r24, r30
 bd6:	9f 07       	cpc	r25, r31
 bd8:	11 f4       	brne	.+4      	; 0xbde <__vector_20+0x3c>
 bda:	82 e0       	ldi	r24, 0x02	; 2
 bdc:	07 c0       	rjmp	.+14     	; 0xbec <__vector_20+0x4a>
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
 bde:	82 2f       	mov	r24, r18
 be0:	88 71       	andi	r24, 0x18	; 24
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    } else {
        /* store new index */
        UART_RxHead = tmphead;
 be2:	e0 93 17 03 	sts	0x0317, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 be6:	eb 56       	subi	r30, 0x6B	; 107
 be8:	fd 4f       	sbci	r31, 0xFD	; 253
 bea:	30 83       	st	Z, r19
    }
    UART_LastRxError = lastRxError;   
 bec:	80 93 19 03 	sts	0x0319, r24
}
 bf0:	ff 91       	pop	r31
 bf2:	ef 91       	pop	r30
 bf4:	9f 91       	pop	r25
 bf6:	8f 91       	pop	r24
 bf8:	3f 91       	pop	r19
 bfa:	2f 91       	pop	r18
 bfc:	0f 90       	pop	r0
 bfe:	0f be       	out	0x3f, r0	; 63
 c00:	0f 90       	pop	r0
 c02:	1f 90       	pop	r1
 c04:	18 95       	reti

00000c06 <__vector_21>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 c06:	1f 92       	push	r1
 c08:	0f 92       	push	r0
 c0a:	0f b6       	in	r0, 0x3f	; 63
 c0c:	0f 92       	push	r0
 c0e:	11 24       	eor	r1, r1
 c10:	8f 93       	push	r24
 c12:	9f 93       	push	r25
 c14:	ef 93       	push	r30
 c16:	ff 93       	push	r31
    uint16_t tmptail;

    if ( UART_TxHead != UART_TxTail) {
 c18:	90 91 15 03 	lds	r25, 0x0315
 c1c:	80 91 16 03 	lds	r24, 0x0316
 c20:	98 17       	cp	r25, r24
 c22:	71 f0       	breq	.+28     	; 0xc40 <__vector_21+0x3a>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX0_BUFFER_MASK;
 c24:	e0 91 16 03 	lds	r30, 0x0316
 c28:	f0 e0       	ldi	r31, 0x00	; 0
 c2a:	31 96       	adiw	r30, 0x01	; 1
 c2c:	ef 77       	andi	r30, 0x7F	; 127
 c2e:	f0 70       	andi	r31, 0x00	; 0
        UART_TxTail = tmptail;
 c30:	e0 93 16 03 	sts	0x0316, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 c34:	eb 5e       	subi	r30, 0xEB	; 235
 c36:	fd 4f       	sbci	r31, 0xFD	; 253
 c38:	80 81       	ld	r24, Z
 c3a:	80 93 c6 00 	sts	0x00C6, r24
 c3e:	05 c0       	rjmp	.+10     	; 0xc4a <__vector_21+0x44>
    } else {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 c40:	e1 ec       	ldi	r30, 0xC1	; 193
 c42:	f0 e0       	ldi	r31, 0x00	; 0
 c44:	80 81       	ld	r24, Z
 c46:	8f 7d       	andi	r24, 0xDF	; 223
 c48:	80 83       	st	Z, r24
    }
}
 c4a:	ff 91       	pop	r31
 c4c:	ef 91       	pop	r30
 c4e:	9f 91       	pop	r25
 c50:	8f 91       	pop	r24
 c52:	0f 90       	pop	r0
 c54:	0f be       	out	0x3f, r0	; 63
 c56:	0f 90       	pop	r0
 c58:	1f 90       	pop	r1
 c5a:	18 95       	reti

00000c5c <uart0_init>:
Purpose:  initialize UART and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart0_init(uint16_t baudrate)
{
 c5c:	9c 01       	movw	r18, r24
	UART_TxHead = 0;
 c5e:	10 92 15 03 	sts	0x0315, r1
	UART_TxTail = 0;
 c62:	10 92 16 03 	sts	0x0316, r1
	UART_RxHead = 0;
 c66:	10 92 17 03 	sts	0x0317, r1
	UART_RxTail = 0;
 c6a:	10 92 18 03 	sts	0x0318, r1
	UCSRC = (3<<UCSZ0);
#endif

#elif defined ( ATMEGA_USART0 )
	/* Set baud rate */
	if ( baudrate & 0x8000 ) {
 c6e:	99 23       	and	r25, r25
 c70:	24 f4       	brge	.+8      	; 0xc7a <uart0_init+0x1e>
		UART0_STATUS = (1<<U2X0);  //Enable 2x speed
 c72:	82 e0       	ldi	r24, 0x02	; 2
 c74:	80 93 c0 00 	sts	0x00C0, r24
		baudrate &= ~0x8000;
 c78:	3f 77       	andi	r19, 0x7F	; 127
	}
	UBRR0H = (uint8_t)(baudrate>>8);
 c7a:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = (uint8_t) baudrate;
 c7e:	20 93 c4 00 	sts	0x00C4, r18

	/* Enable USART receiver and transmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 c82:	88 e9       	ldi	r24, 0x98	; 152
 c84:	80 93 c1 00 	sts	0x00C1, r24

	/* Set frame format: asynchronous, 8data, no parity, 1stop bit */
#ifdef URSEL0
	UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
#else
	UCSR0C = (3<<UCSZ00);
 c88:	86 e0       	ldi	r24, 0x06	; 6
 c8a:	80 93 c2 00 	sts	0x00C2, r24
	/* Enable UART receiver and transmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

} /* uart0_init */
 c8e:	08 95       	ret

00000c90 <uart0_getc>:
uint16_t uart0_getc(void)
{
	uint16_t tmptail;
	uint8_t data;

	if ( UART_RxHead == UART_RxTail ) {
 c90:	90 91 17 03 	lds	r25, 0x0317
 c94:	80 91 18 03 	lds	r24, 0x0318
 c98:	98 17       	cp	r25, r24
 c9a:	19 f4       	brne	.+6      	; 0xca2 <uart0_getc+0x12>
 c9c:	20 e0       	ldi	r18, 0x00	; 0
 c9e:	31 e0       	ldi	r19, 0x01	; 1
 ca0:	13 c0       	rjmp	.+38     	; 0xcc8 <uart0_getc+0x38>
		return UART_NO_DATA;   /* no data available */
	}

	/* calculate /store buffer index */
	tmptail = (UART_RxTail + 1) & UART_RX0_BUFFER_MASK;
 ca2:	e0 91 18 03 	lds	r30, 0x0318
 ca6:	f0 e0       	ldi	r31, 0x00	; 0
 ca8:	31 96       	adiw	r30, 0x01	; 1
 caa:	ef 77       	andi	r30, 0x7F	; 127
 cac:	f0 70       	andi	r31, 0x00	; 0
	UART_RxTail = tmptail;
 cae:	e0 93 18 03 	sts	0x0318, r30

	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];
 cb2:	eb 56       	subi	r30, 0x6B	; 107
 cb4:	fd 4f       	sbci	r31, 0xFD	; 253
 cb6:	30 81       	ld	r19, Z

	return (UART_LastRxError << 8) + data;
 cb8:	20 91 19 03 	lds	r18, 0x0319
 cbc:	92 2f       	mov	r25, r18
 cbe:	80 e0       	ldi	r24, 0x00	; 0
 cc0:	ac 01       	movw	r20, r24
 cc2:	43 0f       	add	r20, r19
 cc4:	51 1d       	adc	r21, r1
 cc6:	9a 01       	movw	r18, r20

} /* uart0_getc */
 cc8:	82 2f       	mov	r24, r18
 cca:	93 2f       	mov	r25, r19
 ccc:	08 95       	ret

00000cce <uart0_peek>:
uint16_t uart0_peek(void)
{
	uint16_t tmptail;
	uint8_t data;

	if ( UART_RxHead == UART_RxTail ) {
 cce:	90 91 17 03 	lds	r25, 0x0317
 cd2:	80 91 18 03 	lds	r24, 0x0318
 cd6:	98 17       	cp	r25, r24
 cd8:	19 f4       	brne	.+6      	; 0xce0 <uart0_peek+0x12>
 cda:	20 e0       	ldi	r18, 0x00	; 0
 cdc:	31 e0       	ldi	r19, 0x01	; 1
 cde:	11 c0       	rjmp	.+34     	; 0xd02 <uart0_peek+0x34>
		return UART_NO_DATA;   /* no data available */
	}

	tmptail = (UART_RxTail + 1) & UART_RX0_BUFFER_MASK;
 ce0:	e0 91 18 03 	lds	r30, 0x0318
 ce4:	f0 e0       	ldi	r31, 0x00	; 0
 ce6:	31 96       	adiw	r30, 0x01	; 1
 ce8:	ef 77       	andi	r30, 0x7F	; 127
 cea:	f0 70       	andi	r31, 0x00	; 0

	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];
 cec:	eb 56       	subi	r30, 0x6B	; 107
 cee:	fd 4f       	sbci	r31, 0xFD	; 253
 cf0:	30 81       	ld	r19, Z

	return (UART_LastRxError << 8) + data;
 cf2:	20 91 19 03 	lds	r18, 0x0319
 cf6:	92 2f       	mov	r25, r18
 cf8:	80 e0       	ldi	r24, 0x00	; 0
 cfa:	ac 01       	movw	r20, r24
 cfc:	43 0f       	add	r20, r19
 cfe:	51 1d       	adc	r21, r1
 d00:	9a 01       	movw	r18, r20

} /* uart0_peek */
 d02:	82 2f       	mov	r24, r18
 d04:	93 2f       	mov	r25, r19
 d06:	08 95       	ret

00000d08 <uart0_putc>:
Purpose:  write byte to ringbuffer for transmitting via UART
Input:    byte to be transmitted
Returns:  none
**************************************************************************/
void uart0_putc(uint8_t data)
{
 d08:	48 2f       	mov	r20, r24
	uint16_t tmphead;

	tmphead  = (UART_TxHead + 1) & UART_TX0_BUFFER_MASK;
 d0a:	80 91 15 03 	lds	r24, 0x0315
 d0e:	90 e0       	ldi	r25, 0x00	; 0
 d10:	01 96       	adiw	r24, 0x01	; 1
 d12:	9c 01       	movw	r18, r24
 d14:	2f 77       	andi	r18, 0x7F	; 127
 d16:	30 70       	andi	r19, 0x00	; 0

	while ( tmphead == UART_TxTail ) {
 d18:	80 91 16 03 	lds	r24, 0x0316
 d1c:	90 e0       	ldi	r25, 0x00	; 0
 d1e:	82 17       	cp	r24, r18
 d20:	93 07       	cpc	r25, r19
 d22:	d1 f3       	breq	.-12     	; 0xd18 <uart0_putc+0x10>
		;/* wait for free space in buffer */
	}

	UART_TxBuf[tmphead] = data;
 d24:	f9 01       	movw	r30, r18
 d26:	eb 5e       	subi	r30, 0xEB	; 235
 d28:	fd 4f       	sbci	r31, 0xFD	; 253
 d2a:	40 83       	st	Z, r20
	UART_TxHead = tmphead;
 d2c:	20 93 15 03 	sts	0x0315, r18

	/* enable UDRE interrupt */
	UART0_CONTROL    |= _BV(UART0_UDRIE);
 d30:	e1 ec       	ldi	r30, 0xC1	; 193
 d32:	f0 e0       	ldi	r31, 0x00	; 0
 d34:	80 81       	ld	r24, Z
 d36:	80 62       	ori	r24, 0x20	; 32
 d38:	80 83       	st	Z, r24

} /* uart0_putc */
 d3a:	08 95       	ret

00000d3c <uart0_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
{
 d3c:	cf 93       	push	r28
 d3e:	df 93       	push	r29
 d40:	ec 01       	movw	r28, r24
	while (*s) {
 d42:	88 81       	ld	r24, Y
 d44:	88 23       	and	r24, r24
 d46:	31 f0       	breq	.+12     	; 0xd54 <uart0_puts+0x18>
		uart0_putc(*s++);
 d48:	21 96       	adiw	r28, 0x01	; 1
 d4a:	0e 94 84 06 	call	0xd08	; 0xd08 <uart0_putc>
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
{
	while (*s) {
 d4e:	88 81       	ld	r24, Y
 d50:	88 23       	and	r24, r24
 d52:	d1 f7       	brne	.-12     	; 0xd48 <uart0_puts+0xc>
		uart0_putc(*s++);
	}

} /* uart0_puts */
 d54:	df 91       	pop	r29
 d56:	cf 91       	pop	r28
 d58:	08 95       	ret

00000d5a <uart0_available>:
Input:    None
Returns:  Integer number of bytes in the receive buffer
**************************************************************************/
uint16_t uart0_available(void)
{
	return (UART_RX0_BUFFER_SIZE + UART_RxHead - UART_RxTail) & UART_RX0_BUFFER_MASK;
 d5a:	20 91 17 03 	lds	r18, 0x0317
 d5e:	80 91 18 03 	lds	r24, 0x0318
 d62:	30 e0       	ldi	r19, 0x00	; 0
 d64:	20 58       	subi	r18, 0x80	; 128
 d66:	3f 4f       	sbci	r19, 0xFF	; 255
 d68:	28 1b       	sub	r18, r24
 d6a:	31 09       	sbc	r19, r1
 d6c:	2f 77       	andi	r18, 0x7F	; 127
 d6e:	30 70       	andi	r19, 0x00	; 0
} /* uart0_available */
 d70:	82 2f       	mov	r24, r18
 d72:	93 2f       	mov	r25, r19
 d74:	08 95       	ret

00000d76 <uart0_flush>:
Input:    None
Returns:  None
**************************************************************************/
void uart0_flush(void)
{
	UART_RxHead = UART_RxTail;
 d76:	80 91 18 03 	lds	r24, 0x0318
 d7a:	80 93 17 03 	sts	0x0317, r24
} /* uart0_flush */
 d7e:	08 95       	ret

00000d80 <__udivmodhi4>:
 d80:	aa 1b       	sub	r26, r26
 d82:	bb 1b       	sub	r27, r27
 d84:	51 e1       	ldi	r21, 0x11	; 17
 d86:	07 c0       	rjmp	.+14     	; 0xd96 <__udivmodhi4_ep>

00000d88 <__udivmodhi4_loop>:
 d88:	aa 1f       	adc	r26, r26
 d8a:	bb 1f       	adc	r27, r27
 d8c:	a6 17       	cp	r26, r22
 d8e:	b7 07       	cpc	r27, r23
 d90:	10 f0       	brcs	.+4      	; 0xd96 <__udivmodhi4_ep>
 d92:	a6 1b       	sub	r26, r22
 d94:	b7 0b       	sbc	r27, r23

00000d96 <__udivmodhi4_ep>:
 d96:	88 1f       	adc	r24, r24
 d98:	99 1f       	adc	r25, r25
 d9a:	5a 95       	dec	r21
 d9c:	a9 f7       	brne	.-22     	; 0xd88 <__udivmodhi4_loop>
 d9e:	80 95       	com	r24
 da0:	90 95       	com	r25
 da2:	bc 01       	movw	r22, r24
 da4:	cd 01       	movw	r24, r26
 da6:	08 95       	ret

00000da8 <__divmodhi4>:
 da8:	97 fb       	bst	r25, 7
 daa:	09 2e       	mov	r0, r25
 dac:	07 26       	eor	r0, r23
 dae:	0a d0       	rcall	.+20     	; 0xdc4 <__divmodhi4_neg1>
 db0:	77 fd       	sbrc	r23, 7
 db2:	04 d0       	rcall	.+8      	; 0xdbc <__divmodhi4_neg2>
 db4:	e5 df       	rcall	.-54     	; 0xd80 <__udivmodhi4>
 db6:	06 d0       	rcall	.+12     	; 0xdc4 <__divmodhi4_neg1>
 db8:	00 20       	and	r0, r0
 dba:	1a f4       	brpl	.+6      	; 0xdc2 <__divmodhi4_exit>

00000dbc <__divmodhi4_neg2>:
 dbc:	70 95       	com	r23
 dbe:	61 95       	neg	r22
 dc0:	7f 4f       	sbci	r23, 0xFF	; 255

00000dc2 <__divmodhi4_exit>:
 dc2:	08 95       	ret

00000dc4 <__divmodhi4_neg1>:
 dc4:	f6 f7       	brtc	.-4      	; 0xdc2 <__divmodhi4_exit>
 dc6:	90 95       	com	r25
 dc8:	81 95       	neg	r24
 dca:	9f 4f       	sbci	r25, 0xFF	; 255
 dcc:	08 95       	ret

00000dce <strcmp>:
 dce:	fb 01       	movw	r30, r22
 dd0:	dc 01       	movw	r26, r24
 dd2:	8d 91       	ld	r24, X+
 dd4:	01 90       	ld	r0, Z+
 dd6:	80 19       	sub	r24, r0
 dd8:	01 10       	cpse	r0, r1
 dda:	d9 f3       	breq	.-10     	; 0xdd2 <strcmp+0x4>
 ddc:	99 0b       	sbc	r25, r25
 dde:	08 95       	ret

00000de0 <itoa>:
 de0:	fb 01       	movw	r30, r22
 de2:	9f 01       	movw	r18, r30
 de4:	e8 94       	clt
 de6:	42 30       	cpi	r20, 0x02	; 2
 de8:	c4 f0       	brlt	.+48     	; 0xe1a <itoa+0x3a>
 dea:	45 32       	cpi	r20, 0x25	; 37
 dec:	b4 f4       	brge	.+44     	; 0xe1a <itoa+0x3a>
 dee:	4a 30       	cpi	r20, 0x0A	; 10
 df0:	29 f4       	brne	.+10     	; 0xdfc <itoa+0x1c>
 df2:	97 fb       	bst	r25, 7
 df4:	1e f4       	brtc	.+6      	; 0xdfc <itoa+0x1c>
 df6:	90 95       	com	r25
 df8:	81 95       	neg	r24
 dfa:	9f 4f       	sbci	r25, 0xFF	; 255
 dfc:	64 2f       	mov	r22, r20
 dfe:	77 27       	eor	r23, r23
 e00:	0e 94 c0 06 	call	0xd80	; 0xd80 <__udivmodhi4>
 e04:	80 5d       	subi	r24, 0xD0	; 208
 e06:	8a 33       	cpi	r24, 0x3A	; 58
 e08:	0c f0       	brlt	.+2      	; 0xe0c <itoa+0x2c>
 e0a:	89 5d       	subi	r24, 0xD9	; 217
 e0c:	81 93       	st	Z+, r24
 e0e:	cb 01       	movw	r24, r22
 e10:	00 97       	sbiw	r24, 0x00	; 0
 e12:	a1 f7       	brne	.-24     	; 0xdfc <itoa+0x1c>
 e14:	16 f4       	brtc	.+4      	; 0xe1a <itoa+0x3a>
 e16:	5d e2       	ldi	r21, 0x2D	; 45
 e18:	51 93       	st	Z+, r21
 e1a:	10 82       	st	Z, r1
 e1c:	c9 01       	movw	r24, r18
 e1e:	0c 94 11 07 	jmp	0xe22	; 0xe22 <strrev>

00000e22 <strrev>:
 e22:	dc 01       	movw	r26, r24
 e24:	fc 01       	movw	r30, r24
 e26:	67 2f       	mov	r22, r23
 e28:	71 91       	ld	r23, Z+
 e2a:	77 23       	and	r23, r23
 e2c:	e1 f7       	brne	.-8      	; 0xe26 <strrev+0x4>
 e2e:	32 97       	sbiw	r30, 0x02	; 2
 e30:	04 c0       	rjmp	.+8      	; 0xe3a <strrev+0x18>
 e32:	7c 91       	ld	r23, X
 e34:	6d 93       	st	X+, r22
 e36:	70 83       	st	Z, r23
 e38:	62 91       	ld	r22, -Z
 e3a:	ae 17       	cp	r26, r30
 e3c:	bf 07       	cpc	r27, r31
 e3e:	c8 f3       	brcs	.-14     	; 0xe32 <strrev+0x10>
 e40:	08 95       	ret

00000e42 <_exit>:
 e42:	f8 94       	cli

00000e44 <__stop_program>:
 e44:	ff cf       	rjmp	.-2      	; 0xe44 <__stop_program>
