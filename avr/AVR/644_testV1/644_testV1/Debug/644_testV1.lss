
644_testV1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000504  00000598  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000504  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800104  00800104  0000059c  2**0
                  ALLOC
  3 .debug_aranges 00000118  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000234  00000000  00000000  000006b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007e3  00000000  00000000  000008e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002cb  00000000  00000000  000010cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000089f  00000000  00000000  00001396  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000190  00000000  00000000  00001c38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002bf  00000000  00000000  00001dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000028e  00000000  00000000  00002087  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000138  00000000  00000000  00002315  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__vector_11>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__vector_15>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__vector_18>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e4 e0       	ldi	r30, 0x04	; 4
  90:	f5 e0       	ldi	r31, 0x05	; 5
  92:	02 c0       	rjmp	.+4      	; 0x98 <.do_copy_data_start>

00000094 <.do_copy_data_loop>:
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0

00000098 <.do_copy_data_start>:
  98:	a4 30       	cpi	r26, 0x04	; 4
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <.do_copy_data_loop>

0000009e <__do_clear_bss>:
  9e:	11 e0       	ldi	r17, 0x01	; 1
  a0:	a4 e0       	ldi	r26, 0x04	; 4
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	ae 30       	cpi	r26, 0x0E	; 14
  aa:	b1 07       	cpc	r27, r17
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 ba 00 	call	0x174	; 0x174 <main>
  b2:	0c 94 80 02 	jmp	0x500	; 0x500 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <initButtons>:

#include "prj.h"

void initButtons(void)
{
	set_input(Button1_DIR, Button1_PIN_BIT);
  ba:	e4 e2       	ldi	r30, 0x24	; 36
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	8f 7e       	andi	r24, 0xEF	; 239
  c2:	80 83       	st	Z, r24
	set_input(Button2_DIR, Button2_PIN_BIT);
  c4:	ea e2       	ldi	r30, 0x2A	; 42
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	8f 77       	andi	r24, 0x7F	; 127
  cc:	80 83       	st	Z, r24
}
  ce:	08 95       	ret

000000d0 <buttonIsPressed>:

unsigned int buttonIsPressed(int button)
{
	if(button == 1)
  d0:	81 30       	cpi	r24, 0x01	; 1
  d2:	91 05       	cpc	r25, r1
  d4:	71 f4       	brne	.+28     	; 0xf2 <buttonIsPressed+0x22>
	{
		if(Button1_press())
  d6:	83 b1       	in	r24, 0x03	; 3
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	92 95       	swap	r25
  dc:	82 95       	swap	r24
  de:	8f 70       	andi	r24, 0x0F	; 15
  e0:	89 27       	eor	r24, r25
  e2:	9f 70       	andi	r25, 0x0F	; 15
  e4:	89 27       	eor	r24, r25
  e6:	80 95       	com	r24
  e8:	90 95       	com	r25
  ea:	9c 01       	movw	r18, r24
  ec:	21 70       	andi	r18, 0x01	; 1
  ee:	30 70       	andi	r19, 0x00	; 0
  f0:	11 c0       	rjmp	.+34     	; 0x114 <buttonIsPressed+0x44>
		else
		{
			return 0;
		}
	}
	if(button == 2)
  f2:	02 97       	sbiw	r24, 0x02	; 2
  f4:	19 f0       	breq	.+6      	; 0xfc <buttonIsPressed+0x2c>
  f6:	20 e0       	ldi	r18, 0x00	; 0
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	0c c0       	rjmp	.+24     	; 0x114 <buttonIsPressed+0x44>
	{
		if(Button2_press())
  fc:	89 b1       	in	r24, 0x09	; 9
  fe:	88 23       	and	r24, r24
 100:	99 27       	eor	r25, r25
 102:	87 fd       	sbrc	r24, 7
 104:	90 95       	com	r25
 106:	80 95       	com	r24
 108:	90 95       	com	r25
 10a:	9c 01       	movw	r18, r24
 10c:	22 27       	eor	r18, r18
 10e:	33 0f       	add	r19, r19
 110:	22 1f       	adc	r18, r18
 112:	33 27       	eor	r19, r19
	}
	else
	{
		return 0;
	}
 114:	82 2f       	mov	r24, r18
 116:	93 2f       	mov	r25, r19
 118:	08 95       	ret

0000011a <initLEDs>:

#include "prj.h"

void initLEDs(void)
{
	set_output(Led1_DIR, Led1_PIN_BIT);
 11a:	e4 e2       	ldi	r30, 0x24	; 36
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	80 62       	ori	r24, 0x20	; 32
 122:	80 83       	st	Z, r24
	set_output(Led2_DIR, Led2_PIN_BIT);
 124:	e7 e2       	ldi	r30, 0x27	; 39
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	81 60       	ori	r24, 0x01	; 1
 12c:	80 83       	st	Z, r24
}
 12e:	08 95       	ret

00000130 <toggleLED>:

void toggleLED(int ledNum)
{
	if(ledNum == 1)
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	91 05       	cpc	r25, r1
 134:	39 f4       	brne	.+14     	; 0x144 <toggleLED+0x14>
	{
		output_toggle(Led1_DIR, Led1_PIN_BIT);
 136:	e4 e2       	ldi	r30, 0x24	; 36
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	90 e2       	ldi	r25, 0x20	; 32
 13e:	89 27       	eor	r24, r25
 140:	80 83       	st	Z, r24
 142:	08 95       	ret
	}
	else if(ledNum == 2)
 144:	02 97       	sbiw	r24, 0x02	; 2
 146:	31 f4       	brne	.+12     	; 0x154 <toggleLED+0x24>
	{
		output_toggle(Led2_DIR, Led2_PIN_BIT);
 148:	e7 e2       	ldi	r30, 0x27	; 39
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	89 27       	eor	r24, r25
 152:	80 83       	st	Z, r24
 154:	08 95       	ret

00000156 <init>:



void init()
{
	initLEDs();
 156:	0e 94 8d 00 	call	0x11a	; 0x11a <initLEDs>
	toggleLED(2);
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 98 00 	call	0x130	; 0x130 <toggleLED>
	initButtons();
 162:	0e 94 5d 00 	call	0xba	; 0xba <initButtons>
	// Relay1 init
	//Relay1_DIR |= _BV(Relay1_BIT) ;
	//Relay1_off();
	//interrupt0_init();
	//interrupt1_init();
	Timer0_Init();
 166:	0e 94 be 00 	call	0x17c	; 0x17c <Timer0_Init>
	Timer1_Init();
 16a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Timer1_Init>
	Timer2_Init();
 16e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <Timer2_Init>

	// watchdog enable
	//wdt_enable(WDTO_15MS);
	

}
 172:	08 95       	ret

00000174 <main>:

int main()
{
	// define variables

	init();
 174:	0e 94 ab 00 	call	0x156	; 0x156 <init>
	sei();  // enable interrup
 178:	78 94       	sei
 17a:	ff cf       	rjmp	.-2      	; 0x17a <main+0x6>

0000017c <Timer0_Init>:
//=========================================
void Timer0_Init()
{
   // TCCR0 = 0x03; // divider 64

	TCCR0A |= (0<<COM0A1)|(0<<COM0A0)|(0<<COM0B1)|(0<<COM0B0)|(0<<WGM01)|(0<<WGM00);
 17c:	e4 e4       	ldi	r30, 0x44	; 68
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	80 83       	st	Z, r24
	TCCR0B |= (0<<FOC0A)|(0<<FOC0B)|(0<<WGM02)|(0<<CS02)|(1<<CS01)|(1<<CS00); //64
 184:	e5 e4       	ldi	r30, 0x45	; 69
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	83 60       	ori	r24, 0x03	; 3
 18c:	80 83       	st	Z, r24
	TIMSK0 |= (0<<OCIE0B)|(0<<OCIE0A)|(1<<TOIE0);
 18e:	ee e6       	ldi	r30, 0x6E	; 110
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	81 60       	ori	r24, 0x01	; 1
 196:	80 83       	st	Z, r24
	TIFR0 |=  (0<<OCF0B)|(0<<OCF0A)|(0<<TOV0);
 198:	e5 e3       	ldi	r30, 0x35	; 53
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	80 83       	st	Z, r24
	TCNT0 = 256 - 125; 	 
 1a0:	83 e8       	ldi	r24, 0x83	; 131
 1a2:	86 bd       	out	0x26, r24	; 38
}
 1a4:	08 95       	ret

000001a6 <Timer1_Init>:

// Timer 1  timeout= 1.000 ms, fosc = 8.0000 MHz 
//=========================================
void Timer1_Init()
{
    TCCR1A |= (0<<COM1A1)|(0<<COM1A0)|(0<<COM1B1)|(0<<COM1B0)|(0<<WGM11)|(0<<WGM10);
 1a6:	e0 e8       	ldi	r30, 0x80	; 128
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	80 83       	st	Z, r24
	TCCR1B |= (0<<ICNC1)|(0<<ICES1)|(0<<WGM13)|(0<<WGM12)|(0<<CS12)|(0<<CS11)|(1<<CS10); // divider 1    
 1ae:	e1 e8       	ldi	r30, 0x81	; 129
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	81 60       	ori	r24, 0x01	; 1
 1b6:	80 83       	st	Z, r24
	TCCR1C |= (0<<FOC1A)|(0<<FOC1B);
 1b8:	e2 e8       	ldi	r30, 0x82	; 130
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	80 83       	st	Z, r24
	TIMSK1 |= (0<<ICIE1)|(0<<OCIE1B)|(0<<OCIE1A)|(1<<TOIE1);
 1c0:	ef e6       	ldi	r30, 0x6F	; 111
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	81 60       	ori	r24, 0x01	; 1
 1c8:	80 83       	st	Z, r24
	TCNT1  = 65536 - 8000;
 1ca:	80 ec       	ldi	r24, 0xC0	; 192
 1cc:	90 ee       	ldi	r25, 0xE0	; 224
 1ce:	90 93 85 00 	sts	0x0085, r25
 1d2:	80 93 84 00 	sts	0x0084, r24
}
 1d6:	08 95       	ret

000001d8 <Timer2_Init>:

// Timer 2  timeout= 1.000 ms, fosc = 8.0000 MHz 
//=========================================
void Timer2_Init()
{
	TCCR2A |= (0<<COM2A1)|(0<<COM2A0)|(0<<COM2B1)|(0<<COM2B0)|(0<<WGM21)|(0<<WGM20);
 1d8:	e0 eb       	ldi	r30, 0xB0	; 176
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	80 83       	st	Z, r24
	TCCR2B |= (0<<FOC2A)|(0<<FOC2B)|(0<<WGM22)|(0<<CS22)|(1<<CS21)|(1<<CS20); // divider 32
 1e0:	e1 eb       	ldi	r30, 0xB1	; 177
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	83 60       	ori	r24, 0x03	; 3
 1e8:	80 83       	st	Z, r24
	TIMSK2 |= (0<<OCIE2B)|(0<<OCIE2A)|(1<<TOIE2);
 1ea:	e0 e7       	ldi	r30, 0x70	; 112
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	81 60       	ori	r24, 0x01	; 1
 1f2:	80 83       	st	Z, r24
	TCNT2 = 256 - 250; 
 1f4:	86 e0       	ldi	r24, 0x06	; 6
 1f6:	80 93 b2 00 	sts	0x00B2, r24
}
 1fa:	08 95       	ret

000001fc <__vector_15>:
}
// Timer 1 interrupt service routine 
// timeout 1.000 ms , fosc = 8.0000 MHz 
//====================================
ISR (TIMER1_OVF_vect)
{
 1fc:	1f 92       	push	r1
 1fe:	0f 92       	push	r0
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	0f 92       	push	r0
 204:	11 24       	eor	r1, r1
 206:	8f 93       	push	r24
 208:	9f 93       	push	r25
    TCNT1 = 65536 - 8000; 
 20a:	80 ec       	ldi	r24, 0xC0	; 192
 20c:	90 ee       	ldi	r25, 0xE0	; 224
 20e:	90 93 85 00 	sts	0x0085, r25
 212:	80 93 84 00 	sts	0x0084, r24
    if (++repeat_cnt1 == 1) 
 216:	80 91 06 01 	lds	r24, 0x0106
 21a:	90 91 07 01 	lds	r25, 0x0107
 21e:	01 96       	adiw	r24, 0x01	; 1
 220:	90 93 07 01 	sts	0x0107, r25
 224:	80 93 06 01 	sts	0x0106, r24
 228:	80 91 06 01 	lds	r24, 0x0106
 22c:	90 91 07 01 	lds	r25, 0x0107
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	21 f4       	brne	.+8      	; 0x23c <__vector_15+0x40>
    {
        repeat_cnt1 = 0; 
 234:	10 92 07 01 	sts	0x0107, r1
 238:	10 92 06 01 	sts	0x0106, r1
	         toggleLED(2); 
		 }
		 */

	}
}
 23c:	9f 91       	pop	r25
 23e:	8f 91       	pop	r24
 240:	0f 90       	pop	r0
 242:	0f be       	out	0x3f, r0	; 63
 244:	0f 90       	pop	r0
 246:	1f 90       	pop	r1
 248:	18 95       	reti

0000024a <__vector_11>:
// Timer 2 interrupt service routine 
// timeout 1.000 ms , fosc = 8.0000 MHz 

//====================================
ISR (TIMER2_OVF_vect)
{
 24a:	1f 92       	push	r1
 24c:	0f 92       	push	r0
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	0f 92       	push	r0
 252:	11 24       	eor	r1, r1
 254:	2f 93       	push	r18
 256:	3f 93       	push	r19
 258:	4f 93       	push	r20
 25a:	5f 93       	push	r21
 25c:	6f 93       	push	r22
 25e:	7f 93       	push	r23
 260:	8f 93       	push	r24
 262:	9f 93       	push	r25
 264:	af 93       	push	r26
 266:	bf 93       	push	r27
 268:	ef 93       	push	r30
 26a:	ff 93       	push	r31
    TCNT2 = 256 - 250; 
 26c:	86 e0       	ldi	r24, 0x06	; 6
 26e:	80 93 b2 00 	sts	0x00B2, r24
    if (++repeat_cnt2 == 1) 
 272:	80 91 08 01 	lds	r24, 0x0108
 276:	90 91 09 01 	lds	r25, 0x0109
 27a:	01 96       	adiw	r24, 0x01	; 1
 27c:	90 93 09 01 	sts	0x0109, r25
 280:	80 93 08 01 	sts	0x0108, r24
 284:	80 91 08 01 	lds	r24, 0x0108
 288:	90 91 09 01 	lds	r25, 0x0109
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	09 f5       	brne	.+66     	; 0x2d2 <__vector_11+0x88>
    {
        repeat_cnt2 = 0; 
 290:	10 92 09 01 	sts	0x0109, r1
 294:	10 92 08 01 	sts	0x0108, r1
         msCountedTimer2++;
 298:	80 91 0c 01 	lds	r24, 0x010C
 29c:	90 91 0d 01 	lds	r25, 0x010D
 2a0:	01 96       	adiw	r24, 0x01	; 1
 2a2:	90 93 0d 01 	sts	0x010D, r25
 2a6:	80 93 0c 01 	sts	0x010C, r24
         if(msCountedTimer2 % toggleMsTime == 0)
 2aa:	80 91 0c 01 	lds	r24, 0x010C
 2ae:	90 91 0d 01 	lds	r25, 0x010D
 2b2:	60 91 02 01 	lds	r22, 0x0102
 2b6:	70 91 03 01 	lds	r23, 0x0103
 2ba:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <__udivmodhi4>
 2be:	89 2b       	or	r24, r25
 2c0:	41 f4       	brne	.+16     	; 0x2d2 <__vector_11+0x88>
         {
	         //msCountedTimer2 = 0;
	         toggleLED(1);
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 98 00 	call	0x130	; 0x130 <toggleLED>
	         toggleLED(2); 
 2ca:	82 e0       	ldi	r24, 0x02	; 2
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	0e 94 98 00 	call	0x130	; 0x130 <toggleLED>
		 }
    }
}
 2d2:	ff 91       	pop	r31
 2d4:	ef 91       	pop	r30
 2d6:	bf 91       	pop	r27
 2d8:	af 91       	pop	r26
 2da:	9f 91       	pop	r25
 2dc:	8f 91       	pop	r24
 2de:	7f 91       	pop	r23
 2e0:	6f 91       	pop	r22
 2e2:	5f 91       	pop	r21
 2e4:	4f 91       	pop	r20
 2e6:	3f 91       	pop	r19
 2e8:	2f 91       	pop	r18
 2ea:	0f 90       	pop	r0
 2ec:	0f be       	out	0x3f, r0	; 63
 2ee:	0f 90       	pop	r0
 2f0:	1f 90       	pop	r1
 2f2:	18 95       	reti

000002f4 <__vector_18>:
}
// Timer 0 interrupt service routine 
// timeout 1.000 ms , fosc = 8.0000 MHz 
//====================================
ISR (TIMER0_OVF_vect)
{
 2f4:	1f 92       	push	r1
 2f6:	0f 92       	push	r0
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	0f 92       	push	r0
 2fc:	11 24       	eor	r1, r1
 2fe:	2f 93       	push	r18
 300:	3f 93       	push	r19
 302:	4f 93       	push	r20
 304:	5f 93       	push	r21
 306:	6f 93       	push	r22
 308:	7f 93       	push	r23
 30a:	8f 93       	push	r24
 30c:	9f 93       	push	r25
 30e:	af 93       	push	r26
 310:	bf 93       	push	r27
 312:	ef 93       	push	r30
 314:	ff 93       	push	r31
    TCNT0 = 256 - 125; 
 316:	83 e8       	ldi	r24, 0x83	; 131
 318:	86 bd       	out	0x26, r24	; 38
    if (++repeat_cnt0 == 1) 
 31a:	80 91 04 01 	lds	r24, 0x0104
 31e:	90 91 05 01 	lds	r25, 0x0105
 322:	01 96       	adiw	r24, 0x01	; 1
 324:	90 93 05 01 	sts	0x0105, r25
 328:	80 93 04 01 	sts	0x0104, r24
 32c:	80 91 04 01 	lds	r24, 0x0104
 330:	90 91 05 01 	lds	r25, 0x0105
 334:	01 97       	sbiw	r24, 0x01	; 1
 336:	09 f0       	breq	.+2      	; 0x33a <__vector_18+0x46>
 338:	be c0       	rjmp	.+380    	; 0x4b6 <__vector_18+0x1c2>
    {
        repeat_cnt0 = 0; 
 33a:	10 92 05 01 	sts	0x0105, r1
 33e:	10 92 04 01 	sts	0x0104, r1
		
         msCountedTimer0++;
 342:	80 91 0a 01 	lds	r24, 0x010A
 346:	90 91 0b 01 	lds	r25, 0x010B
 34a:	01 96       	adiw	r24, 0x01	; 1
 34c:	90 93 0b 01 	sts	0x010B, r25
 350:	80 93 0a 01 	sts	0x010A, r24
         if(msCountedTimer0 % 100 == 0)
 354:	80 91 0a 01 	lds	r24, 0x010A
 358:	90 91 0b 01 	lds	r25, 0x010B
 35c:	64 e6       	ldi	r22, 0x64	; 100
 35e:	70 e0       	ldi	r23, 0x00	; 0
 360:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <__udivmodhi4>
 364:	89 2b       	or	r24, r25
 366:	09 f0       	breq	.+2      	; 0x36a <__vector_18+0x76>
 368:	a6 c0       	rjmp	.+332    	; 0x4b6 <__vector_18+0x1c2>
         {
			 //msCountedTimer0 = 0;
	         if(buttonIsPressed(1))
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	0e 94 68 00 	call	0xd0	; 0xd0 <buttonIsPressed>
 372:	89 2b       	or	r24, r25
 374:	81 f0       	breq	.+32     	; 0x396 <__vector_18+0xa2>
			 {
				 if(state > 2)
 376:	80 91 00 01 	lds	r24, 0x0100
 37a:	90 91 01 01 	lds	r25, 0x0101
 37e:	03 97       	sbiw	r24, 0x03	; 3
 380:	f8 f0       	brcs	.+62     	; 0x3c0 <__vector_18+0xcc>
				 {
					 state--;
 382:	80 91 00 01 	lds	r24, 0x0100
 386:	90 91 01 01 	lds	r25, 0x0101
 38a:	01 97       	sbiw	r24, 0x01	; 1
 38c:	90 93 01 01 	sts	0x0101, r25
 390:	80 93 00 01 	sts	0x0100, r24
 394:	15 c0       	rjmp	.+42     	; 0x3c0 <__vector_18+0xcc>
				 }
				
			 }
			 else if(buttonIsPressed(2))
 396:	82 e0       	ldi	r24, 0x02	; 2
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	0e 94 68 00 	call	0xd0	; 0xd0 <buttonIsPressed>
 39e:	89 2b       	or	r24, r25
 3a0:	79 f0       	breq	.+30     	; 0x3c0 <__vector_18+0xcc>
			 {
				 if(state < 10)
 3a2:	80 91 00 01 	lds	r24, 0x0100
 3a6:	90 91 01 01 	lds	r25, 0x0101
 3aa:	0a 97       	sbiw	r24, 0x0a	; 10
 3ac:	48 f4       	brcc	.+18     	; 0x3c0 <__vector_18+0xcc>
				 {
					 state++;
 3ae:	80 91 00 01 	lds	r24, 0x0100
 3b2:	90 91 01 01 	lds	r25, 0x0101
 3b6:	01 96       	adiw	r24, 0x01	; 1
 3b8:	90 93 01 01 	sts	0x0101, r25
 3bc:	80 93 00 01 	sts	0x0100, r24
			 else
			 {
				 
			 }
			 
			 if(state == 1)
 3c0:	80 91 00 01 	lds	r24, 0x0100
 3c4:	90 91 01 01 	lds	r25, 0x0101
 3c8:	01 97       	sbiw	r24, 0x01	; 1
 3ca:	39 f4       	brne	.+14     	; 0x3da <__vector_18+0xe6>
			 {
				 toggleMsTime = 50;
 3cc:	82 e3       	ldi	r24, 0x32	; 50
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	90 93 03 01 	sts	0x0103, r25
 3d4:	80 93 02 01 	sts	0x0102, r24
 3d8:	6e c0       	rjmp	.+220    	; 0x4b6 <__vector_18+0x1c2>
			 }
			 else if(state == 2)
 3da:	80 91 00 01 	lds	r24, 0x0100
 3de:	90 91 01 01 	lds	r25, 0x0101
 3e2:	02 97       	sbiw	r24, 0x02	; 2
 3e4:	39 f4       	brne	.+14     	; 0x3f4 <__vector_18+0x100>
			 {
				 toggleMsTime = 100;
 3e6:	84 e6       	ldi	r24, 0x64	; 100
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	90 93 03 01 	sts	0x0103, r25
 3ee:	80 93 02 01 	sts	0x0102, r24
 3f2:	61 c0       	rjmp	.+194    	; 0x4b6 <__vector_18+0x1c2>
			 }
			 else if(state == 3)
 3f4:	80 91 00 01 	lds	r24, 0x0100
 3f8:	90 91 01 01 	lds	r25, 0x0101
 3fc:	03 97       	sbiw	r24, 0x03	; 3
 3fe:	39 f4       	brne	.+14     	; 0x40e <__vector_18+0x11a>
			 {
				 toggleMsTime = 200;
 400:	88 ec       	ldi	r24, 0xC8	; 200
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	90 93 03 01 	sts	0x0103, r25
 408:	80 93 02 01 	sts	0x0102, r24
 40c:	54 c0       	rjmp	.+168    	; 0x4b6 <__vector_18+0x1c2>
			 }
			  else if(state == 4)
 40e:	80 91 00 01 	lds	r24, 0x0100
 412:	90 91 01 01 	lds	r25, 0x0101
 416:	04 97       	sbiw	r24, 0x04	; 4
 418:	39 f4       	brne	.+14     	; 0x428 <__vector_18+0x134>
			  {
				  toggleMsTime = 400;
 41a:	80 e9       	ldi	r24, 0x90	; 144
 41c:	91 e0       	ldi	r25, 0x01	; 1
 41e:	90 93 03 01 	sts	0x0103, r25
 422:	80 93 02 01 	sts	0x0102, r24
 426:	47 c0       	rjmp	.+142    	; 0x4b6 <__vector_18+0x1c2>
			  }
			  else if(state == 5)
 428:	80 91 00 01 	lds	r24, 0x0100
 42c:	90 91 01 01 	lds	r25, 0x0101
 430:	05 97       	sbiw	r24, 0x05	; 5
 432:	39 f4       	brne	.+14     	; 0x442 <__vector_18+0x14e>
			  {
				  toggleMsTime = 500;
 434:	84 ef       	ldi	r24, 0xF4	; 244
 436:	91 e0       	ldi	r25, 0x01	; 1
 438:	90 93 03 01 	sts	0x0103, r25
 43c:	80 93 02 01 	sts	0x0102, r24
 440:	3a c0       	rjmp	.+116    	; 0x4b6 <__vector_18+0x1c2>
			  }
			   else if(state == 6)
 442:	80 91 00 01 	lds	r24, 0x0100
 446:	90 91 01 01 	lds	r25, 0x0101
 44a:	06 97       	sbiw	r24, 0x06	; 6
 44c:	39 f4       	brne	.+14     	; 0x45c <__vector_18+0x168>
			   {
				   toggleMsTime = 750;
 44e:	8e ee       	ldi	r24, 0xEE	; 238
 450:	92 e0       	ldi	r25, 0x02	; 2
 452:	90 93 03 01 	sts	0x0103, r25
 456:	80 93 02 01 	sts	0x0102, r24
 45a:	2d c0       	rjmp	.+90     	; 0x4b6 <__vector_18+0x1c2>
			   }
			   else if(state == 7)
 45c:	80 91 00 01 	lds	r24, 0x0100
 460:	90 91 01 01 	lds	r25, 0x0101
 464:	07 97       	sbiw	r24, 0x07	; 7
 466:	39 f4       	brne	.+14     	; 0x476 <__vector_18+0x182>
			   {
				   toggleMsTime = 1000;
 468:	88 ee       	ldi	r24, 0xE8	; 232
 46a:	93 e0       	ldi	r25, 0x03	; 3
 46c:	90 93 03 01 	sts	0x0103, r25
 470:	80 93 02 01 	sts	0x0102, r24
 474:	20 c0       	rjmp	.+64     	; 0x4b6 <__vector_18+0x1c2>
			   }
			   else if(state == 8)
 476:	80 91 00 01 	lds	r24, 0x0100
 47a:	90 91 01 01 	lds	r25, 0x0101
 47e:	08 97       	sbiw	r24, 0x08	; 8
 480:	39 f4       	brne	.+14     	; 0x490 <__vector_18+0x19c>
			   {
				   toggleMsTime = 1250;
 482:	82 ee       	ldi	r24, 0xE2	; 226
 484:	94 e0       	ldi	r25, 0x04	; 4
 486:	90 93 03 01 	sts	0x0103, r25
 48a:	80 93 02 01 	sts	0x0102, r24
 48e:	13 c0       	rjmp	.+38     	; 0x4b6 <__vector_18+0x1c2>
			   }
			   else if(state == 9)
 490:	80 91 00 01 	lds	r24, 0x0100
 494:	90 91 01 01 	lds	r25, 0x0101
 498:	09 97       	sbiw	r24, 0x09	; 9
 49a:	39 f4       	brne	.+14     	; 0x4aa <__vector_18+0x1b6>
			   {
				   toggleMsTime = 1500;
 49c:	8c ed       	ldi	r24, 0xDC	; 220
 49e:	95 e0       	ldi	r25, 0x05	; 5
 4a0:	90 93 03 01 	sts	0x0103, r25
 4a4:	80 93 02 01 	sts	0x0102, r24
 4a8:	06 c0       	rjmp	.+12     	; 0x4b6 <__vector_18+0x1c2>
			   }
			   else
			   {
				   toggleMsTime = 2000;
 4aa:	80 ed       	ldi	r24, 0xD0	; 208
 4ac:	97 e0       	ldi	r25, 0x07	; 7
 4ae:	90 93 03 01 	sts	0x0103, r25
 4b2:	80 93 02 01 	sts	0x0102, r24
			
		
		 }
		 
     }
}
 4b6:	ff 91       	pop	r31
 4b8:	ef 91       	pop	r30
 4ba:	bf 91       	pop	r27
 4bc:	af 91       	pop	r26
 4be:	9f 91       	pop	r25
 4c0:	8f 91       	pop	r24
 4c2:	7f 91       	pop	r23
 4c4:	6f 91       	pop	r22
 4c6:	5f 91       	pop	r21
 4c8:	4f 91       	pop	r20
 4ca:	3f 91       	pop	r19
 4cc:	2f 91       	pop	r18
 4ce:	0f 90       	pop	r0
 4d0:	0f be       	out	0x3f, r0	; 63
 4d2:	0f 90       	pop	r0
 4d4:	1f 90       	pop	r1
 4d6:	18 95       	reti

000004d8 <__udivmodhi4>:
 4d8:	aa 1b       	sub	r26, r26
 4da:	bb 1b       	sub	r27, r27
 4dc:	51 e1       	ldi	r21, 0x11	; 17
 4de:	07 c0       	rjmp	.+14     	; 0x4ee <__udivmodhi4_ep>

000004e0 <__udivmodhi4_loop>:
 4e0:	aa 1f       	adc	r26, r26
 4e2:	bb 1f       	adc	r27, r27
 4e4:	a6 17       	cp	r26, r22
 4e6:	b7 07       	cpc	r27, r23
 4e8:	10 f0       	brcs	.+4      	; 0x4ee <__udivmodhi4_ep>
 4ea:	a6 1b       	sub	r26, r22
 4ec:	b7 0b       	sbc	r27, r23

000004ee <__udivmodhi4_ep>:
 4ee:	88 1f       	adc	r24, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	5a 95       	dec	r21
 4f4:	a9 f7       	brne	.-22     	; 0x4e0 <__udivmodhi4_loop>
 4f6:	80 95       	com	r24
 4f8:	90 95       	com	r25
 4fa:	bc 01       	movw	r22, r24
 4fc:	cd 01       	movw	r24, r26
 4fe:	08 95       	ret

00000500 <_exit>:
 500:	f8 94       	cli

00000502 <__stop_program>:
 502:	ff cf       	rjmp	.-2      	; 0x502 <__stop_program>
