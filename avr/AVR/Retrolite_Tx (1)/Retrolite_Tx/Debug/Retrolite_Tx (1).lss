
Retrolite_Tx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000027c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  0000027c  000002f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000040  00000000  00000000  000002fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000054  00000000  00000000  0000033e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001ce  00000000  00000000  00000392  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000f2  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000286  00000000  00000000  00000652  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  000008d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000102  00000000  00000000  00000938  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001d7  00000000  00000000  00000a3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000038  00000000  00000000  00000c11  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	ec e7       	ldi	r30, 0x7C	; 124
  32:	f2 e0       	ldi	r31, 0x02	; 2
  34:	02 c0       	rjmp	.+4      	; 0x3a <.do_copy_data_start>

00000036 <.do_copy_data_loop>:
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0

0000003a <.do_copy_data_start>:
  3a:	ae 36       	cpi	r26, 0x6E	; 110
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <.do_copy_data_loop>
  40:	f7 d0       	rcall	.+494    	; 0x230 <main>
  42:	1a c1       	rjmp	.+564    	; 0x278 <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <initTX>:
}

void initTX(void)
{
    /* Set TX_PIN as output */
    SET_BIT(DDRB,DDB3);
  46:	e7 e3       	ldi	r30, 0x37	; 55
  48:	f0 e0       	ldi	r31, 0x00	; 0
  4a:	80 81       	ld	r24, Z
  4c:	88 60       	ori	r24, 0x08	; 8
  4e:	80 83       	st	Z, r24
	
	/* Enable TCNT0 with clk/8 pre-scaling */
	SET_BIT(TCCR0B,CS01);
  50:	e3 e5       	ldi	r30, 0x53	; 83
  52:	f0 e0       	ldi	r31, 0x00	; 0
  54:	80 81       	ld	r24, Z
  56:	82 60       	ori	r24, 0x02	; 2
  58:	80 83       	st	Z, r24
}
  5a:	08 95       	ret

0000005c <computeChecksum>:

uint16_t computeChecksum(const uint8_t* data, uint16_t bytes)
{
  5c:	ef 92       	push	r14
  5e:	ff 92       	push	r15
  60:	0f 93       	push	r16
  62:	1f 93       	push	r17
  64:	cf 93       	push	r28
  66:	df 93       	push	r29
  68:	8c 01       	movw	r16, r24
  6a:	eb 01       	movw	r28, r22
    uint16_t sum1 = 0xFF;
    uint16_t sum2 = 0xFF;
    
    uint16_t wordLen;
    
    while (bytes)
  6c:	61 15       	cp	r22, r1
  6e:	71 05       	cpc	r23, r1
  70:	29 f4       	brne	.+10     	; 0x7c <computeChecksum+0x20>
  72:	4f ef       	ldi	r20, 0xFF	; 255
  74:	50 e0       	ldi	r21, 0x00	; 0
  76:	af ef       	ldi	r26, 0xFF	; 255
  78:	b0 e0       	ldi	r27, 0x00	; 0
  7a:	2a c0       	rjmp	.+84     	; 0xd0 <computeChecksum+0x74>
  7c:	4f ef       	ldi	r20, 0xFF	; 255
  7e:	50 e0       	ldi	r21, 0x00	; 0
  80:	af ef       	ldi	r26, 0xFF	; 255
  82:	b0 e0       	ldi	r27, 0x00	; 0
    {
        /* maximum word size before overflow would occur */
        wordLen = (bytes > 20) ? 20 : bytes;
  84:	0f 2e       	mov	r0, r31
  86:	f4 e1       	ldi	r31, 0x14	; 20
  88:	ef 2e       	mov	r14, r31
  8a:	ff 24       	eor	r15, r15
  8c:	f0 2d       	mov	r31, r0
  8e:	be 01       	movw	r22, r28
  90:	c5 31       	cpi	r28, 0x15	; 21
  92:	d1 05       	cpc	r29, r1
  94:	08 f0       	brcs	.+2      	; 0x98 <computeChecksum+0x3c>
  96:	b7 01       	movw	r22, r14
        
        bytes -= wordLen;
  98:	c6 1b       	sub	r28, r22
  9a:	d7 0b       	sbc	r29, r23
  9c:	9b 01       	movw	r18, r22
  9e:	f8 01       	movw	r30, r16
        
        do
        {
            sum1 += *(data++);
  a0:	81 91       	ld	r24, Z+
  a2:	48 0f       	add	r20, r24
  a4:	51 1d       	adc	r21, r1
            sum2 += sum1;
  a6:	a4 0f       	add	r26, r20
  a8:	b5 1f       	adc	r27, r21
        }
        
        while (--wordLen);
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	30 40       	sbci	r19, 0x00	; 0
  ae:	c1 f7       	brne	.-16     	; 0xa0 <computeChecksum+0x44>
  b0:	06 0f       	add	r16, r22
  b2:	17 1f       	adc	r17, r23
         * Do first modular reduction: mask off
         * lower byte and add right shifted upper
         * byte to it
         * * * * * * * * * * * * * * * * * * * * * */
        
        sum1 = (sum1 & 0xFF) + (sum1 >> 8);
  b4:	85 2f       	mov	r24, r21
  b6:	99 27       	eor	r25, r25
  b8:	9c 01       	movw	r18, r24
  ba:	24 0f       	add	r18, r20
  bc:	31 1d       	adc	r19, r1
  be:	a9 01       	movw	r20, r18
        sum2 = (sum2 & 0xFF) + (sum2 >> 8);
  c0:	8b 2f       	mov	r24, r27
  c2:	99 27       	eor	r25, r25
  c4:	9c 01       	movw	r18, r24
  c6:	2a 0f       	add	r18, r26
  c8:	31 1d       	adc	r19, r1
  ca:	d9 01       	movw	r26, r18
    uint16_t sum1 = 0xFF;
    uint16_t sum2 = 0xFF;
    
    uint16_t wordLen;
    
    while (bytes)
  cc:	20 97       	sbiw	r28, 0x00	; 0
  ce:	f9 f6       	brne	.-66     	; 0x8e <computeChecksum+0x32>
        sum1 = (sum1 & 0xFF) + (sum1 >> 8);
        sum2 = (sum2 & 0xFF) + (sum2 >> 8);
    }
    
    /* Safety reduction */
    sum1 = (sum1 & 0xFF) + (sum1 >> 8);
  d0:	85 2f       	mov	r24, r21
  d2:	99 27       	eor	r25, r25
    sum2 = (sum2 & 0xFF) + (sum2 >> 8);
  d4:	2b 2f       	mov	r18, r27
  d6:	33 27       	eor	r19, r19
  d8:	2a 0f       	add	r18, r26
  da:	31 1d       	adc	r19, r1
  dc:	32 2f       	mov	r19, r18
  de:	22 27       	eor	r18, r18
  e0:	84 0f       	add	r24, r20
  e2:	91 1d       	adc	r25, r1
  e4:	28 2b       	or	r18, r24
  e6:	39 2b       	or	r19, r25
    
    /* Return both sums in a 16 bit value */
    return sum2 << 8 | sum1;
}
  e8:	82 2f       	mov	r24, r18
  ea:	93 2f       	mov	r25, r19
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	1f 91       	pop	r17
  f2:	0f 91       	pop	r16
  f4:	ff 90       	pop	r15
  f6:	ef 90       	pop	r14
  f8:	08 95       	ret

000000fa <sendByte>:
    /* Clear pin after */
    CLEAR_BIT(TX_PORT,TX_PIN);
}

void sendByte(const uint8_t byte)
{
  fa:	af 92       	push	r10
  fc:	bf 92       	push	r11
  fe:	cf 92       	push	r12
 100:	df 92       	push	r13
 102:	ef 92       	push	r14
 104:	ff 92       	push	r15
 106:	0f 93       	push	r16
 108:	1f 93       	push	r17
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	47 e0       	ldi	r20, 0x07	; 7
 110:	50 e0       	ldi	r21, 0x00	; 0
    int8_t bit = 7;
    
    for (; bit >= 0; --bit)
    {
        if ( IS_SET(byte,bit) )
 112:	aa 24       	eor	r10, r10
 114:	bb 24       	eor	r11, r11
 116:	65 01       	movw	r12, r10
 118:	a3 94       	inc	r10
 11a:	e8 2e       	mov	r14, r24
 11c:	ff 24       	eor	r15, r15
 11e:	00 e0       	ldi	r16, 0x00	; 0
 120:	10 e0       	ldi	r17, 0x00	; 0
             * end of period. This indicates a
             * low/cleared bit according to
             * Manchester Encoding.
             * * * * * * * * * * * * * * * * * * */
            
			while(TCNT0 < HALF_TIME);
 122:	e2 e5       	ldi	r30, 0x52	; 82
 124:	f0 e0       	ldi	r31, 0x00	; 0
            SET_BIT(TX_PORT,TX_PIN);
 126:	c8 e3       	ldi	r28, 0x38	; 56
 128:	d0 e0       	ldi	r29, 0x00	; 0
            TCNT0 = 0;
			
            while(TCNT0 < HALF_TIME);
            CLEAR_BIT(TX_PORT,TX_PIN);
            
            TCNT0 = 1;
 12a:	31 e0       	ldi	r19, 0x01	; 1
{
    int8_t bit = 7;
    
    for (; bit >= 0; --bit)
    {
        if ( IS_SET(byte,bit) )
 12c:	d6 01       	movw	r26, r12
 12e:	c5 01       	movw	r24, r10
 130:	04 2e       	mov	r0, r20
 132:	04 c0       	rjmp	.+8      	; 0x13c <sendByte+0x42>
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	aa 1f       	adc	r26, r26
 13a:	bb 1f       	adc	r27, r27
 13c:	0a 94       	dec	r0
 13e:	d2 f7       	brpl	.-12     	; 0x134 <sendByte+0x3a>
 140:	8e 21       	and	r24, r14
 142:	9f 21       	and	r25, r15
 144:	a0 23       	and	r26, r16
 146:	b1 23       	and	r27, r17
 148:	04 2e       	mov	r0, r20
 14a:	04 c0       	rjmp	.+8      	; 0x154 <sendByte+0x5a>
 14c:	b6 95       	lsr	r27
 14e:	a7 95       	ror	r26
 150:	97 95       	ror	r25
 152:	87 95       	ror	r24
 154:	0a 94       	dec	r0
 156:	d2 f7       	brpl	.-12     	; 0x14c <sendByte+0x52>
 158:	00 97       	sbiw	r24, 0x00	; 0
 15a:	a1 05       	cpc	r26, r1
 15c:	b1 05       	cpc	r27, r1
 15e:	79 f0       	breq	.+30     	; 0x17e <sendByte+0x84>
             * end of period. This indicates a
             * high/set bit according to Manchester
             * Encoding.
             * * * * * * * * * * * * * * * * * * */
            
            while(TCNT0 < HALF_TIME);
 160:	80 81       	ld	r24, Z
 162:	88 3c       	cpi	r24, 0xC8	; 200
 164:	e8 f3       	brcs	.-6      	; 0x160 <sendByte+0x66>
            CLEAR_BIT(TX_PORT,TX_PIN);
 166:	88 81       	ld	r24, Y
 168:	87 7f       	andi	r24, 0xF7	; 247
 16a:	88 83       	st	Y, r24
            
            TCNT0 = 0;
 16c:	10 82       	st	Z, r1
			
            while(TCNT0 < HALF_TIME);
 16e:	80 81       	ld	r24, Z
 170:	88 3c       	cpi	r24, 0xC8	; 200
 172:	e8 f3       	brcs	.-6      	; 0x16e <sendByte+0x74>
            SET_BIT(TX_PORT,TX_PIN);
 174:	88 81       	ld	r24, Y
 176:	88 60       	ori	r24, 0x08	; 8
 178:	88 83       	st	Y, r24
            
            TCNT0 = 1;
 17a:	30 83       	st	Z, r19
 17c:	0e c0       	rjmp	.+28     	; 0x19a <sendByte+0xa0>
             * end of period. This indicates a
             * low/cleared bit according to
             * Manchester Encoding.
             * * * * * * * * * * * * * * * * * * */
            
			while(TCNT0 < HALF_TIME);
 17e:	80 81       	ld	r24, Z
 180:	88 3c       	cpi	r24, 0xC8	; 200
 182:	e8 f3       	brcs	.-6      	; 0x17e <sendByte+0x84>
            SET_BIT(TX_PORT,TX_PIN);
 184:	88 81       	ld	r24, Y
 186:	88 60       	ori	r24, 0x08	; 8
 188:	88 83       	st	Y, r24
            
            TCNT0 = 0;
 18a:	10 82       	st	Z, r1
			
            while(TCNT0 < HALF_TIME);
 18c:	80 81       	ld	r24, Z
 18e:	88 3c       	cpi	r24, 0xC8	; 200
 190:	e8 f3       	brcs	.-6      	; 0x18c <sendByte+0x92>
            CLEAR_BIT(TX_PORT,TX_PIN);
 192:	88 81       	ld	r24, Y
 194:	87 7f       	andi	r24, 0xF7	; 247
 196:	88 83       	st	Y, r24
            
            TCNT0 = 1;
 198:	30 83       	st	Z, r19
 19a:	41 50       	subi	r20, 0x01	; 1
 19c:	50 40       	sbci	r21, 0x00	; 0

void sendByte(const uint8_t byte)
{
    int8_t bit = 7;
    
    for (; bit >= 0; --bit)
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	4f 3f       	cpi	r20, 0xFF	; 255
 1a2:	58 07       	cpc	r21, r24
 1a4:	19 f6       	brne	.-122    	; 0x12c <sendByte+0x32>
            TCNT0 = 1;
        }
        
    }
    
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	1f 91       	pop	r17
 1ac:	0f 91       	pop	r16
 1ae:	ff 90       	pop	r15
 1b0:	ef 90       	pop	r14
 1b2:	df 90       	pop	r13
 1b4:	cf 90       	pop	r12
 1b6:	bf 90       	pop	r11
 1b8:	af 90       	pop	r10
 1ba:	08 95       	ret

000001bc <sendData>:
    /* Return both sums in a 16 bit value */
    return sum2 << 8 | sum1;
}

void sendData(const uint8_t* data, uint16_t bytes)
{
 1bc:	df 92       	push	r13
 1be:	ef 92       	push	r14
 1c0:	ff 92       	push	r15
 1c2:	0f 93       	push	r16
 1c4:	1f 93       	push	r17
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	7c 01       	movw	r14, r24
 1cc:	eb 01       	movw	r28, r22
    uint8_t i;
    uint16_t chksm;
    
    /* Compute the checksum for the given data */
    chksm = computeChecksum(data,bytes);
 1ce:	46 df       	rcall	.-372    	; 0x5c <computeChecksum>
 1d0:	d8 2e       	mov	r13, r24
 1d2:	09 2f       	mov	r16, r25
 1d4:	10 e0       	ldi	r17, 0x00	; 0
    
    /* Send lots of 10s to let the receiver adjust to the signal */
    for(i = 0; i < 75; ++i)
    { sendByte(0); }
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	90 df       	rcall	.-224    	; 0xfa <sendByte>
    
    /* Compute the checksum for the given data */
    chksm = computeChecksum(data,bytes);
    
    /* Send lots of 10s to let the receiver adjust to the signal */
    for(i = 0; i < 75; ++i)
 1da:	1f 5f       	subi	r17, 0xFF	; 255
 1dc:	1b 34       	cpi	r17, 0x4B	; 75
 1de:	d9 f7       	brne	.-10     	; 0x1d6 <sendData+0x1a>
    { sendByte(0); }
    
    /* Send last 10s and the two 01 start pulses */
    sendByte(3);
 1e0:	83 e0       	ldi	r24, 0x03	; 3
 1e2:	8b df       	rcall	.-234    	; 0xfa <sendByte>
    
    /* Send data byte for byte */
    for (i = 0; i < bytes; ++i)
 1e4:	20 97       	sbiw	r28, 0x00	; 0
 1e6:	71 f0       	breq	.+28     	; 0x204 <sendData+0x48>
 1e8:	10 e0       	ldi	r17, 0x00	; 0
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	90 e0       	ldi	r25, 0x00	; 0
    { sendByte(data[i]); }
 1ee:	f7 01       	movw	r30, r14
 1f0:	e8 0f       	add	r30, r24
 1f2:	f9 1f       	adc	r31, r25
 1f4:	80 81       	ld	r24, Z
 1f6:	81 df       	rcall	.-254    	; 0xfa <sendByte>
    
    /* Send last 10s and the two 01 start pulses */
    sendByte(3);
    
    /* Send data byte for byte */
    for (i = 0; i < bytes; ++i)
 1f8:	1f 5f       	subi	r17, 0xFF	; 255
 1fa:	81 2f       	mov	r24, r17
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	8c 17       	cp	r24, r28
 200:	9d 07       	cpc	r25, r29
 202:	a8 f3       	brcs	.-22     	; 0x1ee <sendData+0x32>
    { sendByte(data[i]); }
    
    /* Append checksum, upper and lower byte */
    sendByte((chksm >> 8));
 204:	80 2f       	mov	r24, r16
 206:	79 df       	rcall	.-270    	; 0xfa <sendByte>
    sendByte((chksm & 0xFF)); // you can leave the & 0xFF away here if you want
 208:	8d 2d       	mov	r24, r13
 20a:	77 df       	rcall	.-274    	; 0xfa <sendByte>
    
    /* No more bits are sent but the last bit needs to finish delaying, otherwise if the
     * last bit is a one it won't be recognized because I'm turning the TX off after, which
     * would turn it into a 0 (Have to turn it off, else the LED will stay on). */
    
    while(TCNT0 < HALF_TIME);
 20c:	e2 e5       	ldi	r30, 0x52	; 82
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	88 3c       	cpi	r24, 0xC8	; 200
 214:	e8 f3       	brcs	.-6      	; 0x210 <sendData+0x54>
    
    /* Clear pin after */
    CLEAR_BIT(TX_PORT,TX_PIN);
 216:	e8 e3       	ldi	r30, 0x38	; 56
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	87 7f       	andi	r24, 0xF7	; 247
 21e:	80 83       	st	Z, r24
}
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	1f 91       	pop	r17
 226:	0f 91       	pop	r16
 228:	ff 90       	pop	r15
 22a:	ef 90       	pop	r14
 22c:	df 90       	pop	r13
 22e:	08 95       	ret

00000230 <main>:
#include "ManchesterGlobal.h"

#include <avr/io.h>

int main(void)
{
 230:	df 93       	push	r29
 232:	cf 93       	push	r28
 234:	cd b7       	in	r28, 0x3d	; 61
 236:	de b7       	in	r29, 0x3e	; 62
 238:	2d 97       	sbiw	r28, 0x0d	; 13
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	f8 94       	cli
 23e:	de bf       	out	0x3e, r29	; 62
 240:	0f be       	out	0x3f, r0	; 63
 242:	cd bf       	out	0x3d, r28	; 61
    uint8_t msg [] = "Hello World!";
 244:	de 01       	movw	r26, r28
 246:	11 96       	adiw	r26, 0x01	; 1
 248:	e0 e6       	ldi	r30, 0x60	; 96
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	8d e0       	ldi	r24, 0x0D	; 13
 24e:	01 90       	ld	r0, Z+
 250:	0d 92       	st	X+, r0
 252:	81 50       	subi	r24, 0x01	; 1
 254:	e1 f7       	brne	.-8      	; 0x24e <main+0x1e>

	initTX();
 256:	f7 de       	rcall	.-530    	; 0x46 <initTX>
    
    sendData(msg,12);
 258:	ce 01       	movw	r24, r28
 25a:	01 96       	adiw	r24, 0x01	; 1
 25c:	6c e0       	ldi	r22, 0x0C	; 12
 25e:	70 e0       	ldi	r23, 0x00	; 0
 260:	ad df       	rcall	.-166    	; 0x1bc <sendData>
    
	return 0;
}
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	2d 96       	adiw	r28, 0x0d	; 13
 268:	0f b6       	in	r0, 0x3f	; 63
 26a:	f8 94       	cli
 26c:	de bf       	out	0x3e, r29	; 62
 26e:	0f be       	out	0x3f, r0	; 63
 270:	cd bf       	out	0x3d, r28	; 61
 272:	cf 91       	pop	r28
 274:	df 91       	pop	r29
 276:	08 95       	ret

00000278 <_exit>:
 278:	f8 94       	cli

0000027a <__stop_program>:
 27a:	ff cf       	rjmp	.-2      	; 0x27a <__stop_program>
