
Retrolite_Tx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000022a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  0000022a  0000029e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000027d  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000123  00000000  00000000  00000599  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000015d  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000c8  00000000  00000000  0000081c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000018b  00000000  00000000  000008e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000003cb  00000000  00000000  00000a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  00000e3a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	ea e2       	ldi	r30, 0x2A	; 42
  32:	f2 e0       	ldi	r31, 0x02	; 2
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	ae 36       	cpi	r26, 0x6E	; 110
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>
  40:	ce d0       	rcall	.+412    	; 0x1de <main>
  42:	f1 c0       	rjmp	.+482    	; 0x226 <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <initTX>:
}

void initTX(void)
{
    /* Set TX_PIN as output */
    SET_BIT(DDRB,DDB3);
  46:	bb 9a       	sbi	0x17, 3	; 23
	
	/* Enable TCNT0 with clk/8 pre-scaling */
	SET_BIT(TCCR0B,CS01);
  48:	83 b7       	in	r24, 0x33	; 51
  4a:	82 60       	ori	r24, 0x02	; 2
  4c:	83 bf       	out	0x33, r24	; 51
  4e:	08 95       	ret

00000050 <computeChecksum>:
}

uint16_t computeChecksum(const uint8_t* data, uint16_t bytes)
{
  50:	ff 92       	push	r15
  52:	0f 93       	push	r16
  54:	1f 93       	push	r17
  56:	cf 93       	push	r28
  58:	df 93       	push	r29
    uint16_t sum1 = 0xFF;
    uint16_t sum2 = 0xFF;
    
    uint16_t wordLen;
    
    while (bytes)
  5a:	61 15       	cp	r22, r1
  5c:	71 05       	cpc	r23, r1
  5e:	79 f1       	breq	.+94     	; 0xbe <computeChecksum+0x6e>
     *  zero. Taken from here: http://goo.gl/Cjt4AO    *
     *                                                 *
     * * * * * * * * * * * * * * * * * * * * * * * * * */
    
    uint16_t sum1 = 0xFF;
    uint16_t sum2 = 0xFF;
  60:	4f ef       	ldi	r20, 0xFF	; 255
  62:	50 e0       	ldi	r21, 0x00	; 0
     *  computed flag when the returned value is non-  *
     *  zero. Taken from here: http://goo.gl/Cjt4AO    *
     *                                                 *
     * * * * * * * * * * * * * * * * * * * * * * * * * */
    
    uint16_t sum1 = 0xFF;
  64:	2f ef       	ldi	r18, 0xFF	; 255
  66:	30 e0       	ldi	r19, 0x00	; 0
    uint16_t wordLen;
    
    while (bytes)
    {
        /* maximum word size before overflow would occur */
        wordLen = (bytes > 20) ? 20 : bytes;
  68:	0f 2e       	mov	r0, r31
  6a:	f4 e1       	ldi	r31, 0x14	; 20
  6c:	ff 2e       	mov	r15, r31
  6e:	f0 2d       	mov	r31, r0
  70:	00 e0       	ldi	r16, 0x00	; 0
  72:	eb 01       	movw	r28, r22
  74:	65 31       	cpi	r22, 0x15	; 21
  76:	71 05       	cpc	r23, r1
  78:	10 f0       	brcs	.+4      	; 0x7e <computeChecksum+0x2e>
  7a:	cf 2d       	mov	r28, r15
  7c:	d0 2f       	mov	r29, r16
        
        bytes -= wordLen;
  7e:	6c 1b       	sub	r22, r28
  80:	7d 0b       	sbc	r23, r29
  82:	fc 01       	movw	r30, r24
  84:	de 01       	movw	r26, r28
  86:	a8 0f       	add	r26, r24
  88:	b9 1f       	adc	r27, r25
        
        do
        {
            sum1 += *(data++);
  8a:	11 91       	ld	r17, Z+
  8c:	21 0f       	add	r18, r17
  8e:	31 1d       	adc	r19, r1
            sum2 += sum1;
  90:	42 0f       	add	r20, r18
  92:	53 1f       	adc	r21, r19
        }
        
        while (--wordLen);
  94:	ea 17       	cp	r30, r26
  96:	fb 07       	cpc	r31, r27
  98:	c1 f7       	brne	.-16     	; 0x8a <computeChecksum+0x3a>
  9a:	8c 0f       	add	r24, r28
  9c:	9d 1f       	adc	r25, r29
         * Do first modular reduction: mask off
         * lower byte and add right shifted upper
         * byte to it
         * * * * * * * * * * * * * * * * * * * * * */
        
        sum1 = (sum1 & 0xFF) + (sum1 >> 8);
  9e:	e3 2f       	mov	r30, r19
  a0:	ff 27       	eor	r31, r31
  a2:	df 01       	movw	r26, r30
  a4:	a2 0f       	add	r26, r18
  a6:	b1 1d       	adc	r27, r1
  a8:	9d 01       	movw	r18, r26
        sum2 = (sum2 & 0xFF) + (sum2 >> 8);
  aa:	e5 2f       	mov	r30, r21
  ac:	ff 27       	eor	r31, r31
  ae:	df 01       	movw	r26, r30
  b0:	a4 0f       	add	r26, r20
  b2:	b1 1d       	adc	r27, r1
  b4:	ad 01       	movw	r20, r26
    uint16_t sum1 = 0xFF;
    uint16_t sum2 = 0xFF;
    
    uint16_t wordLen;
    
    while (bytes)
  b6:	61 15       	cp	r22, r1
  b8:	71 05       	cpc	r23, r1
  ba:	d9 f6       	brne	.-74     	; 0x72 <computeChecksum+0x22>
  bc:	04 c0       	rjmp	.+8      	; 0xc6 <computeChecksum+0x76>
     *  zero. Taken from here: http://goo.gl/Cjt4AO    *
     *                                                 *
     * * * * * * * * * * * * * * * * * * * * * * * * * */
    
    uint16_t sum1 = 0xFF;
    uint16_t sum2 = 0xFF;
  be:	4f ef       	ldi	r20, 0xFF	; 255
  c0:	50 e0       	ldi	r21, 0x00	; 0
     *  computed flag when the returned value is non-  *
     *  zero. Taken from here: http://goo.gl/Cjt4AO    *
     *                                                 *
     * * * * * * * * * * * * * * * * * * * * * * * * * */
    
    uint16_t sum1 = 0xFF;
  c2:	2f ef       	ldi	r18, 0xFF	; 255
  c4:	30 e0       	ldi	r19, 0x00	; 0
        sum1 = (sum1 & 0xFF) + (sum1 >> 8);
        sum2 = (sum2 & 0xFF) + (sum2 >> 8);
    }
    
    /* Safety reduction */
    sum1 = (sum1 & 0xFF) + (sum1 >> 8);
  c6:	83 2f       	mov	r24, r19
  c8:	99 27       	eor	r25, r25
    sum2 = (sum2 & 0xFF) + (sum2 >> 8);
  ca:	65 2f       	mov	r22, r21
  cc:	77 27       	eor	r23, r23
  ce:	fb 01       	movw	r30, r22
  d0:	e4 0f       	add	r30, r20
  d2:	f1 1d       	adc	r31, r1
    
    /* Return both sums in a 16 bit value */
    return sum2 << 8 | sum1;
  d4:	5e 2f       	mov	r21, r30
  d6:	44 27       	eor	r20, r20
        sum1 = (sum1 & 0xFF) + (sum1 >> 8);
        sum2 = (sum2 & 0xFF) + (sum2 >> 8);
    }
    
    /* Safety reduction */
    sum1 = (sum1 & 0xFF) + (sum1 >> 8);
  d8:	82 0f       	add	r24, r18
  da:	91 1d       	adc	r25, r1
    sum2 = (sum2 & 0xFF) + (sum2 >> 8);
    
    /* Return both sums in a 16 bit value */
    return sum2 << 8 | sum1;
}
  dc:	84 2b       	or	r24, r20
  de:	95 2b       	or	r25, r21
  e0:	df 91       	pop	r29
  e2:	cf 91       	pop	r28
  e4:	1f 91       	pop	r17
  e6:	0f 91       	pop	r16
  e8:	ff 90       	pop	r15
  ea:	08 95       	ret

000000ec <sendByte>:
    /* Clear pin after */
    CLEAR_BIT(TX_PORT,TX_PIN);
}

void sendByte(const uint8_t byte)
{
  ec:	0f 93       	push	r16
  ee:	1f 93       	push	r17
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	e7 e0       	ldi	r30, 0x07	; 7
  f6:	f0 e0       	ldi	r31, 0x00	; 0
    int8_t bit = 7;
    
    for (; bit >= 0; --bit)
    {
        if ( IS_SET(byte,bit) )
  f8:	01 e0       	ldi	r16, 0x01	; 1
  fa:	10 e0       	ldi	r17, 0x00	; 0
  fc:	20 e0       	ldi	r18, 0x00	; 0
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e0       	ldi	r27, 0x00	; 0
            TCNT0 = 0;
			
            while(TCNT0 < HALF_TIME);
            CLEAR_BIT(TX_PORT,TX_PIN);
            
            TCNT0 = 1;
 106:	d1 e0       	ldi	r29, 0x01	; 1
{
    int8_t bit = 7;
    
    for (; bit >= 0; --bit)
    {
        if ( IS_SET(byte,bit) )
 108:	b9 01       	movw	r22, r18
 10a:	a8 01       	movw	r20, r16
 10c:	0e 2e       	mov	r0, r30
 10e:	04 c0       	rjmp	.+8      	; 0x118 <sendByte+0x2c>
 110:	44 0f       	add	r20, r20
 112:	55 1f       	adc	r21, r21
 114:	66 1f       	adc	r22, r22
 116:	77 1f       	adc	r23, r23
 118:	0a 94       	dec	r0
 11a:	d2 f7       	brpl	.-12     	; 0x110 <sendByte+0x24>
 11c:	48 23       	and	r20, r24
 11e:	59 23       	and	r21, r25
 120:	6a 23       	and	r22, r26
 122:	7b 23       	and	r23, r27
 124:	0e 2e       	mov	r0, r30
 126:	04 c0       	rjmp	.+8      	; 0x130 <sendByte+0x44>
 128:	76 95       	lsr	r23
 12a:	67 95       	ror	r22
 12c:	57 95       	ror	r21
 12e:	47 95       	ror	r20
 130:	0a 94       	dec	r0
 132:	d2 f7       	brpl	.-12     	; 0x128 <sendByte+0x3c>
 134:	45 2b       	or	r20, r21
 136:	46 2b       	or	r20, r22
 138:	47 2b       	or	r20, r23
 13a:	59 f0       	breq	.+22     	; 0x152 <sendByte+0x66>
             * end of period. This indicates a
             * high/set bit according to Manchester
             * Encoding.
             * * * * * * * * * * * * * * * * * * */
            
            while(TCNT0 < HALF_TIME);
 13c:	42 b7       	in	r20, 0x32	; 50
 13e:	48 3c       	cpi	r20, 0xC8	; 200
 140:	e8 f3       	brcs	.-6      	; 0x13c <sendByte+0x50>
            CLEAR_BIT(TX_PORT,TX_PIN);
 142:	c3 98       	cbi	0x18, 3	; 24
            
            TCNT0 = 0;
 144:	12 be       	out	0x32, r1	; 50
			
            while(TCNT0 < HALF_TIME);
 146:	42 b7       	in	r20, 0x32	; 50
 148:	48 3c       	cpi	r20, 0xC8	; 200
 14a:	e8 f3       	brcs	.-6      	; 0x146 <sendByte+0x5a>
            SET_BIT(TX_PORT,TX_PIN);
 14c:	c3 9a       	sbi	0x18, 3	; 24
            
            TCNT0 = 1;
 14e:	d2 bf       	out	0x32, r29	; 50
 150:	0a c0       	rjmp	.+20     	; 0x166 <sendByte+0x7a>
             * end of period. This indicates a
             * low/cleared bit according to
             * Manchester Encoding.
             * * * * * * * * * * * * * * * * * * */
            
			while(TCNT0 < HALF_TIME);
 152:	42 b7       	in	r20, 0x32	; 50
 154:	48 3c       	cpi	r20, 0xC8	; 200
 156:	e8 f3       	brcs	.-6      	; 0x152 <sendByte+0x66>
            SET_BIT(TX_PORT,TX_PIN);
 158:	c3 9a       	sbi	0x18, 3	; 24
            
            TCNT0 = 0;
 15a:	12 be       	out	0x32, r1	; 50
			
            while(TCNT0 < HALF_TIME);
 15c:	42 b7       	in	r20, 0x32	; 50
 15e:	48 3c       	cpi	r20, 0xC8	; 200
 160:	e8 f3       	brcs	.-6      	; 0x15c <sendByte+0x70>
            CLEAR_BIT(TX_PORT,TX_PIN);
 162:	c3 98       	cbi	0x18, 3	; 24
            
            TCNT0 = 1;
 164:	d2 bf       	out	0x32, r29	; 50
 166:	31 97       	sbiw	r30, 0x01	; 1
 168:	78 f6       	brcc	.-98     	; 0x108 <sendByte+0x1c>
        }
        
    }
    
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	1f 91       	pop	r17
 170:	0f 91       	pop	r16
 172:	08 95       	ret

00000174 <sendData>:
    /* Return both sums in a 16 bit value */
    return sum2 << 8 | sum1;
}

void sendData(const uint8_t* data, uint16_t bytes)
{
 174:	df 92       	push	r13
 176:	ef 92       	push	r14
 178:	ff 92       	push	r15
 17a:	0f 93       	push	r16
 17c:	1f 93       	push	r17
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 182:	8c 01       	movw	r16, r24
 184:	eb 01       	movw	r28, r22
    uint8_t i;
    uint16_t chksm;
    
    /* Compute the checksum for the given data */
    chksm = computeChecksum(data,bytes);
 186:	64 df       	rcall	.-312    	; 0x50 <computeChecksum>
 188:	e8 2e       	mov	r14, r24
 18a:	d9 2e       	mov	r13, r25
 18c:	0f 2e       	mov	r0, r31
 18e:	fb e4       	ldi	r31, 0x4B	; 75
 190:	ff 2e       	mov	r15, r31
 192:	f0 2d       	mov	r31, r0
    
    /* Send lots of 10s to let the receiver adjust to the signal */
    for(i = 0; i < 75; ++i)
    { sendByte(0); }
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	aa df       	rcall	.-172    	; 0xec <sendByte>
 198:	fa 94       	dec	r15
    
    /* Compute the checksum for the given data */
    chksm = computeChecksum(data,bytes);
    
    /* Send lots of 10s to let the receiver adjust to the signal */
    for(i = 0; i < 75; ++i)
 19a:	e1 f7       	brne	.-8      	; 0x194 <sendData+0x20>
    { sendByte(0); }
    
    /* Send last 10s and the two 01 start pulses */
    sendByte(3);
 19c:	83 e0       	ldi	r24, 0x03	; 3
 19e:	a6 df       	rcall	.-180    	; 0xec <sendByte>
    
    /* Send data byte for byte */
    for (i = 0; i < bytes; ++i)
 1a0:	20 97       	sbiw	r28, 0x00	; 0
 1a2:	69 f0       	breq	.+26     	; 0x1be <sendData+0x4a>
 1a4:	20 e0       	ldi	r18, 0x00	; 0
 1a6:	30 e0       	ldi	r19, 0x00	; 0
    { sendByte(data[i]); }
 1a8:	f8 01       	movw	r30, r16
 1aa:	e2 0f       	add	r30, r18
 1ac:	f3 1f       	adc	r31, r19
 1ae:	80 81       	ld	r24, Z
 1b0:	9d df       	rcall	.-198    	; 0xec <sendByte>
    
    /* Send last 10s and the two 01 start pulses */
    sendByte(3);
    
    /* Send data byte for byte */
    for (i = 0; i < bytes; ++i)
 1b2:	f3 94       	inc	r15
 1b4:	2f 2d       	mov	r18, r15
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	2c 17       	cp	r18, r28
 1ba:	3d 07       	cpc	r19, r29
 1bc:	a8 f3       	brcs	.-22     	; 0x1a8 <sendData+0x34>
    { sendByte(data[i]); }
    
    /* Append checksum, upper and lower byte */
    sendByte((chksm >> 8));
 1be:	8d 2d       	mov	r24, r13
 1c0:	95 df       	rcall	.-214    	; 0xec <sendByte>
    sendByte((chksm & 0xFF)); // you can leave the & 0xFF away here if you want
 1c2:	8e 2d       	mov	r24, r14
 1c4:	93 df       	rcall	.-218    	; 0xec <sendByte>
    
    /* No more bits are sent but the last bit needs to finish delaying, otherwise if the
     * last bit is a one it won't be recognized because I'm turning the TX off after, which
     * would turn it into a 0 (Have to turn it off, else the LED will stay on). */
    
    while(TCNT0 < HALF_TIME);
 1c6:	82 b7       	in	r24, 0x32	; 50
 1c8:	88 3c       	cpi	r24, 0xC8	; 200
 1ca:	e8 f3       	brcs	.-6      	; 0x1c6 <sendData+0x52>
    
    /* Clear pin after */
    CLEAR_BIT(TX_PORT,TX_PIN);
 1cc:	c3 98       	cbi	0x18, 3	; 24
}
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	1f 91       	pop	r17
 1d4:	0f 91       	pop	r16
 1d6:	ff 90       	pop	r15
 1d8:	ef 90       	pop	r14
 1da:	df 90       	pop	r13
 1dc:	08 95       	ret

000001de <main>:
#include <util/delay.h>
#include "ManchesterTX.h"
#include "ManchesterGlobal.h"

int main(void)
{
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	cd b7       	in	r28, 0x3d	; 61
 1e4:	de b7       	in	r29, 0x3e	; 62
 1e6:	2d 97       	sbiw	r28, 0x0d	; 13
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	f8 94       	cli
 1ec:	de bf       	out	0x3e, r29	; 62
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	cd bf       	out	0x3d, r28	; 61
    uint8_t msg [] = "Hello World!";
 1f2:	8d e0       	ldi	r24, 0x0D	; 13
 1f4:	e0 e6       	ldi	r30, 0x60	; 96
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	de 01       	movw	r26, r28
 1fa:	11 96       	adiw	r26, 0x01	; 1
 1fc:	01 90       	ld	r0, Z+
 1fe:	0d 92       	st	X+, r0
 200:	8a 95       	dec	r24
 202:	e1 f7       	brne	.-8      	; 0x1fc <main+0x1e>

	initTX();
 204:	20 df       	rcall	.-448    	; 0x46 <initTX>
    
    sendData(msg,12);
 206:	6c e0       	ldi	r22, 0x0C	; 12
 208:	70 e0       	ldi	r23, 0x00	; 0
 20a:	ce 01       	movw	r24, r28
 20c:	01 96       	adiw	r24, 0x01	; 1
 20e:	b2 df       	rcall	.-156    	; 0x174 <sendData>
    
	return 0;
}
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	2d 96       	adiw	r28, 0x0d	; 13
 216:	0f b6       	in	r0, 0x3f	; 63
 218:	f8 94       	cli
 21a:	de bf       	out	0x3e, r29	; 62
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	cd bf       	out	0x3d, r28	; 61
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	08 95       	ret

00000226 <_exit>:
 226:	f8 94       	cli

00000228 <__stop_program>:
 228:	ff cf       	rjmp	.-2      	; 0x228 <__stop_program>
