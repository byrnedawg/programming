
MMA8452 Advance.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001864  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00001864  000018f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000066  00800090  00800090  00001928  2**0
                  ALLOC
  3 .stab         000033b4  00000000  00000000  00001928  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000967  00000000  00000000  00004cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00005643  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000438  00000000  00000000  00005703  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001888  00000000  00000000  00005b3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000009df  00000000  00000000  000073c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001bf1  00000000  00000000  00007da2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000330  00000000  00000000  00009994  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000699  00000000  00000000  00009cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001365  00000000  00000000  0000a35d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000001bf  00000000  00000000  0000b6c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000048  00000000  00000000  0000b881  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b1 c0       	rjmp	.+354    	; 0x164 <__ctors_end>
       2:	cb c0       	rjmp	.+406    	; 0x19a <__bad_interrupt>
       4:	ca c0       	rjmp	.+404    	; 0x19a <__bad_interrupt>
       6:	c9 c0       	rjmp	.+402    	; 0x19a <__bad_interrupt>
       8:	c8 c0       	rjmp	.+400    	; 0x19a <__bad_interrupt>
       a:	c7 c0       	rjmp	.+398    	; 0x19a <__bad_interrupt>
       c:	c6 c0       	rjmp	.+396    	; 0x19a <__bad_interrupt>
       e:	c5 c0       	rjmp	.+394    	; 0x19a <__bad_interrupt>
      10:	c4 c0       	rjmp	.+392    	; 0x19a <__bad_interrupt>
      12:	c3 c0       	rjmp	.+390    	; 0x19a <__bad_interrupt>
      14:	c2 c0       	rjmp	.+388    	; 0x19a <__bad_interrupt>
      16:	b1 c1       	rjmp	.+866    	; 0x37a <__vector_11>
      18:	c0 c0       	rjmp	.+384    	; 0x19a <__bad_interrupt>
      1a:	bf c0       	rjmp	.+382    	; 0x19a <__bad_interrupt>
      1c:	be c0       	rjmp	.+380    	; 0x19a <__bad_interrupt>
      1e:	bd c0       	rjmp	.+378    	; 0x19a <__bad_interrupt>
      20:	bc c0       	rjmp	.+376    	; 0x19a <__bad_interrupt>
      22:	bb c0       	rjmp	.+374    	; 0x19a <__bad_interrupt>
      24:	ba c0       	rjmp	.+372    	; 0x19a <__bad_interrupt>
      26:	03 6e       	ori	r16, 0xE3	; 227
      28:	db 36       	cpi	r29, 0x6B	; 107
      2a:	3d 9a       	sbi	0x07, 5	; 7
      2c:	99 99       	sbic	0x13, 1	; 19
      2e:	99 3d       	cpi	r25, 0xD9	; 217
      30:	ab aa       	std	Y+51, r10	; 0x33
      32:	aa 2a       	or	r10, r26
      34:	3e 00       	.word	0x003e	; ????
      36:	00 00       	nop
      38:	80 3f       	cpi	r24, 0xF0	; 240
      3a:	07 2c       	mov	r0, r7
      3c:	7a a5       	ldd	r23, Y+42	; 0x2a
      3e:	ba 6c       	ori	r27, 0xCA	; 202
      40:	c5 90       	lpm	r12, Z+
      42:	da 3b       	cpi	r29, 0xBA	; 186
      44:	93 65       	ori	r25, 0x53	; 83
      46:	fc 8b       	std	Y+20, r31	; 0x14
      48:	bc 53       	subi	r27, 0x3C	; 60
      4a:	f8 10       	cpse	r15, r8
      4c:	fd 3c       	cpi	r31, 0xCD	; 205
      4e:	56 92       	.word	0x9256	; ????
      50:	83 4d       	sbci	r24, 0xD3	; 211
      52:	bd 87       	std	Y+13, r27	; 0x0d
      54:	9d 3a       	cpi	r25, 0xAD	; 173
      56:	b6 3d       	cpi	r27, 0xD6	; 214
      58:	cb c9       	rjmp	.-3178   	; 0xfffff3f0 <__eeprom_end+0xff7ef3f0>
      5a:	bf 5b       	subi	r27, 0xBF	; 191
      5c:	be 73       	andi	r27, 0x3E	; 62
      5e:	da 0f       	add	r29, r26
      60:	c9 3f       	cpi	r28, 0xF9	; 249

00000062 <__c.1912>:
      62:	6e 61 6e 00                                         nan.

00000066 <__c.1910>:
      66:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      76:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      86:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      96:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      a6:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      b6:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      c6:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      d6:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      e6:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      f6:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     106:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     116:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     126:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     136:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     146:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     156:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000164 <__ctors_end>:
     164:	11 24       	eor	r1, r1
     166:	1f be       	out	0x3f, r1	; 63
     168:	cf e5       	ldi	r28, 0x5F	; 95
     16a:	d4 e0       	ldi	r29, 0x04	; 4
     16c:	de bf       	out	0x3e, r29	; 62
     16e:	cd bf       	out	0x3d, r28	; 61

00000170 <__do_copy_data>:
     170:	10 e0       	ldi	r17, 0x00	; 0
     172:	a0 e6       	ldi	r26, 0x60	; 96
     174:	b0 e0       	ldi	r27, 0x00	; 0
     176:	e4 e6       	ldi	r30, 0x64	; 100
     178:	f8 e1       	ldi	r31, 0x18	; 24
     17a:	02 c0       	rjmp	.+4      	; 0x180 <__do_copy_data+0x10>
     17c:	05 90       	lpm	r0, Z+
     17e:	0d 92       	st	X+, r0
     180:	a0 39       	cpi	r26, 0x90	; 144
     182:	b1 07       	cpc	r27, r17
     184:	d9 f7       	brne	.-10     	; 0x17c <__do_copy_data+0xc>

00000186 <__do_clear_bss>:
     186:	10 e0       	ldi	r17, 0x00	; 0
     188:	a0 e9       	ldi	r26, 0x90	; 144
     18a:	b0 e0       	ldi	r27, 0x00	; 0
     18c:	01 c0       	rjmp	.+2      	; 0x190 <.do_clear_bss_start>

0000018e <.do_clear_bss_loop>:
     18e:	1d 92       	st	X+, r1

00000190 <.do_clear_bss_start>:
     190:	a6 3f       	cpi	r26, 0xF6	; 246
     192:	b1 07       	cpc	r27, r17
     194:	e1 f7       	brne	.-8      	; 0x18e <.do_clear_bss_loop>
     196:	11 d2       	rcall	.+1058   	; 0x5ba <main>
     198:	63 cb       	rjmp	.-2362   	; 0xfffff860 <__eeprom_end+0xff7ef860>

0000019a <__bad_interrupt>:
     19a:	32 cf       	rjmp	.-412    	; 0x0 <__vectors>

0000019c <Command_Display>:
#include "GB_Display.h"
#include "GB_usart.h"


void Command_Display(uint8_t command)
{
     19c:	1f 93       	push	r17
     19e:	18 2f       	mov	r17, r24
	UWriteData(CMD);
     1a0:	8e ef       	ldi	r24, 0xFE	; 254
     1a2:	68 d1       	rcall	.+720    	; 0x474 <UWriteData>
	UWriteData(command);
     1a4:	81 2f       	mov	r24, r17
     1a6:	66 d1       	rcall	.+716    	; 0x474 <UWriteData>
}
     1a8:	1f 91       	pop	r17
     1aa:	08 95       	ret

000001ac <Change_Baudrate>:

void Change_Baudrate(uint8_t speed)
{	
     1ac:	1f 93       	push	r17
     1ae:	18 2f       	mov	r17, r24
	UWriteData(CMD);
     1b0:	8e ef       	ldi	r24, 0xFE	; 254
     1b2:	60 d1       	rcall	.+704    	; 0x474 <UWriteData>
	UWriteData(Bauderate);
     1b4:	89 e3       	ldi	r24, 0x39	; 57
     1b6:	5e d1       	rcall	.+700    	; 0x474 <UWriteData>
	UWriteData(speed);
     1b8:	81 2f       	mov	r24, r17
     1ba:	5c d1       	rcall	.+696    	; 0x474 <UWriteData>
}
     1bc:	1f 91       	pop	r17
     1be:	08 95       	ret

000001c0 <Set_Cursor_Position>:

void Set_Cursor_Position(uint8_t column, uint8_t row)
{	
     1c0:	0f 93       	push	r16
     1c2:	1f 93       	push	r17
     1c4:	08 2f       	mov	r16, r24
     1c6:	16 2f       	mov	r17, r22
	UWriteData(CMD);
     1c8:	8e ef       	ldi	r24, 0xFE	; 254
     1ca:	54 d1       	rcall	.+680    	; 0x474 <UWriteData>
	UWriteData(Cursor);
     1cc:	87 e4       	ldi	r24, 0x47	; 71
     1ce:	52 d1       	rcall	.+676    	; 0x474 <UWriteData>
	UWriteData(column);
     1d0:	80 2f       	mov	r24, r16
     1d2:	50 d1       	rcall	.+672    	; 0x474 <UWriteData>
	UWriteData(row);
     1d4:	81 2f       	mov	r24, r17
     1d6:	4e d1       	rcall	.+668    	; 0x474 <UWriteData>
}
     1d8:	1f 91       	pop	r17
     1da:	0f 91       	pop	r16
     1dc:	08 95       	ret

000001de <Set_Touch_Mode>:

void Set_Touch_Mode(unsigned char touch_mode)
{
     1de:	1f 93       	push	r17
     1e0:	18 2f       	mov	r17, r24
	Command_Display(Touch_Mode);
     1e2:	87 e8       	ldi	r24, 0x87	; 135
     1e4:	db df       	rcall	.-74     	; 0x19c <Command_Display>
	UWriteData(touch_mode);
     1e6:	81 2f       	mov	r24, r17
     1e8:	45 d1       	rcall	.+650    	; 0x474 <UWriteData>
}
     1ea:	1f 91       	pop	r17
     1ec:	08 95       	ret

000001ee <Set_Touch_Region>:
void Set_Touch_Region(unsigned char RegNum, unsigned char x, unsigned char y, 
						unsigned char w, unsigned char h, unsigned char key_down, unsigned char key_up)
{
     1ee:	bf 92       	push	r11
     1f0:	cf 92       	push	r12
     1f2:	df 92       	push	r13
     1f4:	ef 92       	push	r14
     1f6:	ff 92       	push	r15
     1f8:	0f 93       	push	r16
     1fa:	1f 93       	push	r17
     1fc:	18 2f       	mov	r17, r24
     1fe:	f6 2e       	mov	r15, r22
     200:	d4 2e       	mov	r13, r20
     202:	b2 2e       	mov	r11, r18
	Command_Display(Touch_Region);
     204:	84 e8       	ldi	r24, 0x84	; 132
     206:	ca df       	rcall	.-108    	; 0x19c <Command_Display>
	UWriteData(RegNum);
     208:	81 2f       	mov	r24, r17
     20a:	34 d1       	rcall	.+616    	; 0x474 <UWriteData>
	UWriteData(x);
     20c:	8f 2d       	mov	r24, r15
     20e:	32 d1       	rcall	.+612    	; 0x474 <UWriteData>
	UWriteData(y);
     210:	8d 2d       	mov	r24, r13
     212:	30 d1       	rcall	.+608    	; 0x474 <UWriteData>
	UWriteData(w);
     214:	8b 2d       	mov	r24, r11
     216:	2e d1       	rcall	.+604    	; 0x474 <UWriteData>
	UWriteData(h);
     218:	80 2f       	mov	r24, r16
     21a:	2c d1       	rcall	.+600    	; 0x474 <UWriteData>
	UWriteData(key_down);
     21c:	8e 2d       	mov	r24, r14
     21e:	2a d1       	rcall	.+596    	; 0x474 <UWriteData>
	UWriteData(key_up);
     220:	8c 2d       	mov	r24, r12
     222:	28 d1       	rcall	.+592    	; 0x474 <UWriteData>
}
     224:	1f 91       	pop	r17
     226:	0f 91       	pop	r16
     228:	ff 90       	pop	r15
     22a:	ef 90       	pop	r14
     22c:	df 90       	pop	r13
     22e:	cf 90       	pop	r12
     230:	bf 90       	pop	r11
     232:	08 95       	ret

00000234 <Touch_Calibration>:

void Touch_Calibration()
{	
	Command_Display(Touch_Calibrat);
     234:	8b e8       	ldi	r24, 0x8B	; 139
     236:	b2 df       	rcall	.-156    	; 0x19c <Command_Display>

}
     238:	08 95       	ret

0000023a <Draw_Solid_Rect>:

void Draw_Solid_Rect(unsigned char color, unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2)
{	
     23a:	df 92       	push	r13
     23c:	ef 92       	push	r14
     23e:	ff 92       	push	r15
     240:	0f 93       	push	r16
     242:	1f 93       	push	r17
     244:	f8 2e       	mov	r15, r24
     246:	16 2f       	mov	r17, r22
     248:	e4 2e       	mov	r14, r20
     24a:	d2 2e       	mov	r13, r18
	Command_Display(DRW_Solid_Rect);
     24c:	88 e7       	ldi	r24, 0x78	; 120
     24e:	a6 df       	rcall	.-180    	; 0x19c <Command_Display>
	UWriteData(color);
     250:	8f 2d       	mov	r24, r15
     252:	10 d1       	rcall	.+544    	; 0x474 <UWriteData>
	UWriteData(x1);
     254:	81 2f       	mov	r24, r17
     256:	0e d1       	rcall	.+540    	; 0x474 <UWriteData>
	UWriteData(y1);
     258:	8e 2d       	mov	r24, r14
     25a:	0c d1       	rcall	.+536    	; 0x474 <UWriteData>
	UWriteData(x2);
     25c:	8d 2d       	mov	r24, r13
     25e:	0a d1       	rcall	.+532    	; 0x474 <UWriteData>
	UWriteData(y2);
     260:	80 2f       	mov	r24, r16
     262:	08 d1       	rcall	.+528    	; 0x474 <UWriteData>
}
     264:	1f 91       	pop	r17
     266:	0f 91       	pop	r16
     268:	ff 90       	pop	r15
     26a:	ef 90       	pop	r14
     26c:	df 90       	pop	r13
     26e:	08 95       	ret

00000270 <Draw_Rect_At>:

void Draw_Rect_At(unsigned char color, unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2)
{	
     270:	df 92       	push	r13
     272:	ef 92       	push	r14
     274:	ff 92       	push	r15
     276:	0f 93       	push	r16
     278:	1f 93       	push	r17
     27a:	f8 2e       	mov	r15, r24
     27c:	16 2f       	mov	r17, r22
     27e:	e4 2e       	mov	r14, r20
     280:	d2 2e       	mov	r13, r18
	Command_Display(Draw_Rectangle);
     282:	82 e7       	ldi	r24, 0x72	; 114
     284:	8b df       	rcall	.-234    	; 0x19c <Command_Display>
	UWriteData(color);
     286:	8f 2d       	mov	r24, r15
     288:	f5 d0       	rcall	.+490    	; 0x474 <UWriteData>
	UWriteData(x1);
     28a:	81 2f       	mov	r24, r17
     28c:	f3 d0       	rcall	.+486    	; 0x474 <UWriteData>
	UWriteData(y1);
     28e:	8e 2d       	mov	r24, r14
     290:	f1 d0       	rcall	.+482    	; 0x474 <UWriteData>
	UWriteData(x2);
     292:	8d 2d       	mov	r24, r13
     294:	ef d0       	rcall	.+478    	; 0x474 <UWriteData>
	UWriteData(y2);
     296:	80 2f       	mov	r24, r16
     298:	ed d0       	rcall	.+474    	; 0x474 <UWriteData>
}
     29a:	1f 91       	pop	r17
     29c:	0f 91       	pop	r16
     29e:	ff 90       	pop	r15
     2a0:	ef 90       	pop	r14
     2a2:	df 90       	pop	r13
     2a4:	08 95       	ret

000002a6 <Continue_Line_To>:

void Continue_Line_To(unsigned char x, unsigned char y)
{	
     2a6:	0f 93       	push	r16
     2a8:	1f 93       	push	r17
     2aa:	08 2f       	mov	r16, r24
     2ac:	16 2f       	mov	r17, r22
	Command_Display(Continue_Line);
     2ae:	85 e6       	ldi	r24, 0x65	; 101
     2b0:	75 df       	rcall	.-278    	; 0x19c <Command_Display>
	UWriteData(x);
     2b2:	80 2f       	mov	r24, r16
     2b4:	df d0       	rcall	.+446    	; 0x474 <UWriteData>
	UWriteData(y);
     2b6:	81 2f       	mov	r24, r17
     2b8:	dd d0       	rcall	.+442    	; 0x474 <UWriteData>

}
     2ba:	1f 91       	pop	r17
     2bc:	0f 91       	pop	r16
     2be:	08 95       	ret

000002c0 <Draw_Line_At>:

void Draw_Line_At(unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2)
{	
     2c0:	ef 92       	push	r14
     2c2:	ff 92       	push	r15
     2c4:	0f 93       	push	r16
     2c6:	1f 93       	push	r17
     2c8:	e8 2e       	mov	r14, r24
     2ca:	f6 2e       	mov	r15, r22
     2cc:	04 2f       	mov	r16, r20
     2ce:	12 2f       	mov	r17, r18
	Command_Display(Drawing_Line);
     2d0:	8c e6       	ldi	r24, 0x6C	; 108
     2d2:	64 df       	rcall	.-312    	; 0x19c <Command_Display>
	UWriteData(x1);
     2d4:	8e 2d       	mov	r24, r14
     2d6:	ce d0       	rcall	.+412    	; 0x474 <UWriteData>
	UWriteData(y1);
     2d8:	8f 2d       	mov	r24, r15
     2da:	cc d0       	rcall	.+408    	; 0x474 <UWriteData>
	UWriteData(x2);
     2dc:	80 2f       	mov	r24, r16
     2de:	ca d0       	rcall	.+404    	; 0x474 <UWriteData>
	UWriteData(y2);
     2e0:	81 2f       	mov	r24, r17
     2e2:	c8 d0       	rcall	.+400    	; 0x474 <UWriteData>
}
     2e4:	1f 91       	pop	r17
     2e6:	0f 91       	pop	r16
     2e8:	ff 90       	pop	r15
     2ea:	ef 90       	pop	r14
     2ec:	08 95       	ret

000002ee <Draw_Pixel_At>:

void Draw_Pixel_At(unsigned char x, unsigned char y)
{	
     2ee:	0f 93       	push	r16
     2f0:	1f 93       	push	r17
     2f2:	08 2f       	mov	r16, r24
     2f4:	16 2f       	mov	r17, r22
	Command_Display(Draw_Pixel);
     2f6:	80 e7       	ldi	r24, 0x70	; 112
     2f8:	51 df       	rcall	.-350    	; 0x19c <Command_Display>
	UWriteData(x);
     2fa:	80 2f       	mov	r24, r16
     2fc:	bb d0       	rcall	.+374    	; 0x474 <UWriteData>
	UWriteData(y);
     2fe:	81 2f       	mov	r24, r17
     300:	b9 d0       	rcall	.+370    	; 0x474 <UWriteData>
}
     302:	1f 91       	pop	r17
     304:	0f 91       	pop	r16
     306:	08 95       	ret

00000308 <Choose_Color>:

void Choose_Color(unsigned char color)
{
     308:	1f 93       	push	r17
     30a:	18 2f       	mov	r17, r24
	Command_Display(Drawing_Color);
     30c:	83 e6       	ldi	r24, 0x63	; 99
     30e:	46 df       	rcall	.-372    	; 0x19c <Command_Display>
	UWriteData(color);
     310:	81 2f       	mov	r24, r17
     312:	b0 d0       	rcall	.+352    	; 0x474 <UWriteData>
}
     314:	1f 91       	pop	r17
     316:	08 95       	ret

00000318 <Choose_Font>:

void Choose_Font(unsigned char font_id)
{
     318:	1f 93       	push	r17
     31a:	18 2f       	mov	r17, r24
	Command_Display(Set_Font);
     31c:	81 e3       	ldi	r24, 0x31	; 49
     31e:	3e df       	rcall	.-388    	; 0x19c <Command_Display>
	UWriteData(font_id);
     320:	81 2f       	mov	r24, r17
     322:	a8 d0       	rcall	.+336    	; 0x474 <UWriteData>
} 
     324:	1f 91       	pop	r17
     326:	08 95       	ret

00000328 <Cursor_Pos>:

void Cursor_Pos(unsigned char col, unsigned char row)
{	
     328:	0f 93       	push	r16
     32a:	1f 93       	push	r17
     32c:	08 2f       	mov	r16, r24
     32e:	16 2f       	mov	r17, r22
	Command_Display(Cursor);
     330:	87 e4       	ldi	r24, 0x47	; 71
     332:	34 df       	rcall	.-408    	; 0x19c <Command_Display>
	UWriteData(col);
     334:	80 2f       	mov	r24, r16
     336:	9e d0       	rcall	.+316    	; 0x474 <UWriteData>
	UWriteData(row);
     338:	81 2f       	mov	r24, r17
     33a:	9c d0       	rcall	.+312    	; 0x474 <UWriteData>
}
     33c:	1f 91       	pop	r17
     33e:	0f 91       	pop	r16
     340:	08 95       	ret

00000342 <Cursor_Coordinate>:

void Cursor_Coordinate(unsigned char horiz, unsigned char vert)
{	
     342:	0f 93       	push	r16
     344:	1f 93       	push	r17
     346:	08 2f       	mov	r16, r24
     348:	16 2f       	mov	r17, r22
	Command_Display(Cursor_Cord);
     34a:	89 e7       	ldi	r24, 0x79	; 121
     34c:	27 df       	rcall	.-434    	; 0x19c <Command_Display>
	UWriteData(horiz);
     34e:	80 2f       	mov	r24, r16
     350:	91 d0       	rcall	.+290    	; 0x474 <UWriteData>
	UWriteData(vert);
     352:	81 2f       	mov	r24, r17
     354:	8f d0       	rcall	.+286    	; 0x474 <UWriteData>
     356:	1f 91       	pop	r17
     358:	0f 91       	pop	r16
     35a:	08 95       	ret

0000035c <USARTInit>:


void USARTInit(uint16_t ubrrvalue)
{
	//Setup q
	UQFront=UQEnd=-1;
     35c:	2f ef       	ldi	r18, 0xFF	; 255
     35e:	20 93 91 00 	sts	0x0091, r18
     362:	20 91 91 00 	lds	r18, 0x0091
     366:	20 93 90 00 	sts	0x0090, r18

	//Set Baud rate
	UBRRH=(unsigned char)(ubrrvalue>>8);
     36a:	90 bd       	out	0x20, r25	; 32
	UBRRL=(unsigned char)ubrrvalue;
     36c:	89 b9       	out	0x09, r24	; 9
	1 StopBit
	char size 8

	*/

	UCSRC=(1<<URSEL)|(3<<UCSZ0);
     36e:	86 e8       	ldi	r24, 0x86	; 134
     370:	80 bd       	out	0x20, r24	; 32

	Enable The recevier and transmitter

	*/

	UCSRB=(1<<RXCIE)|(1<<TXEN);
     372:	88 e8       	ldi	r24, 0x88	; 136
     374:	8a b9       	out	0x0a, r24	; 10
	sei();
     376:	78 94       	sei

}
     378:	08 95       	ret

0000037a <__vector_11>:

//The USART ISR
ISR(USART_RXC_VECT)
{
     37a:	1f 92       	push	r1
     37c:	0f 92       	push	r0
     37e:	0f b6       	in	r0, 0x3f	; 63
     380:	0f 92       	push	r0
     382:	11 24       	eor	r1, r1
     384:	2f 93       	push	r18
     386:	3f 93       	push	r19
     388:	4f 93       	push	r20
     38a:	8f 93       	push	r24
     38c:	9f 93       	push	r25
     38e:	ef 93       	push	r30
     390:	ff 93       	push	r31
	//Read the data
	uint8_t data=UDR;
     392:	4c b1       	in	r20, 0x0c	; 12

	//Now add it to q

	if(((UQEnd==RECEIVE_BUFF_SIZE-1) && UQFront==0) || ((UQEnd+1)==UQFront))
     394:	80 91 91 00 	lds	r24, 0x0091
     398:	8f 33       	cpi	r24, 0x3F	; 63
     39a:	21 f4       	brne	.+8      	; 0x3a4 <__vector_11+0x2a>
     39c:	80 91 90 00 	lds	r24, 0x0090
     3a0:	88 23       	and	r24, r24
     3a2:	79 f0       	breq	.+30     	; 0x3c2 <__vector_11+0x48>
     3a4:	20 91 91 00 	lds	r18, 0x0091
     3a8:	80 91 90 00 	lds	r24, 0x0090
     3ac:	33 27       	eor	r19, r19
     3ae:	27 fd       	sbrc	r18, 7
     3b0:	30 95       	com	r19
     3b2:	2f 5f       	subi	r18, 0xFF	; 255
     3b4:	3f 4f       	sbci	r19, 0xFF	; 255
     3b6:	99 27       	eor	r25, r25
     3b8:	87 fd       	sbrc	r24, 7
     3ba:	90 95       	com	r25
     3bc:	28 17       	cp	r18, r24
     3be:	39 07       	cpc	r19, r25
     3c0:	59 f4       	brne	.+22     	; 0x3d8 <__vector_11+0x5e>
	{
		//Q Full
		UQFront++;
     3c2:	80 91 90 00 	lds	r24, 0x0090
     3c6:	8f 5f       	subi	r24, 0xFF	; 255
     3c8:	80 93 90 00 	sts	0x0090, r24
		if(UQFront==RECEIVE_BUFF_SIZE) UQFront=0;
     3cc:	80 91 90 00 	lds	r24, 0x0090
     3d0:	80 34       	cpi	r24, 0x40	; 64
     3d2:	11 f4       	brne	.+4      	; 0x3d8 <__vector_11+0x5e>
     3d4:	10 92 90 00 	sts	0x0090, r1
	}
	

	if(UQEnd==RECEIVE_BUFF_SIZE-1)
     3d8:	80 91 91 00 	lds	r24, 0x0091
     3dc:	8f 33       	cpi	r24, 0x3F	; 63
     3de:	19 f4       	brne	.+6      	; 0x3e6 <__vector_11+0x6c>
		UQEnd=0;
     3e0:	10 92 91 00 	sts	0x0091, r1
     3e4:	05 c0       	rjmp	.+10     	; 0x3f0 <__vector_11+0x76>
	else
		UQEnd++;
     3e6:	80 91 91 00 	lds	r24, 0x0091
     3ea:	8f 5f       	subi	r24, 0xFF	; 255
     3ec:	80 93 91 00 	sts	0x0091, r24


	URBuff[UQEnd]=data;
     3f0:	e0 91 91 00 	lds	r30, 0x0091
     3f4:	ff 27       	eor	r31, r31
     3f6:	e7 fd       	sbrc	r30, 7
     3f8:	f0 95       	com	r31
     3fa:	ee 56       	subi	r30, 0x6E	; 110
     3fc:	ff 4f       	sbci	r31, 0xFF	; 255
     3fe:	40 83       	st	Z, r20

	if(UQFront==-1) UQFront=0;
     400:	80 91 90 00 	lds	r24, 0x0090
     404:	8f 3f       	cpi	r24, 0xFF	; 255
     406:	11 f4       	brne	.+4      	; 0x40c <__vector_11+0x92>
     408:	10 92 90 00 	sts	0x0090, r1

}
     40c:	ff 91       	pop	r31
     40e:	ef 91       	pop	r30
     410:	9f 91       	pop	r25
     412:	8f 91       	pop	r24
     414:	4f 91       	pop	r20
     416:	3f 91       	pop	r19
     418:	2f 91       	pop	r18
     41a:	0f 90       	pop	r0
     41c:	0f be       	out	0x3f, r0	; 63
     41e:	0f 90       	pop	r0
     420:	1f 90       	pop	r1
     422:	18 95       	reti

00000424 <UReadData>:
uint8_t UReadData()
{
	uint8_t data;
	
	//Check if q is empty
	if(UQFront==-1)
     424:	80 91 90 00 	lds	r24, 0x0090
     428:	8f 3f       	cpi	r24, 0xFF	; 255
     42a:	11 f1       	breq	.+68     	; 0x470 <__stack+0x11>
		return 0;
	
	data=URBuff[UQFront];
     42c:	e0 91 90 00 	lds	r30, 0x0090
     430:	ff 27       	eor	r31, r31
     432:	e7 fd       	sbrc	r30, 7
     434:	f0 95       	com	r31
     436:	ee 56       	subi	r30, 0x6E	; 110
     438:	ff 4f       	sbci	r31, 0xFF	; 255
     43a:	80 81       	ld	r24, Z
	
	if(UQFront==UQEnd)
     43c:	20 91 90 00 	lds	r18, 0x0090
     440:	90 91 91 00 	lds	r25, 0x0091
     444:	29 17       	cp	r18, r25
     446:	41 f4       	brne	.+16     	; 0x458 <UReadData+0x34>
	{
	//If single data is left
	//So empty q
	UQFront=UQEnd=-1;
     448:	9f ef       	ldi	r25, 0xFF	; 255
     44a:	90 93 91 00 	sts	0x0091, r25
     44e:	90 91 91 00 	lds	r25, 0x0091
     452:	90 93 90 00 	sts	0x0090, r25
     456:	08 95       	ret
	}
	else
	{
		UQFront++;
     458:	90 91 90 00 	lds	r25, 0x0090
     45c:	9f 5f       	subi	r25, 0xFF	; 255
     45e:	90 93 90 00 	sts	0x0090, r25

		if(UQFront==RECEIVE_BUFF_SIZE)
     462:	90 91 90 00 	lds	r25, 0x0090
     466:	90 34       	cpi	r25, 0x40	; 64
     468:	21 f4       	brne	.+8      	; 0x472 <__stack+0x13>
		UQFront=0;
     46a:	10 92 90 00 	sts	0x0090, r1
     46e:	08 95       	ret
{
	uint8_t data;
	
	//Check if q is empty
	if(UQFront==-1)
		return 0;
     470:	80 e0       	ldi	r24, 0x00	; 0
		if(UQFront==RECEIVE_BUFF_SIZE)
		UQFront=0;
	}

	return data;
}
     472:	08 95       	ret

00000474 <UWriteData>:

void UWriteData(uint8_t data)
{
	//Wait For Transmitter to become ready
	while(!(UCSRA & (1<<UDRE)));
     474:	5d 9b       	sbis	0x0b, 5	; 11
     476:	fe cf       	rjmp	.-4      	; 0x474 <UWriteData>

	//Now write
	UDR=data;
     478:	8c b9       	out	0x0c, r24	; 12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     47a:	89 ef       	ldi	r24, 0xF9	; 249
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	01 97       	sbiw	r24, 0x01	; 1
     480:	f1 f7       	brne	.-4      	; 0x47e <UWriteData+0xa>
     482:	00 c0       	rjmp	.+0      	; 0x484 <UWriteData+0x10>
     484:	00 00       	nop
	_delay_ms(1);
}
     486:	08 95       	ret

00000488 <UDataAvailable>:

uint8_t UDataAvailable()
{
	if(UQFront==-1) return 0;
     488:	80 91 90 00 	lds	r24, 0x0090
     48c:	8f 3f       	cpi	r24, 0xFF	; 255
     48e:	d1 f0       	breq	.+52     	; 0x4c4 <UDataAvailable+0x3c>
	if(UQFront<UQEnd)
     490:	90 91 90 00 	lds	r25, 0x0090
     494:	80 91 91 00 	lds	r24, 0x0091
     498:	98 17       	cp	r25, r24
     49a:	3c f4       	brge	.+14     	; 0x4aa <UDataAvailable+0x22>
		return(UQEnd-UQFront+1);
     49c:	80 91 91 00 	lds	r24, 0x0091
     4a0:	90 91 90 00 	lds	r25, 0x0090
     4a4:	8f 5f       	subi	r24, 0xFF	; 255
     4a6:	89 1b       	sub	r24, r25
     4a8:	08 95       	ret
	else if(UQFront>UQEnd)
     4aa:	90 91 90 00 	lds	r25, 0x0090
     4ae:	80 91 91 00 	lds	r24, 0x0091
     4b2:	89 17       	cp	r24, r25
     4b4:	4c f4       	brge	.+18     	; 0x4c8 <UDataAvailable+0x40>
		return (RECEIVE_BUFF_SIZE-UQFront+UQEnd+1);
     4b6:	80 91 91 00 	lds	r24, 0x0091
     4ba:	90 91 90 00 	lds	r25, 0x0090
     4be:	8f 5b       	subi	r24, 0xBF	; 191
     4c0:	89 1b       	sub	r24, r25
     4c2:	08 95       	ret
	_delay_ms(1);
}

uint8_t UDataAvailable()
{
	if(UQFront==-1) return 0;
     4c4:	80 e0       	ldi	r24, 0x00	; 0
     4c6:	08 95       	ret
	if(UQFront<UQEnd)
		return(UQEnd-UQFront+1);
	else if(UQFront>UQEnd)
		return (RECEIVE_BUFF_SIZE-UQFront+UQEnd+1);
	else
		return 1;
     4c8:	81 e0       	ldi	r24, 0x01	; 1
}
     4ca:	08 95       	ret

000004cc <UWriteString>:

void UWriteString(uint8_t *str)
{
     4cc:	cf 93       	push	r28
     4ce:	df 93       	push	r29
     4d0:	ec 01       	movw	r28, r24
	while((*str)!='\0')
     4d2:	88 81       	ld	r24, Y
     4d4:	88 23       	and	r24, r24
     4d6:	29 f0       	breq	.+10     	; 0x4e2 <UWriteString+0x16>
		return (RECEIVE_BUFF_SIZE-UQFront+UQEnd+1);
	else
		return 1;
}

void UWriteString(uint8_t *str)
     4d8:	21 96       	adiw	r28, 0x01	; 1
{
	while((*str)!='\0')
	{
		UWriteData(*str);
     4da:	cc df       	rcall	.-104    	; 0x474 <UWriteData>
		return 1;
}

void UWriteString(uint8_t *str)
{
	while((*str)!='\0')
     4dc:	89 91       	ld	r24, Y+
     4de:	88 23       	and	r24, r24
     4e0:	e1 f7       	brne	.-8      	; 0x4da <UWriteString+0xe>
		UWriteData(*str);
		str++;
	}

	//UWriteData('\0');
}
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	08 95       	ret

000004e8 <usart_putchar_printf>:

// this function is called by printf as a stream handler
int usart_putchar_printf(char var, FILE *stream) {
     4e8:	1f 93       	push	r17
     4ea:	18 2f       	mov	r17, r24
	// translate \n to \r for br@y++ terminal
	if (var == '\n') UWriteData('\r');
     4ec:	8a 30       	cpi	r24, 0x0A	; 10
     4ee:	11 f4       	brne	.+4      	; 0x4f4 <usart_putchar_printf+0xc>
     4f0:	8d e0       	ldi	r24, 0x0D	; 13
     4f2:	c0 df       	rcall	.-128    	; 0x474 <UWriteData>
	UWriteData(var);
     4f4:	81 2f       	mov	r24, r17
     4f6:	be df       	rcall	.-132    	; 0x474 <UWriteData>
	return 0;
}
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	1f 91       	pop	r17
     4fe:	08 95       	ret

00000500 <DisplayInit>:
		
}

void DisplayInit(void) // Power on variable initialization 
{
	Change_Baudrate(51); // 19200
     500:	83 e3       	ldi	r24, 0x33	; 51
     502:	54 de       	rcall	.-856    	; 0x1ac <Change_Baudrate>
	Command_Display(Clear_Screen);
     504:	88 e5       	ldi	r24, 0x58	; 88
     506:	4a de       	rcall	.-876    	; 0x19c <Command_Display>
	Command_Display(Go_Home);
     508:	88 e4       	ldi	r24, 0x48	; 72
     50a:	48 de       	rcall	.-880    	; 0x19c <Command_Display>
	//Change_Baudrate(83); // 1200	
}
     50c:	08 95       	ret

0000050e <i2cSetBitrate>:
	// enable TWI (two-wire interface)
	sbi(TWCR, TWEN);	// Enable TWI
}

void i2cSetBitrate(unsigned short bitrateKHz)
{
     50e:	bc 01       	movw	r22, r24
	unsigned char bitrate_div;
	// set i2c bitrate
	// SCL freq = F_CPU/(16+2*TWBR))
	cbi(TWSR, TWPS0);
     510:	08 98       	cbi	0x01, 0	; 1
	cbi(TWSR, TWPS1);
     512:	09 98       	cbi	0x01, 1	; 1
	
	//calculate bitrate division	
	bitrate_div = ((F_CPU/4000l)/bitrateKHz);
     514:	80 ed       	ldi	r24, 0xD0	; 208
     516:	97 e0       	ldi	r25, 0x07	; 7
     518:	ce d7       	rcall	.+3996   	; 0x14b6 <__udivmodhi4>
	if(bitrate_div >= 16)
     51a:	60 31       	cpi	r22, 0x10	; 16
     51c:	40 f0       	brcs	.+16     	; 0x52e <i2cSetBitrate+0x20>
		bitrate_div = (bitrate_div-16)/2;
     51e:	70 e0       	ldi	r23, 0x00	; 0
     520:	60 51       	subi	r22, 0x10	; 16
     522:	70 40       	sbci	r23, 0x00	; 0
     524:	12 f4       	brpl	.+4      	; 0x52a <i2cSetBitrate+0x1c>
     526:	6f 5f       	subi	r22, 0xFF	; 255
     528:	7f 4f       	sbci	r23, 0xFF	; 255
     52a:	75 95       	asr	r23
     52c:	67 95       	ror	r22
	outb(TWBR, bitrate_div);
     52e:	60 b9       	out	0x00, r22	; 0
}
     530:	08 95       	ret

00000532 <i2cInit>:
 *********************/

void i2cInit(void)
{
	// set i2c bit rate to 40KHz
	i2cSetBitrate(100);
     532:	84 e6       	ldi	r24, 0x64	; 100
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	eb df       	rcall	.-42     	; 0x50e <i2cSetBitrate>
	// enable TWI (two-wire interface)
	sbi(TWCR, TWEN);	// Enable TWI
     538:	86 b7       	in	r24, 0x36	; 54
     53a:	84 60       	ori	r24, 0x04	; 4
     53c:	86 bf       	out	0x36, r24	; 54
}
     53e:	08 95       	ret

00000540 <i2cSendStart>:
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     540:	a4 9a       	sbi	0x14, 4	; 20
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     542:	84 ea       	ldi	r24, 0xA4	; 164
     544:	86 bf       	out	0x36, r24	; 54
}
     546:	08 95       	ret

00000548 <i2cSendStop>:

void i2cSendStop(void)
{
	// transmit stop condition
        TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     548:	84 e9       	ldi	r24, 0x94	; 148
     54a:	86 bf       	out	0x36, r24	; 54
}
     54c:	08 95       	ret

0000054e <i2cWaitForComplete>:
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     54e:	06 b6       	in	r0, 0x36	; 54
     550:	07 fc       	sbrc	r0, 7
     552:	07 c0       	rjmp	.+14     	; 0x562 <i2cWaitForComplete+0x14>
     554:	8a e5       	ldi	r24, 0x5A	; 90
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	06 b6       	in	r0, 0x36	; 54
     55a:	07 fc       	sbrc	r0, 7
     55c:	02 c0       	rjmp	.+4      	; 0x562 <i2cWaitForComplete+0x14>
     55e:	01 97       	sbiw	r24, 0x01	; 1
     560:	d9 f7       	brne	.-10     	; 0x558 <i2cWaitForComplete+0xa>
     562:	08 95       	ret

00000564 <i2cReceiveByte>:
}

void i2cReceiveByte(unsigned char ackFlag)
{
	// begin receive over i2c
	if( ackFlag )
     564:	88 23       	and	r24, r24
     566:	29 f0       	breq	.+10     	; 0x572 <i2cReceiveByte+0xe>
	{
		// ackFlag = TRUE: ACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
     568:	86 b7       	in	r24, 0x36	; 54
     56a:	8f 70       	andi	r24, 0x0F	; 15
     56c:	80 6c       	ori	r24, 0xC0	; 192
     56e:	86 bf       	out	0x36, r24	; 54
     570:	08 95       	ret
	}
	else
	{
		// ackFlag = FALSE: NACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
     572:	86 b7       	in	r24, 0x36	; 54
     574:	8f 70       	andi	r24, 0x0F	; 15
     576:	80 68       	ori	r24, 0x80	; 128
     578:	86 bf       	out	0x36, r24	; 54
     57a:	08 95       	ret

0000057c <i2cGetReceivedByte>:
}

unsigned char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     57c:	83 b1       	in	r24, 0x03	; 3
}
     57e:	08 95       	ret

00000580 <i2cGetStatus>:

unsigned char i2cGetStatus(void)
{
	// retieve current i2c status from i2c TWSR
	return( inb(TWSR) );
     580:	81 b1       	in	r24, 0x01	; 1
}
     582:	08 95       	ret

00000584 <delay_ms>:

void delay_ms(uint16_t x)
{
  uint8_t y, z;
  for ( ; x > 0 ; x--){
     584:	00 97       	sbiw	r24, 0x00	; 0
     586:	59 f4       	brne	.+22     	; 0x59e <delay_ms+0x1a>
     588:	08 95       	ret
	...
    for ( y = 0 ; y < 90 ; y++){
      for ( z = 0 ; z < 6 ; z++){
        asm volatile ("nop");
     596:	21 50       	subi	r18, 0x01	; 1

void delay_ms(uint16_t x)
{
  uint8_t y, z;
  for ( ; x > 0 ; x--){
    for ( y = 0 ; y < 90 ; y++){
     598:	c1 f7       	brne	.-16     	; 0x58a <delay_ms+0x6>
}

void delay_ms(uint16_t x)
{
  uint8_t y, z;
  for ( ; x > 0 ; x--){
     59a:	01 97       	sbiw	r24, 0x01	; 1
     59c:	11 f0       	breq	.+4      	; 0x5a2 <delay_ms+0x1e>
	// retieve current i2c status from i2c TWSR
	return( inb(TWSR) );
}

void delay_ms(uint16_t x)
{
     59e:	2a e5       	ldi	r18, 0x5A	; 90
     5a0:	f4 cf       	rjmp	.-24     	; 0x58a <delay_ms+0x6>
     5a2:	08 95       	ret

000005a4 <i2cSendByte>:
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
}

void i2cSendByte(unsigned char data)
{
     5a4:	1f 93       	push	r17
     5a6:	18 2f       	mov	r17, r24
	delay_ms(1);
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	eb df       	rcall	.-42     	; 0x584 <delay_ms>
	//printf("sending 0x%x\n", data);
	WRITE_sda();
     5ae:	a4 9a       	sbi	0x14, 4	; 20
	// save data to the TWDR
	TWDR = data;
     5b0:	13 b9       	out	0x03, r17	; 3
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
     5b2:	84 e8       	ldi	r24, 0x84	; 132
     5b4:	86 bf       	out	0x36, r24	; 54
}
     5b6:	1f 91       	pop	r17
     5b8:	08 95       	ret

000005ba <main>:
Main
********************************************************************************/


int main(void)
{
     5ba:	2f 92       	push	r2
     5bc:	3f 92       	push	r3
     5be:	4f 92       	push	r4
     5c0:	5f 92       	push	r5
     5c2:	6f 92       	push	r6
     5c4:	7f 92       	push	r7
     5c6:	8f 92       	push	r8
     5c8:	9f 92       	push	r9
     5ca:	af 92       	push	r10
     5cc:	bf 92       	push	r11
     5ce:	cf 92       	push	r12
     5d0:	df 92       	push	r13
     5d2:	ef 92       	push	r14
     5d4:	ff 92       	push	r15
     5d6:	0f 93       	push	r16
     5d8:	1f 93       	push	r17
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
	stdout = &mystdout;
     5de:	81 e8       	ldi	r24, 0x81	; 129
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	90 93 f3 00 	sts	0x00F3, r25
     5e6:	80 93 f2 00 	sts	0x00F2, r24
	USARTInit(UBRRVAL);
     5ea:	89 e1       	ldi	r24, 0x19	; 25
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	b6 de       	rcall	.-660    	; 0x35c <USARTInit>
	DisplayInit();
     5f0:	87 df       	rcall	.-242    	; 0x500 <DisplayInit>
	Command_Display(Clear_Screen);
     5f2:	88 e5       	ldi	r24, 0x58	; 88
     5f4:	d3 dd       	rcall	.-1114   	; 0x19c <Command_Display>
	Command_Display(Go_Home);
     5f6:	88 e4       	ldi	r24, 0x48	; 72
     5f8:	d1 dd       	rcall	.-1118   	; 0x19c <Command_Display>
	printf("I2C");
     5fa:	00 d0       	rcall	.+0      	; 0x5fc <main+0x42>
     5fc:	80 e6       	ldi	r24, 0x60	; 96
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	ad b7       	in	r26, 0x3d	; 61
     602:	be b7       	in	r27, 0x3e	; 62
     604:	12 96       	adiw	r26, 0x02	; 2
     606:	9c 93       	st	X, r25
     608:	8e 93       	st	-X, r24
     60a:	11 97       	sbiw	r26, 0x01	; 1
     60c:	b9 d8       	rcall	.-3726   	; 0xfffff780 <__eeprom_end+0xff7ef780>
	Set_Cursor_Position(1,2);
     60e:	0f 90       	pop	r0
     610:	0f 90       	pop	r0
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	62 e0       	ldi	r22, 0x02	; 2
     616:	d4 dd       	rcall	.-1112   	; 0x1c0 <Set_Cursor_Position>
	printf("MMA8452");
     618:	00 d0       	rcall	.+0      	; 0x61a <main+0x60>
     61a:	84 e6       	ldi	r24, 0x64	; 100
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	ed b7       	in	r30, 0x3d	; 61
     620:	fe b7       	in	r31, 0x3e	; 62
     622:	92 83       	std	Z+2, r25	; 0x02
     624:	81 83       	std	Z+1, r24	; 0x01
     626:	ac d8       	rcall	.-3752   	; 0xfffff780 <__eeprom_end+0xff7ef780>
     628:	8f ef       	ldi	r24, 0xFF	; 255
     62a:	93 ed       	ldi	r25, 0xD3	; 211
     62c:	a0 e3       	ldi	r26, 0x30	; 48
     62e:	81 50       	subi	r24, 0x01	; 1
     630:	90 40       	sbci	r25, 0x00	; 0
     632:	a0 40       	sbci	r26, 0x00	; 0
     634:	e1 f7       	brne	.-8      	; 0x62e <main+0x74>
     636:	00 c0       	rjmp	.+0      	; 0x638 <main+0x7e>
     638:	00 00       	nop
	_delay_ms(2000);
	set_output(DDRB, LED);
     63a:	b9 9a       	sbi	0x17, 1	; 23
	void setup();
	MMA8452Active();
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
     640:	3e d1       	rcall	.+636    	; 0x8be <MMA8452Active>
		//static uint8_t source;

  // If int1 goes high, all data registers have new data
  //if (digitalRead(int1Pin)==1)  // Interrupt pin, should probably attach to interrupt function
 // {
		readAccelData(accelCount);  // Read the x/y/z adc values
     642:	0f 2e       	mov	r0, r31
     644:	f2 ed       	ldi	r31, 0xD2	; 210
     646:	af 2e       	mov	r10, r31
     648:	f0 e0       	ldi	r31, 0x00	; 0
     64a:	bf 2e       	mov	r11, r31
     64c:	f0 2d       	mov	r31, r0

		// Now we'll calculate the accleration value into actual g's
		Command_Display(Clear_Screen);
		Command_Display(Go_Home);
     64e:	0f 2e       	mov	r0, r31
     650:	f8 ed       	ldi	r31, 0xD8	; 216
     652:	6f 2e       	mov	r6, r31
     654:	f0 e0       	ldi	r31, 0x00	; 0
     656:	7f 2e       	mov	r7, r31
     658:	f0 2d       	mov	r31, r0
     65a:	0f 2e       	mov	r0, r31
     65c:	f4 ee       	ldi	r31, 0xE4	; 228
     65e:	8f 2e       	mov	r8, r31
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	9f 2e       	mov	r9, r31
     664:	f0 2d       	mov	r31, r0
/********************************************************************************
Main
********************************************************************************/


int main(void)
     666:	0f 2e       	mov	r0, r31
     668:	f6 e0       	ldi	r31, 0x06	; 6
     66a:	cf 2e       	mov	r12, r31
     66c:	dd 24       	eor	r13, r13
     66e:	f0 2d       	mov	r31, r0
     670:	ca 0c       	add	r12, r10
     672:	db 1c       	adc	r13, r11
		}			
			//switch (i)
			//{
			//case 0 : 
				//printf("X:%.2f ", accelG[0]);
				printf("X:%.2f\n", accelD[0]);
     674:	0f 2e       	mov	r0, r31
     676:	fc e6       	ldi	r31, 0x6C	; 108
     678:	4f 2e       	mov	r4, r31
     67a:	f0 e0       	ldi	r31, 0x00	; 0
     67c:	5f 2e       	mov	r5, r31
     67e:	f0 2d       	mov	r31, r0
				//break;
			//case 1 : 
				//printf("Y:%.2f\n", accelG[1]);
			//	break;
			//case 2 : 
				printf("Z:%.2f", accelG[2]);
     680:	0f 2e       	mov	r0, r31
     682:	f4 e7       	ldi	r31, 0x74	; 116
     684:	2f 2e       	mov	r2, r31
     686:	f0 e0       	ldi	r31, 0x00	; 0
     688:	3f 2e       	mov	r3, r31
     68a:	f0 2d       	mov	r31, r0
		//static uint8_t source;

  // If int1 goes high, all data registers have new data
  //if (digitalRead(int1Pin)==1)  // Interrupt pin, should probably attach to interrupt function
 // {
		readAccelData(accelCount);  // Read the x/y/z adc values
     68c:	c5 01       	movw	r24, r10
     68e:	b2 d0       	rcall	.+356    	; 0x7f4 <readAccelData>

		// Now we'll calculate the accleration value into actual g's
		Command_Display(Clear_Screen);
     690:	88 e5       	ldi	r24, 0x58	; 88
     692:	84 dd       	rcall	.-1272   	; 0x19c <Command_Display>
		Command_Display(Go_Home);
     694:	88 e4       	ldi	r24, 0x48	; 72
     696:	82 dd       	rcall	.-1276   	; 0x19c <Command_Display>
     698:	e5 01       	movw	r28, r10
     69a:	83 01       	movw	r16, r6
     69c:	74 01       	movw	r14, r8
		//printf("Buns = %.2f", buns);
		//_delay_ms(2000);
		for (int i=0; i<3; i++)
		{
			accelG[i] = (float)accelCount[i]/((1<<12)/(2*SCALE));  // get actual g value, this depends on scale being set
     69e:	69 91       	ld	r22, Y+
     6a0:	79 91       	ld	r23, Y+
     6a2:	88 27       	eor	r24, r24
     6a4:	77 fd       	sbrc	r23, 7
     6a6:	80 95       	com	r24
     6a8:	98 2f       	mov	r25, r24
     6aa:	09 d5       	rcall	.+2578   	; 0x10be <__floatsisf>
     6ac:	20 e0       	ldi	r18, 0x00	; 0
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	40 e8       	ldi	r20, 0x80	; 128
     6b2:	5a e3       	ldi	r21, 0x3A	; 58
     6b4:	a1 d5       	rcall	.+2882   	; 0x11f8 <__mulsf3>
     6b6:	26 2f       	mov	r18, r22
     6b8:	37 2f       	mov	r19, r23
     6ba:	48 2f       	mov	r20, r24
     6bc:	59 2f       	mov	r21, r25
     6be:	d8 01       	movw	r26, r16
     6c0:	2d 93       	st	X+, r18
     6c2:	3d 93       	st	X+, r19
     6c4:	4d 93       	st	X+, r20
     6c6:	5d 93       	st	X+, r21
     6c8:	8d 01       	movw	r16, r26
			accelD[i] = asin(accelG[i])*57.2957795;
     6ca:	e0 d4       	rcall	.+2496   	; 0x108c <asin>
     6cc:	21 ee       	ldi	r18, 0xE1	; 225
     6ce:	3e e2       	ldi	r19, 0x2E	; 46
     6d0:	45 e6       	ldi	r20, 0x65	; 101
     6d2:	52 e4       	ldi	r21, 0x42	; 66
     6d4:	91 d5       	rcall	.+2850   	; 0x11f8 <__mulsf3>
     6d6:	f7 01       	movw	r30, r14
     6d8:	61 93       	st	Z+, r22
     6da:	71 93       	st	Z+, r23
     6dc:	81 93       	st	Z+, r24
     6de:	91 93       	st	Z+, r25
     6e0:	7f 01       	movw	r14, r30
		// Now we'll calculate the accleration value into actual g's
		Command_Display(Clear_Screen);
		Command_Display(Go_Home);
		//printf("Buns = %.2f", buns);
		//_delay_ms(2000);
		for (int i=0; i<3; i++)
     6e2:	cc 15       	cp	r28, r12
     6e4:	dd 05       	cpc	r29, r13
     6e6:	d9 f6       	brne	.-74     	; 0x69e <main+0xe4>
		}			
			//switch (i)
			//{
			//case 0 : 
				//printf("X:%.2f ", accelG[0]);
				printf("X:%.2f\n", accelD[0]);
     6e8:	00 d0       	rcall	.+0      	; 0x6ea <main+0x130>
     6ea:	00 d0       	rcall	.+0      	; 0x6ec <main+0x132>
     6ec:	00 d0       	rcall	.+0      	; 0x6ee <main+0x134>
     6ee:	ad b7       	in	r26, 0x3d	; 61
     6f0:	be b7       	in	r27, 0x3e	; 62
     6f2:	12 96       	adiw	r26, 0x02	; 2
     6f4:	5c 92       	st	X, r5
     6f6:	4e 92       	st	-X, r4
     6f8:	11 97       	sbiw	r26, 0x01	; 1
     6fa:	f4 01       	movw	r30, r8
     6fc:	80 81       	ld	r24, Z
     6fe:	91 81       	ldd	r25, Z+1	; 0x01
     700:	a2 81       	ldd	r26, Z+2	; 0x02
     702:	b3 81       	ldd	r27, Z+3	; 0x03
     704:	ed b7       	in	r30, 0x3d	; 61
     706:	fe b7       	in	r31, 0x3e	; 62
     708:	83 83       	std	Z+3, r24	; 0x03
     70a:	94 83       	std	Z+4, r25	; 0x04
     70c:	a5 83       	std	Z+5, r26	; 0x05
     70e:	b6 83       	std	Z+6, r27	; 0x06
     710:	37 d8       	rcall	.-3986   	; 0xfffff780 <__eeprom_end+0xff7ef780>
				//break;
			//case 1 : 
				//printf("Y:%.2f\n", accelG[1]);
			//	break;
			//case 2 : 
				printf("Z:%.2f", accelG[2]);
     712:	ad b7       	in	r26, 0x3d	; 61
     714:	be b7       	in	r27, 0x3e	; 62
     716:	12 96       	adiw	r26, 0x02	; 2
     718:	3c 92       	st	X, r3
     71a:	2e 92       	st	-X, r2
     71c:	11 97       	sbiw	r26, 0x01	; 1
     71e:	e0 ee       	ldi	r30, 0xE0	; 224
     720:	f0 e0       	ldi	r31, 0x00	; 0
     722:	80 81       	ld	r24, Z
     724:	91 81       	ldd	r25, Z+1	; 0x01
     726:	a2 81       	ldd	r26, Z+2	; 0x02
     728:	b3 81       	ldd	r27, Z+3	; 0x03
     72a:	ed b7       	in	r30, 0x3d	; 61
     72c:	fe b7       	in	r31, 0x3e	; 62
     72e:	83 83       	std	Z+3, r24	; 0x03
     730:	94 83       	std	Z+4, r25	; 0x04
     732:	a5 83       	std	Z+5, r26	; 0x05
     734:	b6 83       	std	Z+6, r27	; 0x06
     736:	24 d8       	rcall	.-4024   	; 0xfffff780 <__eeprom_end+0xff7ef780>
     738:	8f ef       	ldi	r24, 0xFF	; 255
     73a:	94 e3       	ldi	r25, 0x34	; 52
     73c:	ac e0       	ldi	r26, 0x0C	; 12
     73e:	81 50       	subi	r24, 0x01	; 1
     740:	90 40       	sbci	r25, 0x00	; 0
     742:	a0 40       	sbci	r26, 0x00	; 0
     744:	e1 f7       	brne	.-8      	; 0x73e <main+0x184>
     746:	00 c0       	rjmp	.+0      	; 0x748 <main+0x18e>
     748:	00 00       	nop
     74a:	ad b7       	in	r26, 0x3d	; 61
     74c:	be b7       	in	r27, 0x3e	; 62
     74e:	16 96       	adiw	r26, 0x06	; 6
     750:	0f b6       	in	r0, 0x3f	; 63
     752:	f8 94       	cli
     754:	be bf       	out	0x3e, r27	; 62
     756:	0f be       	out	0x3f, r0	; 63
     758:	ad bf       	out	0x3d, r26	; 61
     75a:	98 cf       	rjmp	.-208    	; 0x68c <main+0xd2>

0000075c <writeRegister>:
	Command_Display(Go_Home);
	//Change_Baudrate(83); // 1200	
}

void writeRegister(uint8_t address, uint8_t data)
{
     75c:	0f 93       	push	r16
     75e:	1f 93       	push	r17
     760:	08 2f       	mov	r16, r24
     762:	16 2f       	mov	r17, r22
  i2cSendStart();
     764:	ed de       	rcall	.-550    	; 0x540 <i2cSendStart>
  i2cWaitForComplete();
     766:	f3 de       	rcall	.-538    	; 0x54e <i2cWaitForComplete>

  i2cSendByte((MMA8452_ADDRESS<<1)); // Write 0xB4
     768:	8a e3       	ldi	r24, 0x3A	; 58
     76a:	1c df       	rcall	.-456    	; 0x5a4 <i2cSendByte>
  i2cWaitForComplete();
     76c:	f0 de       	rcall	.-544    	; 0x54e <i2cWaitForComplete>

  i2cSendByte(address);	// Write register address
     76e:	80 2f       	mov	r24, r16
     770:	19 df       	rcall	.-462    	; 0x5a4 <i2cSendByte>
  i2cWaitForComplete();
     772:	ed de       	rcall	.-550    	; 0x54e <i2cWaitForComplete>

  i2cSendByte(data);
     774:	81 2f       	mov	r24, r17
     776:	16 df       	rcall	.-468    	; 0x5a4 <i2cSendByte>
  i2cWaitForComplete();
     778:	ea de       	rcall	.-556    	; 0x54e <i2cWaitForComplete>

  i2cSendStop();
     77a:	e6 de       	rcall	.-564    	; 0x548 <i2cSendStop>
}
     77c:	1f 91       	pop	r17
     77e:	0f 91       	pop	r16
     780:	08 95       	ret

00000782 <readRegisters>:

void readRegisters(uint8_t address, int i, uint8_t * dest)
{
     782:	df 92       	push	r13
     784:	ef 92       	push	r14
     786:	ff 92       	push	r15
     788:	0f 93       	push	r16
     78a:	1f 93       	push	r17
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
     790:	08 2f       	mov	r16, r24
     792:	7b 01       	movw	r14, r22
     794:	14 2f       	mov	r17, r20
     796:	d5 2e       	mov	r13, r21
  i2cSendStart();
     798:	d3 de       	rcall	.-602    	; 0x540 <i2cSendStart>
  i2cWaitForComplete();
     79a:	d9 de       	rcall	.-590    	; 0x54e <i2cWaitForComplete>

  i2cSendByte((MMA8452_ADDRESS<<1)); // write 0xB4
     79c:	8a e3       	ldi	r24, 0x3A	; 58
     79e:	02 df       	rcall	.-508    	; 0x5a4 <i2cSendByte>
  i2cWaitForComplete();
     7a0:	d6 de       	rcall	.-596    	; 0x54e <i2cWaitForComplete>

  i2cSendByte(address);	// write register address
     7a2:	80 2f       	mov	r24, r16
     7a4:	ff de       	rcall	.-514    	; 0x5a4 <i2cSendByte>
  i2cWaitForComplete();
     7a6:	d3 de       	rcall	.-602    	; 0x54e <i2cWaitForComplete>

  i2cSendStart();
     7a8:	cb de       	rcall	.-618    	; 0x540 <i2cSendStart>
  i2cSendByte((MMA8452_ADDRESS<<1)|0x01); // write 0xB5
     7aa:	8b e3       	ldi	r24, 0x3B	; 59
     7ac:	fb de       	rcall	.-522    	; 0x5a4 <i2cSendByte>
  i2cWaitForComplete();
     7ae:	cf de       	rcall	.-610    	; 0x54e <i2cWaitForComplete>
  for (int j=0; j<i; j++)
     7b0:	1e 14       	cp	r1, r14
     7b2:	1f 04       	cpc	r1, r15
     7b4:	7c f4       	brge	.+30     	; 0x7d4 <readRegisters+0x52>
     7b6:	01 2f       	mov	r16, r17
     7b8:	1d 2d       	mov	r17, r13
     7ba:	c0 e0       	ldi	r28, 0x00	; 0
     7bc:	d0 e0       	ldi	r29, 0x00	; 0
  {
    i2cReceiveByte(TRUE);
     7be:	8f ef       	ldi	r24, 0xFF	; 255
     7c0:	d1 de       	rcall	.-606    	; 0x564 <i2cReceiveByte>
    i2cWaitForComplete();
     7c2:	c5 de       	rcall	.-630    	; 0x54e <i2cWaitForComplete>
    dest[j] = i2cGetReceivedByte(); // Get MSB result
     7c4:	db de       	rcall	.-586    	; 0x57c <i2cGetReceivedByte>
     7c6:	f8 01       	movw	r30, r16
     7c8:	81 93       	st	Z+, r24
     7ca:	8f 01       	movw	r16, r30
  i2cWaitForComplete();

  i2cSendStart();
  i2cSendByte((MMA8452_ADDRESS<<1)|0x01); // write 0xB5
  i2cWaitForComplete();
  for (int j=0; j<i; j++)
     7cc:	21 96       	adiw	r28, 0x01	; 1
     7ce:	ce 15       	cp	r28, r14
     7d0:	df 05       	cpc	r29, r15
     7d2:	ac f3       	brlt	.-22     	; 0x7be <readRegisters+0x3c>
  {
    i2cReceiveByte(TRUE);
    i2cWaitForComplete();
    dest[j] = i2cGetReceivedByte(); // Get MSB result
  }
  i2cWaitForComplete();
     7d4:	bc de       	rcall	.-648    	; 0x54e <i2cWaitForComplete>
  i2cSendStop();
     7d6:	b8 de       	rcall	.-656    	; 0x548 <i2cSendStop>

  cbi(TWCR, TWEN); // Disable TWI
     7d8:	86 b7       	in	r24, 0x36	; 54
     7da:	8b 7f       	andi	r24, 0xFB	; 251
     7dc:	86 bf       	out	0x36, r24	; 54
  sbi(TWCR, TWEN); // Enable TWI
     7de:	86 b7       	in	r24, 0x36	; 54
     7e0:	84 60       	ori	r24, 0x04	; 4
     7e2:	86 bf       	out	0x36, r24	; 54
}
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	1f 91       	pop	r17
     7ea:	0f 91       	pop	r16
     7ec:	ff 90       	pop	r15
     7ee:	ef 90       	pop	r14
     7f0:	df 90       	pop	r13
     7f2:	08 95       	ret

000007f4 <readAccelData>:

  MMA8452Active();  // Set to active to start reading
}

void readAccelData(int * destination)
{
     7f4:	cf 92       	push	r12
     7f6:	df 92       	push	r13
     7f8:	ef 92       	push	r14
     7fa:	ff 92       	push	r15
     7fc:	0f 93       	push	r16
     7fe:	1f 93       	push	r17
     800:	df 93       	push	r29
     802:	cf 93       	push	r28
     804:	00 d0       	rcall	.+0      	; 0x806 <readAccelData+0x12>
     806:	00 d0       	rcall	.+0      	; 0x808 <readAccelData+0x14>
     808:	00 d0       	rcall	.+0      	; 0x80a <readAccelData+0x16>
     80a:	cd b7       	in	r28, 0x3d	; 61
     80c:	de b7       	in	r29, 0x3e	; 62
     80e:	6c 01       	movw	r12, r24
  uint8_t rawData[6];  // x/y/z accel register data stored here

  readRegisters(0x01, 6, &rawData[0]);  // Read the six raw data registers into data array
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	66 e0       	ldi	r22, 0x06	; 6
     814:	70 e0       	ldi	r23, 0x00	; 0
     816:	8e 01       	movw	r16, r28
     818:	0f 5f       	subi	r16, 0xFF	; 255
     81a:	1f 4f       	sbci	r17, 0xFF	; 255
     81c:	a8 01       	movw	r20, r16
     81e:	b1 df       	rcall	.-158    	; 0x782 <readRegisters>
     820:	f8 01       	movw	r30, r16

  // Loop to calculate 12-bit ADC and g value for each axis
  for (int i=0; i<6; i+=2)
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	90 e0       	ldi	r25, 0x00	; 0
  {
    destination[i/2] = ((rawData[i] << 8) | rawData[i+1]) >> 4;  // Turn the MSB and LSB into a 12-bit value
     826:	9c 01       	movw	r18, r24
     828:	99 23       	and	r25, r25
     82a:	14 f4       	brge	.+4      	; 0x830 <readAccelData+0x3c>
     82c:	2f 5f       	subi	r18, 0xFF	; 255
     82e:	3f 4f       	sbci	r19, 0xFF	; 255
     830:	2e 7f       	andi	r18, 0xFE	; 254
     832:	d6 01       	movw	r26, r12
     834:	a2 0f       	add	r26, r18
     836:	b3 1f       	adc	r27, r19
     838:	f0 80       	ld	r15, Z
     83a:	ee 24       	eor	r14, r14
     83c:	21 81       	ldd	r18, Z+1	; 0x01
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	2e 29       	or	r18, r14
     842:	3f 29       	or	r19, r15
     844:	35 95       	asr	r19
     846:	27 95       	ror	r18
     848:	35 95       	asr	r19
     84a:	27 95       	ror	r18
     84c:	35 95       	asr	r19
     84e:	27 95       	ror	r18
     850:	35 95       	asr	r19
     852:	27 95       	ror	r18
     854:	11 96       	adiw	r26, 0x01	; 1
     856:	3c 93       	st	X, r19
     858:	2e 93       	st	-X, r18
  uint8_t rawData[6];  // x/y/z accel register data stored here

  readRegisters(0x01, 6, &rawData[0]);  // Read the six raw data registers into data array

  // Loop to calculate 12-bit ADC and g value for each axis
  for (int i=0; i<6; i+=2)
     85a:	02 96       	adiw	r24, 0x02	; 2
     85c:	32 96       	adiw	r30, 0x02	; 2
     85e:	86 30       	cpi	r24, 0x06	; 6
     860:	91 05       	cpc	r25, r1
     862:	09 f7       	brne	.-62     	; 0x826 <readAccelData+0x32>
      // If the number is negative, we have to make it so manually (no 12-bit data type)
      destination[i/2] = ~destination[i/2] + 1;
      destination[i/2] *= -1;  // Transform into negative 2's complement #
    }
  }
}
     864:	26 96       	adiw	r28, 0x06	; 6
     866:	0f b6       	in	r0, 0x3f	; 63
     868:	f8 94       	cli
     86a:	de bf       	out	0x3e, r29	; 62
     86c:	0f be       	out	0x3f, r0	; 63
     86e:	cd bf       	out	0x3d, r28	; 61
     870:	cf 91       	pop	r28
     872:	df 91       	pop	r29
     874:	1f 91       	pop	r17
     876:	0f 91       	pop	r16
     878:	ff 90       	pop	r15
     87a:	ef 90       	pop	r14
     87c:	df 90       	pop	r13
     87e:	cf 90       	pop	r12
     880:	08 95       	ret

00000882 <readRegister>:
  cbi(TWCR, TWEN); // Disable TWI
  sbi(TWCR, TWEN); // Enable TWI
}

unsigned char readRegister(uint8_t address)
{
     882:	1f 93       	push	r17
     884:	18 2f       	mov	r17, r24
  unsigned char data;

  i2cSendStart();
     886:	5c de       	rcall	.-840    	; 0x540 <i2cSendStart>
  i2cWaitForComplete();
     888:	62 de       	rcall	.-828    	; 0x54e <i2cWaitForComplete>

  i2cSendByte((MMA8452_ADDRESS<<1)); // Write 0xB4
     88a:	8a e3       	ldi	r24, 0x3A	; 58
     88c:	8b de       	rcall	.-746    	; 0x5a4 <i2cSendByte>
  i2cWaitForComplete();
     88e:	5f de       	rcall	.-834    	; 0x54e <i2cWaitForComplete>

  i2cSendByte(address);	// Write register address
     890:	81 2f       	mov	r24, r17
     892:	88 de       	rcall	.-752    	; 0x5a4 <i2cSendByte>
  i2cWaitForComplete();
     894:	5c de       	rcall	.-840    	; 0x54e <i2cWaitForComplete>

  i2cSendStart();
     896:	54 de       	rcall	.-856    	; 0x540 <i2cSendStart>

  i2cSendByte((MMA8452_ADDRESS<<1)|0x01); // Write 0xB5
     898:	8b e3       	ldi	r24, 0x3B	; 59
     89a:	84 de       	rcall	.-760    	; 0x5a4 <i2cSendByte>
  i2cWaitForComplete();
     89c:	58 de       	rcall	.-848    	; 0x54e <i2cWaitForComplete>
  i2cReceiveByte(TRUE);
     89e:	8f ef       	ldi	r24, 0xFF	; 255
     8a0:	61 de       	rcall	.-830    	; 0x564 <i2cReceiveByte>
  i2cWaitForComplete();
     8a2:	55 de       	rcall	.-854    	; 0x54e <i2cWaitForComplete>

  data = i2cGetReceivedByte();	// Get MSB result
     8a4:	6b de       	rcall	.-810    	; 0x57c <i2cGetReceivedByte>
     8a6:	18 2f       	mov	r17, r24
  i2cWaitForComplete();
     8a8:	52 de       	rcall	.-860    	; 0x54e <i2cWaitForComplete>
  i2cSendStop();
     8aa:	4e de       	rcall	.-868    	; 0x548 <i2cSendStop>

  cbi(TWCR, TWEN);	// Disable TWI
     8ac:	86 b7       	in	r24, 0x36	; 54
     8ae:	8b 7f       	andi	r24, 0xFB	; 251
     8b0:	86 bf       	out	0x36, r24	; 54
  sbi(TWCR, TWEN);	// Enable TWI
     8b2:	86 b7       	in	r24, 0x36	; 54
     8b4:	84 60       	ori	r24, 0x04	; 4
     8b6:	86 bf       	out	0x36, r24	; 54

  return data;
}
     8b8:	81 2f       	mov	r24, r17
     8ba:	1f 91       	pop	r17
     8bc:	08 95       	ret

000008be <MMA8452Active>:

void MMA8452Active()
{
  unsigned char c = readRegister(0x2A);
     8be:	8a e2       	ldi	r24, 0x2A	; 42
     8c0:	e0 df       	rcall	.-64     	; 0x882 <readRegister>
  writeRegister(0x2A, c | 0x01);
     8c2:	68 2f       	mov	r22, r24
     8c4:	61 60       	ori	r22, 0x01	; 1
     8c6:	8a e2       	ldi	r24, 0x2A	; 42
     8c8:	49 df       	rcall	.-366    	; 0x75c <writeRegister>
}
     8ca:	08 95       	ret

000008cc <MMA8452Standby>:

void MMA8452Standby()
{
  unsigned char c = readRegister(0x2A);
     8cc:	8a e2       	ldi	r24, 0x2A	; 42
     8ce:	d9 df       	rcall	.-78     	; 0x882 <readRegister>
  writeRegister(0x2A, c & ~(0x01));
     8d0:	68 2f       	mov	r22, r24
     8d2:	6e 7f       	andi	r22, 0xFE	; 254
     8d4:	8a e2       	ldi	r24, 0x2A	; 42
     8d6:	42 df       	rcall	.-380    	; 0x75c <writeRegister>
}
     8d8:	08 95       	ret

000008da <initMMA8452>:
	} // Loop forever if communication doesn't happen
  }
}

void initMMA8452(uint8_t fsr, uint8_t dataRate)
{
     8da:	0f 93       	push	r16
     8dc:	1f 93       	push	r17
     8de:	18 2f       	mov	r17, r24
     8e0:	06 2f       	mov	r16, r22
  MMA8452Standby();  // Must be in standby to change registers
     8e2:	f4 df       	rcall	.-24     	; 0x8cc <MMA8452Standby>

  // Set up the full scale range to 2, 4, or 8g.
  if ((fsr==2)||(fsr==4)||(fsr==8))
     8e4:	12 30       	cpi	r17, 0x02	; 2
     8e6:	21 f0       	breq	.+8      	; 0x8f0 <initMMA8452+0x16>
     8e8:	14 30       	cpi	r17, 0x04	; 4
     8ea:	11 f0       	breq	.+4      	; 0x8f0 <initMMA8452+0x16>
     8ec:	18 30       	cpi	r17, 0x08	; 8
     8ee:	31 f4       	brne	.+12     	; 0x8fc <initMMA8452+0x22>
    writeRegister(0x0E, fsr >> 2);  
     8f0:	61 2f       	mov	r22, r17
     8f2:	66 95       	lsr	r22
     8f4:	66 95       	lsr	r22
     8f6:	8e e0       	ldi	r24, 0x0E	; 14
     8f8:	31 df       	rcall	.-414    	; 0x75c <writeRegister>
     8fa:	03 c0       	rjmp	.+6      	; 0x902 <initMMA8452+0x28>
  else
    writeRegister(0x0E, 0);
     8fc:	8e e0       	ldi	r24, 0x0E	; 14
     8fe:	60 e0       	ldi	r22, 0x00	; 0
     900:	2d df       	rcall	.-422    	; 0x75c <writeRegister>

  // Setup the 3 data rate bits, from 0 to 7
  writeRegister(0x2A, readRegister(0x2A) & ~(0x38));
     902:	8a e2       	ldi	r24, 0x2A	; 42
     904:	be df       	rcall	.-132    	; 0x882 <readRegister>
     906:	68 2f       	mov	r22, r24
     908:	67 7c       	andi	r22, 0xC7	; 199
     90a:	8a e2       	ldi	r24, 0x2A	; 42
     90c:	27 df       	rcall	.-434    	; 0x75c <writeRegister>
  if (dataRate <= 7)
     90e:	08 30       	cpi	r16, 0x08	; 8
     910:	48 f4       	brcc	.+18     	; 0x924 <initMMA8452+0x4a>
    writeRegister(0x2A, readRegister(0x2A) | (dataRate << 3));  
     912:	8a e2       	ldi	r24, 0x2A	; 42
     914:	b6 df       	rcall	.-148    	; 0x882 <readRegister>
     916:	00 0f       	add	r16, r16
     918:	00 0f       	add	r16, r16
     91a:	00 0f       	add	r16, r16
     91c:	60 2f       	mov	r22, r16
     91e:	68 2b       	or	r22, r24
     920:	8a e2       	ldi	r24, 0x2A	; 42
     922:	1c df       	rcall	.-456    	; 0x75c <writeRegister>
  // 1. Enable P/L
  // 2. Set the back/front angle trigger points (z-lock)
  // 3. Set the threshold/hysteresis angle
  // 4. Set the debouce rate
  // For more info check out this app note: http://cache.freescale.com/files/sensors/doc/app_note/AN4068.pdf
  writeRegister(0x11, 0x40);  // 1. Enable P/L
     924:	81 e1       	ldi	r24, 0x11	; 17
     926:	60 e4       	ldi	r22, 0x40	; 64
     928:	19 df       	rcall	.-462    	; 0x75c <writeRegister>
  writeRegister(0x13, 0x44);  // 2. 29deg z-lock (don't think this register is actually writable)
     92a:	83 e1       	ldi	r24, 0x13	; 19
     92c:	64 e4       	ldi	r22, 0x44	; 68
     92e:	16 df       	rcall	.-468    	; 0x75c <writeRegister>
  writeRegister(0x14, 0x84);  // 3. 45deg thresh, 14deg hyst (don't think this register is writable either)
     930:	84 e1       	ldi	r24, 0x14	; 20
     932:	64 e8       	ldi	r22, 0x84	; 132
     934:	13 df       	rcall	.-474    	; 0x75c <writeRegister>
  writeRegister(0x12, 0x50);  // 4. debounce counter at 100ms (at 800 hz)
     936:	82 e1       	ldi	r24, 0x12	; 18
     938:	60 e5       	ldi	r22, 0x50	; 80
     93a:	10 df       	rcall	.-480    	; 0x75c <writeRegister>
   2. Set the threshold - minimum required acceleration to cause a tap.
   3. Set the time limit - the maximum time that a tap can be above the threshold
   4. Set the pulse latency - the minimum required time between one pulse and the next
   5. Set the second pulse window - maximum allowed time between end of latency and start of second pulse
   for more info check out this app note: http://cache.freescale.com/files/sensors/doc/app_note/AN4072.pdf */
  writeRegister(0x21, 0x7F);  // 1. enable single/double taps on all axes
     93c:	81 e2       	ldi	r24, 0x21	; 33
     93e:	6f e7       	ldi	r22, 0x7F	; 127
     940:	0d df       	rcall	.-486    	; 0x75c <writeRegister>
  // writeRegister(0x21, 0x55);  // 1. single taps only on all axes
  // writeRegister(0x21, 0x6A);  // 1. double taps only on all axes
  writeRegister(0x23, 0x20);  // 2. x thresh at 2g, multiply the value by 0.0625g/LSB to get the threshold
     942:	83 e2       	ldi	r24, 0x23	; 35
     944:	60 e2       	ldi	r22, 0x20	; 32
     946:	0a df       	rcall	.-492    	; 0x75c <writeRegister>
  writeRegister(0x24, 0x20);  // 2. y thresh at 2g, multiply the value by 0.0625g/LSB to get the threshold
     948:	84 e2       	ldi	r24, 0x24	; 36
     94a:	60 e2       	ldi	r22, 0x20	; 32
     94c:	07 df       	rcall	.-498    	; 0x75c <writeRegister>
  writeRegister(0x25, 0x08);  // 2. z thresh at .5g, multiply the value by 0.0625g/LSB to get the threshold
     94e:	85 e2       	ldi	r24, 0x25	; 37
     950:	68 e0       	ldi	r22, 0x08	; 8
     952:	04 df       	rcall	.-504    	; 0x75c <writeRegister>
  writeRegister(0x26, 0x30);  // 3. 30ms time limit at 800Hz odr, this is very dependent on data rate, see the app note
     954:	86 e2       	ldi	r24, 0x26	; 38
     956:	60 e3       	ldi	r22, 0x30	; 48
     958:	01 df       	rcall	.-510    	; 0x75c <writeRegister>
  writeRegister(0x27, 0xA0);  // 4. 200ms (at 800Hz odr) between taps min, this also depends on the data rate
     95a:	87 e2       	ldi	r24, 0x27	; 39
     95c:	60 ea       	ldi	r22, 0xA0	; 160
     95e:	fe de       	rcall	.-516    	; 0x75c <writeRegister>
  writeRegister(0x28, 0xFF);  // 5. 318ms (max value) between taps max
     960:	88 e2       	ldi	r24, 0x28	; 40
     962:	6f ef       	ldi	r22, 0xFF	; 255
     964:	fb de       	rcall	.-522    	; 0x75c <writeRegister>

  // Set up interrupt 1 and 2
  writeRegister(0x2C, 0x02);  // Active high, push-pull interrupts
     966:	8c e2       	ldi	r24, 0x2C	; 44
     968:	62 e0       	ldi	r22, 0x02	; 2
     96a:	f8 de       	rcall	.-528    	; 0x75c <writeRegister>
  writeRegister(0x2D, 0x19);  // DRDY, P/L and tap ints enabled
     96c:	8d e2       	ldi	r24, 0x2D	; 45
     96e:	69 e1       	ldi	r22, 0x19	; 25
     970:	f5 de       	rcall	.-534    	; 0x75c <writeRegister>
  writeRegister(0x2E, 0x01);  // DRDY on INT1, P/L and taps on INT2
     972:	8e e2       	ldi	r24, 0x2E	; 46
     974:	61 e0       	ldi	r22, 0x01	; 1
     976:	f2 de       	rcall	.-540    	; 0x75c <writeRegister>

  MMA8452Active();  // Set to active to start reading
     978:	a2 df       	rcall	.-188    	; 0x8be <MMA8452Active>
}
     97a:	1f 91       	pop	r17
     97c:	0f 91       	pop	r16
     97e:	08 95       	ret

00000980 <setup>:
void setup()
{
  unsigned char c;

  // Read the WHO_AM_I register, this is a good test of communication
  c = readRegister(0x0D);  // Read WHO_AM_I register
     980:	8d e0       	ldi	r24, 0x0D	; 13
     982:	7f df       	rcall	.-258    	; 0x882 <readRegister>
  if (c == 0x2A) // WHO_AM_I should always be 0x2A
     984:	8a 32       	cpi	r24, 0x2A	; 42
     986:	31 f4       	brne	.+12     	; 0x994 <setup+0x14>
  {  
    initMMA8452(SCALE, dataRate);  // init the accelerometer if communication is OK
     988:	82 e0       	ldi	r24, 0x02	; 2
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	60 e0       	ldi	r22, 0x00	; 0
     98e:	70 e0       	ldi	r23, 0x00	; 0
     990:	a4 df       	rcall	.-184    	; 0x8da <initMMA8452>
		
		output_low(PORTB, LED);
		_delay_ms(500);
	} // Loop forever if communication doesn't happen
  }
}
     992:	08 95       	ret
  }
  else
  {
    while(1)
	{
		output_high(PORTB, LED);
     994:	c1 9a       	sbi	0x18, 1	; 24
     996:	8f ef       	ldi	r24, 0xFF	; 255
     998:	94 e3       	ldi	r25, 0x34	; 52
     99a:	ac e0       	ldi	r26, 0x0C	; 12
     99c:	81 50       	subi	r24, 0x01	; 1
     99e:	90 40       	sbci	r25, 0x00	; 0
     9a0:	a0 40       	sbci	r26, 0x00	; 0
     9a2:	e1 f7       	brne	.-8      	; 0x99c <setup+0x1c>
     9a4:	00 c0       	rjmp	.+0      	; 0x9a6 <setup+0x26>
     9a6:	00 00       	nop
		_delay_ms(500);
		
		output_low(PORTB, LED);
     9a8:	c1 98       	cbi	0x18, 1	; 24
     9aa:	8f ef       	ldi	r24, 0xFF	; 255
     9ac:	94 e3       	ldi	r25, 0x34	; 52
     9ae:	ac e0       	ldi	r26, 0x0C	; 12
     9b0:	81 50       	subi	r24, 0x01	; 1
     9b2:	90 40       	sbci	r25, 0x00	; 0
     9b4:	a0 40       	sbci	r26, 0x00	; 0
     9b6:	e1 f7       	brne	.-8      	; 0x9b0 <setup+0x30>
     9b8:	00 c0       	rjmp	.+0      	; 0x9ba <setup+0x3a>
     9ba:	00 00       	nop
     9bc:	eb cf       	rjmp	.-42     	; 0x994 <setup+0x14>

000009be <vfprintf>:
     9be:	a3 e1       	ldi	r26, 0x13	; 19
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	e4 ee       	ldi	r30, 0xE4	; 228
     9c4:	f4 e0       	ldi	r31, 0x04	; 4
     9c6:	8b c5       	rjmp	.+2838   	; 0x14de <__prologue_saves__>
     9c8:	6c 01       	movw	r12, r24
     9ca:	7f 87       	std	Y+15, r23	; 0x0f
     9cc:	6e 87       	std	Y+14, r22	; 0x0e
     9ce:	fc 01       	movw	r30, r24
     9d0:	17 82       	std	Z+7, r1	; 0x07
     9d2:	16 82       	std	Z+6, r1	; 0x06
     9d4:	83 81       	ldd	r24, Z+3	; 0x03
     9d6:	81 fd       	sbrc	r24, 1
     9d8:	04 c0       	rjmp	.+8      	; 0x9e2 <vfprintf+0x24>
     9da:	52 c3       	rjmp	.+1700   	; 0x1080 <vfprintf+0x6c2>
     9dc:	4c 85       	ldd	r20, Y+12	; 0x0c
     9de:	5d 85       	ldd	r21, Y+13	; 0x0d
     9e0:	04 c0       	rjmp	.+8      	; 0x9ea <vfprintf+0x2c>
     9e2:	1e 01       	movw	r2, r28
     9e4:	08 94       	sec
     9e6:	21 1c       	adc	r2, r1
     9e8:	31 1c       	adc	r3, r1
     9ea:	f6 01       	movw	r30, r12
     9ec:	93 81       	ldd	r25, Z+3	; 0x03
     9ee:	ee 85       	ldd	r30, Y+14	; 0x0e
     9f0:	ff 85       	ldd	r31, Y+15	; 0x0f
     9f2:	93 fd       	sbrc	r25, 3
     9f4:	85 91       	lpm	r24, Z+
     9f6:	93 ff       	sbrs	r25, 3
     9f8:	81 91       	ld	r24, Z+
     9fa:	ff 87       	std	Y+15, r31	; 0x0f
     9fc:	ee 87       	std	Y+14, r30	; 0x0e
     9fe:	88 23       	and	r24, r24
     a00:	09 f4       	brne	.+2      	; 0xa04 <vfprintf+0x46>
     a02:	3a c3       	rjmp	.+1652   	; 0x1078 <vfprintf+0x6ba>
     a04:	85 32       	cpi	r24, 0x25	; 37
     a06:	41 f4       	brne	.+16     	; 0xa18 <vfprintf+0x5a>
     a08:	93 fd       	sbrc	r25, 3
     a0a:	85 91       	lpm	r24, Z+
     a0c:	93 ff       	sbrs	r25, 3
     a0e:	81 91       	ld	r24, Z+
     a10:	ff 87       	std	Y+15, r31	; 0x0f
     a12:	ee 87       	std	Y+14, r30	; 0x0e
     a14:	85 32       	cpi	r24, 0x25	; 37
     a16:	51 f4       	brne	.+20     	; 0xa2c <vfprintf+0x6e>
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	b6 01       	movw	r22, r12
     a1c:	4a 8b       	std	Y+18, r20	; 0x12
     a1e:	5b 8b       	std	Y+19, r21	; 0x13
     a20:	83 d6       	rcall	.+3334   	; 0x1728 <fputc>
     a22:	4a 89       	ldd	r20, Y+18	; 0x12
     a24:	5b 89       	ldd	r21, Y+19	; 0x13
     a26:	5d 87       	std	Y+13, r21	; 0x0d
     a28:	4c 87       	std	Y+12, r20	; 0x0c
     a2a:	d8 cf       	rjmp	.-80     	; 0x9dc <vfprintf+0x1e>
     a2c:	10 e0       	ldi	r17, 0x00	; 0
     a2e:	ff 24       	eor	r15, r15
     a30:	00 e0       	ldi	r16, 0x00	; 0
     a32:	00 32       	cpi	r16, 0x20	; 32
     a34:	b0 f4       	brcc	.+44     	; 0xa62 <vfprintf+0xa4>
     a36:	8b 32       	cpi	r24, 0x2B	; 43
     a38:	69 f0       	breq	.+26     	; 0xa54 <vfprintf+0x96>
     a3a:	8c 32       	cpi	r24, 0x2C	; 44
     a3c:	28 f4       	brcc	.+10     	; 0xa48 <vfprintf+0x8a>
     a3e:	80 32       	cpi	r24, 0x20	; 32
     a40:	51 f0       	breq	.+20     	; 0xa56 <vfprintf+0x98>
     a42:	83 32       	cpi	r24, 0x23	; 35
     a44:	71 f4       	brne	.+28     	; 0xa62 <vfprintf+0xa4>
     a46:	0b c0       	rjmp	.+22     	; 0xa5e <vfprintf+0xa0>
     a48:	8d 32       	cpi	r24, 0x2D	; 45
     a4a:	39 f0       	breq	.+14     	; 0xa5a <vfprintf+0x9c>
     a4c:	80 33       	cpi	r24, 0x30	; 48
     a4e:	49 f4       	brne	.+18     	; 0xa62 <vfprintf+0xa4>
     a50:	01 60       	ori	r16, 0x01	; 1
     a52:	2c c0       	rjmp	.+88     	; 0xaac <vfprintf+0xee>
     a54:	02 60       	ori	r16, 0x02	; 2
     a56:	04 60       	ori	r16, 0x04	; 4
     a58:	29 c0       	rjmp	.+82     	; 0xaac <vfprintf+0xee>
     a5a:	08 60       	ori	r16, 0x08	; 8
     a5c:	27 c0       	rjmp	.+78     	; 0xaac <vfprintf+0xee>
     a5e:	00 61       	ori	r16, 0x10	; 16
     a60:	25 c0       	rjmp	.+74     	; 0xaac <vfprintf+0xee>
     a62:	07 fd       	sbrc	r16, 7
     a64:	2e c0       	rjmp	.+92     	; 0xac2 <vfprintf+0x104>
     a66:	28 2f       	mov	r18, r24
     a68:	20 53       	subi	r18, 0x30	; 48
     a6a:	2a 30       	cpi	r18, 0x0A	; 10
     a6c:	98 f4       	brcc	.+38     	; 0xa94 <vfprintf+0xd6>
     a6e:	06 ff       	sbrs	r16, 6
     a70:	08 c0       	rjmp	.+16     	; 0xa82 <vfprintf+0xc4>
     a72:	81 2f       	mov	r24, r17
     a74:	88 0f       	add	r24, r24
     a76:	18 2f       	mov	r17, r24
     a78:	11 0f       	add	r17, r17
     a7a:	11 0f       	add	r17, r17
     a7c:	18 0f       	add	r17, r24
     a7e:	12 0f       	add	r17, r18
     a80:	15 c0       	rjmp	.+42     	; 0xaac <vfprintf+0xee>
     a82:	8f 2d       	mov	r24, r15
     a84:	88 0f       	add	r24, r24
     a86:	f8 2e       	mov	r15, r24
     a88:	ff 0c       	add	r15, r15
     a8a:	ff 0c       	add	r15, r15
     a8c:	f8 0e       	add	r15, r24
     a8e:	f2 0e       	add	r15, r18
     a90:	00 62       	ori	r16, 0x20	; 32
     a92:	0c c0       	rjmp	.+24     	; 0xaac <vfprintf+0xee>
     a94:	8e 32       	cpi	r24, 0x2E	; 46
     a96:	21 f4       	brne	.+8      	; 0xaa0 <vfprintf+0xe2>
     a98:	06 fd       	sbrc	r16, 6
     a9a:	ee c2       	rjmp	.+1500   	; 0x1078 <vfprintf+0x6ba>
     a9c:	00 64       	ori	r16, 0x40	; 64
     a9e:	06 c0       	rjmp	.+12     	; 0xaac <vfprintf+0xee>
     aa0:	8c 36       	cpi	r24, 0x6C	; 108
     aa2:	11 f4       	brne	.+4      	; 0xaa8 <vfprintf+0xea>
     aa4:	00 68       	ori	r16, 0x80	; 128
     aa6:	02 c0       	rjmp	.+4      	; 0xaac <vfprintf+0xee>
     aa8:	88 36       	cpi	r24, 0x68	; 104
     aaa:	59 f4       	brne	.+22     	; 0xac2 <vfprintf+0x104>
     aac:	ee 85       	ldd	r30, Y+14	; 0x0e
     aae:	ff 85       	ldd	r31, Y+15	; 0x0f
     ab0:	93 fd       	sbrc	r25, 3
     ab2:	85 91       	lpm	r24, Z+
     ab4:	93 ff       	sbrs	r25, 3
     ab6:	81 91       	ld	r24, Z+
     ab8:	ff 87       	std	Y+15, r31	; 0x0f
     aba:	ee 87       	std	Y+14, r30	; 0x0e
     abc:	88 23       	and	r24, r24
     abe:	09 f0       	breq	.+2      	; 0xac2 <vfprintf+0x104>
     ac0:	b8 cf       	rjmp	.-144    	; 0xa32 <vfprintf+0x74>
     ac2:	98 2f       	mov	r25, r24
     ac4:	95 54       	subi	r25, 0x45	; 69
     ac6:	93 30       	cpi	r25, 0x03	; 3
     ac8:	18 f4       	brcc	.+6      	; 0xad0 <vfprintf+0x112>
     aca:	00 61       	ori	r16, 0x10	; 16
     acc:	80 5e       	subi	r24, 0xE0	; 224
     ace:	06 c0       	rjmp	.+12     	; 0xadc <vfprintf+0x11e>
     ad0:	98 2f       	mov	r25, r24
     ad2:	95 56       	subi	r25, 0x65	; 101
     ad4:	93 30       	cpi	r25, 0x03	; 3
     ad6:	08 f0       	brcs	.+2      	; 0xada <vfprintf+0x11c>
     ad8:	8b c1       	rjmp	.+790    	; 0xdf0 <vfprintf+0x432>
     ada:	0f 7e       	andi	r16, 0xEF	; 239
     adc:	06 ff       	sbrs	r16, 6
     ade:	16 e0       	ldi	r17, 0x06	; 6
     ae0:	6f e3       	ldi	r22, 0x3F	; 63
     ae2:	e6 2e       	mov	r14, r22
     ae4:	e0 22       	and	r14, r16
     ae6:	85 36       	cpi	r24, 0x65	; 101
     ae8:	19 f4       	brne	.+6      	; 0xaf0 <vfprintf+0x132>
     aea:	f0 e4       	ldi	r31, 0x40	; 64
     aec:	ef 2a       	or	r14, r31
     aee:	07 c0       	rjmp	.+14     	; 0xafe <vfprintf+0x140>
     af0:	86 36       	cpi	r24, 0x66	; 102
     af2:	19 f4       	brne	.+6      	; 0xafa <vfprintf+0x13c>
     af4:	20 e8       	ldi	r18, 0x80	; 128
     af6:	e2 2a       	or	r14, r18
     af8:	02 c0       	rjmp	.+4      	; 0xafe <vfprintf+0x140>
     afa:	11 11       	cpse	r17, r1
     afc:	11 50       	subi	r17, 0x01	; 1
     afe:	e7 fe       	sbrs	r14, 7
     b00:	06 c0       	rjmp	.+12     	; 0xb0e <vfprintf+0x150>
     b02:	1c 33       	cpi	r17, 0x3C	; 60
     b04:	40 f4       	brcc	.+16     	; 0xb16 <vfprintf+0x158>
     b06:	91 2e       	mov	r9, r17
     b08:	93 94       	inc	r9
     b0a:	27 e0       	ldi	r18, 0x07	; 7
     b0c:	0b c0       	rjmp	.+22     	; 0xb24 <vfprintf+0x166>
     b0e:	18 30       	cpi	r17, 0x08	; 8
     b10:	30 f4       	brcc	.+12     	; 0xb1e <vfprintf+0x160>
     b12:	21 2f       	mov	r18, r17
     b14:	06 c0       	rjmp	.+12     	; 0xb22 <vfprintf+0x164>
     b16:	27 e0       	ldi	r18, 0x07	; 7
     b18:	3c e3       	ldi	r19, 0x3C	; 60
     b1a:	93 2e       	mov	r9, r19
     b1c:	03 c0       	rjmp	.+6      	; 0xb24 <vfprintf+0x166>
     b1e:	27 e0       	ldi	r18, 0x07	; 7
     b20:	17 e0       	ldi	r17, 0x07	; 7
     b22:	99 24       	eor	r9, r9
     b24:	ca 01       	movw	r24, r20
     b26:	04 96       	adiw	r24, 0x04	; 4
     b28:	9d 87       	std	Y+13, r25	; 0x0d
     b2a:	8c 87       	std	Y+12, r24	; 0x0c
     b2c:	fa 01       	movw	r30, r20
     b2e:	60 81       	ld	r22, Z
     b30:	71 81       	ldd	r23, Z+1	; 0x01
     b32:	82 81       	ldd	r24, Z+2	; 0x02
     b34:	93 81       	ldd	r25, Z+3	; 0x03
     b36:	a1 01       	movw	r20, r2
     b38:	09 2d       	mov	r16, r9
     b3a:	08 d5       	rcall	.+2576   	; 0x154c <__ftoa_engine>
     b3c:	5c 01       	movw	r10, r24
     b3e:	69 80       	ldd	r6, Y+1	; 0x01
     b40:	26 2d       	mov	r18, r6
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	39 8b       	std	Y+17, r19	; 0x11
     b46:	28 8b       	std	Y+16, r18	; 0x10
     b48:	60 fe       	sbrs	r6, 0
     b4a:	03 c0       	rjmp	.+6      	; 0xb52 <vfprintf+0x194>
     b4c:	38 89       	ldd	r19, Y+16	; 0x10
     b4e:	33 ff       	sbrs	r19, 3
     b50:	06 c0       	rjmp	.+12     	; 0xb5e <vfprintf+0x1a0>
     b52:	e1 fc       	sbrc	r14, 1
     b54:	06 c0       	rjmp	.+12     	; 0xb62 <vfprintf+0x1a4>
     b56:	e2 fe       	sbrs	r14, 2
     b58:	06 c0       	rjmp	.+12     	; 0xb66 <vfprintf+0x1a8>
     b5a:	00 e2       	ldi	r16, 0x20	; 32
     b5c:	05 c0       	rjmp	.+10     	; 0xb68 <vfprintf+0x1aa>
     b5e:	0d e2       	ldi	r16, 0x2D	; 45
     b60:	03 c0       	rjmp	.+6      	; 0xb68 <vfprintf+0x1aa>
     b62:	0b e2       	ldi	r16, 0x2B	; 43
     b64:	01 c0       	rjmp	.+2      	; 0xb68 <vfprintf+0x1aa>
     b66:	00 e0       	ldi	r16, 0x00	; 0
     b68:	88 89       	ldd	r24, Y+16	; 0x10
     b6a:	99 89       	ldd	r25, Y+17	; 0x11
     b6c:	8c 70       	andi	r24, 0x0C	; 12
     b6e:	90 70       	andi	r25, 0x00	; 0
     b70:	00 97       	sbiw	r24, 0x00	; 0
     b72:	a9 f1       	breq	.+106    	; 0xbde <vfprintf+0x220>
     b74:	00 23       	and	r16, r16
     b76:	11 f0       	breq	.+4      	; 0xb7c <vfprintf+0x1be>
     b78:	84 e0       	ldi	r24, 0x04	; 4
     b7a:	01 c0       	rjmp	.+2      	; 0xb7e <vfprintf+0x1c0>
     b7c:	83 e0       	ldi	r24, 0x03	; 3
     b7e:	8f 15       	cp	r24, r15
     b80:	50 f4       	brcc	.+20     	; 0xb96 <vfprintf+0x1d8>
     b82:	f8 1a       	sub	r15, r24
     b84:	e3 fc       	sbrc	r14, 3
     b86:	08 c0       	rjmp	.+16     	; 0xb98 <vfprintf+0x1da>
     b88:	80 e2       	ldi	r24, 0x20	; 32
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	b6 01       	movw	r22, r12
     b8e:	cc d5       	rcall	.+2968   	; 0x1728 <fputc>
     b90:	fa 94       	dec	r15
     b92:	d1 f7       	brne	.-12     	; 0xb88 <vfprintf+0x1ca>
     b94:	01 c0       	rjmp	.+2      	; 0xb98 <vfprintf+0x1da>
     b96:	ff 24       	eor	r15, r15
     b98:	00 23       	and	r16, r16
     b9a:	21 f0       	breq	.+8      	; 0xba4 <vfprintf+0x1e6>
     b9c:	80 2f       	mov	r24, r16
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	b6 01       	movw	r22, r12
     ba2:	c2 d5       	rcall	.+2948   	; 0x1728 <fputc>
     ba4:	88 89       	ldd	r24, Y+16	; 0x10
     ba6:	83 fd       	sbrc	r24, 3
     ba8:	03 c0       	rjmp	.+6      	; 0xbb0 <vfprintf+0x1f2>
     baa:	06 e6       	ldi	r16, 0x66	; 102
     bac:	10 e0       	ldi	r17, 0x00	; 0
     bae:	0d c0       	rjmp	.+26     	; 0xbca <vfprintf+0x20c>
     bb0:	02 e6       	ldi	r16, 0x62	; 98
     bb2:	10 e0       	ldi	r17, 0x00	; 0
     bb4:	0a c0       	rjmp	.+20     	; 0xbca <vfprintf+0x20c>
     bb6:	a1 14       	cp	r10, r1
     bb8:	b1 04       	cpc	r11, r1
     bba:	09 f0       	breq	.+2      	; 0xbbe <vfprintf+0x200>
     bbc:	80 52       	subi	r24, 0x20	; 32
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	b6 01       	movw	r22, r12
     bc2:	b2 d5       	rcall	.+2916   	; 0x1728 <fputc>
     bc4:	0f 5f       	subi	r16, 0xFF	; 255
     bc6:	1f 4f       	sbci	r17, 0xFF	; 255
     bc8:	05 c0       	rjmp	.+10     	; 0xbd4 <vfprintf+0x216>
     bca:	ae 2c       	mov	r10, r14
     bcc:	bb 24       	eor	r11, r11
     bce:	90 e1       	ldi	r25, 0x10	; 16
     bd0:	a9 22       	and	r10, r25
     bd2:	bb 24       	eor	r11, r11
     bd4:	f8 01       	movw	r30, r16
     bd6:	84 91       	lpm	r24, Z+
     bd8:	88 23       	and	r24, r24
     bda:	69 f7       	brne	.-38     	; 0xbb6 <vfprintf+0x1f8>
     bdc:	4a c2       	rjmp	.+1172   	; 0x1072 <vfprintf+0x6b4>
     bde:	e7 fe       	sbrs	r14, 7
     be0:	0e c0       	rjmp	.+28     	; 0xbfe <vfprintf+0x240>
     be2:	9a 0c       	add	r9, r10
     be4:	f8 89       	ldd	r31, Y+16	; 0x10
     be6:	f4 ff       	sbrs	r31, 4
     be8:	04 c0       	rjmp	.+8      	; 0xbf2 <vfprintf+0x234>
     bea:	8a 81       	ldd	r24, Y+2	; 0x02
     bec:	81 33       	cpi	r24, 0x31	; 49
     bee:	09 f4       	brne	.+2      	; 0xbf2 <vfprintf+0x234>
     bf0:	9a 94       	dec	r9
     bf2:	19 14       	cp	r1, r9
     bf4:	54 f5       	brge	.+84     	; 0xc4a <vfprintf+0x28c>
     bf6:	29 2d       	mov	r18, r9
     bf8:	29 30       	cpi	r18, 0x09	; 9
     bfa:	50 f5       	brcc	.+84     	; 0xc50 <vfprintf+0x292>
     bfc:	2d c0       	rjmp	.+90     	; 0xc58 <vfprintf+0x29a>
     bfe:	e6 fc       	sbrc	r14, 6
     c00:	2b c0       	rjmp	.+86     	; 0xc58 <vfprintf+0x29a>
     c02:	81 2f       	mov	r24, r17
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	8a 15       	cp	r24, r10
     c08:	9b 05       	cpc	r25, r11
     c0a:	4c f0       	brlt	.+18     	; 0xc1e <vfprintf+0x260>
     c0c:	3c ef       	ldi	r19, 0xFC	; 252
     c0e:	a3 16       	cp	r10, r19
     c10:	3f ef       	ldi	r19, 0xFF	; 255
     c12:	b3 06       	cpc	r11, r19
     c14:	24 f0       	brlt	.+8      	; 0xc1e <vfprintf+0x260>
     c16:	80 e8       	ldi	r24, 0x80	; 128
     c18:	e8 2a       	or	r14, r24
     c1a:	01 c0       	rjmp	.+2      	; 0xc1e <vfprintf+0x260>
     c1c:	11 50       	subi	r17, 0x01	; 1
     c1e:	11 23       	and	r17, r17
     c20:	49 f0       	breq	.+18     	; 0xc34 <vfprintf+0x276>
     c22:	e2 e0       	ldi	r30, 0x02	; 2
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	ec 0f       	add	r30, r28
     c28:	fd 1f       	adc	r31, r29
     c2a:	e1 0f       	add	r30, r17
     c2c:	f1 1d       	adc	r31, r1
     c2e:	80 81       	ld	r24, Z
     c30:	80 33       	cpi	r24, 0x30	; 48
     c32:	a1 f3       	breq	.-24     	; 0xc1c <vfprintf+0x25e>
     c34:	e7 fe       	sbrs	r14, 7
     c36:	10 c0       	rjmp	.+32     	; 0xc58 <vfprintf+0x29a>
     c38:	91 2e       	mov	r9, r17
     c3a:	93 94       	inc	r9
     c3c:	81 2f       	mov	r24, r17
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	a8 16       	cp	r10, r24
     c42:	b9 06       	cpc	r11, r25
     c44:	44 f4       	brge	.+16     	; 0xc56 <vfprintf+0x298>
     c46:	1a 19       	sub	r17, r10
     c48:	07 c0       	rjmp	.+14     	; 0xc58 <vfprintf+0x29a>
     c4a:	99 24       	eor	r9, r9
     c4c:	93 94       	inc	r9
     c4e:	04 c0       	rjmp	.+8      	; 0xc58 <vfprintf+0x29a>
     c50:	98 e0       	ldi	r25, 0x08	; 8
     c52:	99 2e       	mov	r9, r25
     c54:	01 c0       	rjmp	.+2      	; 0xc58 <vfprintf+0x29a>
     c56:	10 e0       	ldi	r17, 0x00	; 0
     c58:	e7 fe       	sbrs	r14, 7
     c5a:	07 c0       	rjmp	.+14     	; 0xc6a <vfprintf+0x2ac>
     c5c:	1a 14       	cp	r1, r10
     c5e:	1b 04       	cpc	r1, r11
     c60:	3c f4       	brge	.+14     	; 0xc70 <vfprintf+0x2b2>
     c62:	95 01       	movw	r18, r10
     c64:	2f 5f       	subi	r18, 0xFF	; 255
     c66:	3f 4f       	sbci	r19, 0xFF	; 255
     c68:	05 c0       	rjmp	.+10     	; 0xc74 <vfprintf+0x2b6>
     c6a:	25 e0       	ldi	r18, 0x05	; 5
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	02 c0       	rjmp	.+4      	; 0xc74 <vfprintf+0x2b6>
     c70:	21 e0       	ldi	r18, 0x01	; 1
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	00 23       	and	r16, r16
     c76:	11 f0       	breq	.+4      	; 0xc7c <vfprintf+0x2be>
     c78:	2f 5f       	subi	r18, 0xFF	; 255
     c7a:	3f 4f       	sbci	r19, 0xFF	; 255
     c7c:	11 23       	and	r17, r17
     c7e:	29 f0       	breq	.+10     	; 0xc8a <vfprintf+0x2cc>
     c80:	81 2f       	mov	r24, r17
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	01 96       	adiw	r24, 0x01	; 1
     c86:	28 0f       	add	r18, r24
     c88:	39 1f       	adc	r19, r25
     c8a:	8f 2d       	mov	r24, r15
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	28 17       	cp	r18, r24
     c90:	39 07       	cpc	r19, r25
     c92:	14 f4       	brge	.+4      	; 0xc98 <vfprintf+0x2da>
     c94:	f2 1a       	sub	r15, r18
     c96:	01 c0       	rjmp	.+2      	; 0xc9a <vfprintf+0x2dc>
     c98:	ff 24       	eor	r15, r15
     c9a:	4e 2c       	mov	r4, r14
     c9c:	55 24       	eor	r5, r5
     c9e:	c2 01       	movw	r24, r4
     ca0:	89 70       	andi	r24, 0x09	; 9
     ca2:	90 70       	andi	r25, 0x00	; 0
     ca4:	00 97       	sbiw	r24, 0x00	; 0
     ca6:	41 f4       	brne	.+16     	; 0xcb8 <vfprintf+0x2fa>
     ca8:	05 c0       	rjmp	.+10     	; 0xcb4 <vfprintf+0x2f6>
     caa:	80 e2       	ldi	r24, 0x20	; 32
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	b6 01       	movw	r22, r12
     cb0:	3b d5       	rcall	.+2678   	; 0x1728 <fputc>
     cb2:	fa 94       	dec	r15
     cb4:	ff 20       	and	r15, r15
     cb6:	c9 f7       	brne	.-14     	; 0xcaa <vfprintf+0x2ec>
     cb8:	00 23       	and	r16, r16
     cba:	21 f0       	breq	.+8      	; 0xcc4 <vfprintf+0x306>
     cbc:	80 2f       	mov	r24, r16
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	b6 01       	movw	r22, r12
     cc2:	32 d5       	rcall	.+2660   	; 0x1728 <fputc>
     cc4:	43 fc       	sbrc	r4, 3
     cc6:	08 c0       	rjmp	.+16     	; 0xcd8 <vfprintf+0x31a>
     cc8:	05 c0       	rjmp	.+10     	; 0xcd4 <vfprintf+0x316>
     cca:	80 e3       	ldi	r24, 0x30	; 48
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	b6 01       	movw	r22, r12
     cd0:	2b d5       	rcall	.+2646   	; 0x1728 <fputc>
     cd2:	fa 94       	dec	r15
     cd4:	ff 20       	and	r15, r15
     cd6:	c9 f7       	brne	.-14     	; 0xcca <vfprintf+0x30c>
     cd8:	e7 fe       	sbrs	r14, 7
     cda:	44 c0       	rjmp	.+136    	; 0xd64 <vfprintf+0x3a6>
     cdc:	35 01       	movw	r6, r10
     cde:	b7 fe       	sbrs	r11, 7
     ce0:	02 c0       	rjmp	.+4      	; 0xce6 <vfprintf+0x328>
     ce2:	66 24       	eor	r6, r6
     ce4:	77 24       	eor	r7, r7
     ce6:	25 01       	movw	r4, r10
     ce8:	08 94       	sec
     cea:	41 1c       	adc	r4, r1
     cec:	51 1c       	adc	r5, r1
     cee:	46 18       	sub	r4, r6
     cf0:	57 08       	sbc	r5, r7
     cf2:	42 0c       	add	r4, r2
     cf4:	53 1c       	adc	r5, r3
     cf6:	f5 01       	movw	r30, r10
     cf8:	e9 19       	sub	r30, r9
     cfa:	f1 09       	sbc	r31, r1
     cfc:	4f 01       	movw	r8, r30
     cfe:	81 2f       	mov	r24, r17
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	00 27       	eor	r16, r16
     d04:	11 27       	eor	r17, r17
     d06:	08 1b       	sub	r16, r24
     d08:	19 0b       	sbc	r17, r25
     d0a:	ff ef       	ldi	r31, 0xFF	; 255
     d0c:	6f 16       	cp	r6, r31
     d0e:	ff ef       	ldi	r31, 0xFF	; 255
     d10:	7f 06       	cpc	r7, r31
     d12:	21 f4       	brne	.+8      	; 0xd1c <vfprintf+0x35e>
     d14:	8e e2       	ldi	r24, 0x2E	; 46
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	b6 01       	movw	r22, r12
     d1a:	06 d5       	rcall	.+2572   	; 0x1728 <fputc>
     d1c:	a6 14       	cp	r10, r6
     d1e:	b7 04       	cpc	r11, r7
     d20:	34 f0       	brlt	.+12     	; 0xd2e <vfprintf+0x370>
     d22:	86 14       	cp	r8, r6
     d24:	97 04       	cpc	r9, r7
     d26:	1c f4       	brge	.+6      	; 0xd2e <vfprintf+0x370>
     d28:	f2 01       	movw	r30, r4
     d2a:	80 81       	ld	r24, Z
     d2c:	01 c0       	rjmp	.+2      	; 0xd30 <vfprintf+0x372>
     d2e:	80 e3       	ldi	r24, 0x30	; 48
     d30:	08 94       	sec
     d32:	61 08       	sbc	r6, r1
     d34:	71 08       	sbc	r7, r1
     d36:	08 94       	sec
     d38:	41 1c       	adc	r4, r1
     d3a:	51 1c       	adc	r5, r1
     d3c:	60 16       	cp	r6, r16
     d3e:	71 06       	cpc	r7, r17
     d40:	24 f0       	brlt	.+8      	; 0xd4a <vfprintf+0x38c>
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	b6 01       	movw	r22, r12
     d46:	f0 d4       	rcall	.+2528   	; 0x1728 <fputc>
     d48:	e0 cf       	rjmp	.-64     	; 0xd0a <vfprintf+0x34c>
     d4a:	6a 14       	cp	r6, r10
     d4c:	7b 04       	cpc	r7, r11
     d4e:	41 f4       	brne	.+16     	; 0xd60 <vfprintf+0x3a2>
     d50:	9a 81       	ldd	r25, Y+2	; 0x02
     d52:	96 33       	cpi	r25, 0x36	; 54
     d54:	20 f4       	brcc	.+8      	; 0xd5e <vfprintf+0x3a0>
     d56:	95 33       	cpi	r25, 0x35	; 53
     d58:	19 f4       	brne	.+6      	; 0xd60 <vfprintf+0x3a2>
     d5a:	f8 89       	ldd	r31, Y+16	; 0x10
     d5c:	f4 ff       	sbrs	r31, 4
     d5e:	81 e3       	ldi	r24, 0x31	; 49
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	43 c0       	rjmp	.+134    	; 0xdea <vfprintf+0x42c>
     d64:	8a 81       	ldd	r24, Y+2	; 0x02
     d66:	81 33       	cpi	r24, 0x31	; 49
     d68:	11 f0       	breq	.+4      	; 0xd6e <vfprintf+0x3b0>
     d6a:	2f ee       	ldi	r18, 0xEF	; 239
     d6c:	62 22       	and	r6, r18
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	b6 01       	movw	r22, r12
     d72:	da d4       	rcall	.+2484   	; 0x1728 <fputc>
     d74:	11 23       	and	r17, r17
     d76:	79 f0       	breq	.+30     	; 0xd96 <vfprintf+0x3d8>
     d78:	8e e2       	ldi	r24, 0x2E	; 46
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	b6 01       	movw	r22, r12
     d7e:	d4 d4       	rcall	.+2472   	; 0x1728 <fputc>
     d80:	02 e0       	ldi	r16, 0x02	; 2
     d82:	f1 01       	movw	r30, r2
     d84:	e0 0f       	add	r30, r16
     d86:	f1 1d       	adc	r31, r1
     d88:	0f 5f       	subi	r16, 0xFF	; 255
     d8a:	80 81       	ld	r24, Z
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	b6 01       	movw	r22, r12
     d90:	cb d4       	rcall	.+2454   	; 0x1728 <fputc>
     d92:	11 50       	subi	r17, 0x01	; 1
     d94:	b1 f7       	brne	.-20     	; 0xd82 <vfprintf+0x3c4>
     d96:	44 fe       	sbrs	r4, 4
     d98:	03 c0       	rjmp	.+6      	; 0xda0 <vfprintf+0x3e2>
     d9a:	85 e4       	ldi	r24, 0x45	; 69
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <vfprintf+0x3e6>
     da0:	85 e6       	ldi	r24, 0x65	; 101
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	b6 01       	movw	r22, r12
     da6:	c0 d4       	rcall	.+2432   	; 0x1728 <fputc>
     da8:	b7 fc       	sbrc	r11, 7
     daa:	05 c0       	rjmp	.+10     	; 0xdb6 <vfprintf+0x3f8>
     dac:	a1 14       	cp	r10, r1
     dae:	b1 04       	cpc	r11, r1
     db0:	41 f4       	brne	.+16     	; 0xdc2 <vfprintf+0x404>
     db2:	64 fe       	sbrs	r6, 4
     db4:	06 c0       	rjmp	.+12     	; 0xdc2 <vfprintf+0x404>
     db6:	b0 94       	com	r11
     db8:	a1 94       	neg	r10
     dba:	b1 08       	sbc	r11, r1
     dbc:	b3 94       	inc	r11
     dbe:	8d e2       	ldi	r24, 0x2D	; 45
     dc0:	01 c0       	rjmp	.+2      	; 0xdc4 <vfprintf+0x406>
     dc2:	8b e2       	ldi	r24, 0x2B	; 43
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	b6 01       	movw	r22, r12
     dc8:	af d4       	rcall	.+2398   	; 0x1728 <fputc>
     dca:	80 e3       	ldi	r24, 0x30	; 48
     dcc:	05 c0       	rjmp	.+10     	; 0xdd8 <vfprintf+0x41a>
     dce:	8f 5f       	subi	r24, 0xFF	; 255
     dd0:	e6 ef       	ldi	r30, 0xF6	; 246
     dd2:	ff ef       	ldi	r31, 0xFF	; 255
     dd4:	ae 0e       	add	r10, r30
     dd6:	bf 1e       	adc	r11, r31
     dd8:	fa e0       	ldi	r31, 0x0A	; 10
     dda:	af 16       	cp	r10, r31
     ddc:	b1 04       	cpc	r11, r1
     dde:	bc f7       	brge	.-18     	; 0xdce <vfprintf+0x410>
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	b6 01       	movw	r22, r12
     de4:	a1 d4       	rcall	.+2370   	; 0x1728 <fputc>
     de6:	c5 01       	movw	r24, r10
     de8:	c0 96       	adiw	r24, 0x30	; 48
     dea:	b6 01       	movw	r22, r12
     dec:	9d d4       	rcall	.+2362   	; 0x1728 <fputc>
     dee:	41 c1       	rjmp	.+642    	; 0x1072 <vfprintf+0x6b4>
     df0:	83 36       	cpi	r24, 0x63	; 99
     df2:	31 f0       	breq	.+12     	; 0xe00 <vfprintf+0x442>
     df4:	83 37       	cpi	r24, 0x73	; 115
     df6:	89 f0       	breq	.+34     	; 0xe1a <vfprintf+0x45c>
     df8:	83 35       	cpi	r24, 0x53	; 83
     dfa:	09 f0       	breq	.+2      	; 0xdfe <vfprintf+0x440>
     dfc:	55 c0       	rjmp	.+170    	; 0xea8 <vfprintf+0x4ea>
     dfe:	21 c0       	rjmp	.+66     	; 0xe42 <vfprintf+0x484>
     e00:	9a 01       	movw	r18, r20
     e02:	2e 5f       	subi	r18, 0xFE	; 254
     e04:	3f 4f       	sbci	r19, 0xFF	; 255
     e06:	3d 87       	std	Y+13, r19	; 0x0d
     e08:	2c 87       	std	Y+12, r18	; 0x0c
     e0a:	fa 01       	movw	r30, r20
     e0c:	80 81       	ld	r24, Z
     e0e:	89 83       	std	Y+1, r24	; 0x01
     e10:	31 01       	movw	r6, r2
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	a8 2e       	mov	r10, r24
     e16:	b1 2c       	mov	r11, r1
     e18:	12 c0       	rjmp	.+36     	; 0xe3e <vfprintf+0x480>
     e1a:	9a 01       	movw	r18, r20
     e1c:	2e 5f       	subi	r18, 0xFE	; 254
     e1e:	3f 4f       	sbci	r19, 0xFF	; 255
     e20:	3d 87       	std	Y+13, r19	; 0x0d
     e22:	2c 87       	std	Y+12, r18	; 0x0c
     e24:	fa 01       	movw	r30, r20
     e26:	60 80       	ld	r6, Z
     e28:	71 80       	ldd	r7, Z+1	; 0x01
     e2a:	06 ff       	sbrs	r16, 6
     e2c:	03 c0       	rjmp	.+6      	; 0xe34 <vfprintf+0x476>
     e2e:	61 2f       	mov	r22, r17
     e30:	70 e0       	ldi	r23, 0x00	; 0
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <vfprintf+0x47a>
     e34:	6f ef       	ldi	r22, 0xFF	; 255
     e36:	7f ef       	ldi	r23, 0xFF	; 255
     e38:	c3 01       	movw	r24, r6
     e3a:	6b d4       	rcall	.+2262   	; 0x1712 <strnlen>
     e3c:	5c 01       	movw	r10, r24
     e3e:	0f 77       	andi	r16, 0x7F	; 127
     e40:	13 c0       	rjmp	.+38     	; 0xe68 <vfprintf+0x4aa>
     e42:	9a 01       	movw	r18, r20
     e44:	2e 5f       	subi	r18, 0xFE	; 254
     e46:	3f 4f       	sbci	r19, 0xFF	; 255
     e48:	3d 87       	std	Y+13, r19	; 0x0d
     e4a:	2c 87       	std	Y+12, r18	; 0x0c
     e4c:	fa 01       	movw	r30, r20
     e4e:	60 80       	ld	r6, Z
     e50:	71 80       	ldd	r7, Z+1	; 0x01
     e52:	06 ff       	sbrs	r16, 6
     e54:	03 c0       	rjmp	.+6      	; 0xe5c <vfprintf+0x49e>
     e56:	61 2f       	mov	r22, r17
     e58:	70 e0       	ldi	r23, 0x00	; 0
     e5a:	02 c0       	rjmp	.+4      	; 0xe60 <vfprintf+0x4a2>
     e5c:	6f ef       	ldi	r22, 0xFF	; 255
     e5e:	7f ef       	ldi	r23, 0xFF	; 255
     e60:	c3 01       	movw	r24, r6
     e62:	4c d4       	rcall	.+2200   	; 0x16fc <strnlen_P>
     e64:	5c 01       	movw	r10, r24
     e66:	00 68       	ori	r16, 0x80	; 128
     e68:	03 fd       	sbrc	r16, 3
     e6a:	1a c0       	rjmp	.+52     	; 0xea0 <vfprintf+0x4e2>
     e6c:	05 c0       	rjmp	.+10     	; 0xe78 <vfprintf+0x4ba>
     e6e:	80 e2       	ldi	r24, 0x20	; 32
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	b6 01       	movw	r22, r12
     e74:	59 d4       	rcall	.+2226   	; 0x1728 <fputc>
     e76:	fa 94       	dec	r15
     e78:	8f 2d       	mov	r24, r15
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	a8 16       	cp	r10, r24
     e7e:	b9 06       	cpc	r11, r25
     e80:	b0 f3       	brcs	.-20     	; 0xe6e <vfprintf+0x4b0>
     e82:	0e c0       	rjmp	.+28     	; 0xea0 <vfprintf+0x4e2>
     e84:	f3 01       	movw	r30, r6
     e86:	07 fd       	sbrc	r16, 7
     e88:	85 91       	lpm	r24, Z+
     e8a:	07 ff       	sbrs	r16, 7
     e8c:	81 91       	ld	r24, Z+
     e8e:	3f 01       	movw	r6, r30
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	b6 01       	movw	r22, r12
     e94:	49 d4       	rcall	.+2194   	; 0x1728 <fputc>
     e96:	f1 10       	cpse	r15, r1
     e98:	fa 94       	dec	r15
     e9a:	08 94       	sec
     e9c:	a1 08       	sbc	r10, r1
     e9e:	b1 08       	sbc	r11, r1
     ea0:	a1 14       	cp	r10, r1
     ea2:	b1 04       	cpc	r11, r1
     ea4:	79 f7       	brne	.-34     	; 0xe84 <vfprintf+0x4c6>
     ea6:	e5 c0       	rjmp	.+458    	; 0x1072 <vfprintf+0x6b4>
     ea8:	84 36       	cpi	r24, 0x64	; 100
     eaa:	11 f0       	breq	.+4      	; 0xeb0 <vfprintf+0x4f2>
     eac:	89 36       	cpi	r24, 0x69	; 105
     eae:	59 f5       	brne	.+86     	; 0xf06 <vfprintf+0x548>
     eb0:	07 ff       	sbrs	r16, 7
     eb2:	0b c0       	rjmp	.+22     	; 0xeca <vfprintf+0x50c>
     eb4:	9a 01       	movw	r18, r20
     eb6:	2c 5f       	subi	r18, 0xFC	; 252
     eb8:	3f 4f       	sbci	r19, 0xFF	; 255
     eba:	3d 87       	std	Y+13, r19	; 0x0d
     ebc:	2c 87       	std	Y+12, r18	; 0x0c
     ebe:	fa 01       	movw	r30, r20
     ec0:	60 81       	ld	r22, Z
     ec2:	71 81       	ldd	r23, Z+1	; 0x01
     ec4:	82 81       	ldd	r24, Z+2	; 0x02
     ec6:	93 81       	ldd	r25, Z+3	; 0x03
     ec8:	0c c0       	rjmp	.+24     	; 0xee2 <vfprintf+0x524>
     eca:	9a 01       	movw	r18, r20
     ecc:	2e 5f       	subi	r18, 0xFE	; 254
     ece:	3f 4f       	sbci	r19, 0xFF	; 255
     ed0:	3d 87       	std	Y+13, r19	; 0x0d
     ed2:	2c 87       	std	Y+12, r18	; 0x0c
     ed4:	fa 01       	movw	r30, r20
     ed6:	60 81       	ld	r22, Z
     ed8:	71 81       	ldd	r23, Z+1	; 0x01
     eda:	88 27       	eor	r24, r24
     edc:	77 fd       	sbrc	r23, 7
     ede:	80 95       	com	r24
     ee0:	98 2f       	mov	r25, r24
     ee2:	0f 76       	andi	r16, 0x6F	; 111
     ee4:	97 ff       	sbrs	r25, 7
     ee6:	08 c0       	rjmp	.+16     	; 0xef8 <vfprintf+0x53a>
     ee8:	90 95       	com	r25
     eea:	80 95       	com	r24
     eec:	70 95       	com	r23
     eee:	61 95       	neg	r22
     ef0:	7f 4f       	sbci	r23, 0xFF	; 255
     ef2:	8f 4f       	sbci	r24, 0xFF	; 255
     ef4:	9f 4f       	sbci	r25, 0xFF	; 255
     ef6:	00 68       	ori	r16, 0x80	; 128
     ef8:	a1 01       	movw	r20, r2
     efa:	2a e0       	ldi	r18, 0x0A	; 10
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	52 d4       	rcall	.+2212   	; 0x17a4 <__ultoa_invert>
     f00:	98 2e       	mov	r9, r24
     f02:	92 18       	sub	r9, r2
     f04:	40 c0       	rjmp	.+128    	; 0xf86 <vfprintf+0x5c8>
     f06:	85 37       	cpi	r24, 0x75	; 117
     f08:	21 f4       	brne	.+8      	; 0xf12 <vfprintf+0x554>
     f0a:	0f 7e       	andi	r16, 0xEF	; 239
     f0c:	2a e0       	ldi	r18, 0x0A	; 10
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	20 c0       	rjmp	.+64     	; 0xf52 <vfprintf+0x594>
     f12:	09 7f       	andi	r16, 0xF9	; 249
     f14:	8f 36       	cpi	r24, 0x6F	; 111
     f16:	a9 f0       	breq	.+42     	; 0xf42 <vfprintf+0x584>
     f18:	80 37       	cpi	r24, 0x70	; 112
     f1a:	20 f4       	brcc	.+8      	; 0xf24 <vfprintf+0x566>
     f1c:	88 35       	cpi	r24, 0x58	; 88
     f1e:	09 f0       	breq	.+2      	; 0xf22 <vfprintf+0x564>
     f20:	ab c0       	rjmp	.+342    	; 0x1078 <vfprintf+0x6ba>
     f22:	0b c0       	rjmp	.+22     	; 0xf3a <vfprintf+0x57c>
     f24:	80 37       	cpi	r24, 0x70	; 112
     f26:	21 f0       	breq	.+8      	; 0xf30 <vfprintf+0x572>
     f28:	88 37       	cpi	r24, 0x78	; 120
     f2a:	09 f0       	breq	.+2      	; 0xf2e <vfprintf+0x570>
     f2c:	a5 c0       	rjmp	.+330    	; 0x1078 <vfprintf+0x6ba>
     f2e:	01 c0       	rjmp	.+2      	; 0xf32 <vfprintf+0x574>
     f30:	00 61       	ori	r16, 0x10	; 16
     f32:	04 ff       	sbrs	r16, 4
     f34:	09 c0       	rjmp	.+18     	; 0xf48 <vfprintf+0x58a>
     f36:	04 60       	ori	r16, 0x04	; 4
     f38:	07 c0       	rjmp	.+14     	; 0xf48 <vfprintf+0x58a>
     f3a:	04 ff       	sbrs	r16, 4
     f3c:	08 c0       	rjmp	.+16     	; 0xf4e <vfprintf+0x590>
     f3e:	06 60       	ori	r16, 0x06	; 6
     f40:	06 c0       	rjmp	.+12     	; 0xf4e <vfprintf+0x590>
     f42:	28 e0       	ldi	r18, 0x08	; 8
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	05 c0       	rjmp	.+10     	; 0xf52 <vfprintf+0x594>
     f48:	20 e1       	ldi	r18, 0x10	; 16
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <vfprintf+0x594>
     f4e:	20 e1       	ldi	r18, 0x10	; 16
     f50:	32 e0       	ldi	r19, 0x02	; 2
     f52:	07 ff       	sbrs	r16, 7
     f54:	0a c0       	rjmp	.+20     	; 0xf6a <vfprintf+0x5ac>
     f56:	ca 01       	movw	r24, r20
     f58:	04 96       	adiw	r24, 0x04	; 4
     f5a:	9d 87       	std	Y+13, r25	; 0x0d
     f5c:	8c 87       	std	Y+12, r24	; 0x0c
     f5e:	fa 01       	movw	r30, r20
     f60:	60 81       	ld	r22, Z
     f62:	71 81       	ldd	r23, Z+1	; 0x01
     f64:	82 81       	ldd	r24, Z+2	; 0x02
     f66:	93 81       	ldd	r25, Z+3	; 0x03
     f68:	09 c0       	rjmp	.+18     	; 0xf7c <vfprintf+0x5be>
     f6a:	ca 01       	movw	r24, r20
     f6c:	02 96       	adiw	r24, 0x02	; 2
     f6e:	9d 87       	std	Y+13, r25	; 0x0d
     f70:	8c 87       	std	Y+12, r24	; 0x0c
     f72:	fa 01       	movw	r30, r20
     f74:	60 81       	ld	r22, Z
     f76:	71 81       	ldd	r23, Z+1	; 0x01
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	a1 01       	movw	r20, r2
     f7e:	12 d4       	rcall	.+2084   	; 0x17a4 <__ultoa_invert>
     f80:	98 2e       	mov	r9, r24
     f82:	92 18       	sub	r9, r2
     f84:	0f 77       	andi	r16, 0x7F	; 127
     f86:	06 ff       	sbrs	r16, 6
     f88:	09 c0       	rjmp	.+18     	; 0xf9c <vfprintf+0x5de>
     f8a:	0e 7f       	andi	r16, 0xFE	; 254
     f8c:	91 16       	cp	r9, r17
     f8e:	30 f4       	brcc	.+12     	; 0xf9c <vfprintf+0x5de>
     f90:	04 ff       	sbrs	r16, 4
     f92:	06 c0       	rjmp	.+12     	; 0xfa0 <vfprintf+0x5e2>
     f94:	02 fd       	sbrc	r16, 2
     f96:	04 c0       	rjmp	.+8      	; 0xfa0 <vfprintf+0x5e2>
     f98:	0f 7e       	andi	r16, 0xEF	; 239
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <vfprintf+0x5e2>
     f9c:	e9 2c       	mov	r14, r9
     f9e:	01 c0       	rjmp	.+2      	; 0xfa2 <vfprintf+0x5e4>
     fa0:	e1 2e       	mov	r14, r17
     fa2:	80 2f       	mov	r24, r16
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	04 ff       	sbrs	r16, 4
     fa8:	0c c0       	rjmp	.+24     	; 0xfc2 <vfprintf+0x604>
     faa:	fe 01       	movw	r30, r28
     fac:	e9 0d       	add	r30, r9
     fae:	f1 1d       	adc	r31, r1
     fb0:	20 81       	ld	r18, Z
     fb2:	20 33       	cpi	r18, 0x30	; 48
     fb4:	11 f4       	brne	.+4      	; 0xfba <vfprintf+0x5fc>
     fb6:	09 7e       	andi	r16, 0xE9	; 233
     fb8:	09 c0       	rjmp	.+18     	; 0xfcc <vfprintf+0x60e>
     fba:	e3 94       	inc	r14
     fbc:	02 ff       	sbrs	r16, 2
     fbe:	06 c0       	rjmp	.+12     	; 0xfcc <vfprintf+0x60e>
     fc0:	04 c0       	rjmp	.+8      	; 0xfca <vfprintf+0x60c>
     fc2:	86 78       	andi	r24, 0x86	; 134
     fc4:	90 70       	andi	r25, 0x00	; 0
     fc6:	00 97       	sbiw	r24, 0x00	; 0
     fc8:	09 f0       	breq	.+2      	; 0xfcc <vfprintf+0x60e>
     fca:	e3 94       	inc	r14
     fcc:	a0 2e       	mov	r10, r16
     fce:	bb 24       	eor	r11, r11
     fd0:	03 fd       	sbrc	r16, 3
     fd2:	13 c0       	rjmp	.+38     	; 0xffa <vfprintf+0x63c>
     fd4:	00 ff       	sbrs	r16, 0
     fd6:	0e c0       	rjmp	.+28     	; 0xff4 <vfprintf+0x636>
     fd8:	ef 14       	cp	r14, r15
     fda:	28 f4       	brcc	.+10     	; 0xfe6 <vfprintf+0x628>
     fdc:	19 2d       	mov	r17, r9
     fde:	1f 0d       	add	r17, r15
     fe0:	1e 19       	sub	r17, r14
     fe2:	ef 2c       	mov	r14, r15
     fe4:	07 c0       	rjmp	.+14     	; 0xff4 <vfprintf+0x636>
     fe6:	19 2d       	mov	r17, r9
     fe8:	05 c0       	rjmp	.+10     	; 0xff4 <vfprintf+0x636>
     fea:	80 e2       	ldi	r24, 0x20	; 32
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	b6 01       	movw	r22, r12
     ff0:	9b d3       	rcall	.+1846   	; 0x1728 <fputc>
     ff2:	e3 94       	inc	r14
     ff4:	ef 14       	cp	r14, r15
     ff6:	c8 f3       	brcs	.-14     	; 0xfea <vfprintf+0x62c>
     ff8:	04 c0       	rjmp	.+8      	; 0x1002 <vfprintf+0x644>
     ffa:	ef 14       	cp	r14, r15
     ffc:	10 f4       	brcc	.+4      	; 0x1002 <vfprintf+0x644>
     ffe:	fe 18       	sub	r15, r14
    1000:	01 c0       	rjmp	.+2      	; 0x1004 <vfprintf+0x646>
    1002:	ff 24       	eor	r15, r15
    1004:	a4 fe       	sbrs	r10, 4
    1006:	0e c0       	rjmp	.+28     	; 0x1024 <vfprintf+0x666>
    1008:	80 e3       	ldi	r24, 0x30	; 48
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	b6 01       	movw	r22, r12
    100e:	8c d3       	rcall	.+1816   	; 0x1728 <fputc>
    1010:	a2 fe       	sbrs	r10, 2
    1012:	1d c0       	rjmp	.+58     	; 0x104e <vfprintf+0x690>
    1014:	a1 fe       	sbrs	r10, 1
    1016:	03 c0       	rjmp	.+6      	; 0x101e <vfprintf+0x660>
    1018:	88 e5       	ldi	r24, 0x58	; 88
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	10 c0       	rjmp	.+32     	; 0x103e <vfprintf+0x680>
    101e:	88 e7       	ldi	r24, 0x78	; 120
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	0d c0       	rjmp	.+26     	; 0x103e <vfprintf+0x680>
    1024:	c5 01       	movw	r24, r10
    1026:	86 78       	andi	r24, 0x86	; 134
    1028:	90 70       	andi	r25, 0x00	; 0
    102a:	00 97       	sbiw	r24, 0x00	; 0
    102c:	81 f0       	breq	.+32     	; 0x104e <vfprintf+0x690>
    102e:	a1 fc       	sbrc	r10, 1
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <vfprintf+0x678>
    1032:	80 e2       	ldi	r24, 0x20	; 32
    1034:	01 c0       	rjmp	.+2      	; 0x1038 <vfprintf+0x67a>
    1036:	8b e2       	ldi	r24, 0x2B	; 43
    1038:	07 fd       	sbrc	r16, 7
    103a:	8d e2       	ldi	r24, 0x2D	; 45
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	b6 01       	movw	r22, r12
    1040:	73 d3       	rcall	.+1766   	; 0x1728 <fputc>
    1042:	05 c0       	rjmp	.+10     	; 0x104e <vfprintf+0x690>
    1044:	80 e3       	ldi	r24, 0x30	; 48
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	b6 01       	movw	r22, r12
    104a:	6e d3       	rcall	.+1756   	; 0x1728 <fputc>
    104c:	11 50       	subi	r17, 0x01	; 1
    104e:	91 16       	cp	r9, r17
    1050:	c8 f3       	brcs	.-14     	; 0x1044 <vfprintf+0x686>
    1052:	9a 94       	dec	r9
    1054:	f1 01       	movw	r30, r2
    1056:	e9 0d       	add	r30, r9
    1058:	f1 1d       	adc	r31, r1
    105a:	80 81       	ld	r24, Z
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	b6 01       	movw	r22, r12
    1060:	63 d3       	rcall	.+1734   	; 0x1728 <fputc>
    1062:	99 20       	and	r9, r9
    1064:	b1 f7       	brne	.-20     	; 0x1052 <vfprintf+0x694>
    1066:	05 c0       	rjmp	.+10     	; 0x1072 <vfprintf+0x6b4>
    1068:	80 e2       	ldi	r24, 0x20	; 32
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	b6 01       	movw	r22, r12
    106e:	5c d3       	rcall	.+1720   	; 0x1728 <fputc>
    1070:	fa 94       	dec	r15
    1072:	ff 20       	and	r15, r15
    1074:	c9 f7       	brne	.-14     	; 0x1068 <vfprintf+0x6aa>
    1076:	b2 cc       	rjmp	.-1692   	; 0x9dc <vfprintf+0x1e>
    1078:	f6 01       	movw	r30, r12
    107a:	26 81       	ldd	r18, Z+6	; 0x06
    107c:	37 81       	ldd	r19, Z+7	; 0x07
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <vfprintf+0x6c6>
    1080:	2f ef       	ldi	r18, 0xFF	; 255
    1082:	3f ef       	ldi	r19, 0xFF	; 255
    1084:	c9 01       	movw	r24, r18
    1086:	63 96       	adiw	r28, 0x13	; 19
    1088:	e2 e1       	ldi	r30, 0x12	; 18
    108a:	45 c2       	rjmp	.+1162   	; 0x1516 <__epilogue_restores__>

0000108c <asin>:
    108c:	9f 93       	push	r25
    108e:	9f 77       	andi	r25, 0x7F	; 127
    1090:	ee e3       	ldi	r30, 0x3E	; 62
    1092:	89 37       	cpi	r24, 0x79	; 121
    1094:	9e 07       	cpc	r25, r30
    1096:	20 f4       	brcc	.+8      	; 0x10a0 <asin+0x14>
    1098:	e6 e2       	ldi	r30, 0x26	; 38
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	8b d0       	rcall	.+278    	; 0x11b4 <__fp_powsodd>
    109e:	09 c0       	rjmp	.+18     	; 0x10b2 <asin+0x26>
    10a0:	49 d0       	rcall	.+146    	; 0x1134 <__fp_arccos>
    10a2:	90 58       	subi	r25, 0x80	; 128
    10a4:	a2 ea       	ldi	r26, 0xA2	; 162
    10a6:	2a ed       	ldi	r18, 0xDA	; 218
    10a8:	3f e0       	ldi	r19, 0x0F	; 15
    10aa:	49 ec       	ldi	r20, 0xC9	; 201
    10ac:	5f e3       	ldi	r21, 0x3F	; 63
    10ae:	5b d1       	rcall	.+694    	; 0x1366 <__addsf3x>
    10b0:	92 d0       	rcall	.+292    	; 0x11d6 <__fp_round>
    10b2:	0f 90       	pop	r0
    10b4:	07 fc       	sbrc	r0, 7
    10b6:	90 58       	subi	r25, 0x80	; 128
    10b8:	08 95       	ret

000010ba <__floatunsisf>:
    10ba:	e8 94       	clt
    10bc:	09 c0       	rjmp	.+18     	; 0x10d0 <__floatsisf+0x12>

000010be <__floatsisf>:
    10be:	97 fb       	bst	r25, 7
    10c0:	3e f4       	brtc	.+14     	; 0x10d0 <__floatsisf+0x12>
    10c2:	90 95       	com	r25
    10c4:	80 95       	com	r24
    10c6:	70 95       	com	r23
    10c8:	61 95       	neg	r22
    10ca:	7f 4f       	sbci	r23, 0xFF	; 255
    10cc:	8f 4f       	sbci	r24, 0xFF	; 255
    10ce:	9f 4f       	sbci	r25, 0xFF	; 255
    10d0:	99 23       	and	r25, r25
    10d2:	a9 f0       	breq	.+42     	; 0x10fe <__floatsisf+0x40>
    10d4:	f9 2f       	mov	r31, r25
    10d6:	96 e9       	ldi	r25, 0x96	; 150
    10d8:	bb 27       	eor	r27, r27
    10da:	93 95       	inc	r25
    10dc:	f6 95       	lsr	r31
    10de:	87 95       	ror	r24
    10e0:	77 95       	ror	r23
    10e2:	67 95       	ror	r22
    10e4:	b7 95       	ror	r27
    10e6:	f1 11       	cpse	r31, r1
    10e8:	f8 cf       	rjmp	.-16     	; 0x10da <__floatsisf+0x1c>
    10ea:	fa f4       	brpl	.+62     	; 0x112a <__floatsisf+0x6c>
    10ec:	bb 0f       	add	r27, r27
    10ee:	11 f4       	brne	.+4      	; 0x10f4 <__floatsisf+0x36>
    10f0:	60 ff       	sbrs	r22, 0
    10f2:	1b c0       	rjmp	.+54     	; 0x112a <__floatsisf+0x6c>
    10f4:	6f 5f       	subi	r22, 0xFF	; 255
    10f6:	7f 4f       	sbci	r23, 0xFF	; 255
    10f8:	8f 4f       	sbci	r24, 0xFF	; 255
    10fa:	9f 4f       	sbci	r25, 0xFF	; 255
    10fc:	16 c0       	rjmp	.+44     	; 0x112a <__floatsisf+0x6c>
    10fe:	88 23       	and	r24, r24
    1100:	11 f0       	breq	.+4      	; 0x1106 <__floatsisf+0x48>
    1102:	96 e9       	ldi	r25, 0x96	; 150
    1104:	11 c0       	rjmp	.+34     	; 0x1128 <__floatsisf+0x6a>
    1106:	77 23       	and	r23, r23
    1108:	21 f0       	breq	.+8      	; 0x1112 <__floatsisf+0x54>
    110a:	9e e8       	ldi	r25, 0x8E	; 142
    110c:	87 2f       	mov	r24, r23
    110e:	76 2f       	mov	r23, r22
    1110:	05 c0       	rjmp	.+10     	; 0x111c <__floatsisf+0x5e>
    1112:	66 23       	and	r22, r22
    1114:	71 f0       	breq	.+28     	; 0x1132 <__floatsisf+0x74>
    1116:	96 e8       	ldi	r25, 0x86	; 134
    1118:	86 2f       	mov	r24, r22
    111a:	70 e0       	ldi	r23, 0x00	; 0
    111c:	60 e0       	ldi	r22, 0x00	; 0
    111e:	2a f0       	brmi	.+10     	; 0x112a <__floatsisf+0x6c>
    1120:	9a 95       	dec	r25
    1122:	66 0f       	add	r22, r22
    1124:	77 1f       	adc	r23, r23
    1126:	88 1f       	adc	r24, r24
    1128:	da f7       	brpl	.-10     	; 0x1120 <__floatsisf+0x62>
    112a:	88 0f       	add	r24, r24
    112c:	96 95       	lsr	r25
    112e:	87 95       	ror	r24
    1130:	97 f9       	bld	r25, 7
    1132:	08 95       	ret

00001134 <__fp_arccos>:
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	1f 93       	push	r17
    113a:	0f 93       	push	r16
    113c:	8b 01       	movw	r16, r22
    113e:	ec 01       	movw	r28, r24
    1140:	ea e3       	ldi	r30, 0x3A	; 58
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	12 d0       	rcall	.+36     	; 0x116a <__fp_powser>
    1146:	47 d0       	rcall	.+142    	; 0x11d6 <__fp_round>
    1148:	98 01       	movw	r18, r16
    114a:	ae 01       	movw	r20, r28
    114c:	8b 01       	movw	r16, r22
    114e:	ec 01       	movw	r28, r24
    1150:	60 e0       	ldi	r22, 0x00	; 0
    1152:	70 e0       	ldi	r23, 0x00	; 0
    1154:	80 e8       	ldi	r24, 0x80	; 128
    1156:	9f e3       	ldi	r25, 0x3F	; 63
    1158:	f4 d0       	rcall	.+488    	; 0x1342 <__subsf3>
    115a:	b5 d0       	rcall	.+362    	; 0x12c6 <sqrt>
    115c:	98 01       	movw	r18, r16
    115e:	ae 01       	movw	r20, r28
    1160:	0f 91       	pop	r16
    1162:	1f 91       	pop	r17
    1164:	cf 91       	pop	r28
    1166:	df 91       	pop	r29
    1168:	53 c0       	rjmp	.+166    	; 0x1210 <__mulsf3x>

0000116a <__fp_powser>:
    116a:	df 93       	push	r29
    116c:	cf 93       	push	r28
    116e:	1f 93       	push	r17
    1170:	0f 93       	push	r16
    1172:	ff 92       	push	r15
    1174:	ef 92       	push	r14
    1176:	df 92       	push	r13
    1178:	7b 01       	movw	r14, r22
    117a:	8c 01       	movw	r16, r24
    117c:	68 94       	set
    117e:	05 c0       	rjmp	.+10     	; 0x118a <__fp_powser+0x20>
    1180:	da 2e       	mov	r13, r26
    1182:	ef 01       	movw	r28, r30
    1184:	45 d0       	rcall	.+138    	; 0x1210 <__mulsf3x>
    1186:	fe 01       	movw	r30, r28
    1188:	e8 94       	clt
    118a:	a5 91       	lpm	r26, Z+
    118c:	25 91       	lpm	r18, Z+
    118e:	35 91       	lpm	r19, Z+
    1190:	45 91       	lpm	r20, Z+
    1192:	55 91       	lpm	r21, Z+
    1194:	ae f3       	brts	.-22     	; 0x1180 <__fp_powser+0x16>
    1196:	ef 01       	movw	r28, r30
    1198:	e6 d0       	rcall	.+460    	; 0x1366 <__addsf3x>
    119a:	fe 01       	movw	r30, r28
    119c:	97 01       	movw	r18, r14
    119e:	a8 01       	movw	r20, r16
    11a0:	da 94       	dec	r13
    11a2:	79 f7       	brne	.-34     	; 0x1182 <__fp_powser+0x18>
    11a4:	df 90       	pop	r13
    11a6:	ef 90       	pop	r14
    11a8:	ff 90       	pop	r15
    11aa:	0f 91       	pop	r16
    11ac:	1f 91       	pop	r17
    11ae:	cf 91       	pop	r28
    11b0:	df 91       	pop	r29
    11b2:	08 95       	ret

000011b4 <__fp_powsodd>:
    11b4:	9f 93       	push	r25
    11b6:	8f 93       	push	r24
    11b8:	7f 93       	push	r23
    11ba:	6f 93       	push	r22
    11bc:	ff 93       	push	r31
    11be:	ef 93       	push	r30
    11c0:	9b 01       	movw	r18, r22
    11c2:	ac 01       	movw	r20, r24
    11c4:	19 d0       	rcall	.+50     	; 0x11f8 <__mulsf3>
    11c6:	ef 91       	pop	r30
    11c8:	ff 91       	pop	r31
    11ca:	cf df       	rcall	.-98     	; 0x116a <__fp_powser>
    11cc:	2f 91       	pop	r18
    11ce:	3f 91       	pop	r19
    11d0:	4f 91       	pop	r20
    11d2:	5f 91       	pop	r21
    11d4:	11 c0       	rjmp	.+34     	; 0x11f8 <__mulsf3>

000011d6 <__fp_round>:
    11d6:	09 2e       	mov	r0, r25
    11d8:	03 94       	inc	r0
    11da:	00 0c       	add	r0, r0
    11dc:	11 f4       	brne	.+4      	; 0x11e2 <__fp_round+0xc>
    11de:	88 23       	and	r24, r24
    11e0:	52 f0       	brmi	.+20     	; 0x11f6 <__fp_round+0x20>
    11e2:	bb 0f       	add	r27, r27
    11e4:	40 f4       	brcc	.+16     	; 0x11f6 <__fp_round+0x20>
    11e6:	bf 2b       	or	r27, r31
    11e8:	11 f4       	brne	.+4      	; 0x11ee <__fp_round+0x18>
    11ea:	60 ff       	sbrs	r22, 0
    11ec:	04 c0       	rjmp	.+8      	; 0x11f6 <__fp_round+0x20>
    11ee:	6f 5f       	subi	r22, 0xFF	; 255
    11f0:	7f 4f       	sbci	r23, 0xFF	; 255
    11f2:	8f 4f       	sbci	r24, 0xFF	; 255
    11f4:	9f 4f       	sbci	r25, 0xFF	; 255
    11f6:	08 95       	ret

000011f8 <__mulsf3>:
    11f8:	0b d0       	rcall	.+22     	; 0x1210 <__mulsf3x>
    11fa:	ed cf       	rjmp	.-38     	; 0x11d6 <__fp_round>
    11fc:	25 d1       	rcall	.+586    	; 0x1448 <__fp_pscA>
    11fe:	28 f0       	brcs	.+10     	; 0x120a <__mulsf3+0x12>
    1200:	2a d1       	rcall	.+596    	; 0x1456 <__fp_pscB>
    1202:	18 f0       	brcs	.+6      	; 0x120a <__mulsf3+0x12>
    1204:	95 23       	and	r25, r21
    1206:	09 f0       	breq	.+2      	; 0x120a <__mulsf3+0x12>
    1208:	01 c1       	rjmp	.+514    	; 0x140c <__fp_inf>
    120a:	14 c1       	rjmp	.+552    	; 0x1434 <__fp_nan>
    120c:	11 24       	eor	r1, r1
    120e:	4d c1       	rjmp	.+666    	; 0x14aa <__fp_szero>

00001210 <__mulsf3x>:
    1210:	29 d1       	rcall	.+594    	; 0x1464 <__fp_split3>
    1212:	a0 f3       	brcs	.-24     	; 0x11fc <__mulsf3+0x4>

00001214 <__mulsf3_pse>:
    1214:	95 9f       	mul	r25, r21
    1216:	d1 f3       	breq	.-12     	; 0x120c <__mulsf3+0x14>
    1218:	95 0f       	add	r25, r21
    121a:	50 e0       	ldi	r21, 0x00	; 0
    121c:	55 1f       	adc	r21, r21
    121e:	62 9f       	mul	r22, r18
    1220:	f0 01       	movw	r30, r0
    1222:	72 9f       	mul	r23, r18
    1224:	bb 27       	eor	r27, r27
    1226:	f0 0d       	add	r31, r0
    1228:	b1 1d       	adc	r27, r1
    122a:	63 9f       	mul	r22, r19
    122c:	aa 27       	eor	r26, r26
    122e:	f0 0d       	add	r31, r0
    1230:	b1 1d       	adc	r27, r1
    1232:	aa 1f       	adc	r26, r26
    1234:	64 9f       	mul	r22, r20
    1236:	66 27       	eor	r22, r22
    1238:	b0 0d       	add	r27, r0
    123a:	a1 1d       	adc	r26, r1
    123c:	66 1f       	adc	r22, r22
    123e:	82 9f       	mul	r24, r18
    1240:	22 27       	eor	r18, r18
    1242:	b0 0d       	add	r27, r0
    1244:	a1 1d       	adc	r26, r1
    1246:	62 1f       	adc	r22, r18
    1248:	73 9f       	mul	r23, r19
    124a:	b0 0d       	add	r27, r0
    124c:	a1 1d       	adc	r26, r1
    124e:	62 1f       	adc	r22, r18
    1250:	83 9f       	mul	r24, r19
    1252:	a0 0d       	add	r26, r0
    1254:	61 1d       	adc	r22, r1
    1256:	22 1f       	adc	r18, r18
    1258:	74 9f       	mul	r23, r20
    125a:	33 27       	eor	r19, r19
    125c:	a0 0d       	add	r26, r0
    125e:	61 1d       	adc	r22, r1
    1260:	23 1f       	adc	r18, r19
    1262:	84 9f       	mul	r24, r20
    1264:	60 0d       	add	r22, r0
    1266:	21 1d       	adc	r18, r1
    1268:	82 2f       	mov	r24, r18
    126a:	76 2f       	mov	r23, r22
    126c:	6a 2f       	mov	r22, r26
    126e:	11 24       	eor	r1, r1
    1270:	9f 57       	subi	r25, 0x7F	; 127
    1272:	50 40       	sbci	r21, 0x00	; 0
    1274:	8a f0       	brmi	.+34     	; 0x1298 <__mulsf3_pse+0x84>
    1276:	e1 f0       	breq	.+56     	; 0x12b0 <__mulsf3_pse+0x9c>
    1278:	88 23       	and	r24, r24
    127a:	4a f0       	brmi	.+18     	; 0x128e <__mulsf3_pse+0x7a>
    127c:	ee 0f       	add	r30, r30
    127e:	ff 1f       	adc	r31, r31
    1280:	bb 1f       	adc	r27, r27
    1282:	66 1f       	adc	r22, r22
    1284:	77 1f       	adc	r23, r23
    1286:	88 1f       	adc	r24, r24
    1288:	91 50       	subi	r25, 0x01	; 1
    128a:	50 40       	sbci	r21, 0x00	; 0
    128c:	a9 f7       	brne	.-22     	; 0x1278 <__mulsf3_pse+0x64>
    128e:	9e 3f       	cpi	r25, 0xFE	; 254
    1290:	51 05       	cpc	r21, r1
    1292:	70 f0       	brcs	.+28     	; 0x12b0 <__mulsf3_pse+0x9c>
    1294:	bb c0       	rjmp	.+374    	; 0x140c <__fp_inf>
    1296:	09 c1       	rjmp	.+530    	; 0x14aa <__fp_szero>
    1298:	5f 3f       	cpi	r21, 0xFF	; 255
    129a:	ec f3       	brlt	.-6      	; 0x1296 <__mulsf3_pse+0x82>
    129c:	98 3e       	cpi	r25, 0xE8	; 232
    129e:	dc f3       	brlt	.-10     	; 0x1296 <__mulsf3_pse+0x82>
    12a0:	86 95       	lsr	r24
    12a2:	77 95       	ror	r23
    12a4:	67 95       	ror	r22
    12a6:	b7 95       	ror	r27
    12a8:	f7 95       	ror	r31
    12aa:	e7 95       	ror	r30
    12ac:	9f 5f       	subi	r25, 0xFF	; 255
    12ae:	c1 f7       	brne	.-16     	; 0x12a0 <__mulsf3_pse+0x8c>
    12b0:	fe 2b       	or	r31, r30
    12b2:	88 0f       	add	r24, r24
    12b4:	91 1d       	adc	r25, r1
    12b6:	96 95       	lsr	r25
    12b8:	87 95       	ror	r24
    12ba:	97 f9       	bld	r25, 7
    12bc:	08 95       	ret
    12be:	11 f4       	brne	.+4      	; 0x12c4 <__mulsf3_pse+0xb0>
    12c0:	0e f4       	brtc	.+2      	; 0x12c4 <__mulsf3_pse+0xb0>
    12c2:	b8 c0       	rjmp	.+368    	; 0x1434 <__fp_nan>
    12c4:	a9 c0       	rjmp	.+338    	; 0x1418 <__fp_mpack>

000012c6 <sqrt>:
    12c6:	d6 d0       	rcall	.+428    	; 0x1474 <__fp_splitA>
    12c8:	d0 f3       	brcs	.-12     	; 0x12be <__mulsf3_pse+0xaa>
    12ca:	99 23       	and	r25, r25
    12cc:	d9 f3       	breq	.-10     	; 0x12c4 <__mulsf3_pse+0xb0>
    12ce:	ce f3       	brts	.-14     	; 0x12c2 <__mulsf3_pse+0xae>
    12d0:	9f 57       	subi	r25, 0x7F	; 127
    12d2:	55 0b       	sbc	r21, r21
    12d4:	87 ff       	sbrs	r24, 7
    12d6:	b1 d0       	rcall	.+354    	; 0x143a <__fp_norm2>
    12d8:	00 24       	eor	r0, r0
    12da:	a0 e6       	ldi	r26, 0x60	; 96
    12dc:	40 ea       	ldi	r20, 0xA0	; 160
    12de:	90 01       	movw	r18, r0
    12e0:	80 58       	subi	r24, 0x80	; 128
    12e2:	56 95       	lsr	r21
    12e4:	97 95       	ror	r25
    12e6:	28 f4       	brcc	.+10     	; 0x12f2 <sqrt+0x2c>
    12e8:	80 5c       	subi	r24, 0xC0	; 192
    12ea:	66 0f       	add	r22, r22
    12ec:	77 1f       	adc	r23, r23
    12ee:	88 1f       	adc	r24, r24
    12f0:	20 f0       	brcs	.+8      	; 0x12fa <sqrt+0x34>
    12f2:	26 17       	cp	r18, r22
    12f4:	37 07       	cpc	r19, r23
    12f6:	48 07       	cpc	r20, r24
    12f8:	30 f4       	brcc	.+12     	; 0x1306 <sqrt+0x40>
    12fa:	62 1b       	sub	r22, r18
    12fc:	73 0b       	sbc	r23, r19
    12fe:	84 0b       	sbc	r24, r20
    1300:	20 29       	or	r18, r0
    1302:	31 29       	or	r19, r1
    1304:	4a 2b       	or	r20, r26
    1306:	a6 95       	lsr	r26
    1308:	17 94       	ror	r1
    130a:	07 94       	ror	r0
    130c:	20 25       	eor	r18, r0
    130e:	31 25       	eor	r19, r1
    1310:	4a 27       	eor	r20, r26
    1312:	58 f7       	brcc	.-42     	; 0x12ea <sqrt+0x24>
    1314:	66 0f       	add	r22, r22
    1316:	77 1f       	adc	r23, r23
    1318:	88 1f       	adc	r24, r24
    131a:	20 f0       	brcs	.+8      	; 0x1324 <sqrt+0x5e>
    131c:	26 17       	cp	r18, r22
    131e:	37 07       	cpc	r19, r23
    1320:	48 07       	cpc	r20, r24
    1322:	30 f4       	brcc	.+12     	; 0x1330 <sqrt+0x6a>
    1324:	62 0b       	sbc	r22, r18
    1326:	73 0b       	sbc	r23, r19
    1328:	84 0b       	sbc	r24, r20
    132a:	20 0d       	add	r18, r0
    132c:	31 1d       	adc	r19, r1
    132e:	41 1d       	adc	r20, r1
    1330:	a0 95       	com	r26
    1332:	81 f7       	brne	.-32     	; 0x1314 <sqrt+0x4e>
    1334:	b9 01       	movw	r22, r18
    1336:	84 2f       	mov	r24, r20
    1338:	91 58       	subi	r25, 0x81	; 129
    133a:	88 0f       	add	r24, r24
    133c:	96 95       	lsr	r25
    133e:	87 95       	ror	r24
    1340:	08 95       	ret

00001342 <__subsf3>:
    1342:	50 58       	subi	r21, 0x80	; 128

00001344 <__addsf3>:
    1344:	bb 27       	eor	r27, r27
    1346:	aa 27       	eor	r26, r26
    1348:	0e d0       	rcall	.+28     	; 0x1366 <__addsf3x>
    134a:	45 cf       	rjmp	.-374    	; 0x11d6 <__fp_round>
    134c:	7d d0       	rcall	.+250    	; 0x1448 <__fp_pscA>
    134e:	30 f0       	brcs	.+12     	; 0x135c <__addsf3+0x18>
    1350:	82 d0       	rcall	.+260    	; 0x1456 <__fp_pscB>
    1352:	20 f0       	brcs	.+8      	; 0x135c <__addsf3+0x18>
    1354:	31 f4       	brne	.+12     	; 0x1362 <__addsf3+0x1e>
    1356:	9f 3f       	cpi	r25, 0xFF	; 255
    1358:	11 f4       	brne	.+4      	; 0x135e <__addsf3+0x1a>
    135a:	1e f4       	brtc	.+6      	; 0x1362 <__addsf3+0x1e>
    135c:	6b c0       	rjmp	.+214    	; 0x1434 <__fp_nan>
    135e:	0e f4       	brtc	.+2      	; 0x1362 <__addsf3+0x1e>
    1360:	e0 95       	com	r30
    1362:	e7 fb       	bst	r30, 7
    1364:	53 c0       	rjmp	.+166    	; 0x140c <__fp_inf>

00001366 <__addsf3x>:
    1366:	e9 2f       	mov	r30, r25
    1368:	7d d0       	rcall	.+250    	; 0x1464 <__fp_split3>
    136a:	80 f3       	brcs	.-32     	; 0x134c <__addsf3+0x8>
    136c:	ba 17       	cp	r27, r26
    136e:	62 07       	cpc	r22, r18
    1370:	73 07       	cpc	r23, r19
    1372:	84 07       	cpc	r24, r20
    1374:	95 07       	cpc	r25, r21
    1376:	18 f0       	brcs	.+6      	; 0x137e <__addsf3x+0x18>
    1378:	71 f4       	brne	.+28     	; 0x1396 <__addsf3x+0x30>
    137a:	9e f5       	brtc	.+102    	; 0x13e2 <__addsf3x+0x7c>
    137c:	95 c0       	rjmp	.+298    	; 0x14a8 <__fp_zero>
    137e:	0e f4       	brtc	.+2      	; 0x1382 <__addsf3x+0x1c>
    1380:	e0 95       	com	r30
    1382:	0b 2e       	mov	r0, r27
    1384:	ba 2f       	mov	r27, r26
    1386:	a0 2d       	mov	r26, r0
    1388:	0b 01       	movw	r0, r22
    138a:	b9 01       	movw	r22, r18
    138c:	90 01       	movw	r18, r0
    138e:	0c 01       	movw	r0, r24
    1390:	ca 01       	movw	r24, r20
    1392:	a0 01       	movw	r20, r0
    1394:	11 24       	eor	r1, r1
    1396:	ff 27       	eor	r31, r31
    1398:	59 1b       	sub	r21, r25
    139a:	99 f0       	breq	.+38     	; 0x13c2 <__addsf3x+0x5c>
    139c:	59 3f       	cpi	r21, 0xF9	; 249
    139e:	50 f4       	brcc	.+20     	; 0x13b4 <__addsf3x+0x4e>
    13a0:	50 3e       	cpi	r21, 0xE0	; 224
    13a2:	68 f1       	brcs	.+90     	; 0x13fe <__addsf3x+0x98>
    13a4:	1a 16       	cp	r1, r26
    13a6:	f0 40       	sbci	r31, 0x00	; 0
    13a8:	a2 2f       	mov	r26, r18
    13aa:	23 2f       	mov	r18, r19
    13ac:	34 2f       	mov	r19, r20
    13ae:	44 27       	eor	r20, r20
    13b0:	58 5f       	subi	r21, 0xF8	; 248
    13b2:	f3 cf       	rjmp	.-26     	; 0x139a <__addsf3x+0x34>
    13b4:	46 95       	lsr	r20
    13b6:	37 95       	ror	r19
    13b8:	27 95       	ror	r18
    13ba:	a7 95       	ror	r26
    13bc:	f0 40       	sbci	r31, 0x00	; 0
    13be:	53 95       	inc	r21
    13c0:	c9 f7       	brne	.-14     	; 0x13b4 <__addsf3x+0x4e>
    13c2:	7e f4       	brtc	.+30     	; 0x13e2 <__addsf3x+0x7c>
    13c4:	1f 16       	cp	r1, r31
    13c6:	ba 0b       	sbc	r27, r26
    13c8:	62 0b       	sbc	r22, r18
    13ca:	73 0b       	sbc	r23, r19
    13cc:	84 0b       	sbc	r24, r20
    13ce:	ba f0       	brmi	.+46     	; 0x13fe <__addsf3x+0x98>
    13d0:	91 50       	subi	r25, 0x01	; 1
    13d2:	a1 f0       	breq	.+40     	; 0x13fc <__addsf3x+0x96>
    13d4:	ff 0f       	add	r31, r31
    13d6:	bb 1f       	adc	r27, r27
    13d8:	66 1f       	adc	r22, r22
    13da:	77 1f       	adc	r23, r23
    13dc:	88 1f       	adc	r24, r24
    13de:	c2 f7       	brpl	.-16     	; 0x13d0 <__addsf3x+0x6a>
    13e0:	0e c0       	rjmp	.+28     	; 0x13fe <__addsf3x+0x98>
    13e2:	ba 0f       	add	r27, r26
    13e4:	62 1f       	adc	r22, r18
    13e6:	73 1f       	adc	r23, r19
    13e8:	84 1f       	adc	r24, r20
    13ea:	48 f4       	brcc	.+18     	; 0x13fe <__addsf3x+0x98>
    13ec:	87 95       	ror	r24
    13ee:	77 95       	ror	r23
    13f0:	67 95       	ror	r22
    13f2:	b7 95       	ror	r27
    13f4:	f7 95       	ror	r31
    13f6:	9e 3f       	cpi	r25, 0xFE	; 254
    13f8:	08 f0       	brcs	.+2      	; 0x13fc <__addsf3x+0x96>
    13fa:	b3 cf       	rjmp	.-154    	; 0x1362 <__addsf3+0x1e>
    13fc:	93 95       	inc	r25
    13fe:	88 0f       	add	r24, r24
    1400:	08 f0       	brcs	.+2      	; 0x1404 <__addsf3x+0x9e>
    1402:	99 27       	eor	r25, r25
    1404:	ee 0f       	add	r30, r30
    1406:	97 95       	ror	r25
    1408:	87 95       	ror	r24
    140a:	08 95       	ret

0000140c <__fp_inf>:
    140c:	97 f9       	bld	r25, 7
    140e:	9f 67       	ori	r25, 0x7F	; 127
    1410:	80 e8       	ldi	r24, 0x80	; 128
    1412:	70 e0       	ldi	r23, 0x00	; 0
    1414:	60 e0       	ldi	r22, 0x00	; 0
    1416:	08 95       	ret

00001418 <__fp_mpack>:
    1418:	9f 3f       	cpi	r25, 0xFF	; 255
    141a:	31 f0       	breq	.+12     	; 0x1428 <__fp_mpack_finite+0xc>

0000141c <__fp_mpack_finite>:
    141c:	91 50       	subi	r25, 0x01	; 1
    141e:	20 f4       	brcc	.+8      	; 0x1428 <__fp_mpack_finite+0xc>
    1420:	87 95       	ror	r24
    1422:	77 95       	ror	r23
    1424:	67 95       	ror	r22
    1426:	b7 95       	ror	r27
    1428:	88 0f       	add	r24, r24
    142a:	91 1d       	adc	r25, r1
    142c:	96 95       	lsr	r25
    142e:	87 95       	ror	r24
    1430:	97 f9       	bld	r25, 7
    1432:	08 95       	ret

00001434 <__fp_nan>:
    1434:	9f ef       	ldi	r25, 0xFF	; 255
    1436:	80 ec       	ldi	r24, 0xC0	; 192
    1438:	08 95       	ret

0000143a <__fp_norm2>:
    143a:	91 50       	subi	r25, 0x01	; 1
    143c:	50 40       	sbci	r21, 0x00	; 0
    143e:	66 0f       	add	r22, r22
    1440:	77 1f       	adc	r23, r23
    1442:	88 1f       	adc	r24, r24
    1444:	d2 f7       	brpl	.-12     	; 0x143a <__fp_norm2>
    1446:	08 95       	ret

00001448 <__fp_pscA>:
    1448:	00 24       	eor	r0, r0
    144a:	0a 94       	dec	r0
    144c:	16 16       	cp	r1, r22
    144e:	17 06       	cpc	r1, r23
    1450:	18 06       	cpc	r1, r24
    1452:	09 06       	cpc	r0, r25
    1454:	08 95       	ret

00001456 <__fp_pscB>:
    1456:	00 24       	eor	r0, r0
    1458:	0a 94       	dec	r0
    145a:	12 16       	cp	r1, r18
    145c:	13 06       	cpc	r1, r19
    145e:	14 06       	cpc	r1, r20
    1460:	05 06       	cpc	r0, r21
    1462:	08 95       	ret

00001464 <__fp_split3>:
    1464:	57 fd       	sbrc	r21, 7
    1466:	90 58       	subi	r25, 0x80	; 128
    1468:	44 0f       	add	r20, r20
    146a:	55 1f       	adc	r21, r21
    146c:	59 f0       	breq	.+22     	; 0x1484 <__fp_splitA+0x10>
    146e:	5f 3f       	cpi	r21, 0xFF	; 255
    1470:	71 f0       	breq	.+28     	; 0x148e <__fp_splitA+0x1a>
    1472:	47 95       	ror	r20

00001474 <__fp_splitA>:
    1474:	88 0f       	add	r24, r24
    1476:	97 fb       	bst	r25, 7
    1478:	99 1f       	adc	r25, r25
    147a:	61 f0       	breq	.+24     	; 0x1494 <__fp_splitA+0x20>
    147c:	9f 3f       	cpi	r25, 0xFF	; 255
    147e:	79 f0       	breq	.+30     	; 0x149e <__fp_splitA+0x2a>
    1480:	87 95       	ror	r24
    1482:	08 95       	ret
    1484:	12 16       	cp	r1, r18
    1486:	13 06       	cpc	r1, r19
    1488:	14 06       	cpc	r1, r20
    148a:	55 1f       	adc	r21, r21
    148c:	f2 cf       	rjmp	.-28     	; 0x1472 <__fp_split3+0xe>
    148e:	46 95       	lsr	r20
    1490:	f1 df       	rcall	.-30     	; 0x1474 <__fp_splitA>
    1492:	08 c0       	rjmp	.+16     	; 0x14a4 <__fp_splitA+0x30>
    1494:	16 16       	cp	r1, r22
    1496:	17 06       	cpc	r1, r23
    1498:	18 06       	cpc	r1, r24
    149a:	99 1f       	adc	r25, r25
    149c:	f1 cf       	rjmp	.-30     	; 0x1480 <__fp_splitA+0xc>
    149e:	86 95       	lsr	r24
    14a0:	71 05       	cpc	r23, r1
    14a2:	61 05       	cpc	r22, r1
    14a4:	08 94       	sec
    14a6:	08 95       	ret

000014a8 <__fp_zero>:
    14a8:	e8 94       	clt

000014aa <__fp_szero>:
    14aa:	bb 27       	eor	r27, r27
    14ac:	66 27       	eor	r22, r22
    14ae:	77 27       	eor	r23, r23
    14b0:	cb 01       	movw	r24, r22
    14b2:	97 f9       	bld	r25, 7
    14b4:	08 95       	ret

000014b6 <__udivmodhi4>:
    14b6:	aa 1b       	sub	r26, r26
    14b8:	bb 1b       	sub	r27, r27
    14ba:	51 e1       	ldi	r21, 0x11	; 17
    14bc:	07 c0       	rjmp	.+14     	; 0x14cc <__udivmodhi4_ep>

000014be <__udivmodhi4_loop>:
    14be:	aa 1f       	adc	r26, r26
    14c0:	bb 1f       	adc	r27, r27
    14c2:	a6 17       	cp	r26, r22
    14c4:	b7 07       	cpc	r27, r23
    14c6:	10 f0       	brcs	.+4      	; 0x14cc <__udivmodhi4_ep>
    14c8:	a6 1b       	sub	r26, r22
    14ca:	b7 0b       	sbc	r27, r23

000014cc <__udivmodhi4_ep>:
    14cc:	88 1f       	adc	r24, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	5a 95       	dec	r21
    14d2:	a9 f7       	brne	.-22     	; 0x14be <__udivmodhi4_loop>
    14d4:	80 95       	com	r24
    14d6:	90 95       	com	r25
    14d8:	bc 01       	movw	r22, r24
    14da:	cd 01       	movw	r24, r26
    14dc:	08 95       	ret

000014de <__prologue_saves__>:
    14de:	2f 92       	push	r2
    14e0:	3f 92       	push	r3
    14e2:	4f 92       	push	r4
    14e4:	5f 92       	push	r5
    14e6:	6f 92       	push	r6
    14e8:	7f 92       	push	r7
    14ea:	8f 92       	push	r8
    14ec:	9f 92       	push	r9
    14ee:	af 92       	push	r10
    14f0:	bf 92       	push	r11
    14f2:	cf 92       	push	r12
    14f4:	df 92       	push	r13
    14f6:	ef 92       	push	r14
    14f8:	ff 92       	push	r15
    14fa:	0f 93       	push	r16
    14fc:	1f 93       	push	r17
    14fe:	cf 93       	push	r28
    1500:	df 93       	push	r29
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
    1506:	ca 1b       	sub	r28, r26
    1508:	db 0b       	sbc	r29, r27
    150a:	0f b6       	in	r0, 0x3f	; 63
    150c:	f8 94       	cli
    150e:	de bf       	out	0x3e, r29	; 62
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	cd bf       	out	0x3d, r28	; 61
    1514:	09 94       	ijmp

00001516 <__epilogue_restores__>:
    1516:	2a 88       	ldd	r2, Y+18	; 0x12
    1518:	39 88       	ldd	r3, Y+17	; 0x11
    151a:	48 88       	ldd	r4, Y+16	; 0x10
    151c:	5f 84       	ldd	r5, Y+15	; 0x0f
    151e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1520:	7d 84       	ldd	r7, Y+13	; 0x0d
    1522:	8c 84       	ldd	r8, Y+12	; 0x0c
    1524:	9b 84       	ldd	r9, Y+11	; 0x0b
    1526:	aa 84       	ldd	r10, Y+10	; 0x0a
    1528:	b9 84       	ldd	r11, Y+9	; 0x09
    152a:	c8 84       	ldd	r12, Y+8	; 0x08
    152c:	df 80       	ldd	r13, Y+7	; 0x07
    152e:	ee 80       	ldd	r14, Y+6	; 0x06
    1530:	fd 80       	ldd	r15, Y+5	; 0x05
    1532:	0c 81       	ldd	r16, Y+4	; 0x04
    1534:	1b 81       	ldd	r17, Y+3	; 0x03
    1536:	aa 81       	ldd	r26, Y+2	; 0x02
    1538:	b9 81       	ldd	r27, Y+1	; 0x01
    153a:	ce 0f       	add	r28, r30
    153c:	d1 1d       	adc	r29, r1
    153e:	0f b6       	in	r0, 0x3f	; 63
    1540:	f8 94       	cli
    1542:	de bf       	out	0x3e, r29	; 62
    1544:	0f be       	out	0x3f, r0	; 63
    1546:	cd bf       	out	0x3d, r28	; 61
    1548:	ed 01       	movw	r28, r26
    154a:	08 95       	ret

0000154c <__ftoa_engine>:
    154c:	28 30       	cpi	r18, 0x08	; 8
    154e:	08 f0       	brcs	.+2      	; 0x1552 <__ftoa_engine+0x6>
    1550:	27 e0       	ldi	r18, 0x07	; 7
    1552:	33 27       	eor	r19, r19
    1554:	da 01       	movw	r26, r20
    1556:	99 0f       	add	r25, r25
    1558:	31 1d       	adc	r19, r1
    155a:	87 fd       	sbrc	r24, 7
    155c:	91 60       	ori	r25, 0x01	; 1
    155e:	00 96       	adiw	r24, 0x00	; 0
    1560:	61 05       	cpc	r22, r1
    1562:	71 05       	cpc	r23, r1
    1564:	39 f4       	brne	.+14     	; 0x1574 <__ftoa_engine+0x28>
    1566:	32 60       	ori	r19, 0x02	; 2
    1568:	2e 5f       	subi	r18, 0xFE	; 254
    156a:	3d 93       	st	X+, r19
    156c:	30 e3       	ldi	r19, 0x30	; 48
    156e:	2a 95       	dec	r18
    1570:	e1 f7       	brne	.-8      	; 0x156a <__ftoa_engine+0x1e>
    1572:	08 95       	ret
    1574:	9f 3f       	cpi	r25, 0xFF	; 255
    1576:	30 f0       	brcs	.+12     	; 0x1584 <__ftoa_engine+0x38>
    1578:	80 38       	cpi	r24, 0x80	; 128
    157a:	71 05       	cpc	r23, r1
    157c:	61 05       	cpc	r22, r1
    157e:	09 f0       	breq	.+2      	; 0x1582 <__ftoa_engine+0x36>
    1580:	3c 5f       	subi	r19, 0xFC	; 252
    1582:	3c 5f       	subi	r19, 0xFC	; 252
    1584:	3d 93       	st	X+, r19
    1586:	91 30       	cpi	r25, 0x01	; 1
    1588:	08 f0       	brcs	.+2      	; 0x158c <__ftoa_engine+0x40>
    158a:	80 68       	ori	r24, 0x80	; 128
    158c:	91 1d       	adc	r25, r1
    158e:	df 93       	push	r29
    1590:	cf 93       	push	r28
    1592:	1f 93       	push	r17
    1594:	0f 93       	push	r16
    1596:	ff 92       	push	r15
    1598:	ef 92       	push	r14
    159a:	19 2f       	mov	r17, r25
    159c:	98 7f       	andi	r25, 0xF8	; 248
    159e:	96 95       	lsr	r25
    15a0:	e9 2f       	mov	r30, r25
    15a2:	96 95       	lsr	r25
    15a4:	96 95       	lsr	r25
    15a6:	e9 0f       	add	r30, r25
    15a8:	ff 27       	eor	r31, r31
    15aa:	ec 53       	subi	r30, 0x3C	; 60
    15ac:	ff 4f       	sbci	r31, 0xFF	; 255
    15ae:	99 27       	eor	r25, r25
    15b0:	33 27       	eor	r19, r19
    15b2:	ee 24       	eor	r14, r14
    15b4:	ff 24       	eor	r15, r15
    15b6:	a7 01       	movw	r20, r14
    15b8:	e7 01       	movw	r28, r14
    15ba:	05 90       	lpm	r0, Z+
    15bc:	08 94       	sec
    15be:	07 94       	ror	r0
    15c0:	28 f4       	brcc	.+10     	; 0x15cc <__ftoa_engine+0x80>
    15c2:	36 0f       	add	r19, r22
    15c4:	e7 1e       	adc	r14, r23
    15c6:	f8 1e       	adc	r15, r24
    15c8:	49 1f       	adc	r20, r25
    15ca:	51 1d       	adc	r21, r1
    15cc:	66 0f       	add	r22, r22
    15ce:	77 1f       	adc	r23, r23
    15d0:	88 1f       	adc	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	06 94       	lsr	r0
    15d6:	a1 f7       	brne	.-24     	; 0x15c0 <__ftoa_engine+0x74>
    15d8:	05 90       	lpm	r0, Z+
    15da:	07 94       	ror	r0
    15dc:	28 f4       	brcc	.+10     	; 0x15e8 <__ftoa_engine+0x9c>
    15de:	e7 0e       	add	r14, r23
    15e0:	f8 1e       	adc	r15, r24
    15e2:	49 1f       	adc	r20, r25
    15e4:	56 1f       	adc	r21, r22
    15e6:	c1 1d       	adc	r28, r1
    15e8:	77 0f       	add	r23, r23
    15ea:	88 1f       	adc	r24, r24
    15ec:	99 1f       	adc	r25, r25
    15ee:	66 1f       	adc	r22, r22
    15f0:	06 94       	lsr	r0
    15f2:	a1 f7       	brne	.-24     	; 0x15dc <__ftoa_engine+0x90>
    15f4:	05 90       	lpm	r0, Z+
    15f6:	07 94       	ror	r0
    15f8:	28 f4       	brcc	.+10     	; 0x1604 <__ftoa_engine+0xb8>
    15fa:	f8 0e       	add	r15, r24
    15fc:	49 1f       	adc	r20, r25
    15fe:	56 1f       	adc	r21, r22
    1600:	c7 1f       	adc	r28, r23
    1602:	d1 1d       	adc	r29, r1
    1604:	88 0f       	add	r24, r24
    1606:	99 1f       	adc	r25, r25
    1608:	66 1f       	adc	r22, r22
    160a:	77 1f       	adc	r23, r23
    160c:	06 94       	lsr	r0
    160e:	a1 f7       	brne	.-24     	; 0x15f8 <__ftoa_engine+0xac>
    1610:	05 90       	lpm	r0, Z+
    1612:	07 94       	ror	r0
    1614:	20 f4       	brcc	.+8      	; 0x161e <__ftoa_engine+0xd2>
    1616:	49 0f       	add	r20, r25
    1618:	56 1f       	adc	r21, r22
    161a:	c7 1f       	adc	r28, r23
    161c:	d8 1f       	adc	r29, r24
    161e:	99 0f       	add	r25, r25
    1620:	66 1f       	adc	r22, r22
    1622:	77 1f       	adc	r23, r23
    1624:	88 1f       	adc	r24, r24
    1626:	06 94       	lsr	r0
    1628:	a9 f7       	brne	.-22     	; 0x1614 <__ftoa_engine+0xc8>
    162a:	84 91       	lpm	r24, Z+
    162c:	10 95       	com	r17
    162e:	17 70       	andi	r17, 0x07	; 7
    1630:	41 f0       	breq	.+16     	; 0x1642 <__ftoa_engine+0xf6>
    1632:	d6 95       	lsr	r29
    1634:	c7 95       	ror	r28
    1636:	57 95       	ror	r21
    1638:	47 95       	ror	r20
    163a:	f7 94       	ror	r15
    163c:	e7 94       	ror	r14
    163e:	1a 95       	dec	r17
    1640:	c1 f7       	brne	.-16     	; 0x1632 <__ftoa_engine+0xe6>
    1642:	ea e6       	ldi	r30, 0x6A	; 106
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	68 94       	set
    1648:	15 90       	lpm	r1, Z+
    164a:	15 91       	lpm	r17, Z+
    164c:	35 91       	lpm	r19, Z+
    164e:	65 91       	lpm	r22, Z+
    1650:	95 91       	lpm	r25, Z+
    1652:	05 90       	lpm	r0, Z+
    1654:	7f e2       	ldi	r23, 0x2F	; 47
    1656:	73 95       	inc	r23
    1658:	e1 18       	sub	r14, r1
    165a:	f1 0a       	sbc	r15, r17
    165c:	43 0b       	sbc	r20, r19
    165e:	56 0b       	sbc	r21, r22
    1660:	c9 0b       	sbc	r28, r25
    1662:	d0 09       	sbc	r29, r0
    1664:	c0 f7       	brcc	.-16     	; 0x1656 <__ftoa_engine+0x10a>
    1666:	e1 0c       	add	r14, r1
    1668:	f1 1e       	adc	r15, r17
    166a:	43 1f       	adc	r20, r19
    166c:	56 1f       	adc	r21, r22
    166e:	c9 1f       	adc	r28, r25
    1670:	d0 1d       	adc	r29, r0
    1672:	7e f4       	brtc	.+30     	; 0x1692 <__ftoa_engine+0x146>
    1674:	70 33       	cpi	r23, 0x30	; 48
    1676:	11 f4       	brne	.+4      	; 0x167c <__ftoa_engine+0x130>
    1678:	8a 95       	dec	r24
    167a:	e6 cf       	rjmp	.-52     	; 0x1648 <__ftoa_engine+0xfc>
    167c:	e8 94       	clt
    167e:	01 50       	subi	r16, 0x01	; 1
    1680:	30 f0       	brcs	.+12     	; 0x168e <__ftoa_engine+0x142>
    1682:	08 0f       	add	r16, r24
    1684:	0a f4       	brpl	.+2      	; 0x1688 <__ftoa_engine+0x13c>
    1686:	00 27       	eor	r16, r16
    1688:	02 17       	cp	r16, r18
    168a:	08 f4       	brcc	.+2      	; 0x168e <__ftoa_engine+0x142>
    168c:	20 2f       	mov	r18, r16
    168e:	23 95       	inc	r18
    1690:	02 2f       	mov	r16, r18
    1692:	7a 33       	cpi	r23, 0x3A	; 58
    1694:	28 f0       	brcs	.+10     	; 0x16a0 <__ftoa_engine+0x154>
    1696:	79 e3       	ldi	r23, 0x39	; 57
    1698:	7d 93       	st	X+, r23
    169a:	2a 95       	dec	r18
    169c:	e9 f7       	brne	.-6      	; 0x1698 <__ftoa_engine+0x14c>
    169e:	10 c0       	rjmp	.+32     	; 0x16c0 <__ftoa_engine+0x174>
    16a0:	7d 93       	st	X+, r23
    16a2:	2a 95       	dec	r18
    16a4:	89 f6       	brne	.-94     	; 0x1648 <__ftoa_engine+0xfc>
    16a6:	06 94       	lsr	r0
    16a8:	97 95       	ror	r25
    16aa:	67 95       	ror	r22
    16ac:	37 95       	ror	r19
    16ae:	17 95       	ror	r17
    16b0:	17 94       	ror	r1
    16b2:	e1 18       	sub	r14, r1
    16b4:	f1 0a       	sbc	r15, r17
    16b6:	43 0b       	sbc	r20, r19
    16b8:	56 0b       	sbc	r21, r22
    16ba:	c9 0b       	sbc	r28, r25
    16bc:	d0 09       	sbc	r29, r0
    16be:	98 f0       	brcs	.+38     	; 0x16e6 <__ftoa_engine+0x19a>
    16c0:	23 95       	inc	r18
    16c2:	7e 91       	ld	r23, -X
    16c4:	73 95       	inc	r23
    16c6:	7a 33       	cpi	r23, 0x3A	; 58
    16c8:	08 f0       	brcs	.+2      	; 0x16cc <__ftoa_engine+0x180>
    16ca:	70 e3       	ldi	r23, 0x30	; 48
    16cc:	7c 93       	st	X, r23
    16ce:	20 13       	cpse	r18, r16
    16d0:	b8 f7       	brcc	.-18     	; 0x16c0 <__ftoa_engine+0x174>
    16d2:	7e 91       	ld	r23, -X
    16d4:	70 61       	ori	r23, 0x10	; 16
    16d6:	7d 93       	st	X+, r23
    16d8:	30 f0       	brcs	.+12     	; 0x16e6 <__ftoa_engine+0x19a>
    16da:	83 95       	inc	r24
    16dc:	71 e3       	ldi	r23, 0x31	; 49
    16de:	7d 93       	st	X+, r23
    16e0:	70 e3       	ldi	r23, 0x30	; 48
    16e2:	2a 95       	dec	r18
    16e4:	e1 f7       	brne	.-8      	; 0x16de <__ftoa_engine+0x192>
    16e6:	11 24       	eor	r1, r1
    16e8:	ef 90       	pop	r14
    16ea:	ff 90       	pop	r15
    16ec:	0f 91       	pop	r16
    16ee:	1f 91       	pop	r17
    16f0:	cf 91       	pop	r28
    16f2:	df 91       	pop	r29
    16f4:	99 27       	eor	r25, r25
    16f6:	87 fd       	sbrc	r24, 7
    16f8:	90 95       	com	r25
    16fa:	08 95       	ret

000016fc <strnlen_P>:
    16fc:	fc 01       	movw	r30, r24
    16fe:	05 90       	lpm	r0, Z+
    1700:	61 50       	subi	r22, 0x01	; 1
    1702:	70 40       	sbci	r23, 0x00	; 0
    1704:	01 10       	cpse	r0, r1
    1706:	d8 f7       	brcc	.-10     	; 0x16fe <strnlen_P+0x2>
    1708:	80 95       	com	r24
    170a:	90 95       	com	r25
    170c:	8e 0f       	add	r24, r30
    170e:	9f 1f       	adc	r25, r31
    1710:	08 95       	ret

00001712 <strnlen>:
    1712:	fc 01       	movw	r30, r24
    1714:	61 50       	subi	r22, 0x01	; 1
    1716:	70 40       	sbci	r23, 0x00	; 0
    1718:	01 90       	ld	r0, Z+
    171a:	01 10       	cpse	r0, r1
    171c:	d8 f7       	brcc	.-10     	; 0x1714 <strnlen+0x2>
    171e:	80 95       	com	r24
    1720:	90 95       	com	r25
    1722:	8e 0f       	add	r24, r30
    1724:	9f 1f       	adc	r25, r31
    1726:	08 95       	ret

00001728 <fputc>:
    1728:	0f 93       	push	r16
    172a:	1f 93       	push	r17
    172c:	cf 93       	push	r28
    172e:	df 93       	push	r29
    1730:	8c 01       	movw	r16, r24
    1732:	eb 01       	movw	r28, r22
    1734:	8b 81       	ldd	r24, Y+3	; 0x03
    1736:	81 ff       	sbrs	r24, 1
    1738:	1b c0       	rjmp	.+54     	; 0x1770 <fputc+0x48>
    173a:	82 ff       	sbrs	r24, 2
    173c:	0d c0       	rjmp	.+26     	; 0x1758 <fputc+0x30>
    173e:	2e 81       	ldd	r18, Y+6	; 0x06
    1740:	3f 81       	ldd	r19, Y+7	; 0x07
    1742:	8c 81       	ldd	r24, Y+4	; 0x04
    1744:	9d 81       	ldd	r25, Y+5	; 0x05
    1746:	28 17       	cp	r18, r24
    1748:	39 07       	cpc	r19, r25
    174a:	64 f4       	brge	.+24     	; 0x1764 <fputc+0x3c>
    174c:	e8 81       	ld	r30, Y
    174e:	f9 81       	ldd	r31, Y+1	; 0x01
    1750:	01 93       	st	Z+, r16
    1752:	f9 83       	std	Y+1, r31	; 0x01
    1754:	e8 83       	st	Y, r30
    1756:	06 c0       	rjmp	.+12     	; 0x1764 <fputc+0x3c>
    1758:	e8 85       	ldd	r30, Y+8	; 0x08
    175a:	f9 85       	ldd	r31, Y+9	; 0x09
    175c:	80 2f       	mov	r24, r16
    175e:	09 95       	icall
    1760:	00 97       	sbiw	r24, 0x00	; 0
    1762:	31 f4       	brne	.+12     	; 0x1770 <fputc+0x48>
    1764:	8e 81       	ldd	r24, Y+6	; 0x06
    1766:	9f 81       	ldd	r25, Y+7	; 0x07
    1768:	01 96       	adiw	r24, 0x01	; 1
    176a:	9f 83       	std	Y+7, r25	; 0x07
    176c:	8e 83       	std	Y+6, r24	; 0x06
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <fputc+0x4c>
    1770:	0f ef       	ldi	r16, 0xFF	; 255
    1772:	1f ef       	ldi	r17, 0xFF	; 255
    1774:	c8 01       	movw	r24, r16
    1776:	df 91       	pop	r29
    1778:	cf 91       	pop	r28
    177a:	1f 91       	pop	r17
    177c:	0f 91       	pop	r16
    177e:	08 95       	ret

00001780 <printf>:
    1780:	a0 e0       	ldi	r26, 0x00	; 0
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	e5 ec       	ldi	r30, 0xC5	; 197
    1786:	fb e0       	ldi	r31, 0x0B	; 11
    1788:	ba ce       	rjmp	.-652    	; 0x14fe <__prologue_saves__+0x20>
    178a:	fe 01       	movw	r30, r28
    178c:	35 96       	adiw	r30, 0x05	; 5
    178e:	61 91       	ld	r22, Z+
    1790:	71 91       	ld	r23, Z+
    1792:	80 91 f2 00 	lds	r24, 0x00F2
    1796:	90 91 f3 00 	lds	r25, 0x00F3
    179a:	af 01       	movw	r20, r30
    179c:	10 d9       	rcall	.-3552   	; 0x9be <vfprintf>
    179e:	20 96       	adiw	r28, 0x00	; 0
    17a0:	e2 e0       	ldi	r30, 0x02	; 2
    17a2:	c9 ce       	rjmp	.-622    	; 0x1536 <__epilogue_restores__+0x20>

000017a4 <__ultoa_invert>:
    17a4:	fa 01       	movw	r30, r20
    17a6:	aa 27       	eor	r26, r26
    17a8:	28 30       	cpi	r18, 0x08	; 8
    17aa:	51 f1       	breq	.+84     	; 0x1800 <__ultoa_invert+0x5c>
    17ac:	20 31       	cpi	r18, 0x10	; 16
    17ae:	81 f1       	breq	.+96     	; 0x1810 <__ultoa_invert+0x6c>
    17b0:	e8 94       	clt
    17b2:	6f 93       	push	r22
    17b4:	6e 7f       	andi	r22, 0xFE	; 254
    17b6:	6e 5f       	subi	r22, 0xFE	; 254
    17b8:	7f 4f       	sbci	r23, 0xFF	; 255
    17ba:	8f 4f       	sbci	r24, 0xFF	; 255
    17bc:	9f 4f       	sbci	r25, 0xFF	; 255
    17be:	af 4f       	sbci	r26, 0xFF	; 255
    17c0:	b1 e0       	ldi	r27, 0x01	; 1
    17c2:	3e d0       	rcall	.+124    	; 0x1840 <__ultoa_invert+0x9c>
    17c4:	b4 e0       	ldi	r27, 0x04	; 4
    17c6:	3c d0       	rcall	.+120    	; 0x1840 <__ultoa_invert+0x9c>
    17c8:	67 0f       	add	r22, r23
    17ca:	78 1f       	adc	r23, r24
    17cc:	89 1f       	adc	r24, r25
    17ce:	9a 1f       	adc	r25, r26
    17d0:	a1 1d       	adc	r26, r1
    17d2:	68 0f       	add	r22, r24
    17d4:	79 1f       	adc	r23, r25
    17d6:	8a 1f       	adc	r24, r26
    17d8:	91 1d       	adc	r25, r1
    17da:	a1 1d       	adc	r26, r1
    17dc:	6a 0f       	add	r22, r26
    17de:	71 1d       	adc	r23, r1
    17e0:	81 1d       	adc	r24, r1
    17e2:	91 1d       	adc	r25, r1
    17e4:	a1 1d       	adc	r26, r1
    17e6:	20 d0       	rcall	.+64     	; 0x1828 <__ultoa_invert+0x84>
    17e8:	09 f4       	brne	.+2      	; 0x17ec <__ultoa_invert+0x48>
    17ea:	68 94       	set
    17ec:	3f 91       	pop	r19
    17ee:	2a e0       	ldi	r18, 0x0A	; 10
    17f0:	26 9f       	mul	r18, r22
    17f2:	11 24       	eor	r1, r1
    17f4:	30 19       	sub	r19, r0
    17f6:	30 5d       	subi	r19, 0xD0	; 208
    17f8:	31 93       	st	Z+, r19
    17fa:	de f6       	brtc	.-74     	; 0x17b2 <__ultoa_invert+0xe>
    17fc:	cf 01       	movw	r24, r30
    17fe:	08 95       	ret
    1800:	46 2f       	mov	r20, r22
    1802:	47 70       	andi	r20, 0x07	; 7
    1804:	40 5d       	subi	r20, 0xD0	; 208
    1806:	41 93       	st	Z+, r20
    1808:	b3 e0       	ldi	r27, 0x03	; 3
    180a:	0f d0       	rcall	.+30     	; 0x182a <__ultoa_invert+0x86>
    180c:	c9 f7       	brne	.-14     	; 0x1800 <__ultoa_invert+0x5c>
    180e:	f6 cf       	rjmp	.-20     	; 0x17fc <__ultoa_invert+0x58>
    1810:	46 2f       	mov	r20, r22
    1812:	4f 70       	andi	r20, 0x0F	; 15
    1814:	40 5d       	subi	r20, 0xD0	; 208
    1816:	4a 33       	cpi	r20, 0x3A	; 58
    1818:	18 f0       	brcs	.+6      	; 0x1820 <__ultoa_invert+0x7c>
    181a:	49 5d       	subi	r20, 0xD9	; 217
    181c:	31 fd       	sbrc	r19, 1
    181e:	40 52       	subi	r20, 0x20	; 32
    1820:	41 93       	st	Z+, r20
    1822:	02 d0       	rcall	.+4      	; 0x1828 <__ultoa_invert+0x84>
    1824:	a9 f7       	brne	.-22     	; 0x1810 <__ultoa_invert+0x6c>
    1826:	ea cf       	rjmp	.-44     	; 0x17fc <__ultoa_invert+0x58>
    1828:	b4 e0       	ldi	r27, 0x04	; 4
    182a:	a6 95       	lsr	r26
    182c:	97 95       	ror	r25
    182e:	87 95       	ror	r24
    1830:	77 95       	ror	r23
    1832:	67 95       	ror	r22
    1834:	ba 95       	dec	r27
    1836:	c9 f7       	brne	.-14     	; 0x182a <__ultoa_invert+0x86>
    1838:	00 97       	sbiw	r24, 0x00	; 0
    183a:	61 05       	cpc	r22, r1
    183c:	71 05       	cpc	r23, r1
    183e:	08 95       	ret
    1840:	9b 01       	movw	r18, r22
    1842:	ac 01       	movw	r20, r24
    1844:	0a 2e       	mov	r0, r26
    1846:	06 94       	lsr	r0
    1848:	57 95       	ror	r21
    184a:	47 95       	ror	r20
    184c:	37 95       	ror	r19
    184e:	27 95       	ror	r18
    1850:	ba 95       	dec	r27
    1852:	c9 f7       	brne	.-14     	; 0x1846 <__ultoa_invert+0xa2>
    1854:	62 0f       	add	r22, r18
    1856:	73 1f       	adc	r23, r19
    1858:	84 1f       	adc	r24, r20
    185a:	95 1f       	adc	r25, r21
    185c:	a0 1d       	adc	r26, r0
    185e:	08 95       	ret

00001860 <_exit>:
    1860:	f8 94       	cli

00001862 <__stop_program>:
    1862:	ff cf       	rjmp	.-2      	; 0x1862 <__stop_program>
