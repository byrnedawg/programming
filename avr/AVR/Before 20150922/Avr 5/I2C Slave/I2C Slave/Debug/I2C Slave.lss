
I2C Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000906  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000002e  00800060  00800060  0000097a  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  0000097c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00001048  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  000010cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000002f8  00000000  00000000  0000110d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005e4  00000000  00000000  00001405  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000189  00000000  00000000  000019e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000578  00000000  00000000  00001b72  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  000020ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002a4  00000000  00000000  0000218c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000056  00000000  00000000  00002430  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	d3 c0       	rjmp	.+422    	; 0x1a8 <__ctors_end>
   2:	ed c0       	rjmp	.+474    	; 0x1de <__bad_interrupt>
   4:	ec c0       	rjmp	.+472    	; 0x1de <__bad_interrupt>
   6:	eb c0       	rjmp	.+470    	; 0x1de <__bad_interrupt>
   8:	ea c0       	rjmp	.+468    	; 0x1de <__bad_interrupt>
   a:	e9 c0       	rjmp	.+466    	; 0x1de <__bad_interrupt>
   c:	e8 c0       	rjmp	.+464    	; 0x1de <__bad_interrupt>
   e:	e7 c0       	rjmp	.+462    	; 0x1de <__bad_interrupt>
  10:	e6 c0       	rjmp	.+460    	; 0x1de <__bad_interrupt>
  12:	e5 c0       	rjmp	.+458    	; 0x1de <__bad_interrupt>
  14:	e4 c0       	rjmp	.+456    	; 0x1de <__bad_interrupt>
  16:	e3 c0       	rjmp	.+454    	; 0x1de <__bad_interrupt>
  18:	e2 c0       	rjmp	.+452    	; 0x1de <__bad_interrupt>
  1a:	e1 c0       	rjmp	.+450    	; 0x1de <__bad_interrupt>
  1c:	e0 c0       	rjmp	.+448    	; 0x1de <__bad_interrupt>
  1e:	df c0       	rjmp	.+446    	; 0x1de <__bad_interrupt>
  20:	de c0       	rjmp	.+444    	; 0x1de <__bad_interrupt>
  22:	71 c2       	rjmp	.+1250   	; 0x506 <__vector_17>
  24:	dc c0       	rjmp	.+440    	; 0x1de <__bad_interrupt>
  26:	a2 c2       	rjmp	.+1348   	; 0x56c <__vector_17+0x66>
  28:	06 c4       	rjmp	.+2060   	; 0x836 <__vector_17+0x330>
  2a:	05 c4       	rjmp	.+2058   	; 0x836 <__vector_17+0x330>
  2c:	04 c4       	rjmp	.+2056   	; 0x836 <__vector_17+0x330>
  2e:	03 c4       	rjmp	.+2054   	; 0x836 <__vector_17+0x330>
  30:	02 c4       	rjmp	.+2052   	; 0x836 <__vector_17+0x330>
  32:	01 c4       	rjmp	.+2050   	; 0x836 <__vector_17+0x330>
  34:	00 c4       	rjmp	.+2048   	; 0x836 <__vector_17+0x330>
  36:	9a c2       	rjmp	.+1332   	; 0x56c <__vector_17+0x66>
  38:	fe c3       	rjmp	.+2044   	; 0x836 <__vector_17+0x330>
  3a:	fd c3       	rjmp	.+2042   	; 0x836 <__vector_17+0x330>
  3c:	fc c3       	rjmp	.+2040   	; 0x836 <__vector_17+0x330>
  3e:	fb c3       	rjmp	.+2038   	; 0x836 <__vector_17+0x330>
  40:	fa c3       	rjmp	.+2036   	; 0x836 <__vector_17+0x330>
  42:	f9 c3       	rjmp	.+2034   	; 0x836 <__vector_17+0x330>
  44:	f8 c3       	rjmp	.+2032   	; 0x836 <__vector_17+0x330>
  46:	bf c2       	rjmp	.+1406   	; 0x5c6 <__vector_17+0xc0>
  48:	f6 c3       	rjmp	.+2028   	; 0x836 <__vector_17+0x330>
  4a:	f5 c3       	rjmp	.+2026   	; 0x836 <__vector_17+0x330>
  4c:	f4 c3       	rjmp	.+2024   	; 0x836 <__vector_17+0x330>
  4e:	f3 c3       	rjmp	.+2022   	; 0x836 <__vector_17+0x330>
  50:	f2 c3       	rjmp	.+2020   	; 0x836 <__vector_17+0x330>
  52:	f1 c3       	rjmp	.+2018   	; 0x836 <__vector_17+0x330>
  54:	f0 c3       	rjmp	.+2016   	; 0x836 <__vector_17+0x330>
  56:	e1 c3       	rjmp	.+1986   	; 0x81a <__vector_17+0x314>
  58:	ee c3       	rjmp	.+2012   	; 0x836 <__vector_17+0x330>
  5a:	ed c3       	rjmp	.+2010   	; 0x836 <__vector_17+0x330>
  5c:	ec c3       	rjmp	.+2008   	; 0x836 <__vector_17+0x330>
  5e:	eb c3       	rjmp	.+2006   	; 0x836 <__vector_17+0x330>
  60:	ea c3       	rjmp	.+2004   	; 0x836 <__vector_17+0x330>
  62:	e9 c3       	rjmp	.+2002   	; 0x836 <__vector_17+0x330>
  64:	e8 c3       	rjmp	.+2000   	; 0x836 <__vector_17+0x330>
  66:	af c2       	rjmp	.+1374   	; 0x5c6 <__vector_17+0xc0>
  68:	e6 c3       	rjmp	.+1996   	; 0x836 <__vector_17+0x330>
  6a:	e5 c3       	rjmp	.+1994   	; 0x836 <__vector_17+0x330>
  6c:	e4 c3       	rjmp	.+1992   	; 0x836 <__vector_17+0x330>
  6e:	e3 c3       	rjmp	.+1990   	; 0x836 <__vector_17+0x330>
  70:	e2 c3       	rjmp	.+1988   	; 0x836 <__vector_17+0x330>
  72:	e1 c3       	rjmp	.+1986   	; 0x836 <__vector_17+0x330>
  74:	e0 c3       	rjmp	.+1984   	; 0x836 <__vector_17+0x330>
  76:	d1 c3       	rjmp	.+1954   	; 0x81a <__vector_17+0x314>
  78:	de c3       	rjmp	.+1980   	; 0x836 <__vector_17+0x330>
  7a:	dd c3       	rjmp	.+1978   	; 0x836 <__vector_17+0x330>
  7c:	dc c3       	rjmp	.+1976   	; 0x836 <__vector_17+0x330>
  7e:	db c3       	rjmp	.+1974   	; 0x836 <__vector_17+0x330>
  80:	da c3       	rjmp	.+1972   	; 0x836 <__vector_17+0x330>
  82:	d9 c3       	rjmp	.+1970   	; 0x836 <__vector_17+0x330>
  84:	d8 c3       	rjmp	.+1968   	; 0x836 <__vector_17+0x330>
  86:	d7 c3       	rjmp	.+1966   	; 0x836 <__vector_17+0x330>
  88:	d6 c3       	rjmp	.+1964   	; 0x836 <__vector_17+0x330>
  8a:	d5 c3       	rjmp	.+1962   	; 0x836 <__vector_17+0x330>
  8c:	d4 c3       	rjmp	.+1960   	; 0x836 <__vector_17+0x330>
  8e:	d3 c3       	rjmp	.+1958   	; 0x836 <__vector_17+0x330>
  90:	d2 c3       	rjmp	.+1956   	; 0x836 <__vector_17+0x330>
  92:	d1 c3       	rjmp	.+1954   	; 0x836 <__vector_17+0x330>
  94:	d0 c3       	rjmp	.+1952   	; 0x836 <__vector_17+0x330>
  96:	ff c2       	rjmp	.+1534   	; 0x696 <__vector_17+0x190>
  98:	ce c3       	rjmp	.+1948   	; 0x836 <__vector_17+0x330>
  9a:	cd c3       	rjmp	.+1946   	; 0x836 <__vector_17+0x330>
  9c:	cc c3       	rjmp	.+1944   	; 0x836 <__vector_17+0x330>
  9e:	cb c3       	rjmp	.+1942   	; 0x836 <__vector_17+0x330>
  a0:	ca c3       	rjmp	.+1940   	; 0x836 <__vector_17+0x330>
  a2:	c9 c3       	rjmp	.+1938   	; 0x836 <__vector_17+0x330>
  a4:	c8 c3       	rjmp	.+1936   	; 0x836 <__vector_17+0x330>
  a6:	b9 c3       	rjmp	.+1906   	; 0x81a <__vector_17+0x314>
  a8:	c6 c3       	rjmp	.+1932   	; 0x836 <__vector_17+0x330>
  aa:	c5 c3       	rjmp	.+1930   	; 0x836 <__vector_17+0x330>
  ac:	c4 c3       	rjmp	.+1928   	; 0x836 <__vector_17+0x330>
  ae:	c3 c3       	rjmp	.+1926   	; 0x836 <__vector_17+0x330>
  b0:	c2 c3       	rjmp	.+1924   	; 0x836 <__vector_17+0x330>
  b2:	c1 c3       	rjmp	.+1922   	; 0x836 <__vector_17+0x330>
  b4:	c0 c3       	rjmp	.+1920   	; 0x836 <__vector_17+0x330>
  b6:	da c2       	rjmp	.+1460   	; 0x66c <__vector_17+0x166>
  b8:	be c3       	rjmp	.+1916   	; 0x836 <__vector_17+0x330>
  ba:	bd c3       	rjmp	.+1914   	; 0x836 <__vector_17+0x330>
  bc:	bc c3       	rjmp	.+1912   	; 0x836 <__vector_17+0x330>
  be:	bb c3       	rjmp	.+1910   	; 0x836 <__vector_17+0x330>
  c0:	ba c3       	rjmp	.+1908   	; 0x836 <__vector_17+0x330>
  c2:	b9 c3       	rjmp	.+1906   	; 0x836 <__vector_17+0x330>
  c4:	b8 c3       	rjmp	.+1904   	; 0x836 <__vector_17+0x330>
  c6:	01 c3       	rjmp	.+1538   	; 0x6ca <__vector_17+0x1c4>
  c8:	b6 c3       	rjmp	.+1900   	; 0x836 <__vector_17+0x330>
  ca:	b5 c3       	rjmp	.+1898   	; 0x836 <__vector_17+0x330>
  cc:	b4 c3       	rjmp	.+1896   	; 0x836 <__vector_17+0x330>
  ce:	b3 c3       	rjmp	.+1894   	; 0x836 <__vector_17+0x330>
  d0:	b2 c3       	rjmp	.+1892   	; 0x836 <__vector_17+0x330>
  d2:	b1 c3       	rjmp	.+1890   	; 0x836 <__vector_17+0x330>
  d4:	b0 c3       	rjmp	.+1888   	; 0x836 <__vector_17+0x330>
  d6:	2e c3       	rjmp	.+1628   	; 0x734 <__vector_17+0x22e>
  d8:	ae c3       	rjmp	.+1884   	; 0x836 <__vector_17+0x330>
  da:	ad c3       	rjmp	.+1882   	; 0x836 <__vector_17+0x330>
  dc:	ac c3       	rjmp	.+1880   	; 0x836 <__vector_17+0x330>
  de:	ab c3       	rjmp	.+1878   	; 0x836 <__vector_17+0x330>
  e0:	aa c3       	rjmp	.+1876   	; 0x836 <__vector_17+0x330>
  e2:	a9 c3       	rjmp	.+1874   	; 0x836 <__vector_17+0x330>
  e4:	a8 c3       	rjmp	.+1872   	; 0x836 <__vector_17+0x330>
  e6:	26 c3       	rjmp	.+1612   	; 0x734 <__vector_17+0x22e>
  e8:	a6 c3       	rjmp	.+1868   	; 0x836 <__vector_17+0x330>
  ea:	a5 c3       	rjmp	.+1866   	; 0x836 <__vector_17+0x330>
  ec:	a4 c3       	rjmp	.+1864   	; 0x836 <__vector_17+0x330>
  ee:	a3 c3       	rjmp	.+1862   	; 0x836 <__vector_17+0x330>
  f0:	a2 c3       	rjmp	.+1860   	; 0x836 <__vector_17+0x330>
  f2:	a1 c3       	rjmp	.+1858   	; 0x836 <__vector_17+0x330>
  f4:	a0 c3       	rjmp	.+1856   	; 0x836 <__vector_17+0x330>
  f6:	1e c3       	rjmp	.+1596   	; 0x734 <__vector_17+0x22e>
  f8:	9e c3       	rjmp	.+1852   	; 0x836 <__vector_17+0x330>
  fa:	9d c3       	rjmp	.+1850   	; 0x836 <__vector_17+0x330>
  fc:	9c c3       	rjmp	.+1848   	; 0x836 <__vector_17+0x330>
  fe:	9b c3       	rjmp	.+1846   	; 0x836 <__vector_17+0x330>
 100:	9a c3       	rjmp	.+1844   	; 0x836 <__vector_17+0x330>
 102:	99 c3       	rjmp	.+1842   	; 0x836 <__vector_17+0x330>
 104:	98 c3       	rjmp	.+1840   	; 0x836 <__vector_17+0x330>
 106:	16 c3       	rjmp	.+1580   	; 0x734 <__vector_17+0x22e>
 108:	96 c3       	rjmp	.+1836   	; 0x836 <__vector_17+0x330>
 10a:	95 c3       	rjmp	.+1834   	; 0x836 <__vector_17+0x330>
 10c:	94 c3       	rjmp	.+1832   	; 0x836 <__vector_17+0x330>
 10e:	93 c3       	rjmp	.+1830   	; 0x836 <__vector_17+0x330>
 110:	92 c3       	rjmp	.+1828   	; 0x836 <__vector_17+0x330>
 112:	91 c3       	rjmp	.+1826   	; 0x836 <__vector_17+0x330>
 114:	90 c3       	rjmp	.+1824   	; 0x836 <__vector_17+0x330>
 116:	18 c3       	rjmp	.+1584   	; 0x748 <__vector_17+0x242>
 118:	8e c3       	rjmp	.+1820   	; 0x836 <__vector_17+0x330>
 11a:	8d c3       	rjmp	.+1818   	; 0x836 <__vector_17+0x330>
 11c:	8c c3       	rjmp	.+1816   	; 0x836 <__vector_17+0x330>
 11e:	8b c3       	rjmp	.+1814   	; 0x836 <__vector_17+0x330>
 120:	8a c3       	rjmp	.+1812   	; 0x836 <__vector_17+0x330>
 122:	89 c3       	rjmp	.+1810   	; 0x836 <__vector_17+0x330>
 124:	88 c3       	rjmp	.+1808   	; 0x836 <__vector_17+0x330>
 126:	73 c3       	rjmp	.+1766   	; 0x80e <__vector_17+0x308>
 128:	86 c3       	rjmp	.+1804   	; 0x836 <__vector_17+0x330>
 12a:	85 c3       	rjmp	.+1802   	; 0x836 <__vector_17+0x330>
 12c:	84 c3       	rjmp	.+1800   	; 0x836 <__vector_17+0x330>
 12e:	83 c3       	rjmp	.+1798   	; 0x836 <__vector_17+0x330>
 130:	82 c3       	rjmp	.+1796   	; 0x836 <__vector_17+0x330>
 132:	81 c3       	rjmp	.+1794   	; 0x836 <__vector_17+0x330>
 134:	80 c3       	rjmp	.+1792   	; 0x836 <__vector_17+0x330>
 136:	08 c3       	rjmp	.+1552   	; 0x748 <__vector_17+0x242>
 138:	7e c3       	rjmp	.+1788   	; 0x836 <__vector_17+0x330>
 13a:	7d c3       	rjmp	.+1786   	; 0x836 <__vector_17+0x330>
 13c:	7c c3       	rjmp	.+1784   	; 0x836 <__vector_17+0x330>
 13e:	7b c3       	rjmp	.+1782   	; 0x836 <__vector_17+0x330>
 140:	7a c3       	rjmp	.+1780   	; 0x836 <__vector_17+0x330>
 142:	79 c3       	rjmp	.+1778   	; 0x836 <__vector_17+0x330>
 144:	78 c3       	rjmp	.+1776   	; 0x836 <__vector_17+0x330>
 146:	63 c3       	rjmp	.+1734   	; 0x80e <__vector_17+0x308>
 148:	76 c3       	rjmp	.+1772   	; 0x836 <__vector_17+0x330>
 14a:	75 c3       	rjmp	.+1770   	; 0x836 <__vector_17+0x330>
 14c:	74 c3       	rjmp	.+1768   	; 0x836 <__vector_17+0x330>
 14e:	73 c3       	rjmp	.+1766   	; 0x836 <__vector_17+0x330>
 150:	72 c3       	rjmp	.+1764   	; 0x836 <__vector_17+0x330>
 152:	71 c3       	rjmp	.+1762   	; 0x836 <__vector_17+0x330>
 154:	70 c3       	rjmp	.+1760   	; 0x836 <__vector_17+0x330>
 156:	1e c3       	rjmp	.+1596   	; 0x794 <__vector_17+0x28e>
 158:	6e c3       	rjmp	.+1756   	; 0x836 <__vector_17+0x330>
 15a:	6d c3       	rjmp	.+1754   	; 0x836 <__vector_17+0x330>
 15c:	6c c3       	rjmp	.+1752   	; 0x836 <__vector_17+0x330>
 15e:	6b c3       	rjmp	.+1750   	; 0x836 <__vector_17+0x330>
 160:	6a c3       	rjmp	.+1748   	; 0x836 <__vector_17+0x330>
 162:	69 c3       	rjmp	.+1746   	; 0x836 <__vector_17+0x330>
 164:	68 c3       	rjmp	.+1744   	; 0x836 <__vector_17+0x330>
 166:	2f c3       	rjmp	.+1630   	; 0x7c6 <__vector_17+0x2c0>
 168:	66 c3       	rjmp	.+1740   	; 0x836 <__vector_17+0x330>
 16a:	65 c3       	rjmp	.+1738   	; 0x836 <__vector_17+0x330>
 16c:	64 c3       	rjmp	.+1736   	; 0x836 <__vector_17+0x330>
 16e:	63 c3       	rjmp	.+1734   	; 0x836 <__vector_17+0x330>
 170:	62 c3       	rjmp	.+1732   	; 0x836 <__vector_17+0x330>
 172:	61 c3       	rjmp	.+1730   	; 0x836 <__vector_17+0x330>
 174:	60 c3       	rjmp	.+1728   	; 0x836 <__vector_17+0x330>
 176:	27 c3       	rjmp	.+1614   	; 0x7c6 <__vector_17+0x2c0>
 178:	5e c3       	rjmp	.+1724   	; 0x836 <__vector_17+0x330>
 17a:	5d c3       	rjmp	.+1722   	; 0x836 <__vector_17+0x330>
 17c:	5c c3       	rjmp	.+1720   	; 0x836 <__vector_17+0x330>
 17e:	5b c3       	rjmp	.+1718   	; 0x836 <__vector_17+0x330>
 180:	5a c3       	rjmp	.+1716   	; 0x836 <__vector_17+0x330>
 182:	59 c3       	rjmp	.+1714   	; 0x836 <__vector_17+0x330>
 184:	58 c3       	rjmp	.+1712   	; 0x836 <__vector_17+0x330>
 186:	23 c3       	rjmp	.+1606   	; 0x7ce <__vector_17+0x2c8>
 188:	56 c3       	rjmp	.+1708   	; 0x836 <__vector_17+0x330>
 18a:	55 c3       	rjmp	.+1706   	; 0x836 <__vector_17+0x330>
 18c:	54 c3       	rjmp	.+1704   	; 0x836 <__vector_17+0x330>
 18e:	53 c3       	rjmp	.+1702   	; 0x836 <__vector_17+0x330>
 190:	52 c3       	rjmp	.+1700   	; 0x836 <__vector_17+0x330>
 192:	51 c3       	rjmp	.+1698   	; 0x836 <__vector_17+0x330>
 194:	50 c3       	rjmp	.+1696   	; 0x836 <__vector_17+0x330>
 196:	3b c3       	rjmp	.+1654   	; 0x80e <__vector_17+0x308>
 198:	4e c3       	rjmp	.+1692   	; 0x836 <__vector_17+0x330>
 19a:	4d c3       	rjmp	.+1690   	; 0x836 <__vector_17+0x330>
 19c:	4c c3       	rjmp	.+1688   	; 0x836 <__vector_17+0x330>
 19e:	4b c3       	rjmp	.+1686   	; 0x836 <__vector_17+0x330>
 1a0:	4a c3       	rjmp	.+1684   	; 0x836 <__vector_17+0x330>
 1a2:	49 c3       	rjmp	.+1682   	; 0x836 <__vector_17+0x330>
 1a4:	48 c3       	rjmp	.+1680   	; 0x836 <__vector_17+0x330>
 1a6:	33 c3       	rjmp	.+1638   	; 0x80e <__vector_17+0x308>

000001a8 <__ctors_end>:
 1a8:	11 24       	eor	r1, r1
 1aa:	1f be       	out	0x3f, r1	; 63
 1ac:	cf e5       	ldi	r28, 0x5F	; 95
 1ae:	d4 e0       	ldi	r29, 0x04	; 4
 1b0:	de bf       	out	0x3e, r29	; 62
 1b2:	cd bf       	out	0x3d, r28	; 61

000001b4 <__do_copy_data>:
 1b4:	10 e0       	ldi	r17, 0x00	; 0
 1b6:	a0 e6       	ldi	r26, 0x60	; 96
 1b8:	b0 e0       	ldi	r27, 0x00	; 0
 1ba:	e6 e0       	ldi	r30, 0x06	; 6
 1bc:	f9 e0       	ldi	r31, 0x09	; 9
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <__do_copy_data+0x10>
 1c0:	05 90       	lpm	r0, Z+
 1c2:	0d 92       	st	X+, r0
 1c4:	a0 36       	cpi	r26, 0x60	; 96
 1c6:	b1 07       	cpc	r27, r17
 1c8:	d9 f7       	brne	.-10     	; 0x1c0 <__do_copy_data+0xc>

000001ca <__do_clear_bss>:
 1ca:	10 e0       	ldi	r17, 0x00	; 0
 1cc:	a0 e6       	ldi	r26, 0x60	; 96
 1ce:	b0 e0       	ldi	r27, 0x00	; 0
 1d0:	01 c0       	rjmp	.+2      	; 0x1d4 <.do_clear_bss_start>

000001d2 <.do_clear_bss_loop>:
 1d2:	1d 92       	st	X+, r1

000001d4 <.do_clear_bss_start>:
 1d4:	ae 38       	cpi	r26, 0x8E	; 142
 1d6:	b1 07       	cpc	r27, r17
 1d8:	e1 f7       	brne	.-8      	; 0x1d2 <.do_clear_bss_loop>
 1da:	02 d0       	rcall	.+4      	; 0x1e0 <main>
 1dc:	92 c3       	rjmp	.+1828   	; 0x902 <_exit>

000001de <__bad_interrupt>:
 1de:	10 cf       	rjmp	.-480    	; 0x0 <__vectors>

000001e0 <main>:
uint8_t I2C_buffer[25];
#define I2C_SLAVE_ADDRESS 0x53
void handle_I2C_interrupt(volatile uint8_t TWI_match_addr, uint8_t status);
 
// --------------------------------------------------------------------------------------------------------
int main() {
 1e0:	cf 92       	push	r12
 1e2:	df 92       	push	r13
 1e4:	ef 92       	push	r14
 1e6:	ff 92       	push	r15
 1e8:	0f 93       	push	r16
 1ea:	1f 93       	push	r17
 1ec:	df 93       	push	r29
 1ee:	cf 93       	push	r28
 1f0:	cd b7       	in	r28, 0x3d	; 61
 1f2:	de b7       	in	r29, 0x3e	; 62
    // Initialize I2C
    TWI_init(   F_CPU,                      // clock frequency
 1f4:	e5 e1       	ldi	r30, 0x15	; 21
 1f6:	f1 e0       	ldi	r31, 0x01	; 1
 1f8:	a5 e6       	ldi	r26, 0x65	; 101
 1fa:	b0 e0       	ldi	r27, 0x00	; 0
 1fc:	60 e4       	ldi	r22, 0x40	; 64
 1fe:	72 e4       	ldi	r23, 0x42	; 66
 200:	8f e0       	ldi	r24, 0x0F	; 15
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	20 ea       	ldi	r18, 0xA0	; 160
 206:	36 e8       	ldi	r19, 0x86	; 134
 208:	41 e0       	ldi	r20, 0x01	; 1
 20a:	50 e0       	ldi	r21, 0x00	; 0
 20c:	8d 01       	movw	r16, r26
 20e:	0f 2e       	mov	r0, r31
 210:	f9 e1       	ldi	r31, 0x19	; 25
 212:	ef 2e       	mov	r14, r31
 214:	ff 24       	eor	r15, r15
 216:	f0 2d       	mov	r31, r0
 218:	6f 01       	movw	r12, r30
 21a:	20 d0       	rcall	.+64     	; 0x25c <TWI_init>
                sizeof(I2C_buffer),         // size of comm buffer
                &handle_I2C_interrupt       // pointer to callback function
                );
 
    // Enable interrupts
    sei();
 21c:	78 94       	sei
 
    // give our slave address and enable I2C
    TWI_enable_slave_mode(  I2C_SLAVE_ADDRESS,      // device address of slave
 21e:	83 e5       	ldi	r24, 0x53	; 83
 220:	60 e0       	ldi	r22, 0x00	; 0
 222:	40 e0       	ldi	r20, 0x00	; 0
 224:	50 e0       	ldi	r21, 0x00	; 0
 226:	41 d1       	rcall	.+642    	; 0x4aa <TWI_enable_slave_mode>
                        );
 
    // received data is processed in the callback
    // nothing else to do here
    while(true){
    }
 228:	ff cf       	rjmp	.-2      	; 0x228 <main+0x48>

0000022a <handle_I2C_interrupt>:
}
// --------------------------------------------------------------------------------------------------------
//
void handle_I2C_interrupt(volatile uint8_t TWI_match_addr, uint8_t status){
 22a:	df 93       	push	r29
 22c:	cf 93       	push	r28
 22e:	00 d0       	rcall	.+0      	; 0x230 <handle_I2C_interrupt+0x6>
 230:	cd b7       	in	r28, 0x3d	; 61
 232:	de b7       	in	r29, 0x3e	; 62
 234:	89 83       	std	Y+1, r24	; 0x01
 236:	6a 83       	std	Y+2, r22	; 0x02
    if(status==TWI_success){
 238:	8a 81       	ldd	r24, Y+2	; 0x02
 23a:	88 23       	and	r24, r24
 23c:	51 f4       	brne	.+20     	; 0x252 <handle_I2C_interrupt+0x28>
        // increment the integer in the buffer
        // and it will be returned during the read cycle
        (*(int*)I2C_buffer)++;
 23e:	85 e6       	ldi	r24, 0x65	; 101
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	fc 01       	movw	r30, r24
 244:	20 81       	ld	r18, Z
 246:	31 81       	ldd	r19, Z+1	; 0x01
 248:	2f 5f       	subi	r18, 0xFF	; 255
 24a:	3f 4f       	sbci	r19, 0xFF	; 255
 24c:	fc 01       	movw	r30, r24
 24e:	31 83       	std	Z+1, r19	; 0x01
 250:	20 83       	st	Z, r18
    }
}
 252:	0f 90       	pop	r0
 254:	0f 90       	pop	r0
 256:	cf 91       	pop	r28
 258:	df 91       	pop	r29
 25a:	08 95       	ret

0000025c <TWI_init>:
#include <avr/interrupt.h>
#include "TWI.h"
#include <avr/io.h>
 
// initialize the component
void TWI_init(long cpu_freq, long bit_rate, char* buffer, uint16_t max, void (*callback)(volatile uint8_t TWI_return_code)){
 25c:	cf 92       	push	r12
 25e:	df 92       	push	r13
 260:	ef 92       	push	r14
 262:	ff 92       	push	r15
 264:	0f 93       	push	r16
 266:	1f 93       	push	r17
 268:	df 93       	push	r29
 26a:	cf 93       	push	r28
 26c:	cd b7       	in	r28, 0x3d	; 61
 26e:	de b7       	in	r29, 0x3e	; 62
 270:	2e 97       	sbiw	r28, 0x0e	; 14
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	f8 94       	cli
 276:	de bf       	out	0x3e, r29	; 62
 278:	0f be       	out	0x3f, r0	; 63
 27a:	cd bf       	out	0x3d, r28	; 61
 27c:	69 83       	std	Y+1, r22	; 0x01
 27e:	7a 83       	std	Y+2, r23	; 0x02
 280:	8b 83       	std	Y+3, r24	; 0x03
 282:	9c 83       	std	Y+4, r25	; 0x04
 284:	2d 83       	std	Y+5, r18	; 0x05
 286:	3e 83       	std	Y+6, r19	; 0x06
 288:	4f 83       	std	Y+7, r20	; 0x07
 28a:	58 87       	std	Y+8, r21	; 0x08
 28c:	1a 87       	std	Y+10, r17	; 0x0a
 28e:	09 87       	std	Y+9, r16	; 0x09
 290:	fc 86       	std	Y+12, r15	; 0x0c
 292:	eb 86       	std	Y+11, r14	; 0x0b
 294:	de 86       	std	Y+14, r13	; 0x0e
 296:	cd 86       	std	Y+13, r12	; 0x0d
    TWI_return_result = callback;
 298:	8d 85       	ldd	r24, Y+13	; 0x0d
 29a:	9e 85       	ldd	r25, Y+14	; 0x0e
 29c:	90 93 85 00 	sts	0x0085, r25
 2a0:	80 93 84 00 	sts	0x0084, r24
    p_TWI_buffer = buffer;
 2a4:	89 85       	ldd	r24, Y+9	; 0x09
 2a6:	9a 85       	ldd	r25, Y+10	; 0x0a
 2a8:	90 93 80 00 	sts	0x0080, r25
 2ac:	80 93 7f 00 	sts	0x007F, r24
    TWI_buffer_max = max;
 2b0:	8b 85       	ldd	r24, Y+11	; 0x0b
 2b2:	9c 85       	ldd	r25, Y+12	; 0x0c
 2b4:	90 93 63 00 	sts	0x0063, r25
 2b8:	80 93 62 00 	sts	0x0062, r24
    TWBR = ((cpu_freq/bit_rate)-16)/2; // bit rate register 
 2bc:	00 e2       	ldi	r16, 0x20	; 32
 2be:	10 e0       	ldi	r17, 0x00	; 0
 2c0:	89 81       	ldd	r24, Y+1	; 0x01
 2c2:	9a 81       	ldd	r25, Y+2	; 0x02
 2c4:	ab 81       	ldd	r26, Y+3	; 0x03
 2c6:	bc 81       	ldd	r27, Y+4	; 0x04
 2c8:	2d 81       	ldd	r18, Y+5	; 0x05
 2ca:	3e 81       	ldd	r19, Y+6	; 0x06
 2cc:	4f 81       	ldd	r20, Y+7	; 0x07
 2ce:	58 85       	ldd	r21, Y+8	; 0x08
 2d0:	bc 01       	movw	r22, r24
 2d2:	cd 01       	movw	r24, r26
 2d4:	d9 d2       	rcall	.+1458   	; 0x888 <__divmodsi4>
 2d6:	da 01       	movw	r26, r20
 2d8:	c9 01       	movw	r24, r18
 2da:	40 97       	sbiw	r24, 0x10	; 16
 2dc:	a1 09       	sbc	r26, r1
 2de:	b1 09       	sbc	r27, r1
 2e0:	22 e0       	ldi	r18, 0x02	; 2
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	40 e0       	ldi	r20, 0x00	; 0
 2e6:	50 e0       	ldi	r21, 0x00	; 0
 2e8:	bc 01       	movw	r22, r24
 2ea:	cd 01       	movw	r24, r26
 2ec:	cd d2       	rcall	.+1434   	; 0x888 <__divmodsi4>
 2ee:	da 01       	movw	r26, r20
 2f0:	c9 01       	movw	r24, r18
 2f2:	f8 01       	movw	r30, r16
 2f4:	80 83       	st	Z, r24
    TWSR = 0; // prescaler
 2f6:	81 e2       	ldi	r24, 0x21	; 33
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	fc 01       	movw	r30, r24
 2fc:	10 82       	st	Z, r1
    TWI_busy=0;
 2fe:	10 92 88 00 	sts	0x0088, r1
}
 302:	2e 96       	adiw	r28, 0x0e	; 14
 304:	0f b6       	in	r0, 0x3f	; 63
 306:	f8 94       	cli
 308:	de bf       	out	0x3e, r29	; 62
 30a:	0f be       	out	0x3f, r0	; 63
 30c:	cd bf       	out	0x3d, r28	; 61
 30e:	cf 91       	pop	r28
 310:	df 91       	pop	r29
 312:	1f 91       	pop	r17
 314:	0f 91       	pop	r16
 316:	ff 90       	pop	r15
 318:	ef 90       	pop	r14
 31a:	df 90       	pop	r13
 31c:	cf 90       	pop	r12
 31e:	08 95       	ret

00000320 <TWI_master_start_write>:
 
// master write to slave
void TWI_master_start_write(uint8_t slave_addr, uint16_t write_bytes){
 320:	df 93       	push	r29
 322:	cf 93       	push	r28
 324:	00 d0       	rcall	.+0      	; 0x326 <TWI_master_start_write+0x6>
 326:	0f 92       	push	r0
 328:	cd b7       	in	r28, 0x3d	; 61
 32a:	de b7       	in	r29, 0x3e	; 62
 32c:	89 83       	std	Y+1, r24	; 0x01
 32e:	7b 83       	std	Y+3, r23	; 0x03
 330:	6a 83       	std	Y+2, r22	; 0x02
    TWI_busy=1;
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	80 93 88 00 	sts	0x0088, r24
    if(write_bytes>TWI_buffer_max){
 338:	80 91 62 00 	lds	r24, 0x0062
 33c:	90 91 63 00 	lds	r25, 0x0063
 340:	2a 81       	ldd	r18, Y+2	; 0x02
 342:	3b 81       	ldd	r19, Y+3	; 0x03
 344:	82 17       	cp	r24, r18
 346:	93 07       	cpc	r25, r19
 348:	48 f4       	brcc	.+18     	; 0x35c <TWI_master_start_write+0x3c>
        TWI_write_bytes=TWI_buffer_max;
 34a:	80 91 62 00 	lds	r24, 0x0062
 34e:	90 91 63 00 	lds	r25, 0x0063
 352:	90 93 61 00 	sts	0x0061, r25
 356:	80 93 60 00 	sts	0x0060, r24
 35a:	06 c0       	rjmp	.+12     	; 0x368 <TWI_master_start_write+0x48>
    }else{
        TWI_write_bytes=write_bytes;
 35c:	8a 81       	ldd	r24, Y+2	; 0x02
 35e:	9b 81       	ldd	r25, Y+3	; 0x03
 360:	90 93 61 00 	sts	0x0061, r25
 364:	80 93 60 00 	sts	0x0060, r24
    }
    TWI_operation=TWI_OP_WRITE_ONLY;
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	80 93 89 00 	sts	0x0089, r24
    TWI_master_state = TWI_WRITE_STATE;
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	80 93 64 00 	sts	0x0064, r24
    TWI_target_slave_addr = slave_addr;
 374:	89 81       	ldd	r24, Y+1	; 0x01
 376:	80 93 86 00 	sts	0x0086, r24
    TWCR = TWI_START; // start TWI master mode
 37a:	86 e5       	ldi	r24, 0x56	; 86
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	25 ea       	ldi	r18, 0xA5	; 165
 380:	fc 01       	movw	r30, r24
 382:	20 83       	st	Z, r18
}
 384:	0f 90       	pop	r0
 386:	0f 90       	pop	r0
 388:	0f 90       	pop	r0
 38a:	cf 91       	pop	r28
 38c:	df 91       	pop	r29
 38e:	08 95       	ret

00000390 <TWI_master_start_read>:
 
// master read from slave
void TWI_master_start_read(uint8_t slave_addr, uint16_t read_bytes){
 390:	df 93       	push	r29
 392:	cf 93       	push	r28
 394:	00 d0       	rcall	.+0      	; 0x396 <TWI_master_start_read+0x6>
 396:	0f 92       	push	r0
 398:	cd b7       	in	r28, 0x3d	; 61
 39a:	de b7       	in	r29, 0x3e	; 62
 39c:	89 83       	std	Y+1, r24	; 0x01
 39e:	7b 83       	std	Y+3, r23	; 0x03
 3a0:	6a 83       	std	Y+2, r22	; 0x02
    TWI_busy=1;
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	80 93 88 00 	sts	0x0088, r24
    if(read_bytes>TWI_buffer_max){
 3a8:	80 91 62 00 	lds	r24, 0x0062
 3ac:	90 91 63 00 	lds	r25, 0x0063
 3b0:	2a 81       	ldd	r18, Y+2	; 0x02
 3b2:	3b 81       	ldd	r19, Y+3	; 0x03
 3b4:	82 17       	cp	r24, r18
 3b6:	93 07       	cpc	r25, r19
 3b8:	48 f4       	brcc	.+18     	; 0x3cc <TWI_master_start_read+0x3c>
        TWI_read_bytes=TWI_buffer_max;
 3ba:	80 91 62 00 	lds	r24, 0x0062
 3be:	90 91 63 00 	lds	r25, 0x0063
 3c2:	90 93 83 00 	sts	0x0083, r25
 3c6:	80 93 82 00 	sts	0x0082, r24
 3ca:	06 c0       	rjmp	.+12     	; 0x3d8 <TWI_master_start_read+0x48>
    }else{
        TWI_read_bytes=read_bytes;
 3cc:	8a 81       	ldd	r24, Y+2	; 0x02
 3ce:	9b 81       	ldd	r25, Y+3	; 0x03
 3d0:	90 93 83 00 	sts	0x0083, r25
 3d4:	80 93 82 00 	sts	0x0082, r24
    }
    TWI_operation=TWI_OP_READ_ONLY;
 3d8:	82 e0       	ldi	r24, 0x02	; 2
 3da:	80 93 89 00 	sts	0x0089, r24
    TWI_master_state = TWI_READ_STATE;
 3de:	82 e0       	ldi	r24, 0x02	; 2
 3e0:	80 93 64 00 	sts	0x0064, r24
    TWI_target_slave_addr = slave_addr;
 3e4:	89 81       	ldd	r24, Y+1	; 0x01
 3e6:	80 93 86 00 	sts	0x0086, r24
    TWCR = TWI_START; // start TWI master mode
 3ea:	86 e5       	ldi	r24, 0x56	; 86
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	25 ea       	ldi	r18, 0xA5	; 165
 3f0:	fc 01       	movw	r30, r24
 3f2:	20 83       	st	Z, r18
}
 3f4:	0f 90       	pop	r0
 3f6:	0f 90       	pop	r0
 3f8:	0f 90       	pop	r0
 3fa:	cf 91       	pop	r28
 3fc:	df 91       	pop	r29
 3fe:	08 95       	ret

00000400 <TWI_master_start_write_then_read>:
 
// master write then read without releasing buss between
void TWI_master_start_write_then_read(uint8_t slave_addr, uint16_t write_bytes, uint16_t read_bytes){
 400:	df 93       	push	r29
 402:	cf 93       	push	r28
 404:	00 d0       	rcall	.+0      	; 0x406 <TWI_master_start_write_then_read+0x6>
 406:	00 d0       	rcall	.+0      	; 0x408 <TWI_master_start_write_then_read+0x8>
 408:	0f 92       	push	r0
 40a:	cd b7       	in	r28, 0x3d	; 61
 40c:	de b7       	in	r29, 0x3e	; 62
 40e:	89 83       	std	Y+1, r24	; 0x01
 410:	7b 83       	std	Y+3, r23	; 0x03
 412:	6a 83       	std	Y+2, r22	; 0x02
 414:	5d 83       	std	Y+5, r21	; 0x05
 416:	4c 83       	std	Y+4, r20	; 0x04
    TWI_busy=1;
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	80 93 88 00 	sts	0x0088, r24
    if(write_bytes>TWI_buffer_max){
 41e:	80 91 62 00 	lds	r24, 0x0062
 422:	90 91 63 00 	lds	r25, 0x0063
 426:	2a 81       	ldd	r18, Y+2	; 0x02
 428:	3b 81       	ldd	r19, Y+3	; 0x03
 42a:	82 17       	cp	r24, r18
 42c:	93 07       	cpc	r25, r19
 42e:	48 f4       	brcc	.+18     	; 0x442 <TWI_master_start_write_then_read+0x42>
        TWI_write_bytes=TWI_buffer_max;
 430:	80 91 62 00 	lds	r24, 0x0062
 434:	90 91 63 00 	lds	r25, 0x0063
 438:	90 93 61 00 	sts	0x0061, r25
 43c:	80 93 60 00 	sts	0x0060, r24
 440:	06 c0       	rjmp	.+12     	; 0x44e <TWI_master_start_write_then_read+0x4e>
    }else{
        TWI_write_bytes=write_bytes;
 442:	8a 81       	ldd	r24, Y+2	; 0x02
 444:	9b 81       	ldd	r25, Y+3	; 0x03
 446:	90 93 61 00 	sts	0x0061, r25
 44a:	80 93 60 00 	sts	0x0060, r24
    }
    if(read_bytes>TWI_buffer_max){
 44e:	80 91 62 00 	lds	r24, 0x0062
 452:	90 91 63 00 	lds	r25, 0x0063
 456:	2c 81       	ldd	r18, Y+4	; 0x04
 458:	3d 81       	ldd	r19, Y+5	; 0x05
 45a:	82 17       	cp	r24, r18
 45c:	93 07       	cpc	r25, r19
 45e:	48 f4       	brcc	.+18     	; 0x472 <__stack+0x13>
        TWI_read_bytes=TWI_buffer_max;
 460:	80 91 62 00 	lds	r24, 0x0062
 464:	90 91 63 00 	lds	r25, 0x0063
 468:	90 93 83 00 	sts	0x0083, r25
 46c:	80 93 82 00 	sts	0x0082, r24
 470:	06 c0       	rjmp	.+12     	; 0x47e <__stack+0x1f>
    }else{
        TWI_read_bytes=read_bytes;
 472:	8c 81       	ldd	r24, Y+4	; 0x04
 474:	9d 81       	ldd	r25, Y+5	; 0x05
 476:	90 93 83 00 	sts	0x0083, r25
 47a:	80 93 82 00 	sts	0x0082, r24
    }
    TWI_operation=TWI_OP_WRITE_THEN_READ;
 47e:	83 e0       	ldi	r24, 0x03	; 3
 480:	80 93 89 00 	sts	0x0089, r24
    TWI_master_state = TWI_WRITE_STATE;
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	80 93 64 00 	sts	0x0064, r24
    TWI_target_slave_addr = slave_addr;
 48a:	89 81       	ldd	r24, Y+1	; 0x01
 48c:	80 93 86 00 	sts	0x0086, r24
    TWCR = TWI_START; // start TWI master mode
 490:	86 e5       	ldi	r24, 0x56	; 86
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	25 ea       	ldi	r18, 0xA5	; 165
 496:	fc 01       	movw	r30, r24
 498:	20 83       	st	Z, r18
}
 49a:	0f 90       	pop	r0
 49c:	0f 90       	pop	r0
 49e:	0f 90       	pop	r0
 4a0:	0f 90       	pop	r0
 4a2:	0f 90       	pop	r0
 4a4:	cf 91       	pop	r28
 4a6:	df 91       	pop	r29
 4a8:	08 95       	ret

000004aa <TWI_enable_slave_mode>:
 
// enable slave and start receiving messages
void TWI_enable_slave_mode(uint8_t my_slave_addr, uint8_t enable_general_call, void (*TWI_return_fn)(uint8_t TWI_return_value)){
 4aa:	df 93       	push	r29
 4ac:	cf 93       	push	r28
 4ae:	00 d0       	rcall	.+0      	; 0x4b0 <TWI_enable_slave_mode+0x6>
 4b0:	00 d0       	rcall	.+0      	; 0x4b2 <TWI_enable_slave_mode+0x8>
 4b2:	cd b7       	in	r28, 0x3d	; 61
 4b4:	de b7       	in	r29, 0x3e	; 62
 4b6:	89 83       	std	Y+1, r24	; 0x01
 4b8:	6a 83       	std	Y+2, r22	; 0x02
 4ba:	5c 83       	std	Y+4, r21	; 0x04
 4bc:	4b 83       	std	Y+3, r20	; 0x03
    TWI_return_result = TWI_return_fn;
 4be:	8b 81       	ldd	r24, Y+3	; 0x03
 4c0:	9c 81       	ldd	r25, Y+4	; 0x04
 4c2:	90 93 85 00 	sts	0x0085, r25
 4c6:	80 93 84 00 	sts	0x0084, r24
    TWAR = (my_slave_addr<<1); // set my slave addr
 4ca:	82 e2       	ldi	r24, 0x22	; 34
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	29 81       	ldd	r18, Y+1	; 0x01
 4d0:	22 0f       	add	r18, r18
 4d2:	fc 01       	movw	r30, r24
 4d4:	20 83       	st	Z, r18
    if(enable_general_call>0){
 4d6:	8a 81       	ldd	r24, Y+2	; 0x02
 4d8:	88 23       	and	r24, r24
 4da:	49 f0       	breq	.+18     	; 0x4ee <TWI_enable_slave_mode+0x44>
        TWAR |= _BV(TWGCE); // enable general call receipts
 4dc:	82 e2       	ldi	r24, 0x22	; 34
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	22 e2       	ldi	r18, 0x22	; 34
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	f9 01       	movw	r30, r18
 4e6:	20 81       	ld	r18, Z
 4e8:	21 60       	ori	r18, 0x01	; 1
 4ea:	fc 01       	movw	r30, r24
 4ec:	20 83       	st	Z, r18
    }
    TWCR = TWI_ACK; // enable ACK on SLA_W/SLA_R
 4ee:	86 e5       	ldi	r24, 0x56	; 86
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	25 ec       	ldi	r18, 0xC5	; 197
 4f4:	fc 01       	movw	r30, r24
 4f6:	20 83       	st	Z, r18
}
 4f8:	0f 90       	pop	r0
 4fa:	0f 90       	pop	r0
 4fc:	0f 90       	pop	r0
 4fe:	0f 90       	pop	r0
 500:	cf 91       	pop	r28
 502:	df 91       	pop	r29
 504:	08 95       	ret

00000506 <__vector_17>:
// your application, be sure you return as quickly as possible. Remove significant
// work from the callback and instead perform that work in your main execution loop.
//
// See pages 229, 232, 235, and 238 of the ATmega328 datasheed for detailed 
// explaination of the logic below.
SIGNAL(TWI_vect){
 506:	1f 92       	push	r1
 508:	0f 92       	push	r0
 50a:	0f b6       	in	r0, 0x3f	; 63
 50c:	0f 92       	push	r0
 50e:	11 24       	eor	r1, r1
 510:	2f 93       	push	r18
 512:	3f 93       	push	r19
 514:	4f 93       	push	r20
 516:	5f 93       	push	r21
 518:	6f 93       	push	r22
 51a:	7f 93       	push	r23
 51c:	8f 93       	push	r24
 51e:	9f 93       	push	r25
 520:	af 93       	push	r26
 522:	bf 93       	push	r27
 524:	ef 93       	push	r30
 526:	ff 93       	push	r31
 528:	df 93       	push	r29
 52a:	cf 93       	push	r28
 52c:	cd b7       	in	r28, 0x3d	; 61
 52e:	de b7       	in	r29, 0x3e	; 62
    TWI_status = TWSR & TWI_TWSR_status_mask;
 530:	81 e2       	ldi	r24, 0x21	; 33
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	fc 01       	movw	r30, r24
 536:	80 81       	ld	r24, Z
 538:	88 7f       	andi	r24, 0xF8	; 248
 53a:	80 93 7e 00 	sts	0x007E, r24
    switch(TWI_status){
 53e:	80 91 7e 00 	lds	r24, 0x007E
 542:	88 2f       	mov	r24, r24
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	aa 27       	eor	r26, r26
 548:	97 fd       	sbrc	r25, 7
 54a:	a0 95       	com	r26
 54c:	ba 2f       	mov	r27, r26
 54e:	48 e0       	ldi	r20, 0x08	; 8
 550:	50 e0       	ldi	r21, 0x00	; 0
 552:	20 ec       	ldi	r18, 0xC0	; 192
 554:	30 e0       	ldi	r19, 0x00	; 0
 556:	84 1b       	sub	r24, r20
 558:	95 0b       	sbc	r25, r21
 55a:	28 17       	cp	r18, r24
 55c:	39 07       	cpc	r19, r25
 55e:	08 f4       	brcc	.+2      	; 0x562 <__vector_17+0x5c>
 560:	6a c1       	rjmp	.+724    	; 0x836 <__vector_17+0x330>
 562:	8d 5e       	subi	r24, 0xED	; 237
 564:	9f 4f       	sbci	r25, 0xFF	; 255
 566:	8f 93       	push	r24
 568:	9f 93       	push	r25
 56a:	08 95       	ret
 
        case TWI_MM_repeated_start_sent_x10:
        case TWI_MM_start_sent_x08:
            switch(TWI_master_state){
 56c:	80 91 64 00 	lds	r24, 0x0064
 570:	88 2f       	mov	r24, r24
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	81 30       	cpi	r24, 0x01	; 1
 576:	91 05       	cpc	r25, r1
 578:	21 f0       	breq	.+8      	; 0x582 <__vector_17+0x7c>
 57a:	82 30       	cpi	r24, 0x02	; 2
 57c:	91 05       	cpc	r25, r1
 57e:	69 f0       	breq	.+26     	; 0x59a <__vector_17+0x94>
 580:	1c c0       	rjmp	.+56     	; 0x5ba <__vector_17+0xb4>
                case TWI_WRITE_STATE:
                    TWI_buffer_pos=0; // point to 1st byte
 582:	10 92 8d 00 	sts	0x008D, r1
 586:	10 92 8c 00 	sts	0x008C, r1
                    TWDR = (TWI_target_slave_addr<<1) | 0x00; // set SLA_W
 58a:	83 e2       	ldi	r24, 0x23	; 35
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	20 91 86 00 	lds	r18, 0x0086
 592:	22 0f       	add	r18, r18
 594:	fc 01       	movw	r30, r24
 596:	20 83       	st	Z, r18
                    break;
 598:	10 c0       	rjmp	.+32     	; 0x5ba <__vector_17+0xb4>
                case TWI_READ_STATE:
                    TWI_buffer_pos=0; // point to first byte
 59a:	10 92 8d 00 	sts	0x008D, r1
 59e:	10 92 8c 00 	sts	0x008C, r1
                    TWDR = (TWI_target_slave_addr<<1) | 0x01; // set SLA_R
 5a2:	83 e2       	ldi	r24, 0x23	; 35
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	20 91 86 00 	lds	r18, 0x0086
 5aa:	22 2f       	mov	r18, r18
 5ac:	30 e0       	ldi	r19, 0x00	; 0
 5ae:	22 0f       	add	r18, r18
 5b0:	33 1f       	adc	r19, r19
 5b2:	21 60       	ori	r18, 0x01	; 1
 5b4:	fc 01       	movw	r30, r24
 5b6:	20 83       	st	Z, r18
                    break;
 5b8:	00 00       	nop
            }
            TWCR = TWI_ACK; // transmit
 5ba:	86 e5       	ldi	r24, 0x56	; 86
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	25 ec       	ldi	r18, 0xC5	; 197
 5c0:	fc 01       	movw	r30, r24
 5c2:	20 83       	st	Z, r18
            break;
 5c4:	4e c1       	rjmp	.+668    	; 0x862 <__vector_17+0x35c>
 
        case TWI_MT_SLA_W_sent_ack_received_x18:
        case TWI_MT_data_sent_ack_received_x28:
            if(TWI_buffer_pos==TWI_write_bytes){
 5c6:	20 91 8c 00 	lds	r18, 0x008C
 5ca:	30 91 8d 00 	lds	r19, 0x008D
 5ce:	80 91 60 00 	lds	r24, 0x0060
 5d2:	90 91 61 00 	lds	r25, 0x0061
 5d6:	28 17       	cp	r18, r24
 5d8:	39 07       	cpc	r19, r25
 5da:	69 f5       	brne	.+90     	; 0x636 <__vector_17+0x130>
                if(TWI_operation==TWI_OP_WRITE_THEN_READ){
 5dc:	80 91 89 00 	lds	r24, 0x0089
 5e0:	83 30       	cpi	r24, 0x03	; 3
 5e2:	49 f4       	brne	.+18     	; 0x5f6 <__vector_17+0xf0>
                    TWI_master_state=TWI_READ_STATE; // now read from slave
 5e4:	82 e0       	ldi	r24, 0x02	; 2
 5e6:	80 93 64 00 	sts	0x0064, r24
                    TWCR = TWI_START; // transmit repeated start
 5ea:	86 e5       	ldi	r24, 0x56	; 86
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	25 ea       	ldi	r18, 0xA5	; 165
 5f0:	fc 01       	movw	r30, r24
 5f2:	20 83       	st	Z, r18
                }
            }else{
                TWDR = p_TWI_buffer[TWI_buffer_pos++]; // load data
                TWCR = TWI_ENABLE; // transmit
            }
            break;
 5f4:	36 c1       	rjmp	.+620    	; 0x862 <__vector_17+0x35c>
            if(TWI_buffer_pos==TWI_write_bytes){
                if(TWI_operation==TWI_OP_WRITE_THEN_READ){
                    TWI_master_state=TWI_READ_STATE; // now read from slave
                    TWCR = TWI_START; // transmit repeated start
                }else{
                    if(TWI_return_result){
 5f6:	80 91 84 00 	lds	r24, 0x0084
 5fa:	90 91 85 00 	lds	r25, 0x0085
 5fe:	00 97       	sbiw	r24, 0x00	; 0
 600:	39 f0       	breq	.+14     	; 0x610 <__vector_17+0x10a>
                        (*TWI_return_result)(TWI_success);// callback with results
 602:	20 91 84 00 	lds	r18, 0x0084
 606:	30 91 85 00 	lds	r19, 0x0085
 60a:	80 e0       	ldi	r24, 0x00	; 0
 60c:	f9 01       	movw	r30, r18
 60e:	09 95       	icall
                    }
                    TWCR = TWI_STOP; // release the buss
 610:	86 e5       	ldi	r24, 0x56	; 86
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	25 e9       	ldi	r18, 0x95	; 149
 616:	fc 01       	movw	r30, r24
 618:	20 83       	st	Z, r18
                    while(TWCR & (1<<TWSTO)); // wait for it
 61a:	00 00       	nop
 61c:	86 e5       	ldi	r24, 0x56	; 86
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	fc 01       	movw	r30, r24
 622:	80 81       	ld	r24, Z
 624:	88 2f       	mov	r24, r24
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	80 71       	andi	r24, 0x10	; 16
 62a:	90 70       	andi	r25, 0x00	; 0
 62c:	00 97       	sbiw	r24, 0x00	; 0
 62e:	b1 f7       	brne	.-20     	; 0x61c <__vector_17+0x116>
                    TWI_busy=0;
 630:	10 92 88 00 	sts	0x0088, r1
                }
            }else{
                TWDR = p_TWI_buffer[TWI_buffer_pos++]; // load data
                TWCR = TWI_ENABLE; // transmit
            }
            break;
 634:	16 c1       	rjmp	.+556    	; 0x862 <__vector_17+0x35c>
                    TWCR = TWI_STOP; // release the buss
                    while(TWCR & (1<<TWSTO)); // wait for it
                    TWI_busy=0;
                }
            }else{
                TWDR = p_TWI_buffer[TWI_buffer_pos++]; // load data
 636:	23 e2       	ldi	r18, 0x23	; 35
 638:	30 e0       	ldi	r19, 0x00	; 0
 63a:	40 91 7f 00 	lds	r20, 0x007F
 63e:	50 91 80 00 	lds	r21, 0x0080
 642:	80 91 8c 00 	lds	r24, 0x008C
 646:	90 91 8d 00 	lds	r25, 0x008D
 64a:	48 0f       	add	r20, r24
 64c:	59 1f       	adc	r21, r25
 64e:	fa 01       	movw	r30, r20
 650:	40 81       	ld	r20, Z
 652:	f9 01       	movw	r30, r18
 654:	40 83       	st	Z, r20
 656:	01 96       	adiw	r24, 0x01	; 1
 658:	90 93 8d 00 	sts	0x008D, r25
 65c:	80 93 8c 00 	sts	0x008C, r24
                TWCR = TWI_ENABLE; // transmit
 660:	86 e5       	ldi	r24, 0x56	; 86
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	25 e8       	ldi	r18, 0x85	; 133
 666:	fc 01       	movw	r30, r24
 668:	20 83       	st	Z, r18
            }
            break;
 66a:	fb c0       	rjmp	.+502    	; 0x862 <__vector_17+0x35c>
 
        case TWI_MR_data_received_ack_returned_x50:
            p_TWI_buffer[TWI_buffer_pos++]=TWDR; // save byte
 66c:	20 91 7f 00 	lds	r18, 0x007F
 670:	30 91 80 00 	lds	r19, 0x0080
 674:	80 91 8c 00 	lds	r24, 0x008C
 678:	90 91 8d 00 	lds	r25, 0x008D
 67c:	28 0f       	add	r18, r24
 67e:	39 1f       	adc	r19, r25
 680:	43 e2       	ldi	r20, 0x23	; 35
 682:	50 e0       	ldi	r21, 0x00	; 0
 684:	fa 01       	movw	r30, r20
 686:	40 81       	ld	r20, Z
 688:	f9 01       	movw	r30, r18
 68a:	40 83       	st	Z, r20
 68c:	01 96       	adiw	r24, 0x01	; 1
 68e:	90 93 8d 00 	sts	0x008D, r25
 692:	80 93 8c 00 	sts	0x008C, r24
        case TWI_MR_SLA_R_sent_ack_received_x40: 
            if(TWI_buffer_pos==(TWI_read_bytes-1)){
 696:	80 91 82 00 	lds	r24, 0x0082
 69a:	90 91 83 00 	lds	r25, 0x0083
 69e:	9c 01       	movw	r18, r24
 6a0:	21 50       	subi	r18, 0x01	; 1
 6a2:	30 40       	sbci	r19, 0x00	; 0
 6a4:	80 91 8c 00 	lds	r24, 0x008C
 6a8:	90 91 8d 00 	lds	r25, 0x008D
 6ac:	28 17       	cp	r18, r24
 6ae:	39 07       	cpc	r19, r25
 6b0:	31 f4       	brne	.+12     	; 0x6be <__vector_17+0x1b8>
                TWCR = TWI_NACK; // get last byte then nack
 6b2:	86 e5       	ldi	r24, 0x56	; 86
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	25 e8       	ldi	r18, 0x85	; 133
 6b8:	fc 01       	movw	r30, r24
 6ba:	20 83       	st	Z, r18
            }else{
                TWCR = TWI_ACK; // get next byte then ack
            }
            break;
 6bc:	d2 c0       	rjmp	.+420    	; 0x862 <__vector_17+0x35c>
            p_TWI_buffer[TWI_buffer_pos++]=TWDR; // save byte
        case TWI_MR_SLA_R_sent_ack_received_x40: 
            if(TWI_buffer_pos==(TWI_read_bytes-1)){
                TWCR = TWI_NACK; // get last byte then nack
            }else{
                TWCR = TWI_ACK; // get next byte then ack
 6be:	86 e5       	ldi	r24, 0x56	; 86
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	25 ec       	ldi	r18, 0xC5	; 197
 6c4:	fc 01       	movw	r30, r24
 6c6:	20 83       	st	Z, r18
            }
            break;
 6c8:	cc c0       	rjmp	.+408    	; 0x862 <__vector_17+0x35c>
 
        case TWI_MR_data_received_nack_returned_x58:            
            p_TWI_buffer[TWI_buffer_pos++]=TWDR; // save byte
 6ca:	20 91 7f 00 	lds	r18, 0x007F
 6ce:	30 91 80 00 	lds	r19, 0x0080
 6d2:	80 91 8c 00 	lds	r24, 0x008C
 6d6:	90 91 8d 00 	lds	r25, 0x008D
 6da:	28 0f       	add	r18, r24
 6dc:	39 1f       	adc	r19, r25
 6de:	43 e2       	ldi	r20, 0x23	; 35
 6e0:	50 e0       	ldi	r21, 0x00	; 0
 6e2:	fa 01       	movw	r30, r20
 6e4:	40 81       	ld	r20, Z
 6e6:	f9 01       	movw	r30, r18
 6e8:	40 83       	st	Z, r20
 6ea:	01 96       	adiw	r24, 0x01	; 1
 6ec:	90 93 8d 00 	sts	0x008D, r25
 6f0:	80 93 8c 00 	sts	0x008C, r24
            if(TWI_return_result){
 6f4:	80 91 84 00 	lds	r24, 0x0084
 6f8:	90 91 85 00 	lds	r25, 0x0085
 6fc:	00 97       	sbiw	r24, 0x00	; 0
 6fe:	39 f0       	breq	.+14     	; 0x70e <__vector_17+0x208>
                (*TWI_return_result)(TWI_success);// callback with results
 700:	20 91 84 00 	lds	r18, 0x0084
 704:	30 91 85 00 	lds	r19, 0x0085
 708:	80 e0       	ldi	r24, 0x00	; 0
 70a:	f9 01       	movw	r30, r18
 70c:	09 95       	icall
            }
            TWCR = TWI_STOP; // release the buss
 70e:	86 e5       	ldi	r24, 0x56	; 86
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	25 e9       	ldi	r18, 0x95	; 149
 714:	fc 01       	movw	r30, r24
 716:	20 83       	st	Z, r18
            while(TWCR & (1<<TWSTO)); // wait for it
 718:	00 00       	nop
 71a:	86 e5       	ldi	r24, 0x56	; 86
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	fc 01       	movw	r30, r24
 720:	80 81       	ld	r24, Z
 722:	88 2f       	mov	r24, r24
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	80 71       	andi	r24, 0x10	; 16
 728:	90 70       	andi	r25, 0x00	; 0
 72a:	00 97       	sbiw	r24, 0x00	; 0
 72c:	b1 f7       	brne	.-20     	; 0x71a <__vector_17+0x214>
            TWI_busy=0;
 72e:	10 92 88 00 	sts	0x0088, r1
            break;
 732:	97 c0       	rjmp	.+302    	; 0x862 <__vector_17+0x35c>
 
        case TWI_SR_SLA_W_received_ack_sent_x60:
        case TWI_SR_SLA_W_received_after_arbitration_lost_ack_sent_x68:
        case TWI_SR_general_call_received_ack_sent_x70:
        case TWI_SR_general_call_received_after_arbitration_lost_ack_sent_x78:
            TWI_buffer_pos=0; // point to start of input buffer
 734:	10 92 8d 00 	sts	0x008D, r1
 738:	10 92 8c 00 	sts	0x008C, r1
            TWCR = TWI_ACK;
 73c:	86 e5       	ldi	r24, 0x56	; 86
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	25 ec       	ldi	r18, 0xC5	; 197
 742:	fc 01       	movw	r30, r24
 744:	20 83       	st	Z, r18
            break;
 746:	8d c0       	rjmp	.+282    	; 0x862 <__vector_17+0x35c>
 
        case TWI_SR_SLA_W_data_received_ack_sent_x80:
        case TWI_SR_general_call_data_received_ack_sent_x90:
            if(TWI_buffer_pos<TWI_buffer_max){
 748:	20 91 8c 00 	lds	r18, 0x008C
 74c:	30 91 8d 00 	lds	r19, 0x008D
 750:	80 91 62 00 	lds	r24, 0x0062
 754:	90 91 63 00 	lds	r25, 0x0063
 758:	28 17       	cp	r18, r24
 75a:	39 07       	cpc	r19, r25
 75c:	a8 f4       	brcc	.+42     	; 0x788 <__vector_17+0x282>
                p_TWI_buffer[TWI_buffer_pos++]=TWDR; // store data
 75e:	20 91 7f 00 	lds	r18, 0x007F
 762:	30 91 80 00 	lds	r19, 0x0080
 766:	80 91 8c 00 	lds	r24, 0x008C
 76a:	90 91 8d 00 	lds	r25, 0x008D
 76e:	28 0f       	add	r18, r24
 770:	39 1f       	adc	r19, r25
 772:	43 e2       	ldi	r20, 0x23	; 35
 774:	50 e0       	ldi	r21, 0x00	; 0
 776:	fa 01       	movw	r30, r20
 778:	40 81       	ld	r20, Z
 77a:	f9 01       	movw	r30, r18
 77c:	40 83       	st	Z, r20
 77e:	01 96       	adiw	r24, 0x01	; 1
 780:	90 93 8d 00 	sts	0x008D, r25
 784:	80 93 8c 00 	sts	0x008C, r24
            }
            TWCR = TWI_ACK; 
 788:	86 e5       	ldi	r24, 0x56	; 86
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	25 ec       	ldi	r18, 0xC5	; 197
 78e:	fc 01       	movw	r30, r24
 790:	20 83       	st	Z, r18
            break;
 792:	67 c0       	rjmp	.+206    	; 0x862 <__vector_17+0x35c>
 
        case TWI_SR_stop_or_repeated_start_received_xA0:
            TWI_buffer_len=TWI_buffer_pos; // bytes returned
 794:	80 91 8c 00 	lds	r24, 0x008C
 798:	90 91 8d 00 	lds	r25, 0x008D
 79c:	80 93 87 00 	sts	0x0087, r24
            if(TWI_return_result){
 7a0:	80 91 84 00 	lds	r24, 0x0084
 7a4:	90 91 85 00 	lds	r25, 0x0085
 7a8:	00 97       	sbiw	r24, 0x00	; 0
 7aa:	39 f0       	breq	.+14     	; 0x7ba <__vector_17+0x2b4>
                (*TWI_return_result)(TWI_success); // callback with results
 7ac:	20 91 84 00 	lds	r18, 0x0084
 7b0:	30 91 85 00 	lds	r19, 0x0085
 7b4:	80 e0       	ldi	r24, 0x00	; 0
 7b6:	f9 01       	movw	r30, r18
 7b8:	09 95       	icall
            }
            TWCR = TWI_ACK; 
 7ba:	86 e5       	ldi	r24, 0x56	; 86
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	25 ec       	ldi	r18, 0xC5	; 197
 7c0:	fc 01       	movw	r30, r24
 7c2:	20 83       	st	Z, r18
            break;
 7c4:	4e c0       	rjmp	.+156    	; 0x862 <__vector_17+0x35c>
 
        case TWI_ST_SLA_R_received_after_arbitration_lost_ack_sent_x80:
        case TWI_ST_SLA_R_received_ack_sent_xA8:
            TWI_buffer_pos=0; // point to start of input buffer
 7c6:	10 92 8d 00 	sts	0x008D, r1
 7ca:	10 92 8c 00 	sts	0x008C, r1
        case TWI_ST_byte_sent_ack_received_x88:
            if(TWI_buffer_pos<TWI_buffer_max){
 7ce:	20 91 8c 00 	lds	r18, 0x008C
 7d2:	30 91 8d 00 	lds	r19, 0x008D
 7d6:	80 91 62 00 	lds	r24, 0x0062
 7da:	90 91 63 00 	lds	r25, 0x0063
 7de:	28 17       	cp	r18, r24
 7e0:	39 07       	cpc	r19, r25
 7e2:	a8 f4       	brcc	.+42     	; 0x80e <__vector_17+0x308>
                TWDR = p_TWI_buffer[TWI_buffer_pos++]; // load data
 7e4:	23 e2       	ldi	r18, 0x23	; 35
 7e6:	30 e0       	ldi	r19, 0x00	; 0
 7e8:	40 91 7f 00 	lds	r20, 0x007F
 7ec:	50 91 80 00 	lds	r21, 0x0080
 7f0:	80 91 8c 00 	lds	r24, 0x008C
 7f4:	90 91 8d 00 	lds	r25, 0x008D
 7f8:	48 0f       	add	r20, r24
 7fa:	59 1f       	adc	r21, r25
 7fc:	fa 01       	movw	r30, r20
 7fe:	40 81       	ld	r20, Z
 800:	f9 01       	movw	r30, r18
 802:	40 83       	st	Z, r20
 804:	01 96       	adiw	r24, 0x01	; 1
 806:	90 93 8d 00 	sts	0x008D, r25
 80a:	80 93 8c 00 	sts	0x008C, r24
            }
        case TWI_SR_SLA_W_data_received_nack_sent_x88:
        case TWI_SR_general_call_data_received_nack_sent_x98:
        case TWI_ST_byte_sent_nack_received_xC0:
        case TWI_ST_last_byte_sent_ack_received_xC8:
            TWCR = TWI_ACK; 
 80e:	86 e5       	ldi	r24, 0x56	; 86
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	25 ec       	ldi	r18, 0xC5	; 197
 814:	fc 01       	movw	r30, r24
 816:	20 83       	st	Z, r18
            break;
 818:	24 c0       	rjmp	.+72     	; 0x862 <__vector_17+0x35c>
 
        case TWI_MT_SLA_W_sent_nack_received_x20:
        case TWI_MT_data_sent_nack_received_x30:
        case TWI_MR_SLA_R_sent_nack_received_x48:
            if(TWI_return_result){
 81a:	80 91 84 00 	lds	r24, 0x0084
 81e:	90 91 85 00 	lds	r25, 0x0085
 822:	00 97       	sbiw	r24, 0x00	; 0
 824:	41 f0       	breq	.+16     	; 0x836 <__vector_17+0x330>
                (*TWI_return_result)(TWI_status);// callback with status
 826:	20 91 84 00 	lds	r18, 0x0084
 82a:	30 91 85 00 	lds	r19, 0x0085
 82e:	80 91 7e 00 	lds	r24, 0x007E
 832:	f9 01       	movw	r30, r18
 834:	09 95       	icall
            }
        case TWI_MM_arbitration_lost_x38:
        default:
            TWCR=TWI_STOP; 
 836:	86 e5       	ldi	r24, 0x56	; 86
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	25 e9       	ldi	r18, 0x95	; 149
 83c:	fc 01       	movw	r30, r24
 83e:	20 83       	st	Z, r18
            while(TWCR & (1<<TWSTO)); // wait for it
 840:	00 00       	nop
 842:	86 e5       	ldi	r24, 0x56	; 86
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	fc 01       	movw	r30, r24
 848:	80 81       	ld	r24, Z
 84a:	88 2f       	mov	r24, r24
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	80 71       	andi	r24, 0x10	; 16
 850:	90 70       	andi	r25, 0x00	; 0
 852:	00 97       	sbiw	r24, 0x00	; 0
 854:	b1 f7       	brne	.-20     	; 0x842 <__vector_17+0x33c>
            TWCR=TWI_START; // try again
 856:	86 e5       	ldi	r24, 0x56	; 86
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	25 ea       	ldi	r18, 0xA5	; 165
 85c:	fc 01       	movw	r30, r24
 85e:	20 83       	st	Z, r18
            break;
 860:	00 00       	nop
    }
 
 862:	cf 91       	pop	r28
 864:	df 91       	pop	r29
 866:	ff 91       	pop	r31
 868:	ef 91       	pop	r30
 86a:	bf 91       	pop	r27
 86c:	af 91       	pop	r26
 86e:	9f 91       	pop	r25
 870:	8f 91       	pop	r24
 872:	7f 91       	pop	r23
 874:	6f 91       	pop	r22
 876:	5f 91       	pop	r21
 878:	4f 91       	pop	r20
 87a:	3f 91       	pop	r19
 87c:	2f 91       	pop	r18
 87e:	0f 90       	pop	r0
 880:	0f be       	out	0x3f, r0	; 63
 882:	0f 90       	pop	r0
 884:	1f 90       	pop	r1
 886:	18 95       	reti

00000888 <__divmodsi4>:
 888:	97 fb       	bst	r25, 7
 88a:	09 2e       	mov	r0, r25
 88c:	05 26       	eor	r0, r21
 88e:	0e d0       	rcall	.+28     	; 0x8ac <__divmodsi4_neg1>
 890:	57 fd       	sbrc	r21, 7
 892:	04 d0       	rcall	.+8      	; 0x89c <__divmodsi4_neg2>
 894:	14 d0       	rcall	.+40     	; 0x8be <__udivmodsi4>
 896:	0a d0       	rcall	.+20     	; 0x8ac <__divmodsi4_neg1>
 898:	00 1c       	adc	r0, r0
 89a:	38 f4       	brcc	.+14     	; 0x8aa <__divmodsi4_exit>

0000089c <__divmodsi4_neg2>:
 89c:	50 95       	com	r21
 89e:	40 95       	com	r20
 8a0:	30 95       	com	r19
 8a2:	21 95       	neg	r18
 8a4:	3f 4f       	sbci	r19, 0xFF	; 255
 8a6:	4f 4f       	sbci	r20, 0xFF	; 255
 8a8:	5f 4f       	sbci	r21, 0xFF	; 255

000008aa <__divmodsi4_exit>:
 8aa:	08 95       	ret

000008ac <__divmodsi4_neg1>:
 8ac:	f6 f7       	brtc	.-4      	; 0x8aa <__divmodsi4_exit>
 8ae:	90 95       	com	r25
 8b0:	80 95       	com	r24
 8b2:	70 95       	com	r23
 8b4:	61 95       	neg	r22
 8b6:	7f 4f       	sbci	r23, 0xFF	; 255
 8b8:	8f 4f       	sbci	r24, 0xFF	; 255
 8ba:	9f 4f       	sbci	r25, 0xFF	; 255
 8bc:	08 95       	ret

000008be <__udivmodsi4>:
 8be:	a1 e2       	ldi	r26, 0x21	; 33
 8c0:	1a 2e       	mov	r1, r26
 8c2:	aa 1b       	sub	r26, r26
 8c4:	bb 1b       	sub	r27, r27
 8c6:	fd 01       	movw	r30, r26
 8c8:	0d c0       	rjmp	.+26     	; 0x8e4 <__udivmodsi4_ep>

000008ca <__udivmodsi4_loop>:
 8ca:	aa 1f       	adc	r26, r26
 8cc:	bb 1f       	adc	r27, r27
 8ce:	ee 1f       	adc	r30, r30
 8d0:	ff 1f       	adc	r31, r31
 8d2:	a2 17       	cp	r26, r18
 8d4:	b3 07       	cpc	r27, r19
 8d6:	e4 07       	cpc	r30, r20
 8d8:	f5 07       	cpc	r31, r21
 8da:	20 f0       	brcs	.+8      	; 0x8e4 <__udivmodsi4_ep>
 8dc:	a2 1b       	sub	r26, r18
 8de:	b3 0b       	sbc	r27, r19
 8e0:	e4 0b       	sbc	r30, r20
 8e2:	f5 0b       	sbc	r31, r21

000008e4 <__udivmodsi4_ep>:
 8e4:	66 1f       	adc	r22, r22
 8e6:	77 1f       	adc	r23, r23
 8e8:	88 1f       	adc	r24, r24
 8ea:	99 1f       	adc	r25, r25
 8ec:	1a 94       	dec	r1
 8ee:	69 f7       	brne	.-38     	; 0x8ca <__udivmodsi4_loop>
 8f0:	60 95       	com	r22
 8f2:	70 95       	com	r23
 8f4:	80 95       	com	r24
 8f6:	90 95       	com	r25
 8f8:	9b 01       	movw	r18, r22
 8fa:	ac 01       	movw	r20, r24
 8fc:	bd 01       	movw	r22, r26
 8fe:	cf 01       	movw	r24, r30
 900:	08 95       	ret

00000902 <_exit>:
 902:	f8 94       	cli

00000904 <__stop_program>:
 904:	ff cf       	rjmp	.-2      	; 0x904 <__stop_program>
