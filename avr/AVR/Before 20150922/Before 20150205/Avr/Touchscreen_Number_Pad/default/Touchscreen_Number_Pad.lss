
Touchscreen_Number_Pad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000076  00800200  00001106  0000119a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001106  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000057  00800276  00800276  00001210  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00001210  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000003db  00000000  00000000  00001250  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bcc  00000000  00000000  0000162b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000337  00000000  00000000  000021f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000dcb  00000000  00000000  0000252e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000250  00000000  00000000  000032fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cf  00000000  00000000  0000354c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000558  00000000  00000000  0000391b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__vector_1>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__vector_23>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 65 07 	jmp	0xeca	; 0xeca <__vector_25>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 3b 01 	jmp	0x276	; 0x276 <__vector_29>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e6 e0       	ldi	r30, 0x06	; 6
      fc:	f1 e1       	ldi	r31, 0x11	; 17
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a6 37       	cpi	r26, 0x76	; 118
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a6 e7       	ldi	r26, 0x76	; 118
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ad 3c       	cpi	r26, 0xCD	; 205
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 ca 05 	call	0xb94	; 0xb94 <main>
     122:	0c 94 81 08 	jmp	0x1102	; 0x1102 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <InitTimer>:
//*********************************************************

void InitTimer()
{
   // Prescaler = FCPU/256/256 = 61.0352 hz 
   TCCR0B|=(1<<CS02)|(0<<CS00)|(0<<CS00);
     12a:	85 b5       	in	r24, 0x25	; 37
     12c:	84 60       	ori	r24, 0x04	; 4
     12e:	85 bd       	out	0x25, r24	; 37

   //Enable Overflow Interrupt Enable
   TIMSK0|=(1<<TOIE0);
     130:	ee e6       	ldi	r30, 0x6E	; 110
     132:	f0 e0       	ldi	r31, 0x00	; 0
     134:	80 81       	ld	r24, Z
     136:	81 60       	ori	r24, 0x01	; 1
     138:	80 83       	st	Z, r24
   TIMSK1|=(1<<TOIE1);
     13a:	ef e6       	ldi	r30, 0x6F	; 111
     13c:	f0 e0       	ldi	r31, 0x00	; 0
     13e:	80 81       	ld	r24, Z
     140:	81 60       	ori	r24, 0x01	; 1
     142:	80 83       	st	Z, r24

   //Initialize Counter
   TCNT0=0;
     144:	16 bc       	out	0x26, r1	; 38


   TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);        //NON Inverted PWM
     146:	e0 e8       	ldi	r30, 0x80	; 128
     148:	f0 e0       	ldi	r31, 0x00	; 0
     14a:	80 81       	ld	r24, Z
     14c:	82 6a       	ori	r24, 0xA2	; 162
     14e:	80 83       	st	Z, r24
   TCCR1B|=(1<<WGM13)|(1<<WGM12)|(0<<CS12)|(1<<CS11)|(0<<CS10); //PRESCALER=64 MODE 14(FAST PWM)
     150:	e1 e8       	ldi	r30, 0x81	; 129
     152:	f0 e0       	ldi	r31, 0x00	; 0
     154:	80 81       	ld	r24, Z
     156:	8a 61       	ori	r24, 0x1A	; 26
     158:	80 83       	st	Z, r24

   ICR1=9999;  //fPWM=50Hz (Period = 20ms Standard).
     15a:	8f e0       	ldi	r24, 0x0F	; 15
     15c:	97 e2       	ldi	r25, 0x27	; 39
     15e:	90 93 87 00 	sts	0x0087, r25
     162:	80 93 86 00 	sts	0x0086, r24
   //OCR1A=316;

   DDRD|=(1<<PD4)|(1<<PD5);   //PWM Pins as Out
     166:	8a b1       	in	r24, 0x0a	; 10
     168:	80 63       	ori	r24, 0x30	; 48
     16a:	8a b9       	out	0x0a, r24	; 10

   //Initialize our varriable
   count=0;
     16c:	10 92 cb 02 	sts	0x02CB, r1
   //sei();
}
     170:	08 95       	ret

00000172 <InitADC>:
	Set_Touch_Region(11, 152, 66, 19, 19, 11, 12);	// 11, 12)	
	Set_Touch_Region(10, 152, 94, 19, 19, 101, 100);	//101, 100)
}
void InitADC()
{
ADMUX=(1<<REFS0);                         // For Aref=AVcc;
     172:	80 e4       	ldi	r24, 0x40	; 64
     174:	80 93 7c 00 	sts	0x007C, r24
ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADIE); //Rrescalar div factor =128
     178:	8f e8       	ldi	r24, 0x8F	; 143
     17a:	80 93 7a 00 	sts	0x007A, r24
sei();  //start interrupt
     17e:	78 94       	sei
wdt_reset();
     180:	a8 95       	wdr
}
     182:	08 95       	ret

00000184 <Wait>:
	}			
}

//********************************************************************************
void Wait(uint8_t time)
{
     184:	90 e0       	ldi	r25, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     186:	20 e0       	ldi	r18, 0x00	; 0
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	04 c0       	rjmp	.+8      	; 0x194 <Wait+0x10>
     18c:	f9 01       	movw	r30, r18
     18e:	31 97       	sbiw	r30, 0x01	; 1
     190:	f1 f7       	brne	.-4      	; 0x18e <Wait+0xa>
   uint8_t i;
   for(i=0;i<time;i++)
     192:	9f 5f       	subi	r25, 0xFF	; 255
     194:	98 17       	cp	r25, r24
     196:	d0 f3       	brcs	.-12     	; 0x18c <Wait+0x8>
      _delay_loop_2(0); 
}
     198:	08 95       	ret

0000019a <ReadADC>:

uint16_t ReadADC(uint8_t ch)
{
   //Select ADC Channel ch must be 0-7
   ch=ch&0b00000111;
   ADMUX|=ch;
     19a:	90 91 7c 00 	lds	r25, 0x007C
     19e:	87 70       	andi	r24, 0x07	; 7
     1a0:	89 2b       	or	r24, r25
     1a2:	80 93 7c 00 	sts	0x007C, r24

   //Start Single conversion
   ADCSRA|=(1<<ADSC);
     1a6:	80 91 7a 00 	lds	r24, 0x007A
     1aa:	80 64       	ori	r24, 0x40	; 64
     1ac:	80 93 7a 00 	sts	0x007A, r24

   //Wait for conversion to complete
   while(!(ADCSRA & (1<<ADIF)));
     1b0:	80 91 7a 00 	lds	r24, 0x007A
     1b4:	84 ff       	sbrs	r24, 4
     1b6:	fc cf       	rjmp	.-8      	; 0x1b0 <ReadADC+0x16>
   //Clear ADIF by writing one to it
   //Note you may be wondering why we have write one to clear it
   //This is standard way of clearing bits in io as said in datasheets.
   //The code writes '1' but it result in setting bit to '0' !!!

   ADCSRA|=(1<<ADIF);
     1b8:	80 91 7a 00 	lds	r24, 0x007A
     1bc:	80 61       	ori	r24, 0x10	; 16
     1be:	80 93 7a 00 	sts	0x007A, r24

   return(ADC); 
     1c2:	20 91 78 00 	lds	r18, 0x0078
     1c6:	30 91 79 00 	lds	r19, 0x0079
}
     1ca:	c9 01       	movw	r24, r18
     1cc:	08 95       	ret

000001ce <RESET_vect>:
} 


//******************************************************************************
ISR(RESET_vect)
{
     1ce:	1f 92       	push	r1
     1d0:	0f 92       	push	r0
     1d2:	0f b6       	in	r0, 0x3f	; 63
     1d4:	0f 92       	push	r0
     1d6:	11 24       	eor	r1, r1

}
     1d8:	0f 90       	pop	r0
     1da:	0f be       	out	0x3f, r0	; 63
     1dc:	0f 90       	pop	r0
     1de:	1f 90       	pop	r1
     1e0:	18 95       	reti

000001e2 <__vector_1>:


ISR(INT0_vect)
{
     1e2:	1f 92       	push	r1
     1e4:	0f 92       	push	r0
     1e6:	0f b6       	in	r0, 0x3f	; 63
     1e8:	0f 92       	push	r0
     1ea:	11 24       	eor	r1, r1
		//	pulse_incr -= 2;
	//	}
	//	brightness = INCREASING;
		//slider_value = 0x00;				// Start new cycle with LED off
//	}
}
     1ec:	0f 90       	pop	r0
     1ee:	0f be       	out	0x3f, r0	; 63
     1f0:	0f 90       	pop	r0
     1f2:	1f 90       	pop	r1
     1f4:	18 95       	reti

000001f6 <WriteString>:

   return(ADC); 
}

void WriteString(unsigned char *strPointer)
{   
     1f6:	cf 93       	push	r28
     1f8:	df 93       	push	r29
     1fa:	ec 01       	movw	r28, r24
     1fc:	03 c0       	rjmp	.+6      	; 0x204 <WriteString+0xe>
   while (*strPointer)
   {
      UWriteData(*strPointer);
     1fe:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
      strPointer++;   
     202:	21 96       	adiw	r28, 0x01	; 1
   return(ADC); 
}

void WriteString(unsigned char *strPointer)
{   
   while (*strPointer)
     204:	88 81       	ld	r24, Y
     206:	88 23       	and	r24, r24
     208:	d1 f7       	brne	.-12     	; 0x1fe <WriteString+0x8>
      UWriteData(*strPointer);
      strPointer++;   
   }
   
   return;
} 
     20a:	df 91       	pop	r29
     20c:	cf 91       	pop	r28
     20e:	08 95       	ret

00000210 <Write_Blank>:
   for(i=0;i<time;i++)
      _delay_loop_2(0); 
}

void Write_Blank(uint8_t spaces)
{
     210:	0f 93       	push	r16
     212:	1f 93       	push	r17
     214:	08 2f       	mov	r16, r24
     216:	10 e0       	ldi	r17, 0x00	; 0
     218:	05 c0       	rjmp	.+10     	; 0x224 <Write_Blank+0x14>
   uint8_t i;
   for(i=0;i<spaces;i++)
      WriteString(Empty);  
     21a:	8e e6       	ldi	r24, 0x6E	; 110
     21c:	92 e0       	ldi	r25, 0x02	; 2
     21e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <WriteString>
}

void Write_Blank(uint8_t spaces)
{
   uint8_t i;
   for(i=0;i<spaces;i++)
     222:	1f 5f       	subi	r17, 0xFF	; 255
     224:	10 17       	cp	r17, r16
     226:	c8 f3       	brcs	.-14     	; 0x21a <Write_Blank+0xa>
      WriteString(Empty);  
}
     228:	1f 91       	pop	r17
     22a:	0f 91       	pop	r16
     22c:	08 95       	ret

0000022e <Command_Display>:
	Command_Display(Set_Font);
	UWriteData(font_id);
} 

void Command_Display(unsigned char command)
{	
     22e:	1f 93       	push	r17
     230:	18 2f       	mov	r17, r24
	UWriteData(CMD);
     232:	8e ef       	ldi	r24, 0xFE	; 254
     234:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
	UWriteData(command);
     238:	81 2f       	mov	r24, r17
     23a:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
}
     23e:	1f 91       	pop	r17
     240:	08 95       	ret

00000242 <Touch_Calibration>:
	Wait(1);
}

void Touch_Calibration()
{	
	Command_Display(Touch_Calibrat);
     242:	8b e8       	ldi	r24, 0x8B	; 139
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	0e 94 17 01 	call	0x22e	; 0x22e <Command_Display>

}
     24a:	08 95       	ret

0000024c <Delete_All_Regions>:
	Draw_Rect_At(0, x1+1, y1+1, x2-1, y2-1);
	Draw_Rect_At(0, x1+2, y1+2, x2-2, y2-2);
}
void Delete_All_Regions()
{
	Command_Display(Delete_Region);
     24c:	86 e8       	ldi	r24, 0x86	; 134
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	0e 94 17 01 	call	0x22e	; 0x22e <Command_Display>
}
     254:	08 95       	ret

00000256 <Cursor_Coordinate>:
	UWriteData(col);
	UWriteData(row);
}

void Cursor_Coordinate(unsigned char horiz, unsigned char vert)
{	
     256:	0f 93       	push	r16
     258:	1f 93       	push	r17
     25a:	18 2f       	mov	r17, r24
     25c:	06 2f       	mov	r16, r22
	Command_Display(Cursor_Cord);
     25e:	89 e7       	ldi	r24, 0x79	; 121
     260:	0e 94 17 01 	call	0x22e	; 0x22e <Command_Display>
	UWriteData(horiz);
     264:	81 2f       	mov	r24, r17
     266:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
	UWriteData(vert);
     26a:	80 2f       	mov	r24, r16
     26c:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
}
     270:	1f 91       	pop	r17
     272:	0f 91       	pop	r16
     274:	08 95       	ret

00000276 <__vector_29>:
		//slider_value = 0x00;				// Start new cycle with LED off
//	}
}

ISR(ADC_vect)
{
     276:	1f 92       	push	r1
     278:	0f 92       	push	r0
     27a:	0f b6       	in	r0, 0x3f	; 63
     27c:	0f 92       	push	r0
     27e:	0b b6       	in	r0, 0x3b	; 59
     280:	0f 92       	push	r0
     282:	11 24       	eor	r1, r1
     284:	2f 93       	push	r18
     286:	3f 93       	push	r19
     288:	4f 93       	push	r20
     28a:	5f 93       	push	r21
     28c:	6f 93       	push	r22
     28e:	7f 93       	push	r23
     290:	8f 93       	push	r24
     292:	9f 93       	push	r25
     294:	af 93       	push	r26
     296:	bf 93       	push	r27
     298:	ef 93       	push	r30
     29a:	ff 93       	push	r31
	adc_result=ADC; 
     29c:	20 91 78 00 	lds	r18, 0x0078
     2a0:	30 91 79 00 	lds	r19, 0x0079
     2a4:	30 93 84 02 	sts	0x0284, r19
     2a8:	20 93 83 02 	sts	0x0283, r18
	OCR1A= ADC + 150;
     2ac:	80 91 78 00 	lds	r24, 0x0078
     2b0:	90 91 79 00 	lds	r25, 0x0079
     2b4:	8a 56       	subi	r24, 0x6A	; 106
     2b6:	9f 4f       	sbci	r25, 0xFF	; 255
     2b8:	90 93 89 00 	sts	0x0089, r25
     2bc:	80 93 88 00 	sts	0x0088, r24
	if(abs(temp-adc_result) > 2)
     2c0:	40 91 76 02 	lds	r20, 0x0276
     2c4:	50 91 77 02 	lds	r21, 0x0277
     2c8:	ca 01       	movw	r24, r20
     2ca:	82 1b       	sub	r24, r18
     2cc:	93 0b       	sbc	r25, r19
     2ce:	97 ff       	sbrs	r25, 7
     2d0:	03 c0       	rjmp	.+6      	; 0x2d8 <__vector_29+0x62>
     2d2:	90 95       	com	r25
     2d4:	81 95       	neg	r24
     2d6:	9f 4f       	sbci	r25, 0xFF	; 255
     2d8:	03 97       	sbiw	r24, 0x03	; 3
     2da:	44 f1       	brlt	.+80     	; 0x32c <__vector_29+0xb6>
	{
		if(temp > adc_result)
     2dc:	24 17       	cp	r18, r20
     2de:	35 07       	cpc	r19, r21
     2e0:	18 f0       	brcs	.+6      	; 0x2e8 <__vector_29+0x72>
			whole = adc_result;///204;
			//WriteString(Value);
			itoa(whole, message1, 10); 
			WriteString(message1);
		}
		else if(temp < adc_result)
     2e2:	42 17       	cp	r20, r18
     2e4:	53 07       	cpc	r21, r19
     2e6:	10 f5       	brcc	.+68     	; 0x32c <__vector_29+0xb6>
		{
			temp = adc_result;
     2e8:	30 93 77 02 	sts	0x0277, r19
     2ec:	20 93 76 02 	sts	0x0276, r18
			//Command_Display(Go_Home);
			//Cursor_Pos(4,5);
			Cursor_Coordinate(5,120);
     2f0:	85 e0       	ldi	r24, 0x05	; 5
     2f2:	68 e7       	ldi	r22, 0x78	; 120
     2f4:	0e 94 2b 01 	call	0x256	; 0x256 <Cursor_Coordinate>
			Write_Blank(10);
     2f8:	8a e0       	ldi	r24, 0x0A	; 10
     2fa:	0e 94 08 01 	call	0x210	; 0x210 <Write_Blank>
			//Command_Display(Go_Home);
			//Cursor_Pos(4,5);
			Cursor_Coordinate(5,120);
     2fe:	85 e0       	ldi	r24, 0x05	; 5
     300:	68 e7       	ldi	r22, 0x78	; 120
     302:	0e 94 2b 01 	call	0x256	; 0x256 <Cursor_Coordinate>
			whole = adc_result;///204;
     306:	80 91 83 02 	lds	r24, 0x0283
     30a:	90 91 84 02 	lds	r25, 0x0284
     30e:	90 93 82 02 	sts	0x0282, r25
     312:	80 93 81 02 	sts	0x0281, r24
			//WriteString(Value);
			itoa(whole, message1, 10); 
     316:	6f e7       	ldi	r22, 0x7F	; 127
     318:	72 e0       	ldi	r23, 0x02	; 2
     31a:	4a e0       	ldi	r20, 0x0A	; 10
     31c:	50 e0       	ldi	r21, 0x00	; 0
     31e:	0e 94 3c 08 	call	0x1078	; 0x1078 <itoa>
			WriteString(message1);
     322:	8f e7       	ldi	r24, 0x7F	; 127
     324:	92 e0       	ldi	r25, 0x02	; 2
     326:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <WriteString>
     32a:	04 c0       	rjmp	.+8      	; 0x334 <__vector_29+0xbe>
			temp = adc_result;
		}
	}
	else
	{
		temp = adc_result;
     32c:	30 93 77 02 	sts	0x0277, r19
     330:	20 93 76 02 	sts	0x0276, r18
	}

}
     334:	ff 91       	pop	r31
     336:	ef 91       	pop	r30
     338:	bf 91       	pop	r27
     33a:	af 91       	pop	r26
     33c:	9f 91       	pop	r25
     33e:	8f 91       	pop	r24
     340:	7f 91       	pop	r23
     342:	6f 91       	pop	r22
     344:	5f 91       	pop	r21
     346:	4f 91       	pop	r20
     348:	3f 91       	pop	r19
     34a:	2f 91       	pop	r18
     34c:	0f 90       	pop	r0
     34e:	0b be       	out	0x3b, r0	; 59
     350:	0f 90       	pop	r0
     352:	0f be       	out	0x3f, r0	; 63
     354:	0f 90       	pop	r0
     356:	1f 90       	pop	r1
     358:	18 95       	reti

0000035a <Cursor_Pos>:
	UWriteData(CMD);
	UWriteData(command);
}

void Cursor_Pos(unsigned char col, unsigned char row)
{	
     35a:	0f 93       	push	r16
     35c:	1f 93       	push	r17
     35e:	18 2f       	mov	r17, r24
     360:	06 2f       	mov	r16, r22
	Command_Display(Cursor);
     362:	87 e4       	ldi	r24, 0x47	; 71
     364:	0e 94 17 01 	call	0x22e	; 0x22e <Command_Display>
	UWriteData(col);
     368:	81 2f       	mov	r24, r17
     36a:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
	UWriteData(row);
     36e:	80 2f       	mov	r24, r16
     370:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
}
     374:	1f 91       	pop	r17
     376:	0f 91       	pop	r16
     378:	08 95       	ret

0000037a <Choose_Font>:
	Command_Display(Drawing_Color);
	UWriteData(color);
}

void Choose_Font(unsigned char font_id)
{
     37a:	1f 93       	push	r17
     37c:	18 2f       	mov	r17, r24
	Command_Display(Set_Font);
     37e:	81 e3       	ldi	r24, 0x31	; 49
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	0e 94 17 01 	call	0x22e	; 0x22e <Command_Display>
	UWriteData(font_id);
     386:	81 2f       	mov	r24, r17
     388:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
} 
     38c:	1f 91       	pop	r17
     38e:	08 95       	ret

00000390 <Choose_Color>:
	UWriteData(x);
	UWriteData(y);
}

void Choose_Color(unsigned char color)
{
     390:	1f 93       	push	r17
     392:	18 2f       	mov	r17, r24
	Command_Display(Drawing_Color);
     394:	83 e6       	ldi	r24, 0x63	; 99
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	0e 94 17 01 	call	0x22e	; 0x22e <Command_Display>
	UWriteData(color);
     39c:	81 2f       	mov	r24, r17
     39e:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
}
     3a2:	1f 91       	pop	r17
     3a4:	08 95       	ret

000003a6 <InitDisplay>:
   //sei();
}

void InitDisplay()
{
	Command_Display(Display_On);
     3a6:	82 e4       	ldi	r24, 0x42	; 66
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	0e 94 17 01 	call	0x22e	; 0x22e <Command_Display>
	Choose_Font(Small_Filled);
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	0e 94 bd 01 	call	0x37a	; 0x37a <Choose_Font>
	Choose_Color(color);
     3b6:	80 91 74 02 	lds	r24, 0x0274
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	0e 94 c8 01 	call	0x390	; 0x390 <Choose_Color>
	Command_Display(Clear_Screen);
     3c0:	88 e5       	ldi	r24, 0x58	; 88
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	0e 94 17 01 	call	0x22e	; 0x22e <Command_Display>
}
     3c8:	08 95       	ret

000003ca <Draw_Pixel_At>:
	UWriteData(x2);
	UWriteData(y2);
}

void Draw_Pixel_At(unsigned char x, unsigned char y)
{	
     3ca:	0f 93       	push	r16
     3cc:	1f 93       	push	r17
     3ce:	18 2f       	mov	r17, r24
     3d0:	06 2f       	mov	r16, r22
	Command_Display(Draw_Pixel);
     3d2:	80 e7       	ldi	r24, 0x70	; 112
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	0e 94 17 01 	call	0x22e	; 0x22e <Command_Display>
	UWriteData(x);
     3da:	81 2f       	mov	r24, r17
     3dc:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
	UWriteData(y);
     3e0:	80 2f       	mov	r24, r16
     3e2:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
}
     3e6:	1f 91       	pop	r17
     3e8:	0f 91       	pop	r16
     3ea:	08 95       	ret

000003ec <__vector_23>:
	}

}

ISR(TIMER0_OVF_vect)
{
     3ec:	1f 92       	push	r1
     3ee:	0f 92       	push	r0
     3f0:	0f b6       	in	r0, 0x3f	; 63
     3f2:	0f 92       	push	r0
     3f4:	0b b6       	in	r0, 0x3b	; 59
     3f6:	0f 92       	push	r0
     3f8:	11 24       	eor	r1, r1
     3fa:	2f 93       	push	r18
     3fc:	3f 93       	push	r19
     3fe:	4f 93       	push	r20
     400:	5f 93       	push	r21
     402:	6f 93       	push	r22
     404:	7f 93       	push	r23
     406:	8f 93       	push	r24
     408:	9f 93       	push	r25
     40a:	af 93       	push	r26
     40c:	bf 93       	push	r27
     40e:	ef 93       	push	r30
     410:	ff 93       	push	r31
   //This is the interrupt service routine for TIMER0 OVERFLOW Interrupt.
   //CPU automatically call this when TIMER0 overflows.

   //Increment our variable
   count++;
     412:	80 91 cb 02 	lds	r24, 0x02CB
     416:	8f 5f       	subi	r24, 0xFF	; 255
     418:	80 93 cb 02 	sts	0x02CB, r24
   if(count==20)  //61 = 1 sec : 20 = 1/3 sec
     41c:	80 91 cb 02 	lds	r24, 0x02CB
     420:	84 31       	cpi	r24, 0x14	; 20
     422:	09 f0       	breq	.+2      	; 0x426 <__vector_23+0x3a>
     424:	5d c0       	rjmp	.+186    	; 0x4e0 <__vector_23+0xf4>
   {
      	
	  ADCSRA|=(1<<ADSC);
     426:	80 91 7a 00 	lds	r24, 0x007A
     42a:	80 64       	ori	r24, 0x40	; 64
     42c:	80 93 7a 00 	sts	0x007A, r24
	  data=PINC;
     430:	86 b1       	in	r24, 0x06	; 6
     432:	80 93 88 02 	sts	0x0288, r24
		if(data == 0xFE) //FE FD FB F7 EF DF BF 7F
     436:	8e 3f       	cpi	r24, 0xFE	; 254
     438:	19 f4       	brne	.+6      	; 0x440 <__vector_23+0x54>
			
		//	Command_Display(Go_Home);
		//	Write_Blank(36);
		//	Command_Display(Go_Home);
		//	WriteString(Wulf);
		OCR1A=194;
     43a:	82 ec       	ldi	r24, 0xC2	; 194
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	04 c0       	rjmp	.+8      	; 0x448 <__vector_23+0x5c>
		}
		else if(data == 0xFD)
     440:	8d 3f       	cpi	r24, 0xFD	; 253
     442:	39 f4       	brne	.+14     	; 0x452 <__vector_23+0x66>
		{
		//	Command_Display(Go_Home);
		//	Write_Blank(36);
		//	Command_Display(Go_Home);
		//	WriteString(Status);
		OCR1A=1070;
     444:	8e e2       	ldi	r24, 0x2E	; 46
     446:	94 e0       	ldi	r25, 0x04	; 4
     448:	90 93 89 00 	sts	0x0089, r25
     44c:	80 93 88 00 	sts	0x0088, r24
     450:	45 c0       	rjmp	.+138    	; 0x4dc <__vector_23+0xf0>
		}
		else if(data == 0xFB)
     452:	8b 3f       	cpi	r24, 0xFB	; 251
     454:	09 f5       	brne	.+66     	; 0x498 <__vector_23+0xac>
		{
			//for(i=1;i<3;i++)
			//	{
					packet[0]=UReadData();
     456:	0e 94 be 07 	call	0xf7c	; 0xf7c <UReadData>
     45a:	80 93 7a 02 	sts	0x027A, r24
				//}
			
				p_data=packet[0];
     45e:	80 93 80 02 	sts	0x0280, r24
		    	Command_Display(Go_Home);
     462:	88 e4       	ldi	r24, 0x48	; 72
     464:	0e 94 17 01 	call	0x22e	; 0x22e <Command_Display>
				Write_Blank(36);
     468:	84 e2       	ldi	r24, 0x24	; 36
     46a:	0e 94 08 01 	call	0x210	; 0x210 <Write_Blank>
				Command_Display(Go_Home);
     46e:	88 e4       	ldi	r24, 0x48	; 72
     470:	0e 94 17 01 	call	0x22e	; 0x22e <Command_Display>
				WriteString(Packet);
     474:	86 e3       	ldi	r24, 0x36	; 54
     476:	92 e0       	ldi	r25, 0x02	; 2
     478:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <WriteString>
				itoa(p_data, message3, 10); 
     47c:	80 91 80 02 	lds	r24, 0x0280
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	6c ec       	ldi	r22, 0xCC	; 204
     484:	72 e0       	ldi	r23, 0x02	; 2
     486:	4a e0       	ldi	r20, 0x0A	; 10
     488:	50 e0       	ldi	r21, 0x00	; 0
     48a:	0e 94 3c 08 	call	0x1078	; 0x1078 <itoa>
				WriteString(message3);
     48e:	8c ec       	ldi	r24, 0xCC	; 204
     490:	92 e0       	ldi	r25, 0x02	; 2
     492:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <WriteString>
     496:	22 c0       	rjmp	.+68     	; 0x4dc <__vector_23+0xf0>
		}
		else if(data == 0xF7)
     498:	87 3f       	cpi	r24, 0xF7	; 247
     49a:	51 f4       	brne	.+20     	; 0x4b0 <__vector_23+0xc4>
		{
			draw_y++;
     49c:	60 91 79 02 	lds	r22, 0x0279
     4a0:	6f 5f       	subi	r22, 0xFF	; 255
     4a2:	60 93 79 02 	sts	0x0279, r22
			Draw_Pixel_At(draw_x, draw_y);
     4a6:	80 91 78 02 	lds	r24, 0x0278
     4aa:	0e 94 e5 01 	call	0x3ca	; 0x3ca <Draw_Pixel_At>
     4ae:	16 c0       	rjmp	.+44     	; 0x4dc <__vector_23+0xf0>
		}
		else if(data == 0xEF)
     4b0:	8f 3e       	cpi	r24, 0xEF	; 239
     4b2:	31 f4       	brne	.+12     	; 0x4c0 <__vector_23+0xd4>
		{
			Command_Display(Display_On);
     4b4:	82 e4       	ldi	r24, 0x42	; 66
     4b6:	0e 94 17 01 	call	0x22e	; 0x22e <Command_Display>
			InitDisplay();
     4ba:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <InitDisplay>
     4be:	0e c0       	rjmp	.+28     	; 0x4dc <__vector_23+0xf0>
		}
		else if(data == 0xDF)
     4c0:	8f 3d       	cpi	r24, 0xDF	; 223
     4c2:	11 f4       	brne	.+4      	; 0x4c8 <__vector_23+0xdc>
		{
			Command_Display(Display_OFF);
     4c4:	86 e4       	ldi	r24, 0x46	; 70
     4c6:	03 c0       	rjmp	.+6      	; 0x4ce <__vector_23+0xe2>
		}
		else if(data == 0xBF)
     4c8:	8f 3b       	cpi	r24, 0xBF	; 191
     4ca:	21 f4       	brne	.+8      	; 0x4d4 <__vector_23+0xe8>
		{
			Command_Display(Clear_Screen);
     4cc:	88 e5       	ldi	r24, 0x58	; 88
     4ce:	0e 94 17 01 	call	0x22e	; 0x22e <Command_Display>
     4d2:	04 c0       	rjmp	.+8      	; 0x4dc <__vector_23+0xf0>
		}
		else if(data == 0x7F)
     4d4:	8f 37       	cpi	r24, 0x7F	; 127
     4d6:	11 f4       	brne	.+4      	; 0x4dc <__vector_23+0xf0>
		{
			Touch_Calibration();
     4d8:	0e 94 21 01 	call	0x242	; 0x242 <Touch_Calibration>
		{
		//	Command_Display(Go_Home);
		//	Write_Blank(36);
		//	Command_Display(Go_Home);	
		}
		count=0;
     4dc:	10 92 cb 02 	sts	0x02CB, r1
		
   }


}
     4e0:	ff 91       	pop	r31
     4e2:	ef 91       	pop	r30
     4e4:	bf 91       	pop	r27
     4e6:	af 91       	pop	r26
     4e8:	9f 91       	pop	r25
     4ea:	8f 91       	pop	r24
     4ec:	7f 91       	pop	r23
     4ee:	6f 91       	pop	r22
     4f0:	5f 91       	pop	r21
     4f2:	4f 91       	pop	r20
     4f4:	3f 91       	pop	r19
     4f6:	2f 91       	pop	r18
     4f8:	0f 90       	pop	r0
     4fa:	0b be       	out	0x3b, r0	; 59
     4fc:	0f 90       	pop	r0
     4fe:	0f be       	out	0x3f, r0	; 63
     500:	0f 90       	pop	r0
     502:	1f 90       	pop	r1
     504:	18 95       	reti

00000506 <Draw_Line_At>:
	UWriteData(y);

}

void Draw_Line_At(unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2)
{	
     506:	ef 92       	push	r14
     508:	ff 92       	push	r15
     50a:	0f 93       	push	r16
     50c:	1f 93       	push	r17
     50e:	18 2f       	mov	r17, r24
     510:	06 2f       	mov	r16, r22
     512:	f4 2e       	mov	r15, r20
     514:	e2 2e       	mov	r14, r18
	Command_Display(Drawing_Line);
     516:	8c e6       	ldi	r24, 0x6C	; 108
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	0e 94 17 01 	call	0x22e	; 0x22e <Command_Display>
	UWriteData(x1);
     51e:	81 2f       	mov	r24, r17
     520:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
	UWriteData(y1);
     524:	80 2f       	mov	r24, r16
     526:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
	UWriteData(x2);
     52a:	8f 2d       	mov	r24, r15
     52c:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
	UWriteData(y2);
     530:	8e 2d       	mov	r24, r14
     532:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
}
     536:	1f 91       	pop	r17
     538:	0f 91       	pop	r16
     53a:	ff 90       	pop	r15
     53c:	ef 90       	pop	r14
     53e:	08 95       	ret

00000540 <Continue_Line_To>:
	UWriteData(y2);
	Wait(1);
}

void Continue_Line_To(unsigned char x, unsigned char y)
{	
     540:	0f 93       	push	r16
     542:	1f 93       	push	r17
     544:	18 2f       	mov	r17, r24
     546:	06 2f       	mov	r16, r22
	Command_Display(Continue_Line);
     548:	85 e6       	ldi	r24, 0x65	; 101
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	0e 94 17 01 	call	0x22e	; 0x22e <Command_Display>
	UWriteData(x);
     550:	81 2f       	mov	r24, r17
     552:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
	UWriteData(y);
     556:	80 2f       	mov	r24, r16
     558:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>

}
     55c:	1f 91       	pop	r17
     55e:	0f 91       	pop	r16
     560:	08 95       	ret

00000562 <Draw_Rect_At>:
	UWriteData(y2);
	Wait(1);
}

void Draw_Rect_At(unsigned char color, unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2)
{	
     562:	df 92       	push	r13
     564:	ef 92       	push	r14
     566:	ff 92       	push	r15
     568:	0f 93       	push	r16
     56a:	1f 93       	push	r17
     56c:	18 2f       	mov	r17, r24
     56e:	f6 2e       	mov	r15, r22
     570:	e4 2e       	mov	r14, r20
     572:	d2 2e       	mov	r13, r18
	Command_Display(Draw_Rectangle);
     574:	82 e7       	ldi	r24, 0x72	; 114
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	0e 94 17 01 	call	0x22e	; 0x22e <Command_Display>
	UWriteData(color);
     57c:	81 2f       	mov	r24, r17
     57e:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
	UWriteData(x1);
     582:	8f 2d       	mov	r24, r15
     584:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
	UWriteData(y1);
     588:	8e 2d       	mov	r24, r14
     58a:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
	UWriteData(x2);
     58e:	8d 2d       	mov	r24, r13
     590:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
	UWriteData(y2);
     594:	80 2f       	mov	r24, r16
     596:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	01 97       	sbiw	r24, 0x01	; 1
     5a0:	f1 f7       	brne	.-4      	; 0x59e <Draw_Rect_At+0x3c>
	Wait(1);
}
     5a2:	1f 91       	pop	r17
     5a4:	0f 91       	pop	r16
     5a6:	ff 90       	pop	r15
     5a8:	ef 90       	pop	r14
     5aa:	df 90       	pop	r13
     5ac:	08 95       	ret

000005ae <Button_Feedback>:
   for(i=0;i<spaces;i++)
      WriteString(Empty);  
}

void Button_Feedback(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2)
{
     5ae:	2f 92       	push	r2
     5b0:	3f 92       	push	r3
     5b2:	4f 92       	push	r4
     5b4:	5f 92       	push	r5
     5b6:	6f 92       	push	r6
     5b8:	7f 92       	push	r7
     5ba:	8f 92       	push	r8
     5bc:	9f 92       	push	r9
     5be:	af 92       	push	r10
     5c0:	bf 92       	push	r11
     5c2:	cf 92       	push	r12
     5c4:	df 92       	push	r13
     5c6:	ef 92       	push	r14
     5c8:	ff 92       	push	r15
     5ca:	0f 93       	push	r16
     5cc:	1f 93       	push	r17
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
	Draw_Rect_At(255, x1+1, y1+1, x2-1, y2-1);
     5d2:	e8 2e       	mov	r14, r24
     5d4:	ff 24       	eor	r15, r15
     5d6:	37 01       	movw	r6, r14
     5d8:	08 94       	sec
     5da:	61 1c       	adc	r6, r1
     5dc:	71 1c       	adc	r7, r1
     5de:	26 2e       	mov	r2, r22
     5e0:	33 24       	eor	r3, r3
     5e2:	41 01       	movw	r8, r2
     5e4:	08 94       	sec
     5e6:	81 1c       	adc	r8, r1
     5e8:	91 1c       	adc	r9, r1
     5ea:	44 2e       	mov	r4, r20
     5ec:	55 24       	eor	r5, r5
     5ee:	52 01       	movw	r10, r4
     5f0:	08 94       	sec
     5f2:	a1 08       	sbc	r10, r1
     5f4:	b1 08       	sbc	r11, r1
     5f6:	c2 2f       	mov	r28, r18
     5f8:	d0 e0       	ldi	r29, 0x00	; 0
     5fa:	6e 01       	movw	r12, r28
     5fc:	08 94       	sec
     5fe:	c1 08       	sbc	r12, r1
     600:	d1 08       	sbc	r13, r1
     602:	8f ef       	ldi	r24, 0xFF	; 255
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	b3 01       	movw	r22, r6
     608:	a4 01       	movw	r20, r8
     60a:	95 01       	movw	r18, r10
     60c:	86 01       	movw	r16, r12
     60e:	0e 94 b1 02 	call	0x562	; 0x562 <Draw_Rect_At>
	Draw_Rect_At(255, x1+2, y1+2, x2-2, y2-2);
     612:	82 e0       	ldi	r24, 0x02	; 2
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	e8 0e       	add	r14, r24
     618:	f9 1e       	adc	r15, r25
     61a:	28 0e       	add	r2, r24
     61c:	39 1e       	adc	r3, r25
     61e:	8e ef       	ldi	r24, 0xFE	; 254
     620:	9f ef       	ldi	r25, 0xFF	; 255
     622:	48 0e       	add	r4, r24
     624:	59 1e       	adc	r5, r25
     626:	22 97       	sbiw	r28, 0x02	; 2
     628:	8f ef       	ldi	r24, 0xFF	; 255
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	b7 01       	movw	r22, r14
     62e:	a1 01       	movw	r20, r2
     630:	92 01       	movw	r18, r4
     632:	8e 01       	movw	r16, r28
     634:	0e 94 b1 02 	call	0x562	; 0x562 <Draw_Rect_At>
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	fc 01       	movw	r30, r24
     63e:	31 97       	sbiw	r30, 0x01	; 1
     640:	f1 f7       	brne	.-4      	; 0x63e <Button_Feedback+0x90>
     642:	fc 01       	movw	r30, r24
     644:	31 97       	sbiw	r30, 0x01	; 1
     646:	f1 f7       	brne	.-4      	; 0x644 <Button_Feedback+0x96>
     648:	fc 01       	movw	r30, r24
     64a:	31 97       	sbiw	r30, 0x01	; 1
     64c:	f1 f7       	brne	.-4      	; 0x64a <Button_Feedback+0x9c>
     64e:	01 97       	sbiw	r24, 0x01	; 1
     650:	f1 f7       	brne	.-4      	; 0x64e <Button_Feedback+0xa0>
	Wait(button_delay);
	Draw_Rect_At(0, x1+1, y1+1, x2-1, y2-1);
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	b3 01       	movw	r22, r6
     658:	a4 01       	movw	r20, r8
     65a:	95 01       	movw	r18, r10
     65c:	86 01       	movw	r16, r12
     65e:	0e 94 b1 02 	call	0x562	; 0x562 <Draw_Rect_At>
	Draw_Rect_At(0, x1+2, y1+2, x2-2, y2-2);
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	b7 01       	movw	r22, r14
     668:	a1 01       	movw	r20, r2
     66a:	92 01       	movw	r18, r4
     66c:	8e 01       	movw	r16, r28
     66e:	0e 94 b1 02 	call	0x562	; 0x562 <Draw_Rect_At>
}
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	1f 91       	pop	r17
     678:	0f 91       	pop	r16
     67a:	ff 90       	pop	r15
     67c:	ef 90       	pop	r14
     67e:	df 90       	pop	r13
     680:	cf 90       	pop	r12
     682:	bf 90       	pop	r11
     684:	af 90       	pop	r10
     686:	9f 90       	pop	r9
     688:	8f 90       	pop	r8
     68a:	7f 90       	pop	r7
     68c:	6f 90       	pop	r6
     68e:	5f 90       	pop	r5
     690:	4f 90       	pop	r4
     692:	3f 90       	pop	r3
     694:	2f 90       	pop	r2
     696:	08 95       	ret

00000698 <Draw_Solid_Rect>:
	Command_Display(Touch_Calibrat);

}

void Draw_Solid_Rect(unsigned char color, unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2)
{	
     698:	df 92       	push	r13
     69a:	ef 92       	push	r14
     69c:	ff 92       	push	r15
     69e:	0f 93       	push	r16
     6a0:	1f 93       	push	r17
     6a2:	18 2f       	mov	r17, r24
     6a4:	f6 2e       	mov	r15, r22
     6a6:	e4 2e       	mov	r14, r20
     6a8:	d2 2e       	mov	r13, r18
	Command_Display(DRW_Solid_Rect);
     6aa:	88 e7       	ldi	r24, 0x78	; 120
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	0e 94 17 01 	call	0x22e	; 0x22e <Command_Display>
	UWriteData(color);
     6b2:	81 2f       	mov	r24, r17
     6b4:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
	UWriteData(x1);
     6b8:	8f 2d       	mov	r24, r15
     6ba:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
	UWriteData(y1);
     6be:	8e 2d       	mov	r24, r14
     6c0:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
	UWriteData(x2);
     6c4:	8d 2d       	mov	r24, r13
     6c6:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
	UWriteData(y2);
     6ca:	80 2f       	mov	r24, r16
     6cc:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	01 97       	sbiw	r24, 0x01	; 1
     6d6:	f1 f7       	brne	.-4      	; 0x6d4 <Draw_Solid_Rect+0x3c>
	Wait(1);
}
     6d8:	1f 91       	pop	r17
     6da:	0f 91       	pop	r16
     6dc:	ff 90       	pop	r15
     6de:	ef 90       	pop	r14
     6e0:	df 90       	pop	r13
     6e2:	08 95       	ret

000006e4 <Set_Touch_Region>:
	Command_Display(Touch_Mode);
	UWriteData(touch_mode);
}
void Set_Touch_Region(unsigned char RegNum, unsigned char x, unsigned char y, 
						unsigned char w, unsigned char h, unsigned char key_down, unsigned char key_up)
{
     6e4:	bf 92       	push	r11
     6e6:	cf 92       	push	r12
     6e8:	df 92       	push	r13
     6ea:	ef 92       	push	r14
     6ec:	ff 92       	push	r15
     6ee:	0f 93       	push	r16
     6f0:	1f 93       	push	r17
     6f2:	18 2f       	mov	r17, r24
     6f4:	f6 2e       	mov	r15, r22
     6f6:	d4 2e       	mov	r13, r20
     6f8:	b2 2e       	mov	r11, r18
	Command_Display(Touch_Region);
     6fa:	84 e8       	ldi	r24, 0x84	; 132
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	0e 94 17 01 	call	0x22e	; 0x22e <Command_Display>
	UWriteData(RegNum);
     702:	81 2f       	mov	r24, r17
     704:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
	UWriteData(x);
     708:	8f 2d       	mov	r24, r15
     70a:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
	UWriteData(y);
     70e:	8d 2d       	mov	r24, r13
     710:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
	UWriteData(w);
     714:	8b 2d       	mov	r24, r11
     716:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
	UWriteData(h);
     71a:	80 2f       	mov	r24, r16
     71c:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
	UWriteData(key_down);
     720:	8e 2d       	mov	r24, r14
     722:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
	UWriteData(key_up);
     726:	8c 2d       	mov	r24, r12
     728:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	01 97       	sbiw	r24, 0x01	; 1
     732:	f1 f7       	brne	.-4      	; 0x730 <Set_Touch_Region+0x4c>
	Wait(1);
}
     734:	1f 91       	pop	r17
     736:	0f 91       	pop	r16
     738:	ff 90       	pop	r15
     73a:	ef 90       	pop	r14
     73c:	df 90       	pop	r13
     73e:	cf 90       	pop	r12
     740:	bf 90       	pop	r11
     742:	08 95       	ret

00000744 <Set_Touch_Mode>:
{
	Command_Display(Delete_Region);
}

void Set_Touch_Mode(unsigned char touch_mode)
{
     744:	1f 93       	push	r17
     746:	18 2f       	mov	r17, r24
	Command_Display(Touch_Mode);
     748:	87 e8       	ldi	r24, 0x87	; 135
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	0e 94 17 01 	call	0x22e	; 0x22e <Command_Display>
	UWriteData(touch_mode);
     750:	81 2f       	mov	r24, r17
     752:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
}
     756:	1f 91       	pop	r17
     758:	08 95       	ret

0000075a <Draw_Touch_Region>:
	Cursor_Coordinate(161,101);
	UWriteData('0');
}

void Draw_Touch_Region()
{
     75a:	cf 92       	push	r12
     75c:	df 92       	push	r13
     75e:	ef 92       	push	r14
     760:	ff 92       	push	r15
     762:	0f 93       	push	r16
     764:	1f 93       	push	r17
	Set_Touch_Mode(Region); // Region or Co_ordinate
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	0e 94 a2 03 	call	0x744	; 0x744 <Set_Touch_Mode>
	Delete_All_Regions();
     76e:	0e 94 26 01 	call	0x24c	; 0x24c <Delete_All_Regions>

	Set_Touch_Region(1, 65, 38, 19, 19, 1, 10);		// 1, 10)
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	61 e4       	ldi	r22, 0x41	; 65
     778:	70 e0       	ldi	r23, 0x00	; 0
     77a:	46 e2       	ldi	r20, 0x26	; 38
     77c:	50 e0       	ldi	r21, 0x00	; 0
     77e:	23 e1       	ldi	r18, 0x13	; 19
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	03 e1       	ldi	r16, 0x13	; 19
     784:	10 e0       	ldi	r17, 0x00	; 0
     786:	b1 e0       	ldi	r27, 0x01	; 1
     788:	eb 2e       	mov	r14, r27
     78a:	f1 2c       	mov	r15, r1
     78c:	aa e0       	ldi	r26, 0x0A	; 10
     78e:	ca 2e       	mov	r12, r26
     790:	d1 2c       	mov	r13, r1
     792:	0e 94 72 03 	call	0x6e4	; 0x6e4 <Set_Touch_Region>
	Set_Touch_Region(4, 65, 66, 19, 19, 4, 40); 	// 4, 40)
     796:	84 e0       	ldi	r24, 0x04	; 4
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	61 e4       	ldi	r22, 0x41	; 65
     79c:	70 e0       	ldi	r23, 0x00	; 0
     79e:	42 e4       	ldi	r20, 0x42	; 66
     7a0:	50 e0       	ldi	r21, 0x00	; 0
     7a2:	23 e1       	ldi	r18, 0x13	; 19
     7a4:	30 e0       	ldi	r19, 0x00	; 0
     7a6:	f4 e0       	ldi	r31, 0x04	; 4
     7a8:	ef 2e       	mov	r14, r31
     7aa:	f1 2c       	mov	r15, r1
     7ac:	e8 e2       	ldi	r30, 0x28	; 40
     7ae:	ce 2e       	mov	r12, r30
     7b0:	d1 2c       	mov	r13, r1
     7b2:	0e 94 72 03 	call	0x6e4	; 0x6e4 <Set_Touch_Region>
	Set_Touch_Region(7, 65, 94, 19, 19, 7, 70);		// 7, 70)
     7b6:	87 e0       	ldi	r24, 0x07	; 7
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	61 e4       	ldi	r22, 0x41	; 65
     7bc:	70 e0       	ldi	r23, 0x00	; 0
     7be:	4e e5       	ldi	r20, 0x5E	; 94
     7c0:	50 e0       	ldi	r21, 0x00	; 0
     7c2:	23 e1       	ldi	r18, 0x13	; 19
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	b7 e0       	ldi	r27, 0x07	; 7
     7c8:	eb 2e       	mov	r14, r27
     7ca:	f1 2c       	mov	r15, r1
     7cc:	a6 e4       	ldi	r26, 0x46	; 70
     7ce:	ca 2e       	mov	r12, r26
     7d0:	d1 2c       	mov	r13, r1
     7d2:	0e 94 72 03 	call	0x6e4	; 0x6e4 <Set_Touch_Region>

	Set_Touch_Region(2, 93, 38, 19, 19, 2, 20);		// 2, 20)
     7d6:	82 e0       	ldi	r24, 0x02	; 2
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	6d e5       	ldi	r22, 0x5D	; 93
     7dc:	70 e0       	ldi	r23, 0x00	; 0
     7de:	46 e2       	ldi	r20, 0x26	; 38
     7e0:	50 e0       	ldi	r21, 0x00	; 0
     7e2:	23 e1       	ldi	r18, 0x13	; 19
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	f2 e0       	ldi	r31, 0x02	; 2
     7e8:	ef 2e       	mov	r14, r31
     7ea:	f1 2c       	mov	r15, r1
     7ec:	e4 e1       	ldi	r30, 0x14	; 20
     7ee:	ce 2e       	mov	r12, r30
     7f0:	d1 2c       	mov	r13, r1
     7f2:	0e 94 72 03 	call	0x6e4	; 0x6e4 <Set_Touch_Region>
	Set_Touch_Region(5, 93, 66, 19, 19, 5, 50);		// 5, 50)
     7f6:	85 e0       	ldi	r24, 0x05	; 5
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	6d e5       	ldi	r22, 0x5D	; 93
     7fc:	70 e0       	ldi	r23, 0x00	; 0
     7fe:	42 e4       	ldi	r20, 0x42	; 66
     800:	50 e0       	ldi	r21, 0x00	; 0
     802:	23 e1       	ldi	r18, 0x13	; 19
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	b5 e0       	ldi	r27, 0x05	; 5
     808:	eb 2e       	mov	r14, r27
     80a:	f1 2c       	mov	r15, r1
     80c:	a2 e3       	ldi	r26, 0x32	; 50
     80e:	ca 2e       	mov	r12, r26
     810:	d1 2c       	mov	r13, r1
     812:	0e 94 72 03 	call	0x6e4	; 0x6e4 <Set_Touch_Region>
	Set_Touch_Region(8, 93, 94, 19, 19, 8, 80);		// 8, 80)
     816:	88 e0       	ldi	r24, 0x08	; 8
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	6d e5       	ldi	r22, 0x5D	; 93
     81c:	70 e0       	ldi	r23, 0x00	; 0
     81e:	4e e5       	ldi	r20, 0x5E	; 94
     820:	50 e0       	ldi	r21, 0x00	; 0
     822:	23 e1       	ldi	r18, 0x13	; 19
     824:	30 e0       	ldi	r19, 0x00	; 0
     826:	f8 e0       	ldi	r31, 0x08	; 8
     828:	ef 2e       	mov	r14, r31
     82a:	f1 2c       	mov	r15, r1
     82c:	e0 e5       	ldi	r30, 0x50	; 80
     82e:	ce 2e       	mov	r12, r30
     830:	d1 2c       	mov	r13, r1
     832:	0e 94 72 03 	call	0x6e4	; 0x6e4 <Set_Touch_Region>

	Set_Touch_Region(3, 121, 38, 19, 19, 3, 30);	// 3, 30)	
     836:	83 e0       	ldi	r24, 0x03	; 3
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	69 e7       	ldi	r22, 0x79	; 121
     83c:	70 e0       	ldi	r23, 0x00	; 0
     83e:	46 e2       	ldi	r20, 0x26	; 38
     840:	50 e0       	ldi	r21, 0x00	; 0
     842:	23 e1       	ldi	r18, 0x13	; 19
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	b3 e0       	ldi	r27, 0x03	; 3
     848:	eb 2e       	mov	r14, r27
     84a:	f1 2c       	mov	r15, r1
     84c:	ae e1       	ldi	r26, 0x1E	; 30
     84e:	ca 2e       	mov	r12, r26
     850:	d1 2c       	mov	r13, r1
     852:	0e 94 72 03 	call	0x6e4	; 0x6e4 <Set_Touch_Region>
	Set_Touch_Region(6, 121, 66, 19, 19, 6, 60);	// 6, 60)
     856:	86 e0       	ldi	r24, 0x06	; 6
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	69 e7       	ldi	r22, 0x79	; 121
     85c:	70 e0       	ldi	r23, 0x00	; 0
     85e:	42 e4       	ldi	r20, 0x42	; 66
     860:	50 e0       	ldi	r21, 0x00	; 0
     862:	23 e1       	ldi	r18, 0x13	; 19
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	f6 e0       	ldi	r31, 0x06	; 6
     868:	ef 2e       	mov	r14, r31
     86a:	f1 2c       	mov	r15, r1
     86c:	ec e3       	ldi	r30, 0x3C	; 60
     86e:	ce 2e       	mov	r12, r30
     870:	d1 2c       	mov	r13, r1
     872:	0e 94 72 03 	call	0x6e4	; 0x6e4 <Set_Touch_Region>
	Set_Touch_Region(9, 121, 94, 19, 19, 9, 90);	// 9, 90)	
     876:	89 e0       	ldi	r24, 0x09	; 9
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	69 e7       	ldi	r22, 0x79	; 121
     87c:	70 e0       	ldi	r23, 0x00	; 0
     87e:	4e e5       	ldi	r20, 0x5E	; 94
     880:	50 e0       	ldi	r21, 0x00	; 0
     882:	23 e1       	ldi	r18, 0x13	; 19
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	b9 e0       	ldi	r27, 0x09	; 9
     888:	eb 2e       	mov	r14, r27
     88a:	f1 2c       	mov	r15, r1
     88c:	aa e5       	ldi	r26, 0x5A	; 90
     88e:	ca 2e       	mov	r12, r26
     890:	d1 2c       	mov	r13, r1
     892:	0e 94 72 03 	call	0x6e4	; 0x6e4 <Set_Touch_Region>

	Set_Touch_Region(12, 152, 38, 19, 19, 13, 14);	// 13, 14)
     896:	8c e0       	ldi	r24, 0x0C	; 12
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	68 e9       	ldi	r22, 0x98	; 152
     89c:	70 e0       	ldi	r23, 0x00	; 0
     89e:	46 e2       	ldi	r20, 0x26	; 38
     8a0:	50 e0       	ldi	r21, 0x00	; 0
     8a2:	23 e1       	ldi	r18, 0x13	; 19
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	fd e0       	ldi	r31, 0x0D	; 13
     8a8:	ef 2e       	mov	r14, r31
     8aa:	f1 2c       	mov	r15, r1
     8ac:	ee e0       	ldi	r30, 0x0E	; 14
     8ae:	ce 2e       	mov	r12, r30
     8b0:	d1 2c       	mov	r13, r1
     8b2:	0e 94 72 03 	call	0x6e4	; 0x6e4 <Set_Touch_Region>
	Set_Touch_Region(11, 152, 66, 19, 19, 11, 12);	// 11, 12)	
     8b6:	8b e0       	ldi	r24, 0x0B	; 11
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	68 e9       	ldi	r22, 0x98	; 152
     8bc:	70 e0       	ldi	r23, 0x00	; 0
     8be:	42 e4       	ldi	r20, 0x42	; 66
     8c0:	50 e0       	ldi	r21, 0x00	; 0
     8c2:	23 e1       	ldi	r18, 0x13	; 19
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	bb e0       	ldi	r27, 0x0B	; 11
     8c8:	eb 2e       	mov	r14, r27
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ac e0       	ldi	r26, 0x0C	; 12
     8ce:	ca 2e       	mov	r12, r26
     8d0:	d1 2c       	mov	r13, r1
     8d2:	0e 94 72 03 	call	0x6e4	; 0x6e4 <Set_Touch_Region>
	Set_Touch_Region(10, 152, 94, 19, 19, 101, 100);	//101, 100)
     8d6:	8a e0       	ldi	r24, 0x0A	; 10
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	68 e9       	ldi	r22, 0x98	; 152
     8dc:	70 e0       	ldi	r23, 0x00	; 0
     8de:	4e e5       	ldi	r20, 0x5E	; 94
     8e0:	50 e0       	ldi	r21, 0x00	; 0
     8e2:	23 e1       	ldi	r18, 0x13	; 19
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	f5 e6       	ldi	r31, 0x65	; 101
     8e8:	ef 2e       	mov	r14, r31
     8ea:	f1 2c       	mov	r15, r1
     8ec:	e4 e6       	ldi	r30, 0x64	; 100
     8ee:	ce 2e       	mov	r12, r30
     8f0:	d1 2c       	mov	r13, r1
     8f2:	0e 94 72 03 	call	0x6e4	; 0x6e4 <Set_Touch_Region>
}
     8f6:	1f 91       	pop	r17
     8f8:	0f 91       	pop	r16
     8fa:	ff 90       	pop	r15
     8fc:	ef 90       	pop	r14
     8fe:	df 90       	pop	r13
     900:	cf 90       	pop	r12
     902:	08 95       	ret

00000904 <Draw_Pad>:
	Choose_Color(color);
	Command_Display(Clear_Screen);
}

void Draw_Pad()
{
     904:	0f 93       	push	r16
     906:	1f 93       	push	r17
	Draw_Rect_At(255, 65, 5, 174, 30);
     908:	8f ef       	ldi	r24, 0xFF	; 255
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	61 e4       	ldi	r22, 0x41	; 65
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	45 e0       	ldi	r20, 0x05	; 5
     912:	50 e0       	ldi	r21, 0x00	; 0
     914:	2e ea       	ldi	r18, 0xAE	; 174
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	0e e1       	ldi	r16, 0x1E	; 30
     91a:	10 e0       	ldi	r17, 0x00	; 0
     91c:	0e 94 b1 02 	call	0x562	; 0x562 <Draw_Rect_At>

	Cursor_Coordinate(70,10);
     920:	86 e4       	ldi	r24, 0x46	; 70
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	6a e0       	ldi	r22, 0x0A	; 10
     926:	70 e0       	ldi	r23, 0x00	; 0
     928:	0e 94 2b 01 	call	0x256	; 0x256 <Cursor_Coordinate>
	UWriteData('A');
     92c:	81 e4       	ldi	r24, 0x41	; 65
     92e:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
	UWriteData('Z');
     932:	8a e5       	ldi	r24, 0x5A	; 90
     934:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
	UWriteData(':');
     938:	8a e3       	ldi	r24, 0x3A	; 58
     93a:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
	Write_Blank(6);
     93e:	86 e0       	ldi	r24, 0x06	; 6
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	0e 94 08 01 	call	0x210	; 0x210 <Write_Blank>
	UWriteData('R');
     946:	82 e5       	ldi	r24, 0x52	; 82
     948:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
	UWriteData('D');
     94c:	84 e4       	ldi	r24, 0x44	; 68
     94e:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
	UWriteData(':');
     952:	8a e3       	ldi	r24, 0x3A	; 58
     954:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>

	Cursor_Coordinate(70,20);
     958:	86 e4       	ldi	r24, 0x46	; 70
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	64 e1       	ldi	r22, 0x14	; 20
     95e:	70 e0       	ldi	r23, 0x00	; 0
     960:	0e 94 2b 01 	call	0x256	; 0x256 <Cursor_Coordinate>
	UWriteData('E');
     964:	85 e4       	ldi	r24, 0x45	; 69
     966:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
	UWriteData('L');
     96a:	8c e4       	ldi	r24, 0x4C	; 76
     96c:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
	UWriteData(':');
     970:	8a e3       	ldi	r24, 0x3A	; 58
     972:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
	Write_Blank(5);
     976:	85 e0       	ldi	r24, 0x05	; 5
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	0e 94 08 01 	call	0x210	; 0x210 <Write_Blank>
	UWriteData('C');
     97e:	83 e4       	ldi	r24, 0x43	; 67
     980:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
	UWriteData('H');
     984:	88 e4       	ldi	r24, 0x48	; 72
     986:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
	UWriteData('G');
     98a:	87 e4       	ldi	r24, 0x47	; 71
     98c:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
	UWriteData(':');
     990:	8a e3       	ldi	r24, 0x3A	; 58
     992:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>

	Draw_Rect_At(255, 65, 35, 90, 60);  	//1
     996:	8f ef       	ldi	r24, 0xFF	; 255
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	61 e4       	ldi	r22, 0x41	; 65
     99c:	70 e0       	ldi	r23, 0x00	; 0
     99e:	43 e2       	ldi	r20, 0x23	; 35
     9a0:	50 e0       	ldi	r21, 0x00	; 0
     9a2:	2a e5       	ldi	r18, 0x5A	; 90
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	0c e3       	ldi	r16, 0x3C	; 60
     9a8:	10 e0       	ldi	r17, 0x00	; 0
     9aa:	0e 94 b1 02 	call	0x562	; 0x562 <Draw_Rect_At>
	Draw_Rect_At(255, 65, 63, 90, 88);		//4
     9ae:	8f ef       	ldi	r24, 0xFF	; 255
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	61 e4       	ldi	r22, 0x41	; 65
     9b4:	70 e0       	ldi	r23, 0x00	; 0
     9b6:	4f e3       	ldi	r20, 0x3F	; 63
     9b8:	50 e0       	ldi	r21, 0x00	; 0
     9ba:	2a e5       	ldi	r18, 0x5A	; 90
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	08 e5       	ldi	r16, 0x58	; 88
     9c0:	10 e0       	ldi	r17, 0x00	; 0
     9c2:	0e 94 b1 02 	call	0x562	; 0x562 <Draw_Rect_At>
	Draw_Rect_At(255, 65, 91, 90, 116);		//7
     9c6:	8f ef       	ldi	r24, 0xFF	; 255
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	61 e4       	ldi	r22, 0x41	; 65
     9cc:	70 e0       	ldi	r23, 0x00	; 0
     9ce:	4b e5       	ldi	r20, 0x5B	; 91
     9d0:	50 e0       	ldi	r21, 0x00	; 0
     9d2:	2a e5       	ldi	r18, 0x5A	; 90
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	04 e7       	ldi	r16, 0x74	; 116
     9d8:	10 e0       	ldi	r17, 0x00	; 0
     9da:	0e 94 b1 02 	call	0x562	; 0x562 <Draw_Rect_At>

	Draw_Rect_At(255, 93, 35, 118, 60);		//2
     9de:	8f ef       	ldi	r24, 0xFF	; 255
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	6d e5       	ldi	r22, 0x5D	; 93
     9e4:	70 e0       	ldi	r23, 0x00	; 0
     9e6:	43 e2       	ldi	r20, 0x23	; 35
     9e8:	50 e0       	ldi	r21, 0x00	; 0
     9ea:	26 e7       	ldi	r18, 0x76	; 118
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	0c e3       	ldi	r16, 0x3C	; 60
     9f0:	10 e0       	ldi	r17, 0x00	; 0
     9f2:	0e 94 b1 02 	call	0x562	; 0x562 <Draw_Rect_At>
	Draw_Rect_At(255, 93, 63, 118, 88);		//5
     9f6:	8f ef       	ldi	r24, 0xFF	; 255
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	6d e5       	ldi	r22, 0x5D	; 93
     9fc:	70 e0       	ldi	r23, 0x00	; 0
     9fe:	4f e3       	ldi	r20, 0x3F	; 63
     a00:	50 e0       	ldi	r21, 0x00	; 0
     a02:	26 e7       	ldi	r18, 0x76	; 118
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	08 e5       	ldi	r16, 0x58	; 88
     a08:	10 e0       	ldi	r17, 0x00	; 0
     a0a:	0e 94 b1 02 	call	0x562	; 0x562 <Draw_Rect_At>
	Draw_Rect_At(255, 93, 91, 118, 116);	//8	
     a0e:	8f ef       	ldi	r24, 0xFF	; 255
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	6d e5       	ldi	r22, 0x5D	; 93
     a14:	70 e0       	ldi	r23, 0x00	; 0
     a16:	4b e5       	ldi	r20, 0x5B	; 91
     a18:	50 e0       	ldi	r21, 0x00	; 0
     a1a:	26 e7       	ldi	r18, 0x76	; 118
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	04 e7       	ldi	r16, 0x74	; 116
     a20:	10 e0       	ldi	r17, 0x00	; 0
     a22:	0e 94 b1 02 	call	0x562	; 0x562 <Draw_Rect_At>

	Draw_Rect_At(255, 121, 35, 146, 60);	//3
     a26:	8f ef       	ldi	r24, 0xFF	; 255
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	69 e7       	ldi	r22, 0x79	; 121
     a2c:	70 e0       	ldi	r23, 0x00	; 0
     a2e:	43 e2       	ldi	r20, 0x23	; 35
     a30:	50 e0       	ldi	r21, 0x00	; 0
     a32:	22 e9       	ldi	r18, 0x92	; 146
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	0c e3       	ldi	r16, 0x3C	; 60
     a38:	10 e0       	ldi	r17, 0x00	; 0
     a3a:	0e 94 b1 02 	call	0x562	; 0x562 <Draw_Rect_At>
	Draw_Rect_At(255, 121, 63, 146, 88);	//6
     a3e:	8f ef       	ldi	r24, 0xFF	; 255
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	69 e7       	ldi	r22, 0x79	; 121
     a44:	70 e0       	ldi	r23, 0x00	; 0
     a46:	4f e3       	ldi	r20, 0x3F	; 63
     a48:	50 e0       	ldi	r21, 0x00	; 0
     a4a:	22 e9       	ldi	r18, 0x92	; 146
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	08 e5       	ldi	r16, 0x58	; 88
     a50:	10 e0       	ldi	r17, 0x00	; 0
     a52:	0e 94 b1 02 	call	0x562	; 0x562 <Draw_Rect_At>
	Draw_Rect_At(255, 121, 91, 146, 116);	//9
     a56:	8f ef       	ldi	r24, 0xFF	; 255
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	69 e7       	ldi	r22, 0x79	; 121
     a5c:	70 e0       	ldi	r23, 0x00	; 0
     a5e:	4b e5       	ldi	r20, 0x5B	; 91
     a60:	50 e0       	ldi	r21, 0x00	; 0
     a62:	22 e9       	ldi	r18, 0x92	; 146
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	04 e7       	ldi	r16, 0x74	; 116
     a68:	10 e0       	ldi	r17, 0x00	; 0
     a6a:	0e 94 b1 02 	call	0x562	; 0x562 <Draw_Rect_At>

	Draw_Rect_At(255, 149, 35, 174, 60);	//C
     a6e:	8f ef       	ldi	r24, 0xFF	; 255
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	65 e9       	ldi	r22, 0x95	; 149
     a74:	70 e0       	ldi	r23, 0x00	; 0
     a76:	43 e2       	ldi	r20, 0x23	; 35
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	2e ea       	ldi	r18, 0xAE	; 174
     a7c:	30 e0       	ldi	r19, 0x00	; 0
     a7e:	0c e3       	ldi	r16, 0x3C	; 60
     a80:	10 e0       	ldi	r17, 0x00	; 0
     a82:	0e 94 b1 02 	call	0x562	; 0x562 <Draw_Rect_At>
	Draw_Rect_At(255, 149, 63, 174, 88);	//<
     a86:	8f ef       	ldi	r24, 0xFF	; 255
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	65 e9       	ldi	r22, 0x95	; 149
     a8c:	70 e0       	ldi	r23, 0x00	; 0
     a8e:	4f e3       	ldi	r20, 0x3F	; 63
     a90:	50 e0       	ldi	r21, 0x00	; 0
     a92:	2e ea       	ldi	r18, 0xAE	; 174
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	08 e5       	ldi	r16, 0x58	; 88
     a98:	10 e0       	ldi	r17, 0x00	; 0
     a9a:	0e 94 b1 02 	call	0x562	; 0x562 <Draw_Rect_At>
	Draw_Rect_At(255, 149, 91, 174, 116);	//0
     a9e:	8f ef       	ldi	r24, 0xFF	; 255
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	65 e9       	ldi	r22, 0x95	; 149
     aa4:	70 e0       	ldi	r23, 0x00	; 0
     aa6:	4b e5       	ldi	r20, 0x5B	; 91
     aa8:	50 e0       	ldi	r21, 0x00	; 0
     aaa:	2e ea       	ldi	r18, 0xAE	; 174
     aac:	30 e0       	ldi	r19, 0x00	; 0
     aae:	04 e7       	ldi	r16, 0x74	; 116
     ab0:	10 e0       	ldi	r17, 0x00	; 0
     ab2:	0e 94 b1 02 	call	0x562	; 0x562 <Draw_Rect_At>

	Cursor_Coordinate(75,45);
     ab6:	8b e4       	ldi	r24, 0x4B	; 75
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	6d e2       	ldi	r22, 0x2D	; 45
     abc:	70 e0       	ldi	r23, 0x00	; 0
     abe:	0e 94 2b 01 	call	0x256	; 0x256 <Cursor_Coordinate>
	UWriteData('1');
     ac2:	81 e3       	ldi	r24, 0x31	; 49
     ac4:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
	Cursor_Coordinate(75,73);
     ac8:	8b e4       	ldi	r24, 0x4B	; 75
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	69 e4       	ldi	r22, 0x49	; 73
     ace:	70 e0       	ldi	r23, 0x00	; 0
     ad0:	0e 94 2b 01 	call	0x256	; 0x256 <Cursor_Coordinate>
	UWriteData('4');
     ad4:	84 e3       	ldi	r24, 0x34	; 52
     ad6:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
	Cursor_Coordinate(75,101);
     ada:	8b e4       	ldi	r24, 0x4B	; 75
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	65 e6       	ldi	r22, 0x65	; 101
     ae0:	70 e0       	ldi	r23, 0x00	; 0
     ae2:	0e 94 2b 01 	call	0x256	; 0x256 <Cursor_Coordinate>
	UWriteData('7');
     ae6:	87 e3       	ldi	r24, 0x37	; 55
     ae8:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>

	Cursor_Coordinate(103,45);
     aec:	87 e6       	ldi	r24, 0x67	; 103
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	6d e2       	ldi	r22, 0x2D	; 45
     af2:	70 e0       	ldi	r23, 0x00	; 0
     af4:	0e 94 2b 01 	call	0x256	; 0x256 <Cursor_Coordinate>
	UWriteData('2');
     af8:	82 e3       	ldi	r24, 0x32	; 50
     afa:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
	Cursor_Coordinate(103,73);
     afe:	87 e6       	ldi	r24, 0x67	; 103
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	69 e4       	ldi	r22, 0x49	; 73
     b04:	70 e0       	ldi	r23, 0x00	; 0
     b06:	0e 94 2b 01 	call	0x256	; 0x256 <Cursor_Coordinate>
	UWriteData('5');
     b0a:	85 e3       	ldi	r24, 0x35	; 53
     b0c:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
	Cursor_Coordinate(103,101);
     b10:	87 e6       	ldi	r24, 0x67	; 103
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	65 e6       	ldi	r22, 0x65	; 101
     b16:	70 e0       	ldi	r23, 0x00	; 0
     b18:	0e 94 2b 01 	call	0x256	; 0x256 <Cursor_Coordinate>
	UWriteData('8');
     b1c:	88 e3       	ldi	r24, 0x38	; 56
     b1e:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>

	Cursor_Coordinate(131,45);
     b22:	83 e8       	ldi	r24, 0x83	; 131
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	6d e2       	ldi	r22, 0x2D	; 45
     b28:	70 e0       	ldi	r23, 0x00	; 0
     b2a:	0e 94 2b 01 	call	0x256	; 0x256 <Cursor_Coordinate>
	UWriteData('3');
     b2e:	83 e3       	ldi	r24, 0x33	; 51
     b30:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
	Cursor_Coordinate(131,73);
     b34:	83 e8       	ldi	r24, 0x83	; 131
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	69 e4       	ldi	r22, 0x49	; 73
     b3a:	70 e0       	ldi	r23, 0x00	; 0
     b3c:	0e 94 2b 01 	call	0x256	; 0x256 <Cursor_Coordinate>
	UWriteData('6');
     b40:	86 e3       	ldi	r24, 0x36	; 54
     b42:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
	Cursor_Coordinate(131,101);
     b46:	83 e8       	ldi	r24, 0x83	; 131
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	65 e6       	ldi	r22, 0x65	; 101
     b4c:	70 e0       	ldi	r23, 0x00	; 0
     b4e:	0e 94 2b 01 	call	0x256	; 0x256 <Cursor_Coordinate>
	UWriteData('9');
     b52:	89 e3       	ldi	r24, 0x39	; 57
     b54:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>

	Cursor_Coordinate(161,45);
     b58:	81 ea       	ldi	r24, 0xA1	; 161
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	6d e2       	ldi	r22, 0x2D	; 45
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	0e 94 2b 01 	call	0x256	; 0x256 <Cursor_Coordinate>
	UWriteData('C');
     b64:	83 e4       	ldi	r24, 0x43	; 67
     b66:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
	Cursor_Coordinate(161,73);
     b6a:	81 ea       	ldi	r24, 0xA1	; 161
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	69 e4       	ldi	r22, 0x49	; 73
     b70:	70 e0       	ldi	r23, 0x00	; 0
     b72:	0e 94 2b 01 	call	0x256	; 0x256 <Cursor_Coordinate>
	UWriteData('<');
     b76:	8c e3       	ldi	r24, 0x3C	; 60
     b78:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
	Cursor_Coordinate(161,101);
     b7c:	81 ea       	ldi	r24, 0xA1	; 161
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	65 e6       	ldi	r22, 0x65	; 101
     b82:	70 e0       	ldi	r23, 0x00	; 0
     b84:	0e 94 2b 01 	call	0x256	; 0x256 <Cursor_Coordinate>
	UWriteData('0');
     b88:	80 e3       	ldi	r24, 0x30	; 48
     b8a:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
}
     b8e:	1f 91       	pop	r17
     b90:	0f 91       	pop	r16
     b92:	08 95       	ret

00000b94 <main>:
}


//***********************************************************************
void main()
{
     b94:	0f 93       	push	r16
     b96:	1f 93       	push	r17
    //WDTCR |= (1<<WDE)|(1<<WDP2)|(1<<WDP1)|(1<<WDP0);
   	InitTimer();
     b98:	0e 94 95 00 	call	0x12a	; 0x12a <InitTimer>
	Set_Touch_Region(11, 152, 66, 19, 19, 11, 12);	// 11, 12)	
	Set_Touch_Region(10, 152, 94, 19, 19, 101, 100);	//101, 100)
}
void InitADC()
{
ADMUX=(1<<REFS0);                         // For Aref=AVcc;
     b9c:	80 e4       	ldi	r24, 0x40	; 64
     b9e:	80 93 7c 00 	sts	0x007C, r24
ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADIE); //Rrescalar div factor =128
     ba2:	8f e8       	ldi	r24, 0x8F	; 143
     ba4:	80 93 7a 00 	sts	0x007A, r24
sei();  //start interrupt
     ba8:	78 94       	sei
wdt_reset();
     baa:	a8 95       	wdr
   	InitTimer();
   //Initialize ADC
   	InitADC();
	
	//Initialize the USART with Baud rate = 2400bps 
	USARTInit(12);// 19200 4mhz 12 2400 4mhz 103 8mhz 207 9600 4mhz 25
     bac:	8c e0       	ldi	r24, 0x0C	; 12
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	0e 94 52 07 	call	0xea4	; 0xea4 <USARTInit>

	//Enable Internal Pullups on PORTC
	PORTC=0xFF;
     bb4:	8f ef       	ldi	r24, 0xFF	; 255
     bb6:	88 b9       	out	0x08, r24	; 8
	
	InitDisplay();
     bb8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <InitDisplay>
	
	Command_Display(Go_Home);
     bbc:	88 e4       	ldi	r24, 0x48	; 72
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	0e 94 17 01 	call	0x22e	; 0x22e <Command_Display>
	Write_Blank(5);
     bc4:	85 e0       	ldi	r24, 0x05	; 5
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	0e 94 08 01 	call	0x210	; 0x210 <Write_Blank>
	Command_Display(Go_Home);
     bcc:	88 e4       	ldi	r24, 0x48	; 72
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	0e 94 17 01 	call	0x22e	; 0x22e <Command_Display>
		//Write_Blank(2);
	//	itoa(p_data, message3, 10); 
	//	WriteString(message3);
//	}

	Draw_Pad();
     bd4:	0e 94 82 04 	call	0x904	; 0x904 <Draw_Pad>
	Draw_Touch_Region();
     bd8:	0e 94 ad 03 	call	0x75a	; 0x75a <Draw_Touch_Region>
	current_cursor_x = Az_Start_X;
     bdc:	8a e5       	ldi	r24, 0x5A	; 90
     bde:	80 93 7e 02 	sts	0x027E, r24
	current_cursor_y = Az_Start_Y;
     be2:	8a e0       	ldi	r24, 0x0A	; 10
     be4:	80 93 ca 02 	sts	0x02CA, r24

	ADCSRA|=(1<<ADSC);
     be8:	80 91 7a 00 	lds	r24, 0x007A
     bec:	80 64       	ori	r24, 0x40	; 64
     bee:	80 93 7a 00 	sts	0x007A, r24
				//	WriteString(message3);
					if(p_data == 13)
					{
						Cursor_Coordinate(Az_Start_X,Az_Start_Y);
						Write_Blank(6);
						current_cursor_x= Az_Start_X;
     bf2:	1a e5       	ldi	r17, 0x5A	; 90
						current_cursor_y= Az_Start_Y;
     bf4:	0a e0       	ldi	r16, 0x0A	; 10
		//		Command_Display(Go_Home);
		//		Write_Blank(5);
		//		Command_Display(Go_Home);
			//	for(i=1;i<2;i++)
				//{
					packet[1]=UReadData();
     bf6:	0e 94 be 07 	call	0xf7c	; 0xf7c <UReadData>
     bfa:	80 93 7b 02 	sts	0x027B, r24
			//	}
					p_data=packet[1];
     bfe:	80 93 80 02 	sts	0x0280, r24
				//	Write_Blank(2);
				//	itoa(p_data, message3, 10); 
				//	WriteString(message3);
					if(p_data == 13)
     c02:	8d 30       	cpi	r24, 0x0D	; 13
     c04:	a9 f4       	brne	.+42     	; 0xc30 <main+0x9c>
					{
						Cursor_Coordinate(Az_Start_X,Az_Start_Y);
     c06:	8a e5       	ldi	r24, 0x5A	; 90
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	6a e0       	ldi	r22, 0x0A	; 10
     c0c:	70 e0       	ldi	r23, 0x00	; 0
     c0e:	0e 94 2b 01 	call	0x256	; 0x256 <Cursor_Coordinate>
						Write_Blank(6);
     c12:	86 e0       	ldi	r24, 0x06	; 6
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	0e 94 08 01 	call	0x210	; 0x210 <Write_Blank>
						current_cursor_x= Az_Start_X;
     c1a:	10 93 7e 02 	sts	0x027E, r17
						current_cursor_y= Az_Start_Y;
     c1e:	00 93 ca 02 	sts	0x02CA, r16
						Button_Feedback(149, 35, 174, 60);
     c22:	85 e9       	ldi	r24, 0x95	; 149
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	63 e2       	ldi	r22, 0x23	; 35
     c28:	70 e0       	ldi	r23, 0x00	; 0
     c2a:	4e ea       	ldi	r20, 0xAE	; 174
     c2c:	50 e0       	ldi	r21, 0x00	; 0
     c2e:	34 c0       	rjmp	.+104    	; 0xc98 <main+0x104>
					}
					else if(p_data == 11 && (current_cursor_x > Az_Start_X))
     c30:	8b 30       	cpi	r24, 0x0B	; 11
     c32:	c1 f4       	brne	.+48     	; 0xc64 <main+0xd0>
     c34:	80 91 7e 02 	lds	r24, 0x027E
     c38:	8b 35       	cpi	r24, 0x5B	; 91
     c3a:	e8 f2       	brcs	.-70     	; 0xbf6 <main+0x62>
					{
						current_cursor_x -=7;
     c3c:	87 50       	subi	r24, 0x07	; 7
     c3e:	80 93 7e 02 	sts	0x027E, r24
						Cursor_Coordinate(current_cursor_x, current_cursor_y);
     c42:	60 91 ca 02 	lds	r22, 0x02CA
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	0e 94 2b 01 	call	0x256	; 0x256 <Cursor_Coordinate>
						Write_Blank(1);
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	0e 94 08 01 	call	0x210	; 0x210 <Write_Blank>
						Button_Feedback(149, 63, 174, 88);
     c56:	85 e9       	ldi	r24, 0x95	; 149
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	6f e3       	ldi	r22, 0x3F	; 63
     c5c:	70 e0       	ldi	r23, 0x00	; 0
     c5e:	4e ea       	ldi	r20, 0xAE	; 174
     c60:	50 e0       	ldi	r21, 0x00	; 0
     c62:	a8 c0       	rjmp	.+336    	; 0xdb4 <main+0x220>
					}
					else if(p_data == 1 && (current_cursor_x < Az_Finish_X))
     c64:	81 30       	cpi	r24, 0x01	; 1
     c66:	d9 f4       	brne	.+54     	; 0xc9e <main+0x10a>
     c68:	80 91 7e 02 	lds	r24, 0x027E
     c6c:	84 38       	cpi	r24, 0x84	; 132
     c6e:	18 f6       	brcc	.-122    	; 0xbf6 <main+0x62>
					{
						Cursor_Coordinate(current_cursor_x, current_cursor_y);
     c70:	60 91 ca 02 	lds	r22, 0x02CA
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	70 e0       	ldi	r23, 0x00	; 0
     c78:	0e 94 2b 01 	call	0x256	; 0x256 <Cursor_Coordinate>
						UWriteData('1');
     c7c:	81 e3       	ldi	r24, 0x31	; 49
     c7e:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
						current_cursor_x +=7;
     c82:	80 91 7e 02 	lds	r24, 0x027E
     c86:	89 5f       	subi	r24, 0xF9	; 249
     c88:	80 93 7e 02 	sts	0x027E, r24
						Button_Feedback(65, 35, 90, 60);
     c8c:	81 e4       	ldi	r24, 0x41	; 65
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	63 e2       	ldi	r22, 0x23	; 35
     c92:	70 e0       	ldi	r23, 0x00	; 0
     c94:	4a e5       	ldi	r20, 0x5A	; 90
     c96:	50 e0       	ldi	r21, 0x00	; 0
     c98:	2c e3       	ldi	r18, 0x3C	; 60
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	00 c1       	rjmp	.+512    	; 0xe9e <main+0x30a>
					}
					else if(p_data == 2 && (current_cursor_x < Az_Finish_X))
     c9e:	82 30       	cpi	r24, 0x02	; 2
     ca0:	d1 f4       	brne	.+52     	; 0xcd6 <main+0x142>
     ca2:	80 91 7e 02 	lds	r24, 0x027E
     ca6:	84 38       	cpi	r24, 0x84	; 132
     ca8:	08 f0       	brcs	.+2      	; 0xcac <main+0x118>
     caa:	a5 cf       	rjmp	.-182    	; 0xbf6 <main+0x62>
					{
						Cursor_Coordinate(current_cursor_x, current_cursor_y);
     cac:	60 91 ca 02 	lds	r22, 0x02CA
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	0e 94 2b 01 	call	0x256	; 0x256 <Cursor_Coordinate>
						UWriteData('2');
     cb8:	82 e3       	ldi	r24, 0x32	; 50
     cba:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
						current_cursor_x +=7;
     cbe:	80 91 7e 02 	lds	r24, 0x027E
     cc2:	89 5f       	subi	r24, 0xF9	; 249
     cc4:	80 93 7e 02 	sts	0x027E, r24
						Button_Feedback(93, 35, 118, 60);
     cc8:	8d e5       	ldi	r24, 0x5D	; 93
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	63 e2       	ldi	r22, 0x23	; 35
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	46 e7       	ldi	r20, 0x76	; 118
     cd2:	50 e0       	ldi	r21, 0x00	; 0
     cd4:	e1 cf       	rjmp	.-62     	; 0xc98 <main+0x104>
					}
					else if(p_data == 3 && (current_cursor_x < Az_Finish_X))
     cd6:	83 30       	cpi	r24, 0x03	; 3
     cd8:	d1 f4       	brne	.+52     	; 0xd0e <main+0x17a>
     cda:	80 91 7e 02 	lds	r24, 0x027E
     cde:	84 38       	cpi	r24, 0x84	; 132
     ce0:	08 f0       	brcs	.+2      	; 0xce4 <main+0x150>
     ce2:	89 cf       	rjmp	.-238    	; 0xbf6 <main+0x62>
					{
						Cursor_Coordinate(current_cursor_x, current_cursor_y);
     ce4:	60 91 ca 02 	lds	r22, 0x02CA
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	70 e0       	ldi	r23, 0x00	; 0
     cec:	0e 94 2b 01 	call	0x256	; 0x256 <Cursor_Coordinate>
						UWriteData('3');
     cf0:	83 e3       	ldi	r24, 0x33	; 51
     cf2:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
						current_cursor_x +=7;
     cf6:	80 91 7e 02 	lds	r24, 0x027E
     cfa:	89 5f       	subi	r24, 0xF9	; 249
     cfc:	80 93 7e 02 	sts	0x027E, r24
						Button_Feedback(121, 35, 146, 60);
     d00:	89 e7       	ldi	r24, 0x79	; 121
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	63 e2       	ldi	r22, 0x23	; 35
     d06:	70 e0       	ldi	r23, 0x00	; 0
     d08:	42 e9       	ldi	r20, 0x92	; 146
     d0a:	50 e0       	ldi	r21, 0x00	; 0
     d0c:	c5 cf       	rjmp	.-118    	; 0xc98 <main+0x104>
					}
					else if(p_data == 4 && (current_cursor_x < Az_Finish_X))
     d0e:	84 30       	cpi	r24, 0x04	; 4
     d10:	d1 f4       	brne	.+52     	; 0xd46 <main+0x1b2>
     d12:	80 91 7e 02 	lds	r24, 0x027E
     d16:	84 38       	cpi	r24, 0x84	; 132
     d18:	08 f0       	brcs	.+2      	; 0xd1c <main+0x188>
     d1a:	6d cf       	rjmp	.-294    	; 0xbf6 <main+0x62>
					{
						Cursor_Coordinate(current_cursor_x, current_cursor_y);
     d1c:	60 91 ca 02 	lds	r22, 0x02CA
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	70 e0       	ldi	r23, 0x00	; 0
     d24:	0e 94 2b 01 	call	0x256	; 0x256 <Cursor_Coordinate>
						UWriteData('4');
     d28:	84 e3       	ldi	r24, 0x34	; 52
     d2a:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
						current_cursor_x +=7;
     d2e:	80 91 7e 02 	lds	r24, 0x027E
     d32:	89 5f       	subi	r24, 0xF9	; 249
     d34:	80 93 7e 02 	sts	0x027E, r24
						Button_Feedback(65, 63, 90, 88);
     d38:	81 e4       	ldi	r24, 0x41	; 65
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	6f e3       	ldi	r22, 0x3F	; 63
     d3e:	70 e0       	ldi	r23, 0x00	; 0
     d40:	4a e5       	ldi	r20, 0x5A	; 90
     d42:	50 e0       	ldi	r21, 0x00	; 0
     d44:	37 c0       	rjmp	.+110    	; 0xdb4 <main+0x220>
					}
					else if(p_data == 5 && (current_cursor_x < Az_Finish_X))
     d46:	85 30       	cpi	r24, 0x05	; 5
     d48:	d1 f4       	brne	.+52     	; 0xd7e <main+0x1ea>
     d4a:	80 91 7e 02 	lds	r24, 0x027E
     d4e:	84 38       	cpi	r24, 0x84	; 132
     d50:	08 f0       	brcs	.+2      	; 0xd54 <main+0x1c0>
     d52:	51 cf       	rjmp	.-350    	; 0xbf6 <main+0x62>
					{
						Cursor_Coordinate(current_cursor_x, current_cursor_y);
     d54:	60 91 ca 02 	lds	r22, 0x02CA
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	0e 94 2b 01 	call	0x256	; 0x256 <Cursor_Coordinate>
						UWriteData('5');
     d60:	85 e3       	ldi	r24, 0x35	; 53
     d62:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
						current_cursor_x +=7;
     d66:	80 91 7e 02 	lds	r24, 0x027E
     d6a:	89 5f       	subi	r24, 0xF9	; 249
     d6c:	80 93 7e 02 	sts	0x027E, r24
						Button_Feedback(93, 63, 118, 88);
     d70:	8d e5       	ldi	r24, 0x5D	; 93
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	6f e3       	ldi	r22, 0x3F	; 63
     d76:	70 e0       	ldi	r23, 0x00	; 0
     d78:	46 e7       	ldi	r20, 0x76	; 118
     d7a:	50 e0       	ldi	r21, 0x00	; 0
     d7c:	1b c0       	rjmp	.+54     	; 0xdb4 <main+0x220>
					}
					else if(p_data == 6 && (current_cursor_x < Az_Finish_X))
     d7e:	86 30       	cpi	r24, 0x06	; 6
     d80:	e1 f4       	brne	.+56     	; 0xdba <main+0x226>
     d82:	80 91 7e 02 	lds	r24, 0x027E
     d86:	84 38       	cpi	r24, 0x84	; 132
     d88:	08 f0       	brcs	.+2      	; 0xd8c <main+0x1f8>
     d8a:	35 cf       	rjmp	.-406    	; 0xbf6 <main+0x62>
					{
						Cursor_Coordinate(current_cursor_x, current_cursor_y);
     d8c:	60 91 ca 02 	lds	r22, 0x02CA
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	0e 94 2b 01 	call	0x256	; 0x256 <Cursor_Coordinate>
						UWriteData('6');
     d98:	86 e3       	ldi	r24, 0x36	; 54
     d9a:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
						current_cursor_x +=7;
     d9e:	80 91 7e 02 	lds	r24, 0x027E
     da2:	89 5f       	subi	r24, 0xF9	; 249
     da4:	80 93 7e 02 	sts	0x027E, r24
						Button_Feedback(121, 63, 146, 88);
     da8:	89 e7       	ldi	r24, 0x79	; 121
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	6f e3       	ldi	r22, 0x3F	; 63
     dae:	70 e0       	ldi	r23, 0x00	; 0
     db0:	42 e9       	ldi	r20, 0x92	; 146
     db2:	50 e0       	ldi	r21, 0x00	; 0
     db4:	28 e5       	ldi	r18, 0x58	; 88
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	72 c0       	rjmp	.+228    	; 0xe9e <main+0x30a>
					}
					else if(p_data == 7 && (current_cursor_x < Az_Finish_X))
     dba:	87 30       	cpi	r24, 0x07	; 7
     dbc:	d1 f4       	brne	.+52     	; 0xdf2 <main+0x25e>
     dbe:	80 91 7e 02 	lds	r24, 0x027E
     dc2:	84 38       	cpi	r24, 0x84	; 132
     dc4:	08 f0       	brcs	.+2      	; 0xdc8 <main+0x234>
     dc6:	17 cf       	rjmp	.-466    	; 0xbf6 <main+0x62>
					{
						Cursor_Coordinate(current_cursor_x, current_cursor_y);
     dc8:	60 91 ca 02 	lds	r22, 0x02CA
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	70 e0       	ldi	r23, 0x00	; 0
     dd0:	0e 94 2b 01 	call	0x256	; 0x256 <Cursor_Coordinate>
						UWriteData('7');
     dd4:	87 e3       	ldi	r24, 0x37	; 55
     dd6:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
						current_cursor_x +=7;
     dda:	80 91 7e 02 	lds	r24, 0x027E
     dde:	89 5f       	subi	r24, 0xF9	; 249
     de0:	80 93 7e 02 	sts	0x027E, r24
						Button_Feedback(65, 91, 90, 116);
     de4:	81 e4       	ldi	r24, 0x41	; 65
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	6b e5       	ldi	r22, 0x5B	; 91
     dea:	70 e0       	ldi	r23, 0x00	; 0
     dec:	4a e5       	ldi	r20, 0x5A	; 90
     dee:	50 e0       	ldi	r21, 0x00	; 0
     df0:	54 c0       	rjmp	.+168    	; 0xe9a <main+0x306>
					}
					else if(p_data == 8 && (current_cursor_x < Az_Finish_X))
     df2:	88 30       	cpi	r24, 0x08	; 8
     df4:	d1 f4       	brne	.+52     	; 0xe2a <main+0x296>
     df6:	80 91 7e 02 	lds	r24, 0x027E
     dfa:	84 38       	cpi	r24, 0x84	; 132
     dfc:	08 f0       	brcs	.+2      	; 0xe00 <main+0x26c>
     dfe:	fb ce       	rjmp	.-522    	; 0xbf6 <main+0x62>
					{
						Cursor_Coordinate(current_cursor_x, current_cursor_y);
     e00:	60 91 ca 02 	lds	r22, 0x02CA
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	70 e0       	ldi	r23, 0x00	; 0
     e08:	0e 94 2b 01 	call	0x256	; 0x256 <Cursor_Coordinate>
						UWriteData('8');
     e0c:	88 e3       	ldi	r24, 0x38	; 56
     e0e:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
						current_cursor_x +=7;
     e12:	80 91 7e 02 	lds	r24, 0x027E
     e16:	89 5f       	subi	r24, 0xF9	; 249
     e18:	80 93 7e 02 	sts	0x027E, r24
						Button_Feedback(93, 91, 118, 116);
     e1c:	8d e5       	ldi	r24, 0x5D	; 93
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	6b e5       	ldi	r22, 0x5B	; 91
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	46 e7       	ldi	r20, 0x76	; 118
     e26:	50 e0       	ldi	r21, 0x00	; 0
     e28:	38 c0       	rjmp	.+112    	; 0xe9a <main+0x306>
					}
					else if(p_data == 9 && (current_cursor_x < Az_Finish_X))
     e2a:	89 30       	cpi	r24, 0x09	; 9
     e2c:	d1 f4       	brne	.+52     	; 0xe62 <main+0x2ce>
     e2e:	80 91 7e 02 	lds	r24, 0x027E
     e32:	84 38       	cpi	r24, 0x84	; 132
     e34:	08 f0       	brcs	.+2      	; 0xe38 <main+0x2a4>
     e36:	df ce       	rjmp	.-578    	; 0xbf6 <main+0x62>
					{
						Cursor_Coordinate(current_cursor_x, current_cursor_y);
     e38:	60 91 ca 02 	lds	r22, 0x02CA
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	70 e0       	ldi	r23, 0x00	; 0
     e40:	0e 94 2b 01 	call	0x256	; 0x256 <Cursor_Coordinate>
						UWriteData('9');
     e44:	89 e3       	ldi	r24, 0x39	; 57
     e46:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
						current_cursor_x +=7;
     e4a:	80 91 7e 02 	lds	r24, 0x027E
     e4e:	89 5f       	subi	r24, 0xF9	; 249
     e50:	80 93 7e 02 	sts	0x027E, r24
						Button_Feedback(121, 91, 146, 116);
     e54:	89 e7       	ldi	r24, 0x79	; 121
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	6b e5       	ldi	r22, 0x5B	; 91
     e5a:	70 e0       	ldi	r23, 0x00	; 0
     e5c:	42 e9       	ldi	r20, 0x92	; 146
     e5e:	50 e0       	ldi	r21, 0x00	; 0
     e60:	1c c0       	rjmp	.+56     	; 0xe9a <main+0x306>
					}
					else if(p_data == 101 && (current_cursor_x < Az_Finish_X))
     e62:	85 36       	cpi	r24, 0x65	; 101
     e64:	09 f0       	breq	.+2      	; 0xe68 <main+0x2d4>
     e66:	c7 ce       	rjmp	.-626    	; 0xbf6 <main+0x62>
     e68:	80 91 7e 02 	lds	r24, 0x027E
     e6c:	84 38       	cpi	r24, 0x84	; 132
     e6e:	08 f0       	brcs	.+2      	; 0xe72 <main+0x2de>
     e70:	c2 ce       	rjmp	.-636    	; 0xbf6 <main+0x62>
					{
						Cursor_Coordinate(current_cursor_x, current_cursor_y);
     e72:	60 91 ca 02 	lds	r22, 0x02CA
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	70 e0       	ldi	r23, 0x00	; 0
     e7a:	0e 94 2b 01 	call	0x256	; 0x256 <Cursor_Coordinate>
						UWriteData('0');
     e7e:	80 e3       	ldi	r24, 0x30	; 48
     e80:	0e 94 e7 07 	call	0xfce	; 0xfce <UWriteData>
						current_cursor_x +=7;
     e84:	80 91 7e 02 	lds	r24, 0x027E
     e88:	89 5f       	subi	r24, 0xF9	; 249
     e8a:	80 93 7e 02 	sts	0x027E, r24
						Button_Feedback(149, 91, 174, 116);
     e8e:	85 e9       	ldi	r24, 0x95	; 149
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	6b e5       	ldi	r22, 0x5B	; 91
     e94:	70 e0       	ldi	r23, 0x00	; 0
     e96:	4e ea       	ldi	r20, 0xAE	; 174
     e98:	50 e0       	ldi	r21, 0x00	; 0
     e9a:	24 e7       	ldi	r18, 0x74	; 116
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	0e 94 d7 02 	call	0x5ae	; 0x5ae <Button_Feedback>
     ea2:	a9 ce       	rjmp	.-686    	; 0xbf6 <main+0x62>

00000ea4 <USARTInit>:


void USARTInit(uint16_t ubrrvalue)
{
	//Setup q
	UQFront=UQEnd=-1;
     ea4:	2f ef       	ldi	r18, 0xFF	; 255
     ea6:	20 93 89 02 	sts	0x0289, r18
     eaa:	20 91 89 02 	lds	r18, 0x0289
     eae:	20 93 87 02 	sts	0x0287, r18

	//Set Baud rate
	UBRR0H=(unsigned char)(ubrrvalue>>8);
     eb2:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L=(unsigned char)ubrrvalue;
     eb6:	80 93 c4 00 	sts	0x00C4, r24
	1 StopBit
	char size 8

	*/

	UCSR0C=(0<<UMSEL01)|(0<<UMSEL00)|(0<<UPM01)|(0<<UPM00) |(0<<USBS0) |(1<<UCSZ01) |(1<<UCSZ00) |(0<<UCPOL0);
     eba:	86 e0       	ldi	r24, 0x06	; 6
     ebc:	80 93 c2 00 	sts	0x00C2, r24

	Enable The recevier and transmitter

	*/

	UCSR0B=(1<<RXCIE0)|(1<<TXEN0)|(1<<RXEN0);
     ec0:	88 e9       	ldi	r24, 0x98	; 152
     ec2:	80 93 c1 00 	sts	0x00C1, r24
	sei();
     ec6:	78 94       	sei

}
     ec8:	08 95       	ret

00000eca <__vector_25>:

//The USART ISR
ISR(USART_RXC_VECT)
{
     eca:	1f 92       	push	r1
     ecc:	0f 92       	push	r0
     ece:	0f b6       	in	r0, 0x3f	; 63
     ed0:	0f 92       	push	r0
     ed2:	0b b6       	in	r0, 0x3b	; 59
     ed4:	0f 92       	push	r0
     ed6:	11 24       	eor	r1, r1
     ed8:	2f 93       	push	r18
     eda:	3f 93       	push	r19
     edc:	4f 93       	push	r20
     ede:	8f 93       	push	r24
     ee0:	9f 93       	push	r25
     ee2:	ef 93       	push	r30
     ee4:	ff 93       	push	r31
	//Read the data
	char data=UDR0;
     ee6:	40 91 c6 00 	lds	r20, 0x00C6

	//Now add it to q

	if(((UQEnd==RECEIVE_BUFF_SIZE-1) && UQFront==0) || ((UQEnd+1)==UQFront))
     eea:	80 91 89 02 	lds	r24, 0x0289
     eee:	8f 33       	cpi	r24, 0x3F	; 63
     ef0:	21 f4       	brne	.+8      	; 0xefa <__vector_25+0x30>
     ef2:	80 91 87 02 	lds	r24, 0x0287
     ef6:	88 23       	and	r24, r24
     ef8:	71 f0       	breq	.+28     	; 0xf16 <__vector_25+0x4c>
     efa:	80 91 89 02 	lds	r24, 0x0289
     efe:	20 91 87 02 	lds	r18, 0x0287
     f02:	99 27       	eor	r25, r25
     f04:	87 fd       	sbrc	r24, 7
     f06:	90 95       	com	r25
     f08:	01 96       	adiw	r24, 0x01	; 1
     f0a:	33 27       	eor	r19, r19
     f0c:	27 fd       	sbrc	r18, 7
     f0e:	30 95       	com	r19
     f10:	82 17       	cp	r24, r18
     f12:	93 07       	cpc	r25, r19
     f14:	59 f4       	brne	.+22     	; 0xf2c <__vector_25+0x62>
	{
		//Q Full
		UQFront++;
     f16:	80 91 87 02 	lds	r24, 0x0287
     f1a:	8f 5f       	subi	r24, 0xFF	; 255
     f1c:	80 93 87 02 	sts	0x0287, r24
		if(UQFront==RECEIVE_BUFF_SIZE) UQFront=0;
     f20:	80 91 87 02 	lds	r24, 0x0287
     f24:	80 34       	cpi	r24, 0x40	; 64
     f26:	11 f4       	brne	.+4      	; 0xf2c <__vector_25+0x62>
     f28:	10 92 87 02 	sts	0x0287, r1
	}
	

	if(UQEnd==RECEIVE_BUFF_SIZE-1)
     f2c:	80 91 89 02 	lds	r24, 0x0289
     f30:	8f 33       	cpi	r24, 0x3F	; 63
     f32:	19 f4       	brne	.+6      	; 0xf3a <__vector_25+0x70>
		UQEnd=0;
     f34:	10 92 89 02 	sts	0x0289, r1
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <__vector_25+0x7a>
	else
		UQEnd++;
     f3a:	80 91 89 02 	lds	r24, 0x0289
     f3e:	8f 5f       	subi	r24, 0xFF	; 255
     f40:	80 93 89 02 	sts	0x0289, r24


	URBuff[UQEnd]=data;
     f44:	e0 91 89 02 	lds	r30, 0x0289
     f48:	ff 27       	eor	r31, r31
     f4a:	e7 fd       	sbrc	r30, 7
     f4c:	f0 95       	com	r31
     f4e:	e6 57       	subi	r30, 0x76	; 118
     f50:	fd 4f       	sbci	r31, 0xFD	; 253
     f52:	40 83       	st	Z, r20

	if(UQFront==-1) UQFront=0;
     f54:	80 91 87 02 	lds	r24, 0x0287
     f58:	8f 3f       	cpi	r24, 0xFF	; 255
     f5a:	11 f4       	brne	.+4      	; 0xf60 <__vector_25+0x96>
     f5c:	10 92 87 02 	sts	0x0287, r1

}
     f60:	ff 91       	pop	r31
     f62:	ef 91       	pop	r30
     f64:	9f 91       	pop	r25
     f66:	8f 91       	pop	r24
     f68:	4f 91       	pop	r20
     f6a:	3f 91       	pop	r19
     f6c:	2f 91       	pop	r18
     f6e:	0f 90       	pop	r0
     f70:	0b be       	out	0x3b, r0	; 59
     f72:	0f 90       	pop	r0
     f74:	0f be       	out	0x3f, r0	; 63
     f76:	0f 90       	pop	r0
     f78:	1f 90       	pop	r1
     f7a:	18 95       	reti

00000f7c <UReadData>:
char UReadData()
{
	char data;
	
	//Check if q is empty
	if(UQFront==-1)
     f7c:	80 91 87 02 	lds	r24, 0x0287
     f80:	8f 3f       	cpi	r24, 0xFF	; 255
     f82:	11 f4       	brne	.+4      	; 0xf88 <UReadData+0xc>
     f84:	e0 e0       	ldi	r30, 0x00	; 0
     f86:	21 c0       	rjmp	.+66     	; 0xfca <UReadData+0x4e>
		return 0;
	
	data=URBuff[UQFront];
     f88:	e0 91 87 02 	lds	r30, 0x0287
     f8c:	ff 27       	eor	r31, r31
     f8e:	e7 fd       	sbrc	r30, 7
     f90:	f0 95       	com	r31
     f92:	e6 57       	subi	r30, 0x76	; 118
     f94:	fd 4f       	sbci	r31, 0xFD	; 253
     f96:	e0 81       	ld	r30, Z
	
	if(UQFront==UQEnd)
     f98:	90 91 87 02 	lds	r25, 0x0287
     f9c:	80 91 89 02 	lds	r24, 0x0289
     fa0:	98 17       	cp	r25, r24
     fa2:	41 f4       	brne	.+16     	; 0xfb4 <UReadData+0x38>
	{
	//If single data is left
	//So empty q
	UQFront=UQEnd=-1;
     fa4:	8f ef       	ldi	r24, 0xFF	; 255
     fa6:	80 93 89 02 	sts	0x0289, r24
     faa:	80 91 89 02 	lds	r24, 0x0289
     fae:	80 93 87 02 	sts	0x0287, r24
     fb2:	0b c0       	rjmp	.+22     	; 0xfca <UReadData+0x4e>
	}
	else
	{
		UQFront++;
     fb4:	80 91 87 02 	lds	r24, 0x0287
     fb8:	8f 5f       	subi	r24, 0xFF	; 255
     fba:	80 93 87 02 	sts	0x0287, r24

		if(UQFront==RECEIVE_BUFF_SIZE)
     fbe:	80 91 87 02 	lds	r24, 0x0287
     fc2:	80 34       	cpi	r24, 0x40	; 64
     fc4:	11 f4       	brne	.+4      	; 0xfca <UReadData+0x4e>
		UQFront=0;
     fc6:	10 92 87 02 	sts	0x0287, r1
	}

	return data;
}
     fca:	8e 2f       	mov	r24, r30
     fcc:	08 95       	ret

00000fce <UWriteData>:

void UWriteData(char data)
{
     fce:	38 2f       	mov	r19, r24
	//Wait For Transmitter to become read
	
	while(!(UCSR0A & (1<<UDR0)));
     fd0:	80 91 c0 00 	lds	r24, 0x00C0
     fd4:	20 91 c6 00 	lds	r18, 0x00C6
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <UWriteData+0x12>
     fdc:	95 95       	asr	r25
     fde:	87 95       	ror	r24
     fe0:	2a 95       	dec	r18
     fe2:	e2 f7       	brpl	.-8      	; 0xfdc <UWriteData+0xe>
     fe4:	80 ff       	sbrs	r24, 0
     fe6:	f4 cf       	rjmp	.-24     	; 0xfd0 <UWriteData+0x2>

	//Now write
	UDR0=data;
     fe8:	30 93 c6 00 	sts	0x00C6, r19
}
     fec:	08 95       	ret

00000fee <UDataAvailable>:

uint8_t UDataAvailable()
{
	if(UQFront==-1) return 0;
     fee:	80 91 87 02 	lds	r24, 0x0287
     ff2:	8f 3f       	cpi	r24, 0xFF	; 255
     ff4:	11 f4       	brne	.+4      	; 0xffa <UDataAvailable+0xc>
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	1a c0       	rjmp	.+52     	; 0x102e <UDataAvailable+0x40>
	if(UQFront<UQEnd)
     ffa:	90 91 87 02 	lds	r25, 0x0287
     ffe:	80 91 89 02 	lds	r24, 0x0289
    1002:	98 17       	cp	r25, r24
    1004:	34 f4       	brge	.+12     	; 0x1012 <UDataAvailable+0x24>
		return(UQEnd-UQFront+1);
    1006:	90 91 89 02 	lds	r25, 0x0289
    100a:	80 91 87 02 	lds	r24, 0x0287
    100e:	9f 5f       	subi	r25, 0xFF	; 255
    1010:	0d c0       	rjmp	.+26     	; 0x102c <UDataAvailable+0x3e>
	else if(UQFront>UQEnd)
    1012:	90 91 87 02 	lds	r25, 0x0287
    1016:	80 91 89 02 	lds	r24, 0x0289
    101a:	89 17       	cp	r24, r25
    101c:	14 f0       	brlt	.+4      	; 0x1022 <UDataAvailable+0x34>
    101e:	91 e0       	ldi	r25, 0x01	; 1
    1020:	06 c0       	rjmp	.+12     	; 0x102e <UDataAvailable+0x40>
		return (RECEIVE_BUFF_SIZE-UQFront+UQEnd+1);
    1022:	90 91 89 02 	lds	r25, 0x0289
    1026:	80 91 87 02 	lds	r24, 0x0287
    102a:	9f 5b       	subi	r25, 0xBF	; 191
    102c:	98 1b       	sub	r25, r24
	else
		return 1;
}
    102e:	89 2f       	mov	r24, r25
    1030:	08 95       	ret

00001032 <UWriteString>:

void UWriteString(char *str)
{
    1032:	fc 01       	movw	r30, r24
    1034:	0f c0       	rjmp	.+30     	; 0x1054 <UWriteString+0x22>

void UWriteData(char data)
{
	//Wait For Transmitter to become read
	
	while(!(UCSR0A & (1<<UDR0)));
    1036:	80 91 c0 00 	lds	r24, 0x00C0
    103a:	20 91 c6 00 	lds	r18, 0x00C6
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <UWriteString+0x14>
    1042:	95 95       	asr	r25
    1044:	87 95       	ror	r24
    1046:	2a 95       	dec	r18
    1048:	e2 f7       	brpl	.-8      	; 0x1042 <UWriteString+0x10>
    104a:	80 ff       	sbrs	r24, 0
    104c:	f4 cf       	rjmp	.-24     	; 0x1036 <UWriteString+0x4>

	//Now write
	UDR0=data;
    104e:	30 93 c6 00 	sts	0x00C6, r19
void UWriteString(char *str)
{
	while((*str)!='\0')
	{
		UWriteData(*str);
		str++;
    1052:	31 96       	adiw	r30, 0x01	; 1
		return 1;
}

void UWriteString(char *str)
{
	while((*str)!='\0')
    1054:	30 81       	ld	r19, Z
    1056:	33 23       	and	r19, r19
    1058:	71 f7       	brne	.-36     	; 0x1036 <UWriteString+0x4>

void UWriteData(char data)
{
	//Wait For Transmitter to become read
	
	while(!(UCSR0A & (1<<UDR0)));
    105a:	80 91 c0 00 	lds	r24, 0x00C0
    105e:	20 91 c6 00 	lds	r18, 0x00C6
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	02 c0       	rjmp	.+4      	; 0x106a <UWriteString+0x38>
    1066:	95 95       	asr	r25
    1068:	87 95       	ror	r24
    106a:	2a 95       	dec	r18
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <UWriteString+0x34>
    106e:	80 ff       	sbrs	r24, 0
    1070:	f4 cf       	rjmp	.-24     	; 0x105a <UWriteString+0x28>

	//Now write
	UDR0=data;
    1072:	10 92 c6 00 	sts	0x00C6, r1
		UWriteData(*str);
		str++;
	}

	UWriteData('\0');
}
    1076:	08 95       	ret

00001078 <itoa>:
    1078:	fb 01       	movw	r30, r22
    107a:	9f 01       	movw	r18, r30
    107c:	e8 94       	clt
    107e:	42 30       	cpi	r20, 0x02	; 2
    1080:	c4 f0       	brlt	.+48     	; 0x10b2 <itoa+0x3a>
    1082:	45 32       	cpi	r20, 0x25	; 37
    1084:	b4 f4       	brge	.+44     	; 0x10b2 <itoa+0x3a>
    1086:	4a 30       	cpi	r20, 0x0A	; 10
    1088:	29 f4       	brne	.+10     	; 0x1094 <itoa+0x1c>
    108a:	97 fb       	bst	r25, 7
    108c:	1e f4       	brtc	.+6      	; 0x1094 <itoa+0x1c>
    108e:	90 95       	com	r25
    1090:	81 95       	neg	r24
    1092:	9f 4f       	sbci	r25, 0xFF	; 255
    1094:	64 2f       	mov	r22, r20
    1096:	77 27       	eor	r23, r23
    1098:	0e 94 6d 08 	call	0x10da	; 0x10da <__udivmodhi4>
    109c:	80 5d       	subi	r24, 0xD0	; 208
    109e:	8a 33       	cpi	r24, 0x3A	; 58
    10a0:	0c f0       	brlt	.+2      	; 0x10a4 <itoa+0x2c>
    10a2:	89 5d       	subi	r24, 0xD9	; 217
    10a4:	81 93       	st	Z+, r24
    10a6:	cb 01       	movw	r24, r22
    10a8:	00 97       	sbiw	r24, 0x00	; 0
    10aa:	a1 f7       	brne	.-24     	; 0x1094 <itoa+0x1c>
    10ac:	16 f4       	brtc	.+4      	; 0x10b2 <itoa+0x3a>
    10ae:	5d e2       	ldi	r21, 0x2D	; 45
    10b0:	51 93       	st	Z+, r21
    10b2:	10 82       	st	Z, r1
    10b4:	c9 01       	movw	r24, r18
    10b6:	0c 94 5d 08 	jmp	0x10ba	; 0x10ba <strrev>

000010ba <strrev>:
    10ba:	dc 01       	movw	r26, r24
    10bc:	fc 01       	movw	r30, r24
    10be:	67 2f       	mov	r22, r23
    10c0:	71 91       	ld	r23, Z+
    10c2:	77 23       	and	r23, r23
    10c4:	e1 f7       	brne	.-8      	; 0x10be <strrev+0x4>
    10c6:	32 97       	sbiw	r30, 0x02	; 2
    10c8:	04 c0       	rjmp	.+8      	; 0x10d2 <strrev+0x18>
    10ca:	7c 91       	ld	r23, X
    10cc:	6d 93       	st	X+, r22
    10ce:	70 83       	st	Z, r23
    10d0:	62 91       	ld	r22, -Z
    10d2:	ae 17       	cp	r26, r30
    10d4:	bf 07       	cpc	r27, r31
    10d6:	c8 f3       	brcs	.-14     	; 0x10ca <strrev+0x10>
    10d8:	08 95       	ret

000010da <__udivmodhi4>:
    10da:	aa 1b       	sub	r26, r26
    10dc:	bb 1b       	sub	r27, r27
    10de:	51 e1       	ldi	r21, 0x11	; 17
    10e0:	07 c0       	rjmp	.+14     	; 0x10f0 <__udivmodhi4_ep>

000010e2 <__udivmodhi4_loop>:
    10e2:	aa 1f       	adc	r26, r26
    10e4:	bb 1f       	adc	r27, r27
    10e6:	a6 17       	cp	r26, r22
    10e8:	b7 07       	cpc	r27, r23
    10ea:	10 f0       	brcs	.+4      	; 0x10f0 <__udivmodhi4_ep>
    10ec:	a6 1b       	sub	r26, r22
    10ee:	b7 0b       	sbc	r27, r23

000010f0 <__udivmodhi4_ep>:
    10f0:	88 1f       	adc	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	5a 95       	dec	r21
    10f6:	a9 f7       	brne	.-22     	; 0x10e2 <__udivmodhi4_loop>
    10f8:	80 95       	com	r24
    10fa:	90 95       	com	r25
    10fc:	bc 01       	movw	r22, r24
    10fe:	cd 01       	movw	r24, r26
    1100:	08 95       	ret

00001102 <_exit>:
    1102:	f8 94       	cli

00001104 <__stop_program>:
    1104:	ff cf       	rjmp	.-2      	; 0x1104 <__stop_program>
