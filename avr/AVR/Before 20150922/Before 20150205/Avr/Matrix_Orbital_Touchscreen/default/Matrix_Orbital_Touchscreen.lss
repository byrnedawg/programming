
Matrix_Orbital_Touchscreen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000394  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000394  00000408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000060  00000000  00000000  00000412  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000023e  00000000  00000000  00000472  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000787  00000000  00000000  000006b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000262  00000000  00000000  00000e37  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000670  00000000  00000000  00001099  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001c0  00000000  00000000  0000170c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000032a  00000000  00000000  000018cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000606  00000000  00000000  00001bf6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 33 00 	jmp	0x66	; 0x66 <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

00000054 <HexChars>:
  54:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF
	...

00000066 <__ctors_end>:
  66:	11 24       	eor	r1, r1
  68:	1f be       	out	0x3f, r1	; 63
  6a:	cf e5       	ldi	r28, 0x5F	; 95
  6c:	d8 e0       	ldi	r29, 0x08	; 8
  6e:	de bf       	out	0x3e, r29	; 62
  70:	cd bf       	out	0x3d, r28	; 61

00000072 <__do_copy_data>:
  72:	10 e0       	ldi	r17, 0x00	; 0
  74:	a0 e6       	ldi	r26, 0x60	; 96
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e4 e9       	ldi	r30, 0x94	; 148
  7a:	f3 e0       	ldi	r31, 0x03	; 3
  7c:	02 c0       	rjmp	.+4      	; 0x82 <.do_copy_data_start>

0000007e <.do_copy_data_loop>:
  7e:	05 90       	lpm	r0, Z+
  80:	0d 92       	st	X+, r0

00000082 <.do_copy_data_start>:
  82:	aa 36       	cpi	r26, 0x6A	; 106
  84:	b1 07       	cpc	r27, r17
  86:	d9 f7       	brne	.-10     	; 0x7e <.do_copy_data_loop>
  88:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  8c:	0c 94 c5 01 	jmp	0x38a	; 0x38a <exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <main>:

//***********************************************************************
int main()
{
	return 0;
}
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	08 95       	ret

0000009a <Command_Display>:
	Command_Display(Set_Font);
	rprintfu08(font_id);
} 

void Command_Display(unsigned char command)
{	
  9a:	1f 93       	push	r17
  9c:	18 2f       	mov	r17, r24
	rprintfu08(CMD);
  9e:	8e ef       	ldi	r24, 0xFE	; 254
  a0:	0e 94 42 01 	call	0x284	; 0x284 <rprintfu08>
	rprintfu08(command);
  a4:	81 2f       	mov	r24, r17
  a6:	0e 94 42 01 	call	0x284	; 0x284 <rprintfu08>
}
  aa:	1f 91       	pop	r17
  ac:	08 95       	ret

000000ae <Touch_Calibration>:
	rprintfu08(key_up);
}

void Touch_Calibration()
{	
	Command_Display(Touch_Calibrat);
  ae:	8b e8       	ldi	r24, 0x8B	; 139
  b0:	0e 94 4d 00 	call	0x9a	; 0x9a <Command_Display>

}
  b4:	08 95       	ret

000000b6 <Cursor_Coordinate>:
	rprintfu08(col);
	rprintfu08(row);
}

void Cursor_Coordinate(unsigned char horiz, unsigned char vert)
{	
  b6:	0f 93       	push	r16
  b8:	1f 93       	push	r17
  ba:	18 2f       	mov	r17, r24
  bc:	06 2f       	mov	r16, r22
	Command_Display(Cursor_Cord);
  be:	89 e7       	ldi	r24, 0x79	; 121
  c0:	0e 94 4d 00 	call	0x9a	; 0x9a <Command_Display>
	rprintfu08(horiz);
  c4:	81 2f       	mov	r24, r17
  c6:	0e 94 42 01 	call	0x284	; 0x284 <rprintfu08>
	rprintfu08(vert);
  ca:	80 2f       	mov	r24, r16
  cc:	0e 94 42 01 	call	0x284	; 0x284 <rprintfu08>
}
  d0:	1f 91       	pop	r17
  d2:	0f 91       	pop	r16
  d4:	08 95       	ret

000000d6 <Cursor_Pos>:
	rprintfu08(CMD);
	rprintfu08(command);
}

void Cursor_Pos(unsigned char col, unsigned char row)
{	
  d6:	0f 93       	push	r16
  d8:	1f 93       	push	r17
  da:	18 2f       	mov	r17, r24
  dc:	06 2f       	mov	r16, r22
	Command_Display(Cursor);
  de:	87 e4       	ldi	r24, 0x47	; 71
  e0:	0e 94 4d 00 	call	0x9a	; 0x9a <Command_Display>
	rprintfu08(col);
  e4:	81 2f       	mov	r24, r17
  e6:	0e 94 42 01 	call	0x284	; 0x284 <rprintfu08>
	rprintfu08(row);
  ea:	80 2f       	mov	r24, r16
  ec:	0e 94 42 01 	call	0x284	; 0x284 <rprintfu08>
}
  f0:	1f 91       	pop	r17
  f2:	0f 91       	pop	r16
  f4:	08 95       	ret

000000f6 <Choose_Font>:
	Command_Display(Drawing_Color);
	rprintfu08(color);
}

void Choose_Font(unsigned char font_id)
{
  f6:	1f 93       	push	r17
  f8:	18 2f       	mov	r17, r24
	Command_Display(Set_Font);
  fa:	81 e3       	ldi	r24, 0x31	; 49
  fc:	0e 94 4d 00 	call	0x9a	; 0x9a <Command_Display>
	rprintfu08(font_id);
 100:	81 2f       	mov	r24, r17
 102:	0e 94 42 01 	call	0x284	; 0x284 <rprintfu08>
} 
 106:	1f 91       	pop	r17
 108:	08 95       	ret

0000010a <Choose_Color>:
	rprintfu08(x);
	rprintfu08(y);
}

void Choose_Color(unsigned char color)
{
 10a:	1f 93       	push	r17
 10c:	18 2f       	mov	r17, r24
	Command_Display(Drawing_Color);
 10e:	83 e6       	ldi	r24, 0x63	; 99
 110:	0e 94 4d 00 	call	0x9a	; 0x9a <Command_Display>
	rprintfu08(color);
 114:	81 2f       	mov	r24, r17
 116:	0e 94 42 01 	call	0x284	; 0x284 <rprintfu08>
}
 11a:	1f 91       	pop	r17
 11c:	08 95       	ret

0000011e <Draw_Pixel_At>:
	rprintfu08(x2);
	rprintfu08(y2);
}

void Draw_Pixel_At(unsigned char x, unsigned char y)
{	
 11e:	0f 93       	push	r16
 120:	1f 93       	push	r17
 122:	18 2f       	mov	r17, r24
 124:	06 2f       	mov	r16, r22
	Command_Display(Draw_Pixel);
 126:	80 e7       	ldi	r24, 0x70	; 112
 128:	0e 94 4d 00 	call	0x9a	; 0x9a <Command_Display>
	rprintfu08(x);
 12c:	81 2f       	mov	r24, r17
 12e:	0e 94 42 01 	call	0x284	; 0x284 <rprintfu08>
	rprintfu08(y);
 132:	80 2f       	mov	r24, r16
 134:	0e 94 42 01 	call	0x284	; 0x284 <rprintfu08>
}
 138:	1f 91       	pop	r17
 13a:	0f 91       	pop	r16
 13c:	08 95       	ret

0000013e <Draw_Line_At>:
	rprintfu08(y);

}

void Draw_Line_At(unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2)
{	
 13e:	ef 92       	push	r14
 140:	ff 92       	push	r15
 142:	0f 93       	push	r16
 144:	1f 93       	push	r17
 146:	18 2f       	mov	r17, r24
 148:	06 2f       	mov	r16, r22
 14a:	f4 2e       	mov	r15, r20
 14c:	e2 2e       	mov	r14, r18
	Command_Display(Drawing_Line);
 14e:	8c e6       	ldi	r24, 0x6C	; 108
 150:	0e 94 4d 00 	call	0x9a	; 0x9a <Command_Display>
	rprintfu08(x1);
 154:	81 2f       	mov	r24, r17
 156:	0e 94 42 01 	call	0x284	; 0x284 <rprintfu08>
	rprintfu08(y1);
 15a:	80 2f       	mov	r24, r16
 15c:	0e 94 42 01 	call	0x284	; 0x284 <rprintfu08>
	rprintfu08(x2);
 160:	8f 2d       	mov	r24, r15
 162:	0e 94 42 01 	call	0x284	; 0x284 <rprintfu08>
	rprintfu08(y2);
 166:	8e 2d       	mov	r24, r14
 168:	0e 94 42 01 	call	0x284	; 0x284 <rprintfu08>
}
 16c:	1f 91       	pop	r17
 16e:	0f 91       	pop	r16
 170:	ff 90       	pop	r15
 172:	ef 90       	pop	r14
 174:	08 95       	ret

00000176 <Continue_Line_To>:
	rprintfu08(x2);
	rprintfu08(y2);
}

void Continue_Line_To(unsigned char x, unsigned char y)
{	
 176:	0f 93       	push	r16
 178:	1f 93       	push	r17
 17a:	18 2f       	mov	r17, r24
 17c:	06 2f       	mov	r16, r22
	Command_Display(Continue_Line);
 17e:	85 e6       	ldi	r24, 0x65	; 101
 180:	0e 94 4d 00 	call	0x9a	; 0x9a <Command_Display>
	rprintfu08(x);
 184:	81 2f       	mov	r24, r17
 186:	0e 94 42 01 	call	0x284	; 0x284 <rprintfu08>
	rprintfu08(y);
 18a:	80 2f       	mov	r24, r16
 18c:	0e 94 42 01 	call	0x284	; 0x284 <rprintfu08>

}
 190:	1f 91       	pop	r17
 192:	0f 91       	pop	r16
 194:	08 95       	ret

00000196 <Draw_Rect_At>:
	rprintfu08(x2);
	rprintfu08(y2);
}

void Draw_Rect_At(unsigned char color, unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2)
{	
 196:	df 92       	push	r13
 198:	ef 92       	push	r14
 19a:	ff 92       	push	r15
 19c:	0f 93       	push	r16
 19e:	1f 93       	push	r17
 1a0:	18 2f       	mov	r17, r24
 1a2:	f6 2e       	mov	r15, r22
 1a4:	e4 2e       	mov	r14, r20
 1a6:	d2 2e       	mov	r13, r18
	Command_Display(Draw_Rectangle);
 1a8:	82 e7       	ldi	r24, 0x72	; 114
 1aa:	0e 94 4d 00 	call	0x9a	; 0x9a <Command_Display>
	rprintfu08(color);
 1ae:	81 2f       	mov	r24, r17
 1b0:	0e 94 42 01 	call	0x284	; 0x284 <rprintfu08>
	rprintfu08(x1);
 1b4:	8f 2d       	mov	r24, r15
 1b6:	0e 94 42 01 	call	0x284	; 0x284 <rprintfu08>
	rprintfu08(y1);
 1ba:	8e 2d       	mov	r24, r14
 1bc:	0e 94 42 01 	call	0x284	; 0x284 <rprintfu08>
	rprintfu08(x2);
 1c0:	8d 2d       	mov	r24, r13
 1c2:	0e 94 42 01 	call	0x284	; 0x284 <rprintfu08>
	rprintfu08(y2);
 1c6:	80 2f       	mov	r24, r16
 1c8:	0e 94 42 01 	call	0x284	; 0x284 <rprintfu08>
}
 1cc:	1f 91       	pop	r17
 1ce:	0f 91       	pop	r16
 1d0:	ff 90       	pop	r15
 1d2:	ef 90       	pop	r14
 1d4:	df 90       	pop	r13
 1d6:	08 95       	ret

000001d8 <Draw_Solid_Rect>:
	Command_Display(Touch_Calibrat);

}

void Draw_Solid_Rect(unsigned char color, unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2)
{	
 1d8:	df 92       	push	r13
 1da:	ef 92       	push	r14
 1dc:	ff 92       	push	r15
 1de:	0f 93       	push	r16
 1e0:	1f 93       	push	r17
 1e2:	18 2f       	mov	r17, r24
 1e4:	f6 2e       	mov	r15, r22
 1e6:	e4 2e       	mov	r14, r20
 1e8:	d2 2e       	mov	r13, r18
	Command_Display(DRW_Solid_Rect);
 1ea:	88 e7       	ldi	r24, 0x78	; 120
 1ec:	0e 94 4d 00 	call	0x9a	; 0x9a <Command_Display>
	rprintfu08(color);
 1f0:	81 2f       	mov	r24, r17
 1f2:	0e 94 42 01 	call	0x284	; 0x284 <rprintfu08>
	rprintfu08(x1);
 1f6:	8f 2d       	mov	r24, r15
 1f8:	0e 94 42 01 	call	0x284	; 0x284 <rprintfu08>
	rprintfu08(y1);
 1fc:	8e 2d       	mov	r24, r14
 1fe:	0e 94 42 01 	call	0x284	; 0x284 <rprintfu08>
	rprintfu08(x2);
 202:	8d 2d       	mov	r24, r13
 204:	0e 94 42 01 	call	0x284	; 0x284 <rprintfu08>
	rprintfu08(y2);
 208:	80 2f       	mov	r24, r16
 20a:	0e 94 42 01 	call	0x284	; 0x284 <rprintfu08>
}
 20e:	1f 91       	pop	r17
 210:	0f 91       	pop	r16
 212:	ff 90       	pop	r15
 214:	ef 90       	pop	r14
 216:	df 90       	pop	r13
 218:	08 95       	ret

0000021a <Set_Touch_Region>:
	Command_Display(Touch_Mode);
	rprintfu08(touch_mode);
}
void Set_Touch_Region(unsigned char RegNum, unsigned char x, unsigned char y, 
						unsigned char w, unsigned char h, unsigned char key_down, unsigned char key_up)
{
 21a:	bf 92       	push	r11
 21c:	cf 92       	push	r12
 21e:	df 92       	push	r13
 220:	ef 92       	push	r14
 222:	ff 92       	push	r15
 224:	0f 93       	push	r16
 226:	1f 93       	push	r17
 228:	18 2f       	mov	r17, r24
 22a:	f6 2e       	mov	r15, r22
 22c:	d4 2e       	mov	r13, r20
 22e:	b2 2e       	mov	r11, r18
	Command_Display(Touch_Region);
 230:	84 e8       	ldi	r24, 0x84	; 132
 232:	0e 94 4d 00 	call	0x9a	; 0x9a <Command_Display>
	rprintfu08(RegNum);
 236:	81 2f       	mov	r24, r17
 238:	0e 94 42 01 	call	0x284	; 0x284 <rprintfu08>
	rprintfu08(x);
 23c:	8f 2d       	mov	r24, r15
 23e:	0e 94 42 01 	call	0x284	; 0x284 <rprintfu08>
	rprintfu08(y);
 242:	8d 2d       	mov	r24, r13
 244:	0e 94 42 01 	call	0x284	; 0x284 <rprintfu08>
	rprintfu08(w);
 248:	8b 2d       	mov	r24, r11
 24a:	0e 94 42 01 	call	0x284	; 0x284 <rprintfu08>
	rprintfu08(h);
 24e:	80 2f       	mov	r24, r16
 250:	0e 94 42 01 	call	0x284	; 0x284 <rprintfu08>
	rprintfu08(key_down);
 254:	8e 2d       	mov	r24, r14
 256:	0e 94 42 01 	call	0x284	; 0x284 <rprintfu08>
	rprintfu08(key_up);
 25a:	8c 2d       	mov	r24, r12
 25c:	0e 94 42 01 	call	0x284	; 0x284 <rprintfu08>
}
 260:	1f 91       	pop	r17
 262:	0f 91       	pop	r16
 264:	ff 90       	pop	r15
 266:	ef 90       	pop	r14
 268:	df 90       	pop	r13
 26a:	cf 90       	pop	r12
 26c:	bf 90       	pop	r11
 26e:	08 95       	ret

00000270 <Set_Touch_Mode>:
//********************************************************************************



void Set_Touch_Mode(unsigned char touch_mode)
{
 270:	1f 93       	push	r17
 272:	18 2f       	mov	r17, r24
	Command_Display(Touch_Mode);
 274:	87 e8       	ldi	r24, 0x87	; 135
 276:	0e 94 4d 00 	call	0x9a	; 0x9a <Command_Display>
	rprintfu08(touch_mode);
 27a:	81 2f       	mov	r24, r17
 27c:	0e 94 42 01 	call	0x284	; 0x284 <rprintfu08>
}
 280:	1f 91       	pop	r17
 282:	08 95       	ret

00000284 <rprintfu08>:
 284:	1f 93       	push	r17
 286:	18 2f       	mov	r17, r24
 288:	82 95       	swap	r24
 28a:	8f 70       	andi	r24, 0x0F	; 15
 28c:	0e 94 ba 01 	call	0x374	; 0x374 <rprintfu04>
 290:	81 2f       	mov	r24, r17
 292:	0e 94 ba 01 	call	0x374	; 0x374 <rprintfu04>
 296:	1f 91       	pop	r17
 298:	08 95       	ret

0000029a <rprintfu16>:
 29a:	1f 93       	push	r17
 29c:	18 2f       	mov	r17, r24
 29e:	89 2f       	mov	r24, r25
 2a0:	0e 94 42 01 	call	0x284	; 0x284 <rprintfu08>
 2a4:	81 2f       	mov	r24, r17
 2a6:	0e 94 42 01 	call	0x284	; 0x284 <rprintfu08>
 2aa:	1f 91       	pop	r17
 2ac:	08 95       	ret

000002ae <rprintfu32>:
 2ae:	ef 92       	push	r14
 2b0:	ff 92       	push	r15
 2b2:	0f 93       	push	r16
 2b4:	1f 93       	push	r17
 2b6:	7b 01       	movw	r14, r22
 2b8:	8c 01       	movw	r16, r24
 2ba:	c8 01       	movw	r24, r16
 2bc:	aa 27       	eor	r26, r26
 2be:	bb 27       	eor	r27, r27
 2c0:	0e 94 4d 01 	call	0x29a	; 0x29a <rprintfu16>
 2c4:	c7 01       	movw	r24, r14
 2c6:	0e 94 4d 01 	call	0x29a	; 0x29a <rprintfu16>
 2ca:	1f 91       	pop	r17
 2cc:	0f 91       	pop	r16
 2ce:	ff 90       	pop	r15
 2d0:	ef 90       	pop	r14
 2d2:	08 95       	ret

000002d4 <rprintfIgnore>:
 2d4:	08 95       	ret

000002d6 <rprintfInit>:
 2d6:	20 91 68 00 	lds	r18, 0x0068
 2da:	30 91 69 00 	lds	r19, 0x0069
 2de:	90 93 69 00 	sts	0x0069, r25
 2e2:	80 93 68 00 	sts	0x0068, r24
 2e6:	c9 01       	movw	r24, r18
 2e8:	08 95       	ret

000002ea <rprintfChar>:
 2ea:	1f 93       	push	r17
 2ec:	18 2f       	mov	r17, r24
 2ee:	8a 30       	cpi	r24, 0x0A	; 10
 2f0:	31 f4       	brne	.+12     	; 0x2fe <rprintfChar+0x14>
 2f2:	e0 91 68 00 	lds	r30, 0x0068
 2f6:	f0 91 69 00 	lds	r31, 0x0069
 2fa:	8d e0       	ldi	r24, 0x0D	; 13
 2fc:	09 95       	icall
 2fe:	e0 91 68 00 	lds	r30, 0x0068
 302:	f0 91 69 00 	lds	r31, 0x0069
 306:	81 2f       	mov	r24, r17
 308:	09 95       	icall
 30a:	1f 91       	pop	r17
 30c:	08 95       	ret

0000030e <rprintfCharN>:
 30e:	1f 93       	push	r17
 310:	cf 93       	push	r28
 312:	df 93       	push	r29
 314:	18 2f       	mov	r17, r24
 316:	eb 01       	movw	r28, r22
 318:	04 c0       	rjmp	.+8      	; 0x322 <rprintfCharN+0x14>
 31a:	81 2f       	mov	r24, r17
 31c:	0e 94 75 01 	call	0x2ea	; 0x2ea <rprintfChar>
 320:	21 97       	sbiw	r28, 0x01	; 1
 322:	20 97       	sbiw	r28, 0x00	; 0
 324:	d1 f7       	brne	.-12     	; 0x31a <rprintfCharN+0xc>
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	1f 91       	pop	r17
 32c:	08 95       	ret

0000032e <rprintfStr>:
 32e:	cf 93       	push	r28
 330:	df 93       	push	r29
 332:	ec 01       	movw	r28, r24
 334:	00 97       	sbiw	r24, 0x00	; 0
 336:	21 f4       	brne	.+8      	; 0x340 <rprintfStr+0x12>
 338:	06 c0       	rjmp	.+12     	; 0x346 <rprintfStr+0x18>
 33a:	21 96       	adiw	r28, 0x01	; 1
 33c:	0e 94 75 01 	call	0x2ea	; 0x2ea <rprintfChar>
 340:	88 81       	ld	r24, Y
 342:	88 23       	and	r24, r24
 344:	d1 f7       	brne	.-12     	; 0x33a <rprintfStr+0xc>
 346:	df 91       	pop	r29
 348:	cf 91       	pop	r28
 34a:	08 95       	ret

0000034c <rprintfProgStr>:
 34c:	cf 93       	push	r28
 34e:	df 93       	push	r29
 350:	ec 01       	movw	r28, r24
 352:	00 97       	sbiw	r24, 0x00	; 0
 354:	19 f4       	brne	.+6      	; 0x35c <rprintfProgStr+0x10>
 356:	07 c0       	rjmp	.+14     	; 0x366 <rprintfProgStr+0x1a>
 358:	0e 94 75 01 	call	0x2ea	; 0x2ea <rprintfChar>
 35c:	fe 01       	movw	r30, r28
 35e:	21 96       	adiw	r28, 0x01	; 1
 360:	84 91       	lpm	r24, Z+
 362:	88 23       	and	r24, r24
 364:	c9 f7       	brne	.-14     	; 0x358 <rprintfProgStr+0xc>
 366:	df 91       	pop	r29
 368:	cf 91       	pop	r28
 36a:	08 95       	ret

0000036c <rprintfCRLF>:
 36c:	8a e0       	ldi	r24, 0x0A	; 10
 36e:	0e 94 75 01 	call	0x2ea	; 0x2ea <rprintfChar>
 372:	08 95       	ret

00000374 <rprintfu04>:
 374:	e8 2f       	mov	r30, r24
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	ef 70       	andi	r30, 0x0F	; 15
 37a:	f0 70       	andi	r31, 0x00	; 0
 37c:	ec 5a       	subi	r30, 0xAC	; 172
 37e:	ff 4f       	sbci	r31, 0xFF	; 255
 380:	e4 91       	lpm	r30, Z+
 382:	8e 2f       	mov	r24, r30
 384:	0e 94 75 01 	call	0x2ea	; 0x2ea <rprintfChar>
 388:	08 95       	ret

0000038a <exit>:
 38a:	f8 94       	cli
 38c:	0c 94 c8 01 	jmp	0x390	; 0x390 <_exit>

00000390 <_exit>:
 390:	f8 94       	cli

00000392 <__stop_program>:
 392:	ff cf       	rjmp	.-2      	; 0x392 <__stop_program>
