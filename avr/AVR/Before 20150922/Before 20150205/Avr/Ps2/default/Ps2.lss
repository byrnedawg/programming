
Ps2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ce  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000422  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000034  00000000  00000000  00000442  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000501  00000000  00000000  00000476  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000168  00000000  00000000  00000977  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000058c  00000000  00000000  00000adf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  0000106c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000013d  00000000  00000000  000010ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000180  00000000  00000000  000011e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000120  00000000  00000000  00001369  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 91 00 	call	0x122	; 0x122 <main>
  64:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <gameByte>:

// PSx controller communication function.
// send a byte on the command line and receive one on the data line.
// needs Attention pin to have gone low before called to activate controller.
int gameByte(short int command)
{
  6c:	bc 01       	movw	r22, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  6e:	82 e0       	ldi	r24, 0x02	; 2
  70:	8a 95       	dec	r24
  72:	f1 f7       	brne	.-4      	; 0x70 <gameByte+0x4>
  74:	20 e0       	ldi	r18, 0x00	; 0
  76:	30 e0       	ldi	r19, 0x00	; 0
  78:	40 e0       	ldi	r20, 0x00	; 0
  7a:	50 e0       	ldi	r21, 0x00	; 0
        {
                if(command & _BV(i)) sbi(PORTD, PScommand);       // bit bang "command" out on PScommand wire.
                else cbi(PORTD, PScommand);
                cbi(PORTD, PSclock);                             // CLOCK LOW
                _delay_us(1);                                              // wait for output to stabilise
                if((PIND & _BV(PSdata))) sbi(data, i);  // read PSdata pin and store
  7c:	a2 e0       	ldi	r26, 0x02	; 2
  7e:	e1 e0       	ldi	r30, 0x01	; 1
  80:	f0 e0       	ldi	r31, 0x00	; 0
        short int i ;
        _delay_us(1);
        short int data = 0x00;                             // clear data variable to save setting low bits later.
        for(i=0;i<8;i++)
        {
                if(command & _BV(i)) sbi(PORTD, PScommand);       // bit bang "command" out on PScommand wire.
  82:	cb 01       	movw	r24, r22
  84:	02 2e       	mov	r0, r18
  86:	02 c0       	rjmp	.+4      	; 0x8c <gameByte+0x20>
  88:	95 95       	asr	r25
  8a:	87 95       	ror	r24
  8c:	0a 94       	dec	r0
  8e:	e2 f7       	brpl	.-8      	; 0x88 <gameByte+0x1c>
  90:	80 ff       	sbrs	r24, 0
  92:	02 c0       	rjmp	.+4      	; 0x98 <gameByte+0x2c>
  94:	95 9a       	sbi	0x12, 5	; 18
  96:	01 c0       	rjmp	.+2      	; 0x9a <gameByte+0x2e>
                else cbi(PORTD, PScommand);
  98:	95 98       	cbi	0x12, 5	; 18
                cbi(PORTD, PSclock);                             // CLOCK LOW
  9a:	92 98       	cbi	0x12, 2	; 18
  9c:	8a 2f       	mov	r24, r26
  9e:	8a 95       	dec	r24
  a0:	f1 f7       	brne	.-4      	; 0x9e <gameByte+0x32>
                _delay_us(1);                                              // wait for output to stabilise
                if((PIND & _BV(PSdata))) sbi(data, i);  // read PSdata pin and store
  a2:	83 9b       	sbis	0x10, 3	; 16
  a4:	09 c0       	rjmp	.+18     	; 0xb8 <gameByte+0x4c>
  a6:	cf 01       	movw	r24, r30
  a8:	02 2e       	mov	r0, r18
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <gameByte+0x44>
  ac:	88 0f       	add	r24, r24
  ae:	99 1f       	adc	r25, r25
  b0:	0a 94       	dec	r0
  b2:	e2 f7       	brpl	.-8      	; 0xac <gameByte+0x40>
  b4:	48 2b       	or	r20, r24
  b6:	59 2b       	or	r21, r25
                //else cbi(data, i);
                sbi(PORTD, PSclock);                             // CLOCK HIGH
  b8:	92 9a       	sbi	0x12, 2	; 18
int gameByte(short int command)
{
        short int i ;
        _delay_us(1);
        short int data = 0x00;                             // clear data variable to save setting low bits later.
        for(i=0;i<8;i++)
  ba:	2f 5f       	subi	r18, 0xFF	; 255
  bc:	3f 4f       	sbci	r19, 0xFF	; 255
  be:	28 30       	cpi	r18, 0x08	; 8
  c0:	31 05       	cpc	r19, r1
  c2:	f9 f6       	brne	.-66     	; 0x82 <gameByte+0x16>
                _delay_us(1);                                              // wait for output to stabilise
                if((PIND & _BV(PSdata))) sbi(data, i);  // read PSdata pin and store
                //else cbi(data, i);
                sbi(PORTD, PSclock);                             // CLOCK HIGH
        }
        sbi(PORTD, PScommand);
  c4:	95 9a       	sbi	0x12, 5	; 18
  c6:	85 e3       	ldi	r24, 0x35	; 53
  c8:	8a 95       	dec	r24
  ca:	f1 f7       	brne	.-4      	; 0xc8 <gameByte+0x5c>

        _delay_us(20);                                                   // wait for ACK to pass.

        return(data);
}
  cc:	ca 01       	movw	r24, r20
  ce:	08 95       	ret

000000d0 <display>:

// put 1 byte on the 8 LEDs. obviously you need to change the output pins to 
// match your board.
void display(short int LEDs)
{
        if(LEDs & _BV(0)) cbi(PORTC, PC0);
  d0:	80 ff       	sbrs	r24, 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <display+0x8>
  d4:	a8 98       	cbi	0x15, 0	; 21
  d6:	01 c0       	rjmp	.+2      	; 0xda <display+0xa>
        else sbi(PORTC, PC0);
  d8:	a8 9a       	sbi	0x15, 0	; 21

        if(LEDs & _BV(1)) cbi(PORTC, PC1);
  da:	81 ff       	sbrs	r24, 1
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <display+0x12>
  de:	a9 98       	cbi	0x15, 1	; 21
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <display+0x14>
        else sbi(PORTC, PC1);
  e2:	a9 9a       	sbi	0x15, 1	; 21

        if(LEDs & _BV(2)) cbi(PORTC, PC2);
  e4:	82 ff       	sbrs	r24, 2
  e6:	02 c0       	rjmp	.+4      	; 0xec <display+0x1c>
  e8:	aa 98       	cbi	0x15, 2	; 21
  ea:	01 c0       	rjmp	.+2      	; 0xee <display+0x1e>
        else sbi(PORTC, PC2);
  ec:	aa 9a       	sbi	0x15, 2	; 21

        if(LEDs & _BV(3)) cbi(PORTC, PC3);
  ee:	83 ff       	sbrs	r24, 3
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <display+0x26>
  f2:	ab 98       	cbi	0x15, 3	; 21
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <display+0x28>
        else sbi(PORTC, PC3);
  f6:	ab 9a       	sbi	0x15, 3	; 21

        if(LEDs & _BV(4)) cbi(PORTC, PC4);
  f8:	84 ff       	sbrs	r24, 4
  fa:	02 c0       	rjmp	.+4      	; 0x100 <display+0x30>
  fc:	ac 98       	cbi	0x15, 4	; 21
  fe:	01 c0       	rjmp	.+2      	; 0x102 <display+0x32>
        else sbi(PORTC, PC4);
 100:	ac 9a       	sbi	0x15, 4	; 21

        if(LEDs & _BV(5)) cbi(PORTC, PC5);
 102:	85 ff       	sbrs	r24, 5
 104:	02 c0       	rjmp	.+4      	; 0x10a <display+0x3a>
 106:	ad 98       	cbi	0x15, 5	; 21
 108:	01 c0       	rjmp	.+2      	; 0x10c <display+0x3c>
        else sbi(PORTC, PC5);
 10a:	ad 9a       	sbi	0x15, 5	; 21

        if(LEDs & _BV(6)) cbi(PORTC, PC6);
 10c:	86 ff       	sbrs	r24, 6
 10e:	02 c0       	rjmp	.+4      	; 0x114 <display+0x44>
 110:	ae 98       	cbi	0x15, 6	; 21
 112:	01 c0       	rjmp	.+2      	; 0x116 <display+0x46>
        else sbi(PORTC, PC6);
 114:	ae 9a       	sbi	0x15, 6	; 21

        if(LEDs & _BV(7)) cbi(PORTC, PC7);
 116:	87 ff       	sbrs	r24, 7
 118:	02 c0       	rjmp	.+4      	; 0x11e <display+0x4e>
 11a:	af 98       	cbi	0x15, 7	; 21
 11c:	08 95       	ret
        else sbi(PORTC, PC7);
 11e:	af 9a       	sbi	0x15, 7	; 21
 120:	08 95       	ret

00000122 <main>:

        return;
}

 int main(void)
{
 122:	5f 92       	push	r5
 124:	6f 92       	push	r6
 126:	7f 92       	push	r7
 128:	8f 92       	push	r8
 12a:	9f 92       	push	r9
 12c:	af 92       	push	r10
 12e:	bf 92       	push	r11
 130:	cf 92       	push	r12
 132:	df 92       	push	r13
 134:	ef 92       	push	r14
 136:	ff 92       	push	r15
 138:	0f 93       	push	r16
 13a:	1f 93       	push	r17
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
   // set the baud rate of the UART   
   // (needed for transmitting over radio module).
   //uartSetUp(2400);

   // set port pins to output for status leds:
   sbi(DDRC, PC0);                 // led.
 140:	a0 9a       	sbi	0x14, 0	; 20
   sbi(DDRC, PC1);                 // led
 142:	a1 9a       	sbi	0x14, 1	; 20
   sbi(DDRC, PC2);                 // led
 144:	a2 9a       	sbi	0x14, 2	; 20
   sbi(DDRC, PC3);                 // led
 146:	a3 9a       	sbi	0x14, 3	; 20
   sbi(DDRC, PC4);                 // led
 148:	a4 9a       	sbi	0x14, 4	; 20
   sbi(DDRC, PC5);                 // led
 14a:	a5 9a       	sbi	0x14, 5	; 20
   sbi(DDRC, PC6);                 // led
 14c:	a6 9a       	sbi	0x14, 6	; 20
   sbi(DDRC, PC7);                 // led
 14e:	a7 9a       	sbi	0x14, 7	; 20

   // PSx controller I/O pin setup:
   sbi(DDRD, PD2);                 // clock. output. (blue)
 150:	8a 9a       	sbi	0x11, 2	; 17

   cbi(DDRD, PD3);                 // data. input. (brown)
 152:	8b 98       	cbi	0x11, 3	; 17
   sbi(PORTD, PD3);               //    enable pullup resistor
 154:	93 9a       	sbi	0x12, 3	; 18

   cbi(DDRD, PD4);                 // acknolage. input. (green)
 156:	8c 98       	cbi	0x11, 4	; 17
   sbi(PORTD, PD4);               //    enable pullup resistor
 158:	94 9a       	sbi	0x12, 4	; 18

   sbi(DDRD, PD5);                 // command. output. (orange)
 15a:	8d 9a       	sbi	0x11, 5	; 17

   sbi(DDRD, PD6);                 // attention. output. (yellow)
 15c:	8e 9a       	sbi	0x11, 6	; 17


   // enable interupts
   sei();
 15e:	78 94       	sei
 160:	10 e0       	ldi	r17, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 162:	90 ed       	ldi	r25, 0xD0	; 208
 164:	e9 2e       	mov	r14, r25
 166:	97 e0       	ldi	r25, 0x07	; 7
 168:	f9 2e       	mov	r15, r25
   // if everything is working correctly this should happen on the first pass of
   // this loop but occasionally errors occur and a 2nd or 3rd itteration happen.
   unsigned char chk_ana = 0, cnt = 0;
   while(chk_ana != 0x73){
       // put controller in config mode
       sbi(PORTD, PScommand);
 16a:	c0 e2       	ldi	r28, 0x20	; 32
 16c:	de e4       	ldi	r29, 0x4E	; 78
 16e:	95 9a       	sbi	0x12, 5	; 18
       sbi(PORTD, PSclock);
 170:	92 9a       	sbi	0x12, 2	; 18
       cbi(PORTD, PSattention);
 172:	96 98       	cbi	0x12, 6	; 18

       gameByte(0x01);
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 36 00 	call	0x6c	; 0x6c <gameByte>
       gameByte(0x43);
 17c:	83 e4       	ldi	r24, 0x43	; 67
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 36 00 	call	0x6c	; 0x6c <gameByte>
       gameByte(0x00);
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 36 00 	call	0x6c	; 0x6c <gameByte>
       gameByte(0x01);
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 36 00 	call	0x6c	; 0x6c <gameByte>
       gameByte(0x00);
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 36 00 	call	0x6c	; 0x6c <gameByte>

       sbi(PORTD, PScommand);
 19c:	95 9a       	sbi	0x12, 5	; 18
 19e:	c7 01       	movw	r24, r14
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <main+0x7e>
       _delay_ms(1);
       sbi(PORTD, PSattention);
 1a4:	96 9a       	sbi	0x12, 6	; 18
 1a6:	ce 01       	movw	r24, r28
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <main+0x86>

       _delay_ms(10);

       // put controller in analouge mode
       sbi(PORTD, PScommand);
 1ac:	95 9a       	sbi	0x12, 5	; 18
       sbi(PORTD, PSclock);
 1ae:	92 9a       	sbi	0x12, 2	; 18
       cbi(PORTD, PSattention);
 1b0:	96 98       	cbi	0x12, 6	; 18

       gameByte(0x01);
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 36 00 	call	0x6c	; 0x6c <gameByte>
       gameByte(0x44);
 1ba:	84 e4       	ldi	r24, 0x44	; 68
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 36 00 	call	0x6c	; 0x6c <gameByte>
       gameByte(0x00);
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 36 00 	call	0x6c	; 0x6c <gameByte>
       gameByte(0x01);
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 36 00 	call	0x6c	; 0x6c <gameByte>
       gameByte(0x03);
 1d2:	83 e0       	ldi	r24, 0x03	; 3
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 36 00 	call	0x6c	; 0x6c <gameByte>
       gameByte(0x00);
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 36 00 	call	0x6c	; 0x6c <gameByte>
       gameByte(0x00);
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 36 00 	call	0x6c	; 0x6c <gameByte>
       gameByte(0x00);
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 36 00 	call	0x6c	; 0x6c <gameByte>
       gameByte(0x00);
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 36 00 	call	0x6c	; 0x6c <gameByte>

       sbi(PORTD, PScommand);
 1fa:	95 9a       	sbi	0x12, 5	; 18
 1fc:	c7 01       	movw	r24, r14
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <main+0xdc>
       _delay_ms(1);
       sbi(PORTD, PSattention);
 202:	96 9a       	sbi	0x12, 6	; 18
 204:	ce 01       	movw	r24, r28
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <main+0xe4>

       _delay_ms(10);

       // exit config mode
       sbi(PORTD, PScommand);
 20a:	95 9a       	sbi	0x12, 5	; 18
       sbi(PORTD, PSclock);
 20c:	92 9a       	sbi	0x12, 2	; 18
       cbi(PORTD, PSattention);
 20e:	96 98       	cbi	0x12, 6	; 18

       gameByte(0x01);
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 36 00 	call	0x6c	; 0x6c <gameByte>
       gameByte(0x43);
 218:	83 e4       	ldi	r24, 0x43	; 67
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 36 00 	call	0x6c	; 0x6c <gameByte>
       gameByte(0x00);
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 36 00 	call	0x6c	; 0x6c <gameByte>
       gameByte(0x00);
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 36 00 	call	0x6c	; 0x6c <gameByte>
       gameByte(0x5A);
 230:	8a e5       	ldi	r24, 0x5A	; 90
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 36 00 	call	0x6c	; 0x6c <gameByte>
       gameByte(0x5A);
 238:	8a e5       	ldi	r24, 0x5A	; 90
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 36 00 	call	0x6c	; 0x6c <gameByte>
       gameByte(0x5A);
 240:	8a e5       	ldi	r24, 0x5A	; 90
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 36 00 	call	0x6c	; 0x6c <gameByte>
       gameByte(0x5A);
 248:	8a e5       	ldi	r24, 0x5A	; 90
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 36 00 	call	0x6c	; 0x6c <gameByte>
       gameByte(0x5A);
 250:	8a e5       	ldi	r24, 0x5A	; 90
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 36 00 	call	0x6c	; 0x6c <gameByte>

       sbi(PORTD, PScommand);
 258:	95 9a       	sbi	0x12, 5	; 18
 25a:	c7 01       	movw	r24, r14
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <main+0x13a>
       _delay_ms(1);
       sbi(PORTD, PSattention);
 260:	96 9a       	sbi	0x12, 6	; 18
 262:	ce 01       	movw	r24, r28
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <main+0x142>

       _delay_ms(10);

       // poll controller and check in analouge mode.
       sbi(PORTD, PScommand);
 268:	95 9a       	sbi	0x12, 5	; 18
       sbi(PORTD, PSclock);
 26a:	92 9a       	sbi	0x12, 2	; 18
       cbi(PORTD, PSattention);
 26c:	96 98       	cbi	0x12, 6	; 18

       gameByte(0x01);
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 36 00 	call	0x6c	; 0x6c <gameByte>
       chk_ana = gameByte(0x42);            // the 2nd byte to be returned from the controller should = 0x73 for "red" analouge controller.
 276:	82 e4       	ldi	r24, 0x42	; 66
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	0e 94 36 00 	call	0x6c	; 0x6c <gameByte>
 27e:	08 2f       	mov	r16, r24
       gameByte(0x00);
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 36 00 	call	0x6c	; 0x6c <gameByte>
       gameByte(0x00);
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 36 00 	call	0x6c	; 0x6c <gameByte>
       gameByte(0x00);
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	0e 94 36 00 	call	0x6c	; 0x6c <gameByte>
       gameByte(0x00);
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 36 00 	call	0x6c	; 0x6c <gameByte>
       gameByte(0x00);
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 36 00 	call	0x6c	; 0x6c <gameByte>
       gameByte(0x00);
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 36 00 	call	0x6c	; 0x6c <gameByte>
       gameByte(0x00);
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	0e 94 36 00 	call	0x6c	; 0x6c <gameByte>

       sbi(PORTD, PScommand);
 2b8:	95 9a       	sbi	0x12, 5	; 18
 2ba:	c7 01       	movw	r24, r14
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <main+0x19a>
       _delay_ms(1);
       sbi(PORTD, PSattention);
 2c0:	96 9a       	sbi	0x12, 6	; 18
 2c2:	ce 01       	movw	r24, r28
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <main+0x1a2>
       _delay_ms(10);

  // keep increasing counter to be dispalyed untill PSx controller confirms it's in analouge mode.
       display(cnt++);                    
 2c8:	81 2f       	mov	r24, r17
 2ca:	1f 5f       	subi	r17, 0xFF	; 255
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	0e 94 68 00 	call	0xd0	; 0xd0 <display>
       if (cnt > 254){ cnt=0;}
 2d2:	1f 3f       	cpi	r17, 0xFF	; 255
 2d4:	09 f4       	brne	.+2      	; 0x2d8 <main+0x1b6>
 2d6:	10 e0       	ldi	r17, 0x00	; 0
   // (PS2 controller responds with 0x73 when in analouge mode.)
   // the status LEDs will continue to count upwards untill a controller is found.
   // if everything is working correctly this should happen on the first pass of
   // this loop but occasionally errors occur and a 2nd or 3rd itteration happen.
   unsigned char chk_ana = 0, cnt = 0;
   while(chk_ana != 0x73){
 2d8:	03 37       	cpi	r16, 0x73	; 115
 2da:	09 f0       	breq	.+2      	; 0x2de <main+0x1bc>
 2dc:	48 cf       	rjmp	.-368    	; 0x16e <main+0x4c>
 2de:	c0 e0       	ldi	r28, 0x00	; 0
 2e0:	d0 e0       	ldi	r29, 0x00	; 0
 2e2:	00 e0       	ldi	r16, 0x00	; 0
 2e4:	10 e0       	ldi	r17, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2e6:	82 e0       	ldi	r24, 0x02	; 2
 2e8:	58 2e       	mov	r5, r24
   i =0;
   debounceSelect = 0;
  // main program loop:
   while (1){

        sbi(PORTD, PScommand);                          // start communication with PSx controller
 2ea:	95 9a       	sbi	0x12, 5	; 18
        sbi(PORTD, PSclock);
 2ec:	92 9a       	sbi	0x12, 2	; 18
        cbi(PORTD, PSattention);
 2ee:	96 98       	cbi	0x12, 6	; 18

        gameByte(0x01);                                       // bite 0. header.
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	0e 94 36 00 	call	0x6c	; 0x6c <gameByte>
        temp = gameByte(0x42);                          // bite 1. header. (should possibly put test on this byte to detect unplugging of controller.)
 2f8:	82 e4       	ldi	r24, 0x42	; 66
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	0e 94 36 00 	call	0x6c	; 0x6c <gameByte>
        gameByte(0x00);                                       // bite 2. header.
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 36 00 	call	0x6c	; 0x6c <gameByte>

        data0 = gameByte(0x00);                         // bite 3. first data bite.
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 36 00 	call	0x6c	; 0x6c <gameByte>
 310:	78 2e       	mov	r7, r24
 312:	69 2e       	mov	r6, r25
        data1 = gameByte(0x00);                         // bite 4.
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	0e 94 36 00 	call	0x6c	; 0x6c <gameByte>
 31c:	4c 01       	movw	r8, r24
        data2 = gameByte(0x00);                         // bite 5.
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 36 00 	call	0x6c	; 0x6c <gameByte>
 326:	6c 01       	movw	r12, r24
        data3 = gameByte(0x00);                         // bite 6.
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 36 00 	call	0x6c	; 0x6c <gameByte>
 330:	5c 01       	movw	r10, r24
        data4 = gameByte(0x00);                         // bite 7.
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 36 00 	call	0x6c	; 0x6c <gameByte>
 33a:	7c 01       	movw	r14, r24
        data5 = gameByte(0x00);                         // bite 8.
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	0e 94 36 00 	call	0x6c	; 0x6c <gameByte>
 344:	25 2d       	mov	r18, r5
 346:	2a 95       	dec	r18
 348:	f1 f7       	brne	.-4      	; 0x346 <main+0x224>

        _delay_us(1);
        sbi(PORTD, PScommand);                      // close communication with PSx controller
 34a:	95 9a       	sbi	0x12, 5	; 18
 34c:	25 2d       	mov	r18, r5
 34e:	2a 95       	dec	r18
 350:	f1 f7       	brne	.-4      	; 0x34e <main+0x22c>
        _delay_us(1);
        sbi(PORTD, PSattention);                        // all done.
 352:	96 9a       	sbi	0x12, 6	; 18



        if(!(data0 & _BV(0)) && !debounceSelect)        // capture one unique press of the "select" button
 354:	70 fc       	sbrc	r7, 0
 356:	06 c0       	rjmp	.+12     	; 0x364 <main+0x242>
 358:	01 15       	cp	r16, r1
 35a:	11 05       	cpc	r17, r1
 35c:	89 f4       	brne	.+34     	; 0x380 <main+0x25e>
 35e:	01 e0       	ldi	r16, 0x01	; 1
 360:	10 e0       	ldi	r17, 0x00	; 0
 362:	0e c0       	rjmp	.+28     	; 0x380 <main+0x25e>
        {
                debounceSelect = 1;
        }
        else if ((data0 & _BV(0)) && debounceSelect)
 364:	01 15       	cp	r16, r1
 366:	11 05       	cpc	r17, r1
 368:	59 f0       	breq	.+22     	; 0x380 <main+0x25e>
        {
                if(i++ >= 5) i=0;
 36a:	c5 30       	cpi	r28, 0x05	; 5
 36c:	d1 05       	cpc	r29, r1
 36e:	2c f0       	brlt	.+10     	; 0x37a <main+0x258>
 370:	c0 e0       	ldi	r28, 0x00	; 0
 372:	d0 e0       	ldi	r29, 0x00	; 0
 374:	00 e0       	ldi	r16, 0x00	; 0
 376:	10 e0       	ldi	r17, 0x00	; 0
 378:	1b c0       	rjmp	.+54     	; 0x3b0 <main+0x28e>
 37a:	21 96       	adiw	r28, 0x01	; 1
 37c:	00 e0       	ldi	r16, 0x00	; 0
 37e:	10 e0       	ldi	r17, 0x00	; 0
        }


        // this switch decides which data register to show on status LEDs depending on how many times
        // the "select" button on the PS2 controller has been pressed.
        switch(i)
 380:	c2 30       	cpi	r28, 0x02	; 2
 382:	d1 05       	cpc	r29, r1
 384:	d1 f0       	breq	.+52     	; 0x3ba <main+0x298>
 386:	c3 30       	cpi	r28, 0x03	; 3
 388:	d1 05       	cpc	r29, r1
 38a:	3c f4       	brge	.+14     	; 0x39a <main+0x278>
 38c:	20 97       	sbiw	r28, 0x00	; 0
 38e:	81 f0       	breq	.+32     	; 0x3b0 <main+0x28e>
 390:	c1 30       	cpi	r28, 0x01	; 1
 392:	d1 05       	cpc	r29, r1
 394:	09 f0       	breq	.+2      	; 0x398 <main+0x276>
 396:	a9 cf       	rjmp	.-174    	; 0x2ea <main+0x1c8>
 398:	0e c0       	rjmp	.+28     	; 0x3b6 <main+0x294>
 39a:	c4 30       	cpi	r28, 0x04	; 4
 39c:	d1 05       	cpc	r29, r1
 39e:	89 f0       	breq	.+34     	; 0x3c2 <main+0x2a0>
 3a0:	c4 30       	cpi	r28, 0x04	; 4
 3a2:	d1 05       	cpc	r29, r1
 3a4:	64 f0       	brlt	.+24     	; 0x3be <main+0x29c>
 3a6:	c5 30       	cpi	r28, 0x05	; 5
 3a8:	d1 05       	cpc	r29, r1
 3aa:	09 f0       	breq	.+2      	; 0x3ae <main+0x28c>
 3ac:	9e cf       	rjmp	.-196    	; 0x2ea <main+0x1c8>
 3ae:	0a c0       	rjmp	.+20     	; 0x3c4 <main+0x2a2>
        {
                case 0:
                        display(data0);
 3b0:	87 2d       	mov	r24, r7
 3b2:	96 2d       	mov	r25, r6
 3b4:	07 c0       	rjmp	.+14     	; 0x3c4 <main+0x2a2>
                        break;
                case 1:
                        display(data1);
 3b6:	c4 01       	movw	r24, r8
 3b8:	05 c0       	rjmp	.+10     	; 0x3c4 <main+0x2a2>
                        break;
                case 2:
                        display(data2);
 3ba:	c6 01       	movw	r24, r12
 3bc:	03 c0       	rjmp	.+6      	; 0x3c4 <main+0x2a2>
                        break;
                case 3:
                        display(data3);
 3be:	c5 01       	movw	r24, r10
 3c0:	01 c0       	rjmp	.+2      	; 0x3c4 <main+0x2a2>
                        break;
                case 4:
                        display(data4);
 3c2:	c7 01       	movw	r24, r14
                        break;
                case 5:
                        display(data5);
 3c4:	0e 94 68 00 	call	0xd0	; 0xd0 <display>
 3c8:	90 cf       	rjmp	.-224    	; 0x2ea <main+0x1c8>

000003ca <_exit>:
 3ca:	f8 94       	cli

000003cc <__stop_program>:
 3cc:	ff cf       	rjmp	.-2      	; 0x3cc <__stop_program>
