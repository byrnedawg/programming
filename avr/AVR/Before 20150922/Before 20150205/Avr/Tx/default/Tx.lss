
Tx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000272  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000042  00800060  00800060  000002e6  2**0
                  ALLOC
  2 .debug_aranges 00000040  00000000  00000000  000002e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000ce  00000000  00000000  00000326  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000383  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000022f  00000000  00000000  00000777  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003b0  00000000  00000000  000009a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  00000d58  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000103  00000000  00000000  00000de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000c4  00000000  00000000  00000eeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00000faf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_13>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 3a       	cpi	r26, 0xA2	; 162
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 37 01 	jmp	0x26e	; 0x26e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include <util/delay.h>

#include "usart.h"

void main()
{
  7c:	1f 93       	push	r17
  7e:	cf 93       	push	r28
  80:	df 93       	push	r29
	//Initialize the USART with Baud rate = 2400bps 
	USARTInit(103);// 4mhz 103 8mhz 207
  82:	87 e6       	ldi	r24, 0x67	; 103
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	0e 94 6a 00 	call	0xd4	; 0xd4 <USARTInit>

	//Enable Internal Pullups on PORTC
	PORTC=0xFF;
  8a:	8f ef       	ldi	r24, 0xFF	; 255
  8c:	85 bb       	out	0x15, r24	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  8e:	c0 e0       	ldi	r28, 0x00	; 0
  90:	d0 e0       	ldi	r29, 0x00	; 0
	*/
	
	uint8_t data;
	while(1)
	{
		data=PINC;
  92:	13 b3       	in	r17, 0x13	; 19
		Packet Format is AA<data><data inverse>Z
		total Packet size if 5 bytes.
		*/

		//Stabilize the Tx Module By Sending JUNK data
		UWriteData('J');	//J for junk
  94:	8a e4       	ldi	r24, 0x4A	; 74
  96:	0e 94 fe 00 	call	0x1fc	; 0x1fc <UWriteData>

		//Send 'A'
		UWriteData('A');
  9a:	81 e4       	ldi	r24, 0x41	; 65
  9c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <UWriteData>

		//Send Another 'A'
		UWriteData('A');
  a0:	81 e4       	ldi	r24, 0x41	; 65
  a2:	0e 94 fe 00 	call	0x1fc	; 0x1fc <UWriteData>

		//Send the data;
		UWriteData(data);
  a6:	81 2f       	mov	r24, r17
  a8:	0e 94 fe 00 	call	0x1fc	; 0x1fc <UWriteData>

		//Send inverse of data for error detection purpose
		UWriteData(~data);
  ac:	81 2f       	mov	r24, r17
  ae:	80 95       	com	r24
  b0:	0e 94 fe 00 	call	0x1fc	; 0x1fc <UWriteData>

		//End the packet by writing 'Z'
		UWriteData('Z');
  b4:	8a e5       	ldi	r24, 0x5A	; 90
  b6:	0e 94 fe 00 	call	0x1fc	; 0x1fc <UWriteData>
  ba:	ce 01       	movw	r24, r28
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <main+0x40>
  c0:	ce 01       	movw	r24, r28
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <main+0x46>
  c6:	ce 01       	movw	r24, r28
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <main+0x4c>
  cc:	ce 01       	movw	r24, r28
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <main+0x52>
  d2:	df cf       	rjmp	.-66     	; 0x92 <main+0x16>

000000d4 <USARTInit>:


void USARTInit(uint16_t ubrrvalue)
{
	//Setup q
	UQFront=UQEnd=-1;
  d4:	2f ef       	ldi	r18, 0xFF	; 255
  d6:	20 93 61 00 	sts	0x0061, r18
  da:	20 91 61 00 	lds	r18, 0x0061
  de:	20 93 60 00 	sts	0x0060, r18

	//Set Baud rate
	UBRRH=(unsigned char)(ubrrvalue>>8);
  e2:	90 bd       	out	0x20, r25	; 32
	UBRRL=(unsigned char)ubrrvalue;
  e4:	89 b9       	out	0x09, r24	; 9
	1 StopBit
	char size 8

	*/

	UCSRC=(1<<URSEL)|(3<<UCSZ0);
  e6:	86 e8       	ldi	r24, 0x86	; 134
  e8:	80 bd       	out	0x20, r24	; 32

	Enable The recevier and transmitter

	*/

	UCSRB=(1<<RXCIE)|(1<<TXEN);
  ea:	88 e8       	ldi	r24, 0x88	; 136
  ec:	8a b9       	out	0x0a, r24	; 10
	sei();
  ee:	78 94       	sei

}
  f0:	08 95       	ret

000000f2 <__vector_13>:

//The USART ISR
ISR(USART_RXC_VECT)
{
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	2f 93       	push	r18
  fe:	3f 93       	push	r19
 100:	4f 93       	push	r20
 102:	8f 93       	push	r24
 104:	9f 93       	push	r25
 106:	ef 93       	push	r30
 108:	ff 93       	push	r31
	//Read the data
	char data=UDR;
 10a:	4c b1       	in	r20, 0x0c	; 12

	//Now add it to q

	if(((UQEnd==RECEIVE_BUFF_SIZE-1) && UQFront==0) || ((UQEnd+1)==UQFront))
 10c:	80 91 61 00 	lds	r24, 0x0061
 110:	8f 33       	cpi	r24, 0x3F	; 63
 112:	89 f1       	breq	.+98     	; 0x176 <__vector_13+0x84>
 114:	80 91 61 00 	lds	r24, 0x0061
 118:	20 91 60 00 	lds	r18, 0x0060
 11c:	99 27       	eor	r25, r25
 11e:	87 fd       	sbrc	r24, 7
 120:	90 95       	com	r25
 122:	01 96       	adiw	r24, 0x01	; 1
 124:	33 27       	eor	r19, r19
 126:	27 fd       	sbrc	r18, 7
 128:	30 95       	com	r19
 12a:	82 17       	cp	r24, r18
 12c:	93 07       	cpc	r25, r19
 12e:	39 f1       	breq	.+78     	; 0x17e <__vector_13+0x8c>
		UQFront++;
		if(UQFront==RECEIVE_BUFF_SIZE) UQFront=0;
	}
	

	if(UQEnd==RECEIVE_BUFF_SIZE-1)
 130:	80 91 61 00 	lds	r24, 0x0061
 134:	8f 33       	cpi	r24, 0x3F	; 63
 136:	91 f1       	breq	.+100    	; 0x19c <__vector_13+0xaa>
		UQEnd=0;
	else
		UQEnd++;
 138:	80 91 61 00 	lds	r24, 0x0061
 13c:	8f 5f       	subi	r24, 0xFF	; 255
 13e:	80 93 61 00 	sts	0x0061, r24


	URBuff[UQEnd]=data;
 142:	e0 91 61 00 	lds	r30, 0x0061
 146:	ff 27       	eor	r31, r31
 148:	e7 fd       	sbrc	r30, 7
 14a:	f0 95       	com	r31
 14c:	ee 59       	subi	r30, 0x9E	; 158
 14e:	ff 4f       	sbci	r31, 0xFF	; 255
 150:	40 83       	st	Z, r20

	if(UQFront==-1) UQFront=0;
 152:	80 91 60 00 	lds	r24, 0x0060
 156:	8f 3f       	cpi	r24, 0xFF	; 255
 158:	11 f4       	brne	.+4      	; 0x15e <__vector_13+0x6c>
 15a:	10 92 60 00 	sts	0x0060, r1

}
 15e:	ff 91       	pop	r31
 160:	ef 91       	pop	r30
 162:	9f 91       	pop	r25
 164:	8f 91       	pop	r24
 166:	4f 91       	pop	r20
 168:	3f 91       	pop	r19
 16a:	2f 91       	pop	r18
 16c:	0f 90       	pop	r0
 16e:	0f be       	out	0x3f, r0	; 63
 170:	0f 90       	pop	r0
 172:	1f 90       	pop	r1
 174:	18 95       	reti
	//Read the data
	char data=UDR;

	//Now add it to q

	if(((UQEnd==RECEIVE_BUFF_SIZE-1) && UQFront==0) || ((UQEnd+1)==UQFront))
 176:	80 91 60 00 	lds	r24, 0x0060
 17a:	88 23       	and	r24, r24
 17c:	59 f6       	brne	.-106    	; 0x114 <__vector_13+0x22>
	{
		//Q Full
		UQFront++;
 17e:	80 91 60 00 	lds	r24, 0x0060
 182:	8f 5f       	subi	r24, 0xFF	; 255
 184:	80 93 60 00 	sts	0x0060, r24
		if(UQFront==RECEIVE_BUFF_SIZE) UQFront=0;
 188:	80 91 60 00 	lds	r24, 0x0060
 18c:	80 34       	cpi	r24, 0x40	; 64
 18e:	81 f6       	brne	.-96     	; 0x130 <__vector_13+0x3e>
 190:	10 92 60 00 	sts	0x0060, r1
	}
	

	if(UQEnd==RECEIVE_BUFF_SIZE-1)
 194:	80 91 61 00 	lds	r24, 0x0061
 198:	8f 33       	cpi	r24, 0x3F	; 63
 19a:	71 f6       	brne	.-100    	; 0x138 <__vector_13+0x46>
		UQEnd=0;
 19c:	10 92 61 00 	sts	0x0061, r1
 1a0:	d0 cf       	rjmp	.-96     	; 0x142 <__vector_13+0x50>

000001a2 <UReadData>:
char UReadData()
{
	char data;
	
	//Check if q is empty
	if(UQFront==-1)
 1a2:	80 91 60 00 	lds	r24, 0x0060
 1a6:	8f 3f       	cpi	r24, 0xFF	; 255
 1a8:	c9 f0       	breq	.+50     	; 0x1dc <UReadData+0x3a>
		return 0;
	
	data=URBuff[UQFront];
 1aa:	e0 91 60 00 	lds	r30, 0x0060
 1ae:	ff 27       	eor	r31, r31
 1b0:	e7 fd       	sbrc	r30, 7
 1b2:	f0 95       	com	r31
 1b4:	ee 59       	subi	r30, 0x9E	; 158
 1b6:	ff 4f       	sbci	r31, 0xFF	; 255
 1b8:	e0 81       	ld	r30, Z
	
	if(UQFront==UQEnd)
 1ba:	90 91 60 00 	lds	r25, 0x0060
 1be:	80 91 61 00 	lds	r24, 0x0061
 1c2:	98 17       	cp	r25, r24
 1c4:	71 f0       	breq	.+28     	; 0x1e2 <UReadData+0x40>
	//So empty q
	UQFront=UQEnd=-1;
	}
	else
	{
		UQFront++;
 1c6:	80 91 60 00 	lds	r24, 0x0060
 1ca:	8f 5f       	subi	r24, 0xFF	; 255
 1cc:	80 93 60 00 	sts	0x0060, r24

		if(UQFront==RECEIVE_BUFF_SIZE)
 1d0:	80 91 60 00 	lds	r24, 0x0060
 1d4:	80 34       	cpi	r24, 0x40	; 64
 1d6:	71 f0       	breq	.+28     	; 0x1f4 <UReadData+0x52>
		UQFront=0;
	}

	return data;
}
 1d8:	8e 2f       	mov	r24, r30
 1da:	08 95       	ret
char UReadData()
{
	char data;
	
	//Check if q is empty
	if(UQFront==-1)
 1dc:	e0 e0       	ldi	r30, 0x00	; 0
		if(UQFront==RECEIVE_BUFF_SIZE)
		UQFront=0;
	}

	return data;
}
 1de:	8e 2f       	mov	r24, r30
 1e0:	08 95       	ret
	
	if(UQFront==UQEnd)
	{
	//If single data is left
	//So empty q
	UQFront=UQEnd=-1;
 1e2:	8f ef       	ldi	r24, 0xFF	; 255
 1e4:	80 93 61 00 	sts	0x0061, r24
 1e8:	80 91 61 00 	lds	r24, 0x0061
 1ec:	80 93 60 00 	sts	0x0060, r24
		if(UQFront==RECEIVE_BUFF_SIZE)
		UQFront=0;
	}

	return data;
}
 1f0:	8e 2f       	mov	r24, r30
 1f2:	08 95       	ret
	else
	{
		UQFront++;

		if(UQFront==RECEIVE_BUFF_SIZE)
		UQFront=0;
 1f4:	10 92 60 00 	sts	0x0060, r1
	}

	return data;
}
 1f8:	8e 2f       	mov	r24, r30
 1fa:	08 95       	ret

000001fc <UWriteData>:

void UWriteData(char data)
{
	//Wait For Transmitter to become ready
	while(!(UCSRA & (1<<UDRE)));
 1fc:	5d 9b       	sbis	0x0b, 5	; 11
 1fe:	fe cf       	rjmp	.-4      	; 0x1fc <UWriteData>

	//Now write
	UDR=data;
 200:	8c b9       	out	0x0c, r24	; 12
}
 202:	08 95       	ret

00000204 <UDataAvailable>:

uint8_t UDataAvailable()
{
	if(UQFront==-1) return 0;
 204:	80 91 60 00 	lds	r24, 0x0060
 208:	8f 3f       	cpi	r24, 0xFF	; 255
 20a:	e1 f0       	breq	.+56     	; 0x244 <UDataAvailable+0x40>
	if(UQFront<UQEnd)
 20c:	90 91 60 00 	lds	r25, 0x0060
 210:	80 91 61 00 	lds	r24, 0x0061
 214:	98 17       	cp	r25, r24
 216:	74 f0       	brlt	.+28     	; 0x234 <UDataAvailable+0x30>
		return(UQEnd-UQFront+1);
	else if(UQFront>UQEnd)
 218:	90 91 60 00 	lds	r25, 0x0060
 21c:	80 91 61 00 	lds	r24, 0x0061
 220:	89 17       	cp	r24, r25
 222:	9c f4       	brge	.+38     	; 0x24a <UDataAvailable+0x46>
		return (RECEIVE_BUFF_SIZE-UQFront+UQEnd+1);
 224:	90 91 61 00 	lds	r25, 0x0061
 228:	80 91 60 00 	lds	r24, 0x0060
 22c:	9f 5b       	subi	r25, 0xBF	; 191
 22e:	98 1b       	sub	r25, r24
	else
		return 1;
}
 230:	89 2f       	mov	r24, r25
 232:	08 95       	ret

uint8_t UDataAvailable()
{
	if(UQFront==-1) return 0;
	if(UQFront<UQEnd)
		return(UQEnd-UQFront+1);
 234:	90 91 61 00 	lds	r25, 0x0061
 238:	80 91 60 00 	lds	r24, 0x0060
 23c:	9f 5f       	subi	r25, 0xFF	; 255
 23e:	98 1b       	sub	r25, r24
	else if(UQFront>UQEnd)
		return (RECEIVE_BUFF_SIZE-UQFront+UQEnd+1);
	else
		return 1;
}
 240:	89 2f       	mov	r24, r25
 242:	08 95       	ret
	UDR=data;
}

uint8_t UDataAvailable()
{
	if(UQFront==-1) return 0;
 244:	90 e0       	ldi	r25, 0x00	; 0
		return(UQEnd-UQFront+1);
	else if(UQFront>UQEnd)
		return (RECEIVE_BUFF_SIZE-UQFront+UQEnd+1);
	else
		return 1;
}
 246:	89 2f       	mov	r24, r25
 248:	08 95       	ret
uint8_t UDataAvailable()
{
	if(UQFront==-1) return 0;
	if(UQFront<UQEnd)
		return(UQEnd-UQFront+1);
	else if(UQFront>UQEnd)
 24a:	91 e0       	ldi	r25, 0x01	; 1
		return (RECEIVE_BUFF_SIZE-UQFront+UQEnd+1);
	else
		return 1;
}
 24c:	89 2f       	mov	r24, r25
 24e:	08 95       	ret

00000250 <UWriteString>:

void UWriteString(char *str)
{
 250:	fc 01       	movw	r30, r24
	while((*str)!='\0')
 252:	80 81       	ld	r24, Z
 254:	88 23       	and	r24, r24
 256:	39 f0       	breq	.+14     	; 0x266 <UWriteString+0x16>
}

void UWriteData(char data)
{
	//Wait For Transmitter to become ready
	while(!(UCSRA & (1<<UDRE)));
 258:	5d 9b       	sbis	0x0b, 5	; 11
 25a:	fe cf       	rjmp	.-4      	; 0x258 <UWriteString+0x8>

	//Now write
	UDR=data;
 25c:	8c b9       	out	0x0c, r24	; 12
void UWriteString(char *str)
{
	while((*str)!='\0')
	{
		UWriteData(*str);
		str++;
 25e:	31 96       	adiw	r30, 0x01	; 1
		return 1;
}

void UWriteString(char *str)
{
	while((*str)!='\0')
 260:	80 81       	ld	r24, Z
 262:	88 23       	and	r24, r24
 264:	c9 f7       	brne	.-14     	; 0x258 <UWriteString+0x8>
}

void UWriteData(char data)
{
	//Wait For Transmitter to become ready
	while(!(UCSRA & (1<<UDRE)));
 266:	5d 9b       	sbis	0x0b, 5	; 11
 268:	fe cf       	rjmp	.-4      	; 0x266 <UWriteString+0x16>

	//Now write
	UDR=data;
 26a:	1c b8       	out	0x0c, r1	; 12
		UWriteData(*str);
		str++;
	}

	UWriteData('\0');
}
 26c:	08 95       	ret

0000026e <_exit>:
 26e:	f8 94       	cli

00000270 <__stop_program>:
 270:	ff cf       	rjmp	.-2      	; 0x270 <__stop_program>
