
RI Test Stepper Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  00001b94  00001c28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000070  00800092  00800092  00001c5a  2**0
                  ALLOC
  3 .stab         00000a38  00000000  00000000  00001c5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000014d  00000000  00000000  00002694  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000027e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000003a4  00000000  00000000  00002941  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000024cf  00000000  00000000  00002ce5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000fd5  00000000  00000000  000051b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001b39  00000000  00000000  00006189  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002b0  00000000  00000000  00007cc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005b0  00000000  00000000  00007f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a79  00000000  00000000  00008524  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000005a0  00000000  00000000  00008f9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000060  00000000  00000000  0000953d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
       4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
       6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
       8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
       e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	4e c0       	rjmp	.+156    	; 0xb4 <__vector_11>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	10 e0       	ldi	r17, 0x00	; 0
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	e4 e9       	ldi	r30, 0x94	; 148
      3a:	fb e1       	ldi	r31, 0x1B	; 27
      3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0
      42:	a2 39       	cpi	r26, 0x92	; 146
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
      48:	11 e0       	ldi	r17, 0x01	; 1
      4a:	a2 e9       	ldi	r26, 0x92	; 146
      4c:	b0 e0       	ldi	r27, 0x00	; 0
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	a2 30       	cpi	r26, 0x02	; 2
      54:	b1 07       	cpc	r27, r17
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	c4 d6       	rcall	.+3464   	; 0xde2 <main>
      5a:	9a cd       	rjmp	.-1228   	; 0xfffffb90 <__eeprom_end+0xff7efb90>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <USARTInit>:

#include "GB_usart.h"


void USARTInit(uint16_t ubrrvalue)
{
      5e:	df 93       	push	r29
      60:	cf 93       	push	r28
      62:	00 d0       	rcall	.+0      	; 0x64 <USARTInit+0x6>
      64:	cd b7       	in	r28, 0x3d	; 61
      66:	de b7       	in	r29, 0x3e	; 62
      68:	9a 83       	std	Y+2, r25	; 0x02
      6a:	89 83       	std	Y+1, r24	; 0x01
	//Setup q
	UQFront=UQEnd=-1;
      6c:	8f ef       	ldi	r24, 0xFF	; 255
      6e:	80 93 c1 00 	sts	0x00C1, r24
      72:	80 91 c1 00 	lds	r24, 0x00C1
      76:	80 93 c0 00 	sts	0x00C0, r24

	//Set Baud rate
	UBRRH=(unsigned char)(ubrrvalue>>8);
      7a:	80 e4       	ldi	r24, 0x40	; 64
      7c:	90 e0       	ldi	r25, 0x00	; 0
      7e:	29 81       	ldd	r18, Y+1	; 0x01
      80:	3a 81       	ldd	r19, Y+2	; 0x02
      82:	23 2f       	mov	r18, r19
      84:	33 27       	eor	r19, r19
      86:	fc 01       	movw	r30, r24
      88:	20 83       	st	Z, r18
	UBRRL=(unsigned char)ubrrvalue;
      8a:	89 e2       	ldi	r24, 0x29	; 41
      8c:	90 e0       	ldi	r25, 0x00	; 0
      8e:	29 81       	ldd	r18, Y+1	; 0x01
      90:	fc 01       	movw	r30, r24
      92:	20 83       	st	Z, r18
	1 StopBit
	char size 8

	*/

	UCSRC=(1<<URSEL)|(3<<UCSZ0);
      94:	80 e4       	ldi	r24, 0x40	; 64
      96:	90 e0       	ldi	r25, 0x00	; 0
      98:	26 e8       	ldi	r18, 0x86	; 134
      9a:	fc 01       	movw	r30, r24
      9c:	20 83       	st	Z, r18

	Enable The recevier and transmitter

	*/

	UCSRB=(1<<RXCIE)|(1<<TXEN);
      9e:	8a e2       	ldi	r24, 0x2A	; 42
      a0:	90 e0       	ldi	r25, 0x00	; 0
      a2:	28 e8       	ldi	r18, 0x88	; 136
      a4:	fc 01       	movw	r30, r24
      a6:	20 83       	st	Z, r18
	sei();
      a8:	78 94       	sei

}
      aa:	0f 90       	pop	r0
      ac:	0f 90       	pop	r0
      ae:	cf 91       	pop	r28
      b0:	df 91       	pop	r29
      b2:	08 95       	ret

000000b4 <__vector_11>:

//The USART ISR
ISR(USART_RXC_VECT)
{
      b4:	1f 92       	push	r1
      b6:	0f 92       	push	r0
      b8:	0f b6       	in	r0, 0x3f	; 63
      ba:	0f 92       	push	r0
      bc:	11 24       	eor	r1, r1
      be:	2f 93       	push	r18
      c0:	3f 93       	push	r19
      c2:	8f 93       	push	r24
      c4:	9f 93       	push	r25
      c6:	ef 93       	push	r30
      c8:	ff 93       	push	r31
      ca:	df 93       	push	r29
      cc:	cf 93       	push	r28
      ce:	0f 92       	push	r0
      d0:	cd b7       	in	r28, 0x3d	; 61
      d2:	de b7       	in	r29, 0x3e	; 62
	//Read the data
	uint8_t data=UDR;
      d4:	8c e2       	ldi	r24, 0x2C	; 44
      d6:	90 e0       	ldi	r25, 0x00	; 0
      d8:	fc 01       	movw	r30, r24
      da:	80 81       	ld	r24, Z
      dc:	89 83       	std	Y+1, r24	; 0x01

	//Now add it to q

	if(((UQEnd==RECEIVE_BUFF_SIZE-1) && UQFront==0) || ((UQEnd+1)==UQFront))
      de:	80 91 c1 00 	lds	r24, 0x00C1
      e2:	8f 33       	cpi	r24, 0x3F	; 63
      e4:	21 f4       	brne	.+8      	; 0xee <__vector_11+0x3a>
      e6:	80 91 c0 00 	lds	r24, 0x00C0
      ea:	88 23       	and	r24, r24
      ec:	81 f0       	breq	.+32     	; 0x10e <__vector_11+0x5a>
      ee:	80 91 c1 00 	lds	r24, 0x00C1
      f2:	99 27       	eor	r25, r25
      f4:	87 fd       	sbrc	r24, 7
      f6:	90 95       	com	r25
      f8:	9c 01       	movw	r18, r24
      fa:	2f 5f       	subi	r18, 0xFF	; 255
      fc:	3f 4f       	sbci	r19, 0xFF	; 255
      fe:	80 91 c0 00 	lds	r24, 0x00C0
     102:	99 27       	eor	r25, r25
     104:	87 fd       	sbrc	r24, 7
     106:	90 95       	com	r25
     108:	28 17       	cp	r18, r24
     10a:	39 07       	cpc	r19, r25
     10c:	59 f4       	brne	.+22     	; 0x124 <__vector_11+0x70>
	{
		//Q Full
		UQFront++;
     10e:	80 91 c0 00 	lds	r24, 0x00C0
     112:	8f 5f       	subi	r24, 0xFF	; 255
     114:	80 93 c0 00 	sts	0x00C0, r24
		if(UQFront==RECEIVE_BUFF_SIZE) UQFront=0;
     118:	80 91 c0 00 	lds	r24, 0x00C0
     11c:	80 34       	cpi	r24, 0x40	; 64
     11e:	11 f4       	brne	.+4      	; 0x124 <__vector_11+0x70>
     120:	10 92 c0 00 	sts	0x00C0, r1
	}
	

	if(UQEnd==RECEIVE_BUFF_SIZE-1)
     124:	80 91 c1 00 	lds	r24, 0x00C1
     128:	8f 33       	cpi	r24, 0x3F	; 63
     12a:	19 f4       	brne	.+6      	; 0x132 <__vector_11+0x7e>
		UQEnd=0;
     12c:	10 92 c1 00 	sts	0x00C1, r1
     130:	05 c0       	rjmp	.+10     	; 0x13c <__vector_11+0x88>
	else
		UQEnd++;
     132:	80 91 c1 00 	lds	r24, 0x00C1
     136:	8f 5f       	subi	r24, 0xFF	; 255
     138:	80 93 c1 00 	sts	0x00C1, r24


	URBuff[UQEnd]=data;
     13c:	80 91 c1 00 	lds	r24, 0x00C1
     140:	99 27       	eor	r25, r25
     142:	87 fd       	sbrc	r24, 7
     144:	90 95       	com	r25
     146:	8e 53       	subi	r24, 0x3E	; 62
     148:	9f 4f       	sbci	r25, 0xFF	; 255
     14a:	29 81       	ldd	r18, Y+1	; 0x01
     14c:	fc 01       	movw	r30, r24
     14e:	20 83       	st	Z, r18

	if(UQFront==-1) UQFront=0;
     150:	80 91 c0 00 	lds	r24, 0x00C0
     154:	8f 3f       	cpi	r24, 0xFF	; 255
     156:	11 f4       	brne	.+4      	; 0x15c <__vector_11+0xa8>
     158:	10 92 c0 00 	sts	0x00C0, r1

}
     15c:	0f 90       	pop	r0
     15e:	cf 91       	pop	r28
     160:	df 91       	pop	r29
     162:	ff 91       	pop	r31
     164:	ef 91       	pop	r30
     166:	9f 91       	pop	r25
     168:	8f 91       	pop	r24
     16a:	3f 91       	pop	r19
     16c:	2f 91       	pop	r18
     16e:	0f 90       	pop	r0
     170:	0f be       	out	0x3f, r0	; 63
     172:	0f 90       	pop	r0
     174:	1f 90       	pop	r1
     176:	18 95       	reti

00000178 <UReadData>:

uint8_t UReadData()
{
     178:	df 93       	push	r29
     17a:	cf 93       	push	r28
     17c:	0f 92       	push	r0
     17e:	cd b7       	in	r28, 0x3d	; 61
     180:	de b7       	in	r29, 0x3e	; 62
	uint8_t data;
	
	//Check if q is empty
	if(UQFront==-1)
     182:	80 91 c0 00 	lds	r24, 0x00C0
     186:	8f 3f       	cpi	r24, 0xFF	; 255
     188:	11 f4       	brne	.+4      	; 0x18e <UReadData+0x16>
		return 0;
     18a:	80 e0       	ldi	r24, 0x00	; 0
     18c:	24 c0       	rjmp	.+72     	; 0x1d6 <UReadData+0x5e>
	
	data=URBuff[UQFront];
     18e:	80 91 c0 00 	lds	r24, 0x00C0
     192:	99 27       	eor	r25, r25
     194:	87 fd       	sbrc	r24, 7
     196:	90 95       	com	r25
     198:	8e 53       	subi	r24, 0x3E	; 62
     19a:	9f 4f       	sbci	r25, 0xFF	; 255
     19c:	fc 01       	movw	r30, r24
     19e:	80 81       	ld	r24, Z
     1a0:	89 83       	std	Y+1, r24	; 0x01
	
	if(UQFront==UQEnd)
     1a2:	90 91 c0 00 	lds	r25, 0x00C0
     1a6:	80 91 c1 00 	lds	r24, 0x00C1
     1aa:	98 17       	cp	r25, r24
     1ac:	41 f4       	brne	.+16     	; 0x1be <UReadData+0x46>
	{
	//If single data is left
	//So empty q
	UQFront=UQEnd=-1;
     1ae:	8f ef       	ldi	r24, 0xFF	; 255
     1b0:	80 93 c1 00 	sts	0x00C1, r24
     1b4:	80 91 c1 00 	lds	r24, 0x00C1
     1b8:	80 93 c0 00 	sts	0x00C0, r24
     1bc:	0b c0       	rjmp	.+22     	; 0x1d4 <UReadData+0x5c>
	}
	else
	{
		UQFront++;
     1be:	80 91 c0 00 	lds	r24, 0x00C0
     1c2:	8f 5f       	subi	r24, 0xFF	; 255
     1c4:	80 93 c0 00 	sts	0x00C0, r24

		if(UQFront==RECEIVE_BUFF_SIZE)
     1c8:	80 91 c0 00 	lds	r24, 0x00C0
     1cc:	80 34       	cpi	r24, 0x40	; 64
     1ce:	11 f4       	brne	.+4      	; 0x1d4 <UReadData+0x5c>
		UQFront=0;
     1d0:	10 92 c0 00 	sts	0x00C0, r1
	}

	return data;
     1d4:	89 81       	ldd	r24, Y+1	; 0x01
}
     1d6:	0f 90       	pop	r0
     1d8:	cf 91       	pop	r28
     1da:	df 91       	pop	r29
     1dc:	08 95       	ret

000001de <UWriteData>:

void UWriteData(uint8_t data)
{
     1de:	0f 93       	push	r16
     1e0:	1f 93       	push	r17
     1e2:	df 93       	push	r29
     1e4:	cf 93       	push	r28
     1e6:	cd b7       	in	r28, 0x3d	; 61
     1e8:	de b7       	in	r29, 0x3e	; 62
     1ea:	2f 97       	sbiw	r28, 0x0f	; 15
     1ec:	0f b6       	in	r0, 0x3f	; 63
     1ee:	f8 94       	cli
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	0f be       	out	0x3f, r0	; 63
     1f4:	cd bf       	out	0x3d, r28	; 61
     1f6:	8f 87       	std	Y+15, r24	; 0x0f
	//Wait For Transmitter to become ready
	while(!(UCSRA & (1<<UDRE)));
     1f8:	00 00       	nop
     1fa:	8b e2       	ldi	r24, 0x2B	; 43
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	fc 01       	movw	r30, r24
     200:	80 81       	ld	r24, Z
     202:	88 2f       	mov	r24, r24
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	80 72       	andi	r24, 0x20	; 32
     208:	90 70       	andi	r25, 0x00	; 0
     20a:	00 97       	sbiw	r24, 0x00	; 0
     20c:	b1 f3       	breq	.-20     	; 0x1fa <UWriteData+0x1c>

	//Now write
	UDR=data;
     20e:	8c e2       	ldi	r24, 0x2C	; 44
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	2f 85       	ldd	r18, Y+15	; 0x0f
     214:	fc 01       	movw	r30, r24
     216:	20 83       	st	Z, r18
     218:	80 e0       	ldi	r24, 0x00	; 0
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	a0 e8       	ldi	r26, 0x80	; 128
     21e:	bf e3       	ldi	r27, 0x3F	; 63
     220:	89 83       	std	Y+1, r24	; 0x01
     222:	9a 83       	std	Y+2, r25	; 0x02
     224:	ab 83       	std	Y+3, r26	; 0x03
     226:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     228:	69 81       	ldd	r22, Y+1	; 0x01
     22a:	7a 81       	ldd	r23, Y+2	; 0x02
     22c:	8b 81       	ldd	r24, Y+3	; 0x03
     22e:	9c 81       	ldd	r25, Y+4	; 0x04
     230:	20 e0       	ldi	r18, 0x00	; 0
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	4a ef       	ldi	r20, 0xFA	; 250
     236:	54 e4       	ldi	r21, 0x44	; 68
     238:	bc d8       	rcall	.-3720   	; 0xfffff3b2 <__eeprom_end+0xff7ef3b2>
     23a:	dc 01       	movw	r26, r24
     23c:	cb 01       	movw	r24, r22
     23e:	8d 83       	std	Y+5, r24	; 0x05
     240:	9e 83       	std	Y+6, r25	; 0x06
     242:	af 83       	std	Y+7, r26	; 0x07
     244:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     246:	11 e0       	ldi	r17, 0x01	; 1
     248:	6d 81       	ldd	r22, Y+5	; 0x05
     24a:	7e 81       	ldd	r23, Y+6	; 0x06
     24c:	8f 81       	ldd	r24, Y+7	; 0x07
     24e:	98 85       	ldd	r25, Y+8	; 0x08
     250:	20 e0       	ldi	r18, 0x00	; 0
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e8       	ldi	r20, 0x80	; 128
     256:	5f e3       	ldi	r21, 0x3F	; 63
     258:	f7 d9       	rcall	.-3090   	; 0xfffff648 <__eeprom_end+0xff7ef648>
     25a:	88 23       	and	r24, r24
     25c:	0c f0       	brlt	.+2      	; 0x260 <UWriteData+0x82>
     25e:	10 e0       	ldi	r17, 0x00	; 0
     260:	11 23       	and	r17, r17
     262:	29 f0       	breq	.+10     	; 0x26e <UWriteData+0x90>
		__ticks = 1;
     264:	81 e0       	ldi	r24, 0x01	; 1
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	9a 87       	std	Y+10, r25	; 0x0a
     26a:	89 87       	std	Y+9, r24	; 0x09
     26c:	42 c0       	rjmp	.+132    	; 0x2f2 <UWriteData+0x114>
	else if (__tmp > 65535)
     26e:	11 e0       	ldi	r17, 0x01	; 1
     270:	6d 81       	ldd	r22, Y+5	; 0x05
     272:	7e 81       	ldd	r23, Y+6	; 0x06
     274:	8f 81       	ldd	r24, Y+7	; 0x07
     276:	98 85       	ldd	r25, Y+8	; 0x08
     278:	20 e0       	ldi	r18, 0x00	; 0
     27a:	3f ef       	ldi	r19, 0xFF	; 255
     27c:	4f e7       	ldi	r20, 0x7F	; 127
     27e:	57 e4       	ldi	r21, 0x47	; 71
     280:	8d d9       	rcall	.-3302   	; 0xfffff59c <__eeprom_end+0xff7ef59c>
     282:	18 16       	cp	r1, r24
     284:	0c f0       	brlt	.+2      	; 0x288 <UWriteData+0xaa>
     286:	10 e0       	ldi	r17, 0x00	; 0
     288:	11 23       	and	r17, r17
     28a:	51 f1       	breq	.+84     	; 0x2e0 <UWriteData+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     28c:	69 81       	ldd	r22, Y+1	; 0x01
     28e:	7a 81       	ldd	r23, Y+2	; 0x02
     290:	8b 81       	ldd	r24, Y+3	; 0x03
     292:	9c 81       	ldd	r25, Y+4	; 0x04
     294:	20 e0       	ldi	r18, 0x00	; 0
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	40 e2       	ldi	r20, 0x20	; 32
     29a:	51 e4       	ldi	r21, 0x41	; 65
     29c:	8a d8       	rcall	.-3820   	; 0xfffff3b2 <__eeprom_end+0xff7ef3b2>
     29e:	dc 01       	movw	r26, r24
     2a0:	cb 01       	movw	r24, r22
     2a2:	bc 01       	movw	r22, r24
     2a4:	cd 01       	movw	r24, r26
     2a6:	c3 d6       	rcall	.+3462   	; 0x102e <__fixunssfsi>
     2a8:	dc 01       	movw	r26, r24
     2aa:	cb 01       	movw	r24, r22
     2ac:	9a 87       	std	Y+10, r25	; 0x0a
     2ae:	89 87       	std	Y+9, r24	; 0x09
     2b0:	12 c0       	rjmp	.+36     	; 0x2d6 <UWriteData+0xf8>
     2b2:	88 ec       	ldi	r24, 0xC8	; 200
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	9c 87       	std	Y+12, r25	; 0x0c
     2b8:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2ba:	8b 85       	ldd	r24, Y+11	; 0x0b
     2bc:	9c 85       	ldd	r25, Y+12	; 0x0c
     2be:	8c 01       	movw	r16, r24
     2c0:	c8 01       	movw	r24, r16
     2c2:	01 97       	sbiw	r24, 0x01	; 1
     2c4:	f1 f7       	brne	.-4      	; 0x2c2 <UWriteData+0xe4>
     2c6:	8c 01       	movw	r16, r24
     2c8:	1c 87       	std	Y+12, r17	; 0x0c
     2ca:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2cc:	89 85       	ldd	r24, Y+9	; 0x09
     2ce:	9a 85       	ldd	r25, Y+10	; 0x0a
     2d0:	01 97       	sbiw	r24, 0x01	; 1
     2d2:	9a 87       	std	Y+10, r25	; 0x0a
     2d4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2d6:	89 85       	ldd	r24, Y+9	; 0x09
     2d8:	9a 85       	ldd	r25, Y+10	; 0x0a
     2da:	00 97       	sbiw	r24, 0x00	; 0
     2dc:	51 f7       	brne	.-44     	; 0x2b2 <UWriteData+0xd4>
     2de:	16 c0       	rjmp	.+44     	; 0x30c <UWriteData+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2e0:	6d 81       	ldd	r22, Y+5	; 0x05
     2e2:	7e 81       	ldd	r23, Y+6	; 0x06
     2e4:	8f 81       	ldd	r24, Y+7	; 0x07
     2e6:	98 85       	ldd	r25, Y+8	; 0x08
     2e8:	a2 d6       	rcall	.+3396   	; 0x102e <__fixunssfsi>
     2ea:	dc 01       	movw	r26, r24
     2ec:	cb 01       	movw	r24, r22
     2ee:	9a 87       	std	Y+10, r25	; 0x0a
     2f0:	89 87       	std	Y+9, r24	; 0x09
     2f2:	89 85       	ldd	r24, Y+9	; 0x09
     2f4:	9a 85       	ldd	r25, Y+10	; 0x0a
     2f6:	9e 87       	std	Y+14, r25	; 0x0e
     2f8:	8d 87       	std	Y+13, r24	; 0x0d
     2fa:	8d 85       	ldd	r24, Y+13	; 0x0d
     2fc:	9e 85       	ldd	r25, Y+14	; 0x0e
     2fe:	8c 01       	movw	r16, r24
     300:	f8 01       	movw	r30, r16
     302:	31 97       	sbiw	r30, 0x01	; 1
     304:	f1 f7       	brne	.-4      	; 0x302 <UWriteData+0x124>
     306:	8f 01       	movw	r16, r30
     308:	1e 87       	std	Y+14, r17	; 0x0e
     30a:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(1);
}
     30c:	2f 96       	adiw	r28, 0x0f	; 15
     30e:	0f b6       	in	r0, 0x3f	; 63
     310:	f8 94       	cli
     312:	de bf       	out	0x3e, r29	; 62
     314:	0f be       	out	0x3f, r0	; 63
     316:	cd bf       	out	0x3d, r28	; 61
     318:	cf 91       	pop	r28
     31a:	df 91       	pop	r29
     31c:	1f 91       	pop	r17
     31e:	0f 91       	pop	r16
     320:	08 95       	ret

00000322 <UDataAvailable>:

uint8_t UDataAvailable()
{
     322:	df 93       	push	r29
     324:	cf 93       	push	r28
     326:	cd b7       	in	r28, 0x3d	; 61
     328:	de b7       	in	r29, 0x3e	; 62
	if(UQFront==-1) return 0;
     32a:	80 91 c0 00 	lds	r24, 0x00C0
     32e:	8f 3f       	cpi	r24, 0xFF	; 255
     330:	11 f4       	brne	.+4      	; 0x336 <UDataAvailable+0x14>
     332:	80 e0       	ldi	r24, 0x00	; 0
     334:	21 c0       	rjmp	.+66     	; 0x378 <UDataAvailable+0x56>
	if(UQFront<UQEnd)
     336:	90 91 c0 00 	lds	r25, 0x00C0
     33a:	80 91 c1 00 	lds	r24, 0x00C1
     33e:	98 17       	cp	r25, r24
     340:	54 f4       	brge	.+20     	; 0x356 <UDataAvailable+0x34>
		return(UQEnd-UQFront+1);
     342:	80 91 c1 00 	lds	r24, 0x00C1
     346:	98 2f       	mov	r25, r24
     348:	80 91 c0 00 	lds	r24, 0x00C0
     34c:	29 2f       	mov	r18, r25
     34e:	28 1b       	sub	r18, r24
     350:	82 2f       	mov	r24, r18
     352:	8f 5f       	subi	r24, 0xFF	; 255
     354:	11 c0       	rjmp	.+34     	; 0x378 <UDataAvailable+0x56>
	else if(UQFront>UQEnd)
     356:	90 91 c0 00 	lds	r25, 0x00C0
     35a:	80 91 c1 00 	lds	r24, 0x00C1
     35e:	89 17       	cp	r24, r25
     360:	54 f4       	brge	.+20     	; 0x376 <UDataAvailable+0x54>
		return (RECEIVE_BUFF_SIZE-UQFront+UQEnd+1);
     362:	80 91 c1 00 	lds	r24, 0x00C1
     366:	98 2f       	mov	r25, r24
     368:	80 91 c0 00 	lds	r24, 0x00C0
     36c:	29 2f       	mov	r18, r25
     36e:	28 1b       	sub	r18, r24
     370:	82 2f       	mov	r24, r18
     372:	8f 5b       	subi	r24, 0xBF	; 191
     374:	01 c0       	rjmp	.+2      	; 0x378 <UDataAvailable+0x56>
	else
		return 1;
     376:	81 e0       	ldi	r24, 0x01	; 1
}
     378:	cf 91       	pop	r28
     37a:	df 91       	pop	r29
     37c:	08 95       	ret

0000037e <UWriteString>:

void UWriteString(uint8_t *str)
{
     37e:	df 93       	push	r29
     380:	cf 93       	push	r28
     382:	00 d0       	rcall	.+0      	; 0x384 <UWriteString+0x6>
     384:	cd b7       	in	r28, 0x3d	; 61
     386:	de b7       	in	r29, 0x3e	; 62
     388:	9a 83       	std	Y+2, r25	; 0x02
     38a:	89 83       	std	Y+1, r24	; 0x01
	while((*str)!='\0')
     38c:	0a c0       	rjmp	.+20     	; 0x3a2 <UWriteString+0x24>
	{
		UWriteData(*str);
     38e:	89 81       	ldd	r24, Y+1	; 0x01
     390:	9a 81       	ldd	r25, Y+2	; 0x02
     392:	fc 01       	movw	r30, r24
     394:	80 81       	ld	r24, Z
     396:	23 df       	rcall	.-442    	; 0x1de <UWriteData>
		str++;
     398:	89 81       	ldd	r24, Y+1	; 0x01
     39a:	9a 81       	ldd	r25, Y+2	; 0x02
     39c:	01 96       	adiw	r24, 0x01	; 1
     39e:	9a 83       	std	Y+2, r25	; 0x02
     3a0:	89 83       	std	Y+1, r24	; 0x01
		return 1;
}

void UWriteString(uint8_t *str)
{
	while((*str)!='\0')
     3a2:	89 81       	ldd	r24, Y+1	; 0x01
     3a4:	9a 81       	ldd	r25, Y+2	; 0x02
     3a6:	fc 01       	movw	r30, r24
     3a8:	80 81       	ld	r24, Z
     3aa:	88 23       	and	r24, r24
     3ac:	81 f7       	brne	.-32     	; 0x38e <UWriteString+0x10>
		UWriteData(*str);
		str++;
	}

	//UWriteData('\0');
}
     3ae:	0f 90       	pop	r0
     3b0:	0f 90       	pop	r0
     3b2:	cf 91       	pop	r28
     3b4:	df 91       	pop	r29
     3b6:	08 95       	ret

000003b8 <Command_Display>:
uint8_t first_Pause = 0;
uint8_t stepper_state = 0;


void Command_Display(uint8_t command)
{
     3b8:	df 93       	push	r29
     3ba:	cf 93       	push	r28
     3bc:	0f 92       	push	r0
     3be:	cd b7       	in	r28, 0x3d	; 61
     3c0:	de b7       	in	r29, 0x3e	; 62
     3c2:	89 83       	std	Y+1, r24	; 0x01
	UWriteData(CMD);
     3c4:	8e ef       	ldi	r24, 0xFE	; 254
     3c6:	0b df       	rcall	.-490    	; 0x1de <UWriteData>
	UWriteData(command);
     3c8:	89 81       	ldd	r24, Y+1	; 0x01
     3ca:	09 df       	rcall	.-494    	; 0x1de <UWriteData>
}
     3cc:	0f 90       	pop	r0
     3ce:	cf 91       	pop	r28
     3d0:	df 91       	pop	r29
     3d2:	08 95       	ret

000003d4 <Change_Baudrate>:

void Change_Baudrate(uint8_t speed)
{	
     3d4:	df 93       	push	r29
     3d6:	cf 93       	push	r28
     3d8:	0f 92       	push	r0
     3da:	cd b7       	in	r28, 0x3d	; 61
     3dc:	de b7       	in	r29, 0x3e	; 62
     3de:	89 83       	std	Y+1, r24	; 0x01
	UWriteData(CMD);
     3e0:	8e ef       	ldi	r24, 0xFE	; 254
     3e2:	fd de       	rcall	.-518    	; 0x1de <UWriteData>
	UWriteData(Bauderate);
     3e4:	89 e3       	ldi	r24, 0x39	; 57
     3e6:	fb de       	rcall	.-522    	; 0x1de <UWriteData>
	UWriteData(speed);
     3e8:	89 81       	ldd	r24, Y+1	; 0x01
     3ea:	f9 de       	rcall	.-526    	; 0x1de <UWriteData>
}
     3ec:	0f 90       	pop	r0
     3ee:	cf 91       	pop	r28
     3f0:	df 91       	pop	r29
     3f2:	08 95       	ret

000003f4 <Set_Cursor_Position>:

void Set_Cursor_Position(uint8_t column, uint8_t row)
{	
     3f4:	df 93       	push	r29
     3f6:	cf 93       	push	r28
     3f8:	00 d0       	rcall	.+0      	; 0x3fa <Set_Cursor_Position+0x6>
     3fa:	cd b7       	in	r28, 0x3d	; 61
     3fc:	de b7       	in	r29, 0x3e	; 62
     3fe:	89 83       	std	Y+1, r24	; 0x01
     400:	6a 83       	std	Y+2, r22	; 0x02
	UWriteData(CMD);
     402:	8e ef       	ldi	r24, 0xFE	; 254
     404:	ec de       	rcall	.-552    	; 0x1de <UWriteData>
	UWriteData(71);
     406:	87 e4       	ldi	r24, 0x47	; 71
     408:	ea de       	rcall	.-556    	; 0x1de <UWriteData>
	UWriteData(column);
     40a:	89 81       	ldd	r24, Y+1	; 0x01
     40c:	e8 de       	rcall	.-560    	; 0x1de <UWriteData>
	UWriteData(row);
     40e:	8a 81       	ldd	r24, Y+2	; 0x02
     410:	e6 de       	rcall	.-564    	; 0x1de <UWriteData>
}
     412:	0f 90       	pop	r0
     414:	0f 90       	pop	r0
     416:	cf 91       	pop	r28
     418:	df 91       	pop	r29
     41a:	08 95       	ret

0000041c <PortInit>:

void PortInit(void) // initialize port B inputs and outputs 
{
     41c:	df 93       	push	r29
     41e:	cf 93       	push	r28
     420:	cd b7       	in	r28, 0x3d	; 61
     422:	de b7       	in	r29, 0x3e	; 62
	DDRB = (0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);// set PB1  PB2 Enable pins on L298n PB0 motor drive  
     424:	87 e3       	ldi	r24, 0x37	; 55
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	27 e0       	ldi	r18, 0x07	; 7
     42a:	fc 01       	movw	r30, r24
     42c:	20 83       	st	Z, r18
	PORTB = (0<<PB7) | (0<<PB6) | (0<<PB5) | (0<<PB4) | (0<<PB3) | (0<<PB2) | (0<<PB1) | (0<<PB0); // set all pins we are using high
     42e:	88 e3       	ldi	r24, 0x38	; 56
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	fc 01       	movw	r30, r24
     434:	10 82       	st	Z, r1
	
	DDRD = 0xFF;
     436:	81 e3       	ldi	r24, 0x31	; 49
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	2f ef       	ldi	r18, 0xFF	; 255
     43c:	fc 01       	movw	r30, r24
     43e:	20 83       	st	Z, r18
	DDRD = (1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);// set PD7 - PD5 motor drive  
     440:	81 e3       	ldi	r24, 0x31	; 49
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	20 ee       	ldi	r18, 0xE0	; 224
     446:	fc 01       	movw	r30, r24
     448:	20 83       	st	Z, r18
	PORTD = (0<<PD7) | (0<<PD6) | (0<<PD5) | (0<<PD4) | (0<<PD3) | (0<<PD2) | (0<<PD1) | (0<<PD0); // set all pins we are using high 
     44a:	82 e3       	ldi	r24, 0x32	; 50
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	fc 01       	movw	r30, r24
     450:	10 82       	st	Z, r1
	 
}
     452:	cf 91       	pop	r28
     454:	df 91       	pop	r29
     456:	08 95       	ret

00000458 <SystemInit>:

void SystemInit(void) // Power on variable initialization 
{
     458:	df 93       	push	r29
     45a:	cf 93       	push	r28
     45c:	cd b7       	in	r28, 0x3d	; 61
     45e:	de b7       	in	r29, 0x3e	; 62
	USARTInit(UBRRVAL);
     460:	89 e1       	ldi	r24, 0x19	; 25
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	fc dd       	rcall	.-1032   	; 0x5e <USARTInit>
	rotation_Count = 0; // 0 
     466:	10 92 92 00 	sts	0x0092, r1
     46a:	10 92 93 00 	sts	0x0093, r1
     46e:	10 92 94 00 	sts	0x0094, r1
     472:	10 92 95 00 	sts	0x0095, r1
	Change_Baudrate(51); // 19200
     476:	83 e3       	ldi	r24, 0x33	; 51
     478:	ad df       	rcall	.-166    	; 0x3d4 <Change_Baudrate>
	Command_Display(Clear_Screen);
     47a:	88 e5       	ldi	r24, 0x58	; 88
     47c:	9d df       	rcall	.-198    	; 0x3b8 <Command_Display>
	Command_Display(Go_Home);
     47e:	88 e4       	ldi	r24, 0x48	; 72
     480:	9b df       	rcall	.-202    	; 0x3b8 <Command_Display>
	//Change_Baudrate(83); // 1200
	
}
     482:	cf 91       	pop	r28
     484:	df 91       	pop	r29
     486:	08 95       	ret

00000488 <update_Display_Count>:

void update_Display_Count (uint32_t count)
{
     488:	df 93       	push	r29
     48a:	cf 93       	push	r28
     48c:	00 d0       	rcall	.+0      	; 0x48e <update_Display_Count+0x6>
     48e:	00 d0       	rcall	.+0      	; 0x490 <update_Display_Count+0x8>
     490:	cd b7       	in	r28, 0x3d	; 61
     492:	de b7       	in	r29, 0x3e	; 62
     494:	69 83       	std	Y+1, r22	; 0x01
     496:	7a 83       	std	Y+2, r23	; 0x02
     498:	8b 83       	std	Y+3, r24	; 0x03
     49a:	9c 83       	std	Y+4, r25	; 0x04
	Command_Display(Clear_Screen);	
     49c:	88 e5       	ldi	r24, 0x58	; 88
     49e:	8c df       	rcall	.-232    	; 0x3b8 <Command_Display>
	Command_Display(Go_Home);
     4a0:	88 e4       	ldi	r24, 0x48	; 72
     4a2:	8a df       	rcall	.-236    	; 0x3b8 <Command_Display>
	ltoa(count, aNumberAsString, 10);
     4a4:	89 81       	ldd	r24, Y+1	; 0x01
     4a6:	9a 81       	ldd	r25, Y+2	; 0x02
     4a8:	ab 81       	ldd	r26, Y+3	; 0x03
     4aa:	bc 81       	ldd	r27, Y+4	; 0x04
     4ac:	28 e9       	ldi	r18, 0x98	; 152
     4ae:	30 e0       	ldi	r19, 0x00	; 0
     4b0:	bc 01       	movw	r22, r24
     4b2:	cd 01       	movw	r24, r26
     4b4:	a9 01       	movw	r20, r18
     4b6:	2a e0       	ldi	r18, 0x0A	; 10
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	06 db       	rcall	.-2548   	; 0xfffffac8 <__eeprom_end+0xff7efac8>
	UWriteString(aNumberAsString);	
     4bc:	88 e9       	ldi	r24, 0x98	; 152
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	5e df       	rcall	.-324    	; 0x37e <UWriteString>
	Set_Cursor_Position(1,2);
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	62 e0       	ldi	r22, 0x02	; 2
     4c6:	96 df       	rcall	.-212    	; 0x3f4 <Set_Cursor_Position>
	UWriteString(Label);
     4c8:	80 e6       	ldi	r24, 0x60	; 96
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	58 df       	rcall	.-336    	; 0x37e <UWriteString>
}
     4ce:	0f 90       	pop	r0
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
     4d4:	0f 90       	pop	r0
     4d6:	cf 91       	pop	r28
     4d8:	df 91       	pop	r29
     4da:	08 95       	ret

000004dc <rotate_RI_QTR_CW>:

void rotate_RI_QTR_CW(uint16_t cycles)
{
     4dc:	0f 93       	push	r16
     4de:	1f 93       	push	r17
     4e0:	df 93       	push	r29
     4e2:	cf 93       	push	r28
     4e4:	cd b7       	in	r28, 0x3d	; 61
     4e6:	de b7       	in	r29, 0x3e	; 62
     4e8:	60 97       	sbiw	r28, 0x10	; 16
     4ea:	0f b6       	in	r0, 0x3f	; 63
     4ec:	f8 94       	cli
     4ee:	de bf       	out	0x3e, r29	; 62
     4f0:	0f be       	out	0x3f, r0	; 63
     4f2:	cd bf       	out	0x3d, r28	; 61
     4f4:	98 8b       	std	Y+16, r25	; 0x10
     4f6:	8f 87       	std	Y+15, r24	; 0x0f
	while(cycles > 0)
     4f8:	a3 c0       	rjmp	.+326    	; 0x640 <rotate_RI_QTR_CW+0x164>
	{
		rotate_RI_CW(50);
     4fa:	2a ef       	ldi	r18, 0xFA	; 250
     4fc:	34 e0       	ldi	r19, 0x04	; 4
     4fe:	82 e3       	ldi	r24, 0x32	; 50
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	f9 01       	movw	r30, r18
     504:	09 95       	icall
		//_delay_ms(500);  
		rotation_Count++;   
     506:	80 91 92 00 	lds	r24, 0x0092
     50a:	90 91 93 00 	lds	r25, 0x0093
     50e:	a0 91 94 00 	lds	r26, 0x0094
     512:	b0 91 95 00 	lds	r27, 0x0095
     516:	01 96       	adiw	r24, 0x01	; 1
     518:	a1 1d       	adc	r26, r1
     51a:	b1 1d       	adc	r27, r1
     51c:	80 93 92 00 	sts	0x0092, r24
     520:	90 93 93 00 	sts	0x0093, r25
     524:	a0 93 94 00 	sts	0x0094, r26
     528:	b0 93 95 00 	sts	0x0095, r27
		update_Display_Count(rotation_Count);
     52c:	80 91 92 00 	lds	r24, 0x0092
     530:	90 91 93 00 	lds	r25, 0x0093
     534:	a0 91 94 00 	lds	r26, 0x0094
     538:	b0 91 95 00 	lds	r27, 0x0095
     53c:	bc 01       	movw	r22, r24
     53e:	cd 01       	movw	r24, r26
     540:	a3 df       	rcall	.-186    	; 0x488 <update_Display_Count>
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	aa ef       	ldi	r26, 0xFA	; 250
     548:	b3 e4       	ldi	r27, 0x43	; 67
     54a:	89 83       	std	Y+1, r24	; 0x01
     54c:	9a 83       	std	Y+2, r25	; 0x02
     54e:	ab 83       	std	Y+3, r26	; 0x03
     550:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     552:	69 81       	ldd	r22, Y+1	; 0x01
     554:	7a 81       	ldd	r23, Y+2	; 0x02
     556:	8b 81       	ldd	r24, Y+3	; 0x03
     558:	9c 81       	ldd	r25, Y+4	; 0x04
     55a:	20 e0       	ldi	r18, 0x00	; 0
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	4a ef       	ldi	r20, 0xFA	; 250
     560:	54 e4       	ldi	r21, 0x44	; 68
     562:	27 d7       	rcall	.+3662   	; 0x13b2 <__mulsf3>
     564:	dc 01       	movw	r26, r24
     566:	cb 01       	movw	r24, r22
     568:	8d 83       	std	Y+5, r24	; 0x05
     56a:	9e 83       	std	Y+6, r25	; 0x06
     56c:	af 83       	std	Y+7, r26	; 0x07
     56e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     570:	11 e0       	ldi	r17, 0x01	; 1
     572:	6d 81       	ldd	r22, Y+5	; 0x05
     574:	7e 81       	ldd	r23, Y+6	; 0x06
     576:	8f 81       	ldd	r24, Y+7	; 0x07
     578:	98 85       	ldd	r25, Y+8	; 0x08
     57a:	20 e0       	ldi	r18, 0x00	; 0
     57c:	30 e0       	ldi	r19, 0x00	; 0
     57e:	40 e8       	ldi	r20, 0x80	; 128
     580:	5f e3       	ldi	r21, 0x3F	; 63
     582:	62 d8       	rcall	.-3900   	; 0xfffff648 <__eeprom_end+0xff7ef648>
     584:	88 23       	and	r24, r24
     586:	0c f0       	brlt	.+2      	; 0x58a <rotate_RI_QTR_CW+0xae>
     588:	10 e0       	ldi	r17, 0x00	; 0
     58a:	11 23       	and	r17, r17
     58c:	29 f0       	breq	.+10     	; 0x598 <rotate_RI_QTR_CW+0xbc>
		__ticks = 1;
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	9a 87       	std	Y+10, r25	; 0x0a
     594:	89 87       	std	Y+9, r24	; 0x09
     596:	42 c0       	rjmp	.+132    	; 0x61c <rotate_RI_QTR_CW+0x140>
	else if (__tmp > 65535)
     598:	11 e0       	ldi	r17, 0x01	; 1
     59a:	6d 81       	ldd	r22, Y+5	; 0x05
     59c:	7e 81       	ldd	r23, Y+6	; 0x06
     59e:	8f 81       	ldd	r24, Y+7	; 0x07
     5a0:	98 85       	ldd	r25, Y+8	; 0x08
     5a2:	20 e0       	ldi	r18, 0x00	; 0
     5a4:	3f ef       	ldi	r19, 0xFF	; 255
     5a6:	4f e7       	ldi	r20, 0x7F	; 127
     5a8:	57 e4       	ldi	r21, 0x47	; 71
     5aa:	f8 d7       	rcall	.+4080   	; 0x159c <__gtsf2>
     5ac:	18 16       	cp	r1, r24
     5ae:	0c f0       	brlt	.+2      	; 0x5b2 <rotate_RI_QTR_CW+0xd6>
     5b0:	10 e0       	ldi	r17, 0x00	; 0
     5b2:	11 23       	and	r17, r17
     5b4:	51 f1       	breq	.+84     	; 0x60a <rotate_RI_QTR_CW+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5b6:	69 81       	ldd	r22, Y+1	; 0x01
     5b8:	7a 81       	ldd	r23, Y+2	; 0x02
     5ba:	8b 81       	ldd	r24, Y+3	; 0x03
     5bc:	9c 81       	ldd	r25, Y+4	; 0x04
     5be:	20 e0       	ldi	r18, 0x00	; 0
     5c0:	30 e0       	ldi	r19, 0x00	; 0
     5c2:	40 e2       	ldi	r20, 0x20	; 32
     5c4:	51 e4       	ldi	r21, 0x41	; 65
     5c6:	f5 d6       	rcall	.+3562   	; 0x13b2 <__mulsf3>
     5c8:	dc 01       	movw	r26, r24
     5ca:	cb 01       	movw	r24, r22
     5cc:	bc 01       	movw	r22, r24
     5ce:	cd 01       	movw	r24, r26
     5d0:	2e d5       	rcall	.+2652   	; 0x102e <__fixunssfsi>
     5d2:	dc 01       	movw	r26, r24
     5d4:	cb 01       	movw	r24, r22
     5d6:	9a 87       	std	Y+10, r25	; 0x0a
     5d8:	89 87       	std	Y+9, r24	; 0x09
     5da:	12 c0       	rjmp	.+36     	; 0x600 <rotate_RI_QTR_CW+0x124>
     5dc:	88 ec       	ldi	r24, 0xC8	; 200
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	9c 87       	std	Y+12, r25	; 0x0c
     5e2:	8b 87       	std	Y+11, r24	; 0x0b
     5e4:	8b 85       	ldd	r24, Y+11	; 0x0b
     5e6:	9c 85       	ldd	r25, Y+12	; 0x0c
     5e8:	8c 01       	movw	r16, r24
     5ea:	c8 01       	movw	r24, r16
     5ec:	01 97       	sbiw	r24, 0x01	; 1
     5ee:	f1 f7       	brne	.-4      	; 0x5ec <rotate_RI_QTR_CW+0x110>
     5f0:	8c 01       	movw	r16, r24
     5f2:	1c 87       	std	Y+12, r17	; 0x0c
     5f4:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5f6:	89 85       	ldd	r24, Y+9	; 0x09
     5f8:	9a 85       	ldd	r25, Y+10	; 0x0a
     5fa:	01 97       	sbiw	r24, 0x01	; 1
     5fc:	9a 87       	std	Y+10, r25	; 0x0a
     5fe:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     600:	89 85       	ldd	r24, Y+9	; 0x09
     602:	9a 85       	ldd	r25, Y+10	; 0x0a
     604:	00 97       	sbiw	r24, 0x00	; 0
     606:	51 f7       	brne	.-44     	; 0x5dc <rotate_RI_QTR_CW+0x100>
     608:	16 c0       	rjmp	.+44     	; 0x636 <rotate_RI_QTR_CW+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     60a:	6d 81       	ldd	r22, Y+5	; 0x05
     60c:	7e 81       	ldd	r23, Y+6	; 0x06
     60e:	8f 81       	ldd	r24, Y+7	; 0x07
     610:	98 85       	ldd	r25, Y+8	; 0x08
     612:	0d d5       	rcall	.+2586   	; 0x102e <__fixunssfsi>
     614:	dc 01       	movw	r26, r24
     616:	cb 01       	movw	r24, r22
     618:	9a 87       	std	Y+10, r25	; 0x0a
     61a:	89 87       	std	Y+9, r24	; 0x09
     61c:	89 85       	ldd	r24, Y+9	; 0x09
     61e:	9a 85       	ldd	r25, Y+10	; 0x0a
     620:	9e 87       	std	Y+14, r25	; 0x0e
     622:	8d 87       	std	Y+13, r24	; 0x0d
     624:	8d 85       	ldd	r24, Y+13	; 0x0d
     626:	9e 85       	ldd	r25, Y+14	; 0x0e
     628:	8c 01       	movw	r16, r24
     62a:	c8 01       	movw	r24, r16
     62c:	01 97       	sbiw	r24, 0x01	; 1
     62e:	f1 f7       	brne	.-4      	; 0x62c <rotate_RI_QTR_CW+0x150>
     630:	8c 01       	movw	r16, r24
     632:	1e 87       	std	Y+14, r17	; 0x0e
     634:	0d 87       	std	Y+13, r16	; 0x0d
		_delay_ms(500); 
		cycles--;
     636:	8f 85       	ldd	r24, Y+15	; 0x0f
     638:	98 89       	ldd	r25, Y+16	; 0x10
     63a:	01 97       	sbiw	r24, 0x01	; 1
     63c:	98 8b       	std	Y+16, r25	; 0x10
     63e:	8f 87       	std	Y+15, r24	; 0x0f
	UWriteString(Label);
}

void rotate_RI_QTR_CW(uint16_t cycles)
{
	while(cycles > 0)
     640:	8f 85       	ldd	r24, Y+15	; 0x0f
     642:	98 89       	ldd	r25, Y+16	; 0x10
     644:	00 97       	sbiw	r24, 0x00	; 0
     646:	09 f0       	breq	.+2      	; 0x64a <rotate_RI_QTR_CW+0x16e>
     648:	58 cf       	rjmp	.-336    	; 0x4fa <rotate_RI_QTR_CW+0x1e>
		rotation_Count++;   
		update_Display_Count(rotation_Count);
		_delay_ms(500); 
		cycles--;
	}		
}
     64a:	60 96       	adiw	r28, 0x10	; 16
     64c:	0f b6       	in	r0, 0x3f	; 63
     64e:	f8 94       	cli
     650:	de bf       	out	0x3e, r29	; 62
     652:	0f be       	out	0x3f, r0	; 63
     654:	cd bf       	out	0x3d, r28	; 61
     656:	cf 91       	pop	r28
     658:	df 91       	pop	r29
     65a:	1f 91       	pop	r17
     65c:	0f 91       	pop	r16
     65e:	08 95       	ret

00000660 <rotate_RI_QTR_Counter_CW>:

void rotate_RI_QTR_Counter_CW(uint16_t cycles)
{
     660:	0f 93       	push	r16
     662:	1f 93       	push	r17
     664:	df 93       	push	r29
     666:	cf 93       	push	r28
     668:	cd b7       	in	r28, 0x3d	; 61
     66a:	de b7       	in	r29, 0x3e	; 62
     66c:	60 97       	sbiw	r28, 0x10	; 16
     66e:	0f b6       	in	r0, 0x3f	; 63
     670:	f8 94       	cli
     672:	de bf       	out	0x3e, r29	; 62
     674:	0f be       	out	0x3f, r0	; 63
     676:	cd bf       	out	0x3d, r28	; 61
     678:	98 8b       	std	Y+16, r25	; 0x10
     67a:	8f 87       	std	Y+15, r24	; 0x0f
	while(cycles > 0)
     67c:	a3 c0       	rjmp	.+326    	; 0x7c4 <rotate_RI_QTR_Counter_CW+0x164>
	{
		rotate_RI_Counter_CW(50);	
     67e:	22 ef       	ldi	r18, 0xF2	; 242
     680:	33 e0       	ldi	r19, 0x03	; 3
     682:	82 e3       	ldi	r24, 0x32	; 50
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	f9 01       	movw	r30, r18
     688:	09 95       	icall
		//_delay_ms(500);
		rotation_Count++; 
     68a:	80 91 92 00 	lds	r24, 0x0092
     68e:	90 91 93 00 	lds	r25, 0x0093
     692:	a0 91 94 00 	lds	r26, 0x0094
     696:	b0 91 95 00 	lds	r27, 0x0095
     69a:	01 96       	adiw	r24, 0x01	; 1
     69c:	a1 1d       	adc	r26, r1
     69e:	b1 1d       	adc	r27, r1
     6a0:	80 93 92 00 	sts	0x0092, r24
     6a4:	90 93 93 00 	sts	0x0093, r25
     6a8:	a0 93 94 00 	sts	0x0094, r26
     6ac:	b0 93 95 00 	sts	0x0095, r27
		update_Display_Count(rotation_Count);    
     6b0:	80 91 92 00 	lds	r24, 0x0092
     6b4:	90 91 93 00 	lds	r25, 0x0093
     6b8:	a0 91 94 00 	lds	r26, 0x0094
     6bc:	b0 91 95 00 	lds	r27, 0x0095
     6c0:	bc 01       	movw	r22, r24
     6c2:	cd 01       	movw	r24, r26
     6c4:	e1 de       	rcall	.-574    	; 0x488 <update_Display_Count>
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	aa ef       	ldi	r26, 0xFA	; 250
     6cc:	b3 e4       	ldi	r27, 0x43	; 67
     6ce:	89 83       	std	Y+1, r24	; 0x01
     6d0:	9a 83       	std	Y+2, r25	; 0x02
     6d2:	ab 83       	std	Y+3, r26	; 0x03
     6d4:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     6d6:	69 81       	ldd	r22, Y+1	; 0x01
     6d8:	7a 81       	ldd	r23, Y+2	; 0x02
     6da:	8b 81       	ldd	r24, Y+3	; 0x03
     6dc:	9c 81       	ldd	r25, Y+4	; 0x04
     6de:	20 e0       	ldi	r18, 0x00	; 0
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	4a ef       	ldi	r20, 0xFA	; 250
     6e4:	54 e4       	ldi	r21, 0x44	; 68
     6e6:	65 d6       	rcall	.+3274   	; 0x13b2 <__mulsf3>
     6e8:	dc 01       	movw	r26, r24
     6ea:	cb 01       	movw	r24, r22
     6ec:	8d 83       	std	Y+5, r24	; 0x05
     6ee:	9e 83       	std	Y+6, r25	; 0x06
     6f0:	af 83       	std	Y+7, r26	; 0x07
     6f2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     6f4:	11 e0       	ldi	r17, 0x01	; 1
     6f6:	6d 81       	ldd	r22, Y+5	; 0x05
     6f8:	7e 81       	ldd	r23, Y+6	; 0x06
     6fa:	8f 81       	ldd	r24, Y+7	; 0x07
     6fc:	98 85       	ldd	r25, Y+8	; 0x08
     6fe:	20 e0       	ldi	r18, 0x00	; 0
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	40 e8       	ldi	r20, 0x80	; 128
     704:	5f e3       	ldi	r21, 0x3F	; 63
     706:	a0 d7       	rcall	.+3904   	; 0x1648 <__ltsf2>
     708:	88 23       	and	r24, r24
     70a:	0c f0       	brlt	.+2      	; 0x70e <rotate_RI_QTR_Counter_CW+0xae>
     70c:	10 e0       	ldi	r17, 0x00	; 0
     70e:	11 23       	and	r17, r17
     710:	29 f0       	breq	.+10     	; 0x71c <rotate_RI_QTR_Counter_CW+0xbc>
		__ticks = 1;
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	9a 87       	std	Y+10, r25	; 0x0a
     718:	89 87       	std	Y+9, r24	; 0x09
     71a:	42 c0       	rjmp	.+132    	; 0x7a0 <rotate_RI_QTR_Counter_CW+0x140>
	else if (__tmp > 65535)
     71c:	11 e0       	ldi	r17, 0x01	; 1
     71e:	6d 81       	ldd	r22, Y+5	; 0x05
     720:	7e 81       	ldd	r23, Y+6	; 0x06
     722:	8f 81       	ldd	r24, Y+7	; 0x07
     724:	98 85       	ldd	r25, Y+8	; 0x08
     726:	20 e0       	ldi	r18, 0x00	; 0
     728:	3f ef       	ldi	r19, 0xFF	; 255
     72a:	4f e7       	ldi	r20, 0x7F	; 127
     72c:	57 e4       	ldi	r21, 0x47	; 71
     72e:	36 d7       	rcall	.+3692   	; 0x159c <__gtsf2>
     730:	18 16       	cp	r1, r24
     732:	0c f0       	brlt	.+2      	; 0x736 <rotate_RI_QTR_Counter_CW+0xd6>
     734:	10 e0       	ldi	r17, 0x00	; 0
     736:	11 23       	and	r17, r17
     738:	51 f1       	breq	.+84     	; 0x78e <rotate_RI_QTR_Counter_CW+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     73a:	69 81       	ldd	r22, Y+1	; 0x01
     73c:	7a 81       	ldd	r23, Y+2	; 0x02
     73e:	8b 81       	ldd	r24, Y+3	; 0x03
     740:	9c 81       	ldd	r25, Y+4	; 0x04
     742:	20 e0       	ldi	r18, 0x00	; 0
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	40 e2       	ldi	r20, 0x20	; 32
     748:	51 e4       	ldi	r21, 0x41	; 65
     74a:	33 d6       	rcall	.+3174   	; 0x13b2 <__mulsf3>
     74c:	dc 01       	movw	r26, r24
     74e:	cb 01       	movw	r24, r22
     750:	bc 01       	movw	r22, r24
     752:	cd 01       	movw	r24, r26
     754:	6c d4       	rcall	.+2264   	; 0x102e <__fixunssfsi>
     756:	dc 01       	movw	r26, r24
     758:	cb 01       	movw	r24, r22
     75a:	9a 87       	std	Y+10, r25	; 0x0a
     75c:	89 87       	std	Y+9, r24	; 0x09
     75e:	12 c0       	rjmp	.+36     	; 0x784 <rotate_RI_QTR_Counter_CW+0x124>
     760:	88 ec       	ldi	r24, 0xC8	; 200
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	9c 87       	std	Y+12, r25	; 0x0c
     766:	8b 87       	std	Y+11, r24	; 0x0b
     768:	8b 85       	ldd	r24, Y+11	; 0x0b
     76a:	9c 85       	ldd	r25, Y+12	; 0x0c
     76c:	8c 01       	movw	r16, r24
     76e:	c8 01       	movw	r24, r16
     770:	01 97       	sbiw	r24, 0x01	; 1
     772:	f1 f7       	brne	.-4      	; 0x770 <rotate_RI_QTR_Counter_CW+0x110>
     774:	8c 01       	movw	r16, r24
     776:	1c 87       	std	Y+12, r17	; 0x0c
     778:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     77a:	89 85       	ldd	r24, Y+9	; 0x09
     77c:	9a 85       	ldd	r25, Y+10	; 0x0a
     77e:	01 97       	sbiw	r24, 0x01	; 1
     780:	9a 87       	std	Y+10, r25	; 0x0a
     782:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     784:	89 85       	ldd	r24, Y+9	; 0x09
     786:	9a 85       	ldd	r25, Y+10	; 0x0a
     788:	00 97       	sbiw	r24, 0x00	; 0
     78a:	51 f7       	brne	.-44     	; 0x760 <rotate_RI_QTR_Counter_CW+0x100>
     78c:	16 c0       	rjmp	.+44     	; 0x7ba <rotate_RI_QTR_Counter_CW+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     78e:	6d 81       	ldd	r22, Y+5	; 0x05
     790:	7e 81       	ldd	r23, Y+6	; 0x06
     792:	8f 81       	ldd	r24, Y+7	; 0x07
     794:	98 85       	ldd	r25, Y+8	; 0x08
     796:	4b d4       	rcall	.+2198   	; 0x102e <__fixunssfsi>
     798:	dc 01       	movw	r26, r24
     79a:	cb 01       	movw	r24, r22
     79c:	9a 87       	std	Y+10, r25	; 0x0a
     79e:	89 87       	std	Y+9, r24	; 0x09
     7a0:	89 85       	ldd	r24, Y+9	; 0x09
     7a2:	9a 85       	ldd	r25, Y+10	; 0x0a
     7a4:	9e 87       	std	Y+14, r25	; 0x0e
     7a6:	8d 87       	std	Y+13, r24	; 0x0d
     7a8:	8d 85       	ldd	r24, Y+13	; 0x0d
     7aa:	9e 85       	ldd	r25, Y+14	; 0x0e
     7ac:	8c 01       	movw	r16, r24
     7ae:	c8 01       	movw	r24, r16
     7b0:	01 97       	sbiw	r24, 0x01	; 1
     7b2:	f1 f7       	brne	.-4      	; 0x7b0 <rotate_RI_QTR_Counter_CW+0x150>
     7b4:	8c 01       	movw	r16, r24
     7b6:	1e 87       	std	Y+14, r17	; 0x0e
     7b8:	0d 87       	std	Y+13, r16	; 0x0d
		_delay_ms(500); 
		cycles--;
     7ba:	8f 85       	ldd	r24, Y+15	; 0x0f
     7bc:	98 89       	ldd	r25, Y+16	; 0x10
     7be:	01 97       	sbiw	r24, 0x01	; 1
     7c0:	98 8b       	std	Y+16, r25	; 0x10
     7c2:	8f 87       	std	Y+15, r24	; 0x0f
	}		
}

void rotate_RI_QTR_Counter_CW(uint16_t cycles)
{
	while(cycles > 0)
     7c4:	8f 85       	ldd	r24, Y+15	; 0x0f
     7c6:	98 89       	ldd	r25, Y+16	; 0x10
     7c8:	00 97       	sbiw	r24, 0x00	; 0
     7ca:	09 f0       	breq	.+2      	; 0x7ce <rotate_RI_QTR_Counter_CW+0x16e>
     7cc:	58 cf       	rjmp	.-336    	; 0x67e <rotate_RI_QTR_Counter_CW+0x1e>
		rotation_Count++; 
		update_Display_Count(rotation_Count);    
		_delay_ms(500); 
		cycles--;
	}		
}
     7ce:	60 96       	adiw	r28, 0x10	; 16
     7d0:	0f b6       	in	r0, 0x3f	; 63
     7d2:	f8 94       	cli
     7d4:	de bf       	out	0x3e, r29	; 62
     7d6:	0f be       	out	0x3f, r0	; 63
     7d8:	cd bf       	out	0x3d, r28	; 61
     7da:	cf 91       	pop	r28
     7dc:	df 91       	pop	r29
     7de:	1f 91       	pop	r17
     7e0:	0f 91       	pop	r16
     7e2:	08 95       	ret

000007e4 <rotate_RI_Counter_CW>:

void rotate_RI_Counter_CW(uint16_t steps)
{
     7e4:	0f 93       	push	r16
     7e6:	1f 93       	push	r17
     7e8:	df 93       	push	r29
     7ea:	cf 93       	push	r28
     7ec:	cd b7       	in	r28, 0x3d	; 61
     7ee:	de b7       	in	r29, 0x3e	; 62
     7f0:	60 97       	sbiw	r28, 0x10	; 16
     7f2:	0f b6       	in	r0, 0x3f	; 63
     7f4:	f8 94       	cli
     7f6:	de bf       	out	0x3e, r29	; 62
     7f8:	0f be       	out	0x3f, r0	; 63
     7fa:	cd bf       	out	0x3d, r28	; 61
     7fc:	98 8b       	std	Y+16, r25	; 0x10
     7fe:	8f 87       	std	Y+15, r24	; 0x0f
	
	while(steps > 0)
     800:	e9 c0       	rjmp	.+466    	; 0x9d4 <rotate_RI_Counter_CW+0x1f0>
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	a0 e7       	ldi	r26, 0x70	; 112
     808:	b1 e4       	ldi	r27, 0x41	; 65
     80a:	89 83       	std	Y+1, r24	; 0x01
     80c:	9a 83       	std	Y+2, r25	; 0x02
     80e:	ab 83       	std	Y+3, r26	; 0x03
     810:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     812:	69 81       	ldd	r22, Y+1	; 0x01
     814:	7a 81       	ldd	r23, Y+2	; 0x02
     816:	8b 81       	ldd	r24, Y+3	; 0x03
     818:	9c 81       	ldd	r25, Y+4	; 0x04
     81a:	20 e0       	ldi	r18, 0x00	; 0
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	4a ef       	ldi	r20, 0xFA	; 250
     820:	54 e4       	ldi	r21, 0x44	; 68
     822:	c7 d5       	rcall	.+2958   	; 0x13b2 <__mulsf3>
     824:	dc 01       	movw	r26, r24
     826:	cb 01       	movw	r24, r22
     828:	8d 83       	std	Y+5, r24	; 0x05
     82a:	9e 83       	std	Y+6, r25	; 0x06
     82c:	af 83       	std	Y+7, r26	; 0x07
     82e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     830:	11 e0       	ldi	r17, 0x01	; 1
     832:	6d 81       	ldd	r22, Y+5	; 0x05
     834:	7e 81       	ldd	r23, Y+6	; 0x06
     836:	8f 81       	ldd	r24, Y+7	; 0x07
     838:	98 85       	ldd	r25, Y+8	; 0x08
     83a:	20 e0       	ldi	r18, 0x00	; 0
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	40 e8       	ldi	r20, 0x80	; 128
     840:	5f e3       	ldi	r21, 0x3F	; 63
     842:	02 d7       	rcall	.+3588   	; 0x1648 <__ltsf2>
     844:	88 23       	and	r24, r24
     846:	0c f0       	brlt	.+2      	; 0x84a <rotate_RI_Counter_CW+0x66>
     848:	10 e0       	ldi	r17, 0x00	; 0
     84a:	11 23       	and	r17, r17
     84c:	29 f0       	breq	.+10     	; 0x858 <rotate_RI_Counter_CW+0x74>
		__ticks = 1;
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	9a 87       	std	Y+10, r25	; 0x0a
     854:	89 87       	std	Y+9, r24	; 0x09
     856:	42 c0       	rjmp	.+132    	; 0x8dc <rotate_RI_Counter_CW+0xf8>
	else if (__tmp > 65535)
     858:	11 e0       	ldi	r17, 0x01	; 1
     85a:	6d 81       	ldd	r22, Y+5	; 0x05
     85c:	7e 81       	ldd	r23, Y+6	; 0x06
     85e:	8f 81       	ldd	r24, Y+7	; 0x07
     860:	98 85       	ldd	r25, Y+8	; 0x08
     862:	20 e0       	ldi	r18, 0x00	; 0
     864:	3f ef       	ldi	r19, 0xFF	; 255
     866:	4f e7       	ldi	r20, 0x7F	; 127
     868:	57 e4       	ldi	r21, 0x47	; 71
     86a:	98 d6       	rcall	.+3376   	; 0x159c <__gtsf2>
     86c:	18 16       	cp	r1, r24
     86e:	0c f0       	brlt	.+2      	; 0x872 <rotate_RI_Counter_CW+0x8e>
     870:	10 e0       	ldi	r17, 0x00	; 0
     872:	11 23       	and	r17, r17
     874:	51 f1       	breq	.+84     	; 0x8ca <rotate_RI_Counter_CW+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     876:	69 81       	ldd	r22, Y+1	; 0x01
     878:	7a 81       	ldd	r23, Y+2	; 0x02
     87a:	8b 81       	ldd	r24, Y+3	; 0x03
     87c:	9c 81       	ldd	r25, Y+4	; 0x04
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e2       	ldi	r20, 0x20	; 32
     884:	51 e4       	ldi	r21, 0x41	; 65
     886:	95 d5       	rcall	.+2858   	; 0x13b2 <__mulsf3>
     888:	dc 01       	movw	r26, r24
     88a:	cb 01       	movw	r24, r22
     88c:	bc 01       	movw	r22, r24
     88e:	cd 01       	movw	r24, r26
     890:	ce d3       	rcall	.+1948   	; 0x102e <__fixunssfsi>
     892:	dc 01       	movw	r26, r24
     894:	cb 01       	movw	r24, r22
     896:	9a 87       	std	Y+10, r25	; 0x0a
     898:	89 87       	std	Y+9, r24	; 0x09
     89a:	12 c0       	rjmp	.+36     	; 0x8c0 <rotate_RI_Counter_CW+0xdc>
     89c:	88 ec       	ldi	r24, 0xC8	; 200
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	9c 87       	std	Y+12, r25	; 0x0c
     8a2:	8b 87       	std	Y+11, r24	; 0x0b
     8a4:	8b 85       	ldd	r24, Y+11	; 0x0b
     8a6:	9c 85       	ldd	r25, Y+12	; 0x0c
     8a8:	8c 01       	movw	r16, r24
     8aa:	c8 01       	movw	r24, r16
     8ac:	01 97       	sbiw	r24, 0x01	; 1
     8ae:	f1 f7       	brne	.-4      	; 0x8ac <rotate_RI_Counter_CW+0xc8>
     8b0:	8c 01       	movw	r16, r24
     8b2:	1c 87       	std	Y+12, r17	; 0x0c
     8b4:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8b6:	89 85       	ldd	r24, Y+9	; 0x09
     8b8:	9a 85       	ldd	r25, Y+10	; 0x0a
     8ba:	01 97       	sbiw	r24, 0x01	; 1
     8bc:	9a 87       	std	Y+10, r25	; 0x0a
     8be:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8c0:	89 85       	ldd	r24, Y+9	; 0x09
     8c2:	9a 85       	ldd	r25, Y+10	; 0x0a
     8c4:	00 97       	sbiw	r24, 0x00	; 0
     8c6:	51 f7       	brne	.-44     	; 0x89c <rotate_RI_Counter_CW+0xb8>
     8c8:	16 c0       	rjmp	.+44     	; 0x8f6 <rotate_RI_Counter_CW+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8ca:	6d 81       	ldd	r22, Y+5	; 0x05
     8cc:	7e 81       	ldd	r23, Y+6	; 0x06
     8ce:	8f 81       	ldd	r24, Y+7	; 0x07
     8d0:	98 85       	ldd	r25, Y+8	; 0x08
     8d2:	ad d3       	rcall	.+1882   	; 0x102e <__fixunssfsi>
     8d4:	dc 01       	movw	r26, r24
     8d6:	cb 01       	movw	r24, r22
     8d8:	9a 87       	std	Y+10, r25	; 0x0a
     8da:	89 87       	std	Y+9, r24	; 0x09
     8dc:	89 85       	ldd	r24, Y+9	; 0x09
     8de:	9a 85       	ldd	r25, Y+10	; 0x0a
     8e0:	9e 87       	std	Y+14, r25	; 0x0e
     8e2:	8d 87       	std	Y+13, r24	; 0x0d
     8e4:	8d 85       	ldd	r24, Y+13	; 0x0d
     8e6:	9e 85       	ldd	r25, Y+14	; 0x0e
     8e8:	8c 01       	movw	r16, r24
     8ea:	f8 01       	movw	r30, r16
     8ec:	31 97       	sbiw	r30, 0x01	; 1
     8ee:	f1 f7       	brne	.-4      	; 0x8ec <rotate_RI_Counter_CW+0x108>
     8f0:	8f 01       	movw	r16, r30
     8f2:	1e 87       	std	Y+14, r17	; 0x0e
     8f4:	0d 87       	std	Y+13, r16	; 0x0d
	{
		_delay_ms(15);
		if(steps > 0 && stepper_state == 0)
     8f6:	8f 85       	ldd	r24, Y+15	; 0x0f
     8f8:	98 89       	ldd	r25, Y+16	; 0x10
     8fa:	00 97       	sbiw	r24, 0x00	; 0
     8fc:	c1 f0       	breq	.+48     	; 0x92e <rotate_RI_Counter_CW+0x14a>
     8fe:	80 91 97 00 	lds	r24, 0x0097
     902:	88 23       	and	r24, r24
     904:	a1 f4       	brne	.+40     	; 0x92e <rotate_RI_Counter_CW+0x14a>
		{	
			PORTB = (1<<PB2) | (1<<PB1) | (1<<PB0); 
     906:	88 e3       	ldi	r24, 0x38	; 56
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	27 e0       	ldi	r18, 0x07	; 7
     90c:	fc 01       	movw	r30, r24
     90e:	20 83       	st	Z, r18
			PORTD = (0<<PD7) | (0<<PD6) | (0<<PD5);
     910:	82 e3       	ldi	r24, 0x32	; 50
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	fc 01       	movw	r30, r24
     916:	10 82       	st	Z, r1
			steps--;
     918:	8f 85       	ldd	r24, Y+15	; 0x0f
     91a:	98 89       	ldd	r25, Y+16	; 0x10
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	98 8b       	std	Y+16, r25	; 0x10
     920:	8f 87       	std	Y+15, r24	; 0x0f
			stepper_state++;
     922:	80 91 97 00 	lds	r24, 0x0097
     926:	8f 5f       	subi	r24, 0xFF	; 255
     928:	80 93 97 00 	sts	0x0097, r24
     92c:	53 c0       	rjmp	.+166    	; 0x9d4 <rotate_RI_Counter_CW+0x1f0>
		}

		else if(steps > 0 && stepper_state == 1)
     92e:	8f 85       	ldd	r24, Y+15	; 0x0f
     930:	98 89       	ldd	r25, Y+16	; 0x10
     932:	00 97       	sbiw	r24, 0x00	; 0
     934:	c9 f0       	breq	.+50     	; 0x968 <rotate_RI_Counter_CW+0x184>
     936:	80 91 97 00 	lds	r24, 0x0097
     93a:	81 30       	cpi	r24, 0x01	; 1
     93c:	a9 f4       	brne	.+42     	; 0x968 <rotate_RI_Counter_CW+0x184>
		{
			PORTB = (1<<PB2) | (1<<PB1) | (0<<PB0);// 6
     93e:	88 e3       	ldi	r24, 0x38	; 56
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	26 e0       	ldi	r18, 0x06	; 6
     944:	fc 01       	movw	r30, r24
     946:	20 83       	st	Z, r18
			PORTD = (0<<PD7) | (1<<PD6) | (0<<PD5); //64
     948:	82 e3       	ldi	r24, 0x32	; 50
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	20 e4       	ldi	r18, 0x40	; 64
     94e:	fc 01       	movw	r30, r24
     950:	20 83       	st	Z, r18
			steps--;
     952:	8f 85       	ldd	r24, Y+15	; 0x0f
     954:	98 89       	ldd	r25, Y+16	; 0x10
     956:	01 97       	sbiw	r24, 0x01	; 1
     958:	98 8b       	std	Y+16, r25	; 0x10
     95a:	8f 87       	std	Y+15, r24	; 0x0f
			stepper_state++;
     95c:	80 91 97 00 	lds	r24, 0x0097
     960:	8f 5f       	subi	r24, 0xFF	; 255
     962:	80 93 97 00 	sts	0x0097, r24
     966:	36 c0       	rjmp	.+108    	; 0x9d4 <rotate_RI_Counter_CW+0x1f0>
		}
			
		else if(steps > 0 && stepper_state == 2)
     968:	8f 85       	ldd	r24, Y+15	; 0x0f
     96a:	98 89       	ldd	r25, Y+16	; 0x10
     96c:	00 97       	sbiw	r24, 0x00	; 0
     96e:	c9 f0       	breq	.+50     	; 0x9a2 <rotate_RI_Counter_CW+0x1be>
     970:	80 91 97 00 	lds	r24, 0x0097
     974:	82 30       	cpi	r24, 0x02	; 2
     976:	a9 f4       	brne	.+42     	; 0x9a2 <rotate_RI_Counter_CW+0x1be>
		{
			PORTB = (1<<PB2) | (1<<PB1) | (0<<PB0); //6
     978:	88 e3       	ldi	r24, 0x38	; 56
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	26 e0       	ldi	r18, 0x06	; 6
     97e:	fc 01       	movw	r30, r24
     980:	20 83       	st	Z, r18
			PORTD = (1<<PD7) | (0<<PD6) | (0<<PD5); //128
     982:	82 e3       	ldi	r24, 0x32	; 50
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	20 e8       	ldi	r18, 0x80	; 128
     988:	fc 01       	movw	r30, r24
     98a:	20 83       	st	Z, r18
			steps--;
     98c:	8f 85       	ldd	r24, Y+15	; 0x0f
     98e:	98 89       	ldd	r25, Y+16	; 0x10
     990:	01 97       	sbiw	r24, 0x01	; 1
     992:	98 8b       	std	Y+16, r25	; 0x10
     994:	8f 87       	std	Y+15, r24	; 0x0f
			stepper_state++;
     996:	80 91 97 00 	lds	r24, 0x0097
     99a:	8f 5f       	subi	r24, 0xFF	; 255
     99c:	80 93 97 00 	sts	0x0097, r24
     9a0:	19 c0       	rjmp	.+50     	; 0x9d4 <rotate_RI_Counter_CW+0x1f0>
		}	
		
		else if(steps > 0 && stepper_state == 3)
     9a2:	8f 85       	ldd	r24, Y+15	; 0x0f
     9a4:	98 89       	ldd	r25, Y+16	; 0x10
     9a6:	00 97       	sbiw	r24, 0x00	; 0
     9a8:	a9 f0       	breq	.+42     	; 0x9d4 <rotate_RI_Counter_CW+0x1f0>
     9aa:	80 91 97 00 	lds	r24, 0x0097
     9ae:	83 30       	cpi	r24, 0x03	; 3
     9b0:	89 f4       	brne	.+34     	; 0x9d4 <rotate_RI_Counter_CW+0x1f0>
		{	
			PORTB = (1<<PB2) | (1<<PB1) | (0<<PB0); 
     9b2:	88 e3       	ldi	r24, 0x38	; 56
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	26 e0       	ldi	r18, 0x06	; 6
     9b8:	fc 01       	movw	r30, r24
     9ba:	20 83       	st	Z, r18
			PORTD = (0<<PD7) | (0<<PD6) | (1<<PD5);
     9bc:	82 e3       	ldi	r24, 0x32	; 50
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	20 e2       	ldi	r18, 0x20	; 32
     9c2:	fc 01       	movw	r30, r24
     9c4:	20 83       	st	Z, r18
			steps--;
     9c6:	8f 85       	ldd	r24, Y+15	; 0x0f
     9c8:	98 89       	ldd	r25, Y+16	; 0x10
     9ca:	01 97       	sbiw	r24, 0x01	; 1
     9cc:	98 8b       	std	Y+16, r25	; 0x10
     9ce:	8f 87       	std	Y+15, r24	; 0x0f
			stepper_state = 0;
     9d0:	10 92 97 00 	sts	0x0097, r1
}

void rotate_RI_Counter_CW(uint16_t steps)
{
	
	while(steps > 0)
     9d4:	8f 85       	ldd	r24, Y+15	; 0x0f
     9d6:	98 89       	ldd	r25, Y+16	; 0x10
     9d8:	00 97       	sbiw	r24, 0x00	; 0
     9da:	09 f0       	breq	.+2      	; 0x9de <rotate_RI_Counter_CW+0x1fa>
     9dc:	12 cf       	rjmp	.-476    	; 0x802 <rotate_RI_Counter_CW+0x1e>
			
		}	
		
	}
	
}		
     9de:	60 96       	adiw	r28, 0x10	; 16
     9e0:	0f b6       	in	r0, 0x3f	; 63
     9e2:	f8 94       	cli
     9e4:	de bf       	out	0x3e, r29	; 62
     9e6:	0f be       	out	0x3f, r0	; 63
     9e8:	cd bf       	out	0x3d, r28	; 61
     9ea:	cf 91       	pop	r28
     9ec:	df 91       	pop	r29
     9ee:	1f 91       	pop	r17
     9f0:	0f 91       	pop	r16
     9f2:	08 95       	ret

000009f4 <rotate_RI_CW>:

void rotate_RI_CW(uint16_t steps)
{
     9f4:	0f 93       	push	r16
     9f6:	1f 93       	push	r17
     9f8:	df 93       	push	r29
     9fa:	cf 93       	push	r28
     9fc:	cd b7       	in	r28, 0x3d	; 61
     9fe:	de b7       	in	r29, 0x3e	; 62
     a00:	60 97       	sbiw	r28, 0x10	; 16
     a02:	0f b6       	in	r0, 0x3f	; 63
     a04:	f8 94       	cli
     a06:	de bf       	out	0x3e, r29	; 62
     a08:	0f be       	out	0x3f, r0	; 63
     a0a:	cd bf       	out	0x3d, r28	; 61
     a0c:	98 8b       	std	Y+16, r25	; 0x10
     a0e:	8f 87       	std	Y+15, r24	; 0x0f
	
	while(steps > 0)
     a10:	e9 c0       	rjmp	.+466    	; 0xbe4 <rotate_RI_CW+0x1f0>
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	a0 e7       	ldi	r26, 0x70	; 112
     a18:	b1 e4       	ldi	r27, 0x41	; 65
     a1a:	89 83       	std	Y+1, r24	; 0x01
     a1c:	9a 83       	std	Y+2, r25	; 0x02
     a1e:	ab 83       	std	Y+3, r26	; 0x03
     a20:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     a22:	69 81       	ldd	r22, Y+1	; 0x01
     a24:	7a 81       	ldd	r23, Y+2	; 0x02
     a26:	8b 81       	ldd	r24, Y+3	; 0x03
     a28:	9c 81       	ldd	r25, Y+4	; 0x04
     a2a:	20 e0       	ldi	r18, 0x00	; 0
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	4a ef       	ldi	r20, 0xFA	; 250
     a30:	54 e4       	ldi	r21, 0x44	; 68
     a32:	bf d4       	rcall	.+2430   	; 0x13b2 <__mulsf3>
     a34:	dc 01       	movw	r26, r24
     a36:	cb 01       	movw	r24, r22
     a38:	8d 83       	std	Y+5, r24	; 0x05
     a3a:	9e 83       	std	Y+6, r25	; 0x06
     a3c:	af 83       	std	Y+7, r26	; 0x07
     a3e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     a40:	11 e0       	ldi	r17, 0x01	; 1
     a42:	6d 81       	ldd	r22, Y+5	; 0x05
     a44:	7e 81       	ldd	r23, Y+6	; 0x06
     a46:	8f 81       	ldd	r24, Y+7	; 0x07
     a48:	98 85       	ldd	r25, Y+8	; 0x08
     a4a:	20 e0       	ldi	r18, 0x00	; 0
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	40 e8       	ldi	r20, 0x80	; 128
     a50:	5f e3       	ldi	r21, 0x3F	; 63
     a52:	fa d5       	rcall	.+3060   	; 0x1648 <__ltsf2>
     a54:	88 23       	and	r24, r24
     a56:	0c f0       	brlt	.+2      	; 0xa5a <rotate_RI_CW+0x66>
     a58:	10 e0       	ldi	r17, 0x00	; 0
     a5a:	11 23       	and	r17, r17
     a5c:	29 f0       	breq	.+10     	; 0xa68 <rotate_RI_CW+0x74>
		__ticks = 1;
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	9a 87       	std	Y+10, r25	; 0x0a
     a64:	89 87       	std	Y+9, r24	; 0x09
     a66:	42 c0       	rjmp	.+132    	; 0xaec <rotate_RI_CW+0xf8>
	else if (__tmp > 65535)
     a68:	11 e0       	ldi	r17, 0x01	; 1
     a6a:	6d 81       	ldd	r22, Y+5	; 0x05
     a6c:	7e 81       	ldd	r23, Y+6	; 0x06
     a6e:	8f 81       	ldd	r24, Y+7	; 0x07
     a70:	98 85       	ldd	r25, Y+8	; 0x08
     a72:	20 e0       	ldi	r18, 0x00	; 0
     a74:	3f ef       	ldi	r19, 0xFF	; 255
     a76:	4f e7       	ldi	r20, 0x7F	; 127
     a78:	57 e4       	ldi	r21, 0x47	; 71
     a7a:	90 d5       	rcall	.+2848   	; 0x159c <__gtsf2>
     a7c:	18 16       	cp	r1, r24
     a7e:	0c f0       	brlt	.+2      	; 0xa82 <rotate_RI_CW+0x8e>
     a80:	10 e0       	ldi	r17, 0x00	; 0
     a82:	11 23       	and	r17, r17
     a84:	51 f1       	breq	.+84     	; 0xada <rotate_RI_CW+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a86:	69 81       	ldd	r22, Y+1	; 0x01
     a88:	7a 81       	ldd	r23, Y+2	; 0x02
     a8a:	8b 81       	ldd	r24, Y+3	; 0x03
     a8c:	9c 81       	ldd	r25, Y+4	; 0x04
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	40 e2       	ldi	r20, 0x20	; 32
     a94:	51 e4       	ldi	r21, 0x41	; 65
     a96:	8d d4       	rcall	.+2330   	; 0x13b2 <__mulsf3>
     a98:	dc 01       	movw	r26, r24
     a9a:	cb 01       	movw	r24, r22
     a9c:	bc 01       	movw	r22, r24
     a9e:	cd 01       	movw	r24, r26
     aa0:	c6 d2       	rcall	.+1420   	; 0x102e <__fixunssfsi>
     aa2:	dc 01       	movw	r26, r24
     aa4:	cb 01       	movw	r24, r22
     aa6:	9a 87       	std	Y+10, r25	; 0x0a
     aa8:	89 87       	std	Y+9, r24	; 0x09
     aaa:	12 c0       	rjmp	.+36     	; 0xad0 <rotate_RI_CW+0xdc>
     aac:	88 ec       	ldi	r24, 0xC8	; 200
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	9c 87       	std	Y+12, r25	; 0x0c
     ab2:	8b 87       	std	Y+11, r24	; 0x0b
     ab4:	8b 85       	ldd	r24, Y+11	; 0x0b
     ab6:	9c 85       	ldd	r25, Y+12	; 0x0c
     ab8:	8c 01       	movw	r16, r24
     aba:	c8 01       	movw	r24, r16
     abc:	01 97       	sbiw	r24, 0x01	; 1
     abe:	f1 f7       	brne	.-4      	; 0xabc <rotate_RI_CW+0xc8>
     ac0:	8c 01       	movw	r16, r24
     ac2:	1c 87       	std	Y+12, r17	; 0x0c
     ac4:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ac6:	89 85       	ldd	r24, Y+9	; 0x09
     ac8:	9a 85       	ldd	r25, Y+10	; 0x0a
     aca:	01 97       	sbiw	r24, 0x01	; 1
     acc:	9a 87       	std	Y+10, r25	; 0x0a
     ace:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ad0:	89 85       	ldd	r24, Y+9	; 0x09
     ad2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ad4:	00 97       	sbiw	r24, 0x00	; 0
     ad6:	51 f7       	brne	.-44     	; 0xaac <rotate_RI_CW+0xb8>
     ad8:	16 c0       	rjmp	.+44     	; 0xb06 <rotate_RI_CW+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ada:	6d 81       	ldd	r22, Y+5	; 0x05
     adc:	7e 81       	ldd	r23, Y+6	; 0x06
     ade:	8f 81       	ldd	r24, Y+7	; 0x07
     ae0:	98 85       	ldd	r25, Y+8	; 0x08
     ae2:	a5 d2       	rcall	.+1354   	; 0x102e <__fixunssfsi>
     ae4:	dc 01       	movw	r26, r24
     ae6:	cb 01       	movw	r24, r22
     ae8:	9a 87       	std	Y+10, r25	; 0x0a
     aea:	89 87       	std	Y+9, r24	; 0x09
     aec:	89 85       	ldd	r24, Y+9	; 0x09
     aee:	9a 85       	ldd	r25, Y+10	; 0x0a
     af0:	9e 87       	std	Y+14, r25	; 0x0e
     af2:	8d 87       	std	Y+13, r24	; 0x0d
     af4:	8d 85       	ldd	r24, Y+13	; 0x0d
     af6:	9e 85       	ldd	r25, Y+14	; 0x0e
     af8:	8c 01       	movw	r16, r24
     afa:	f8 01       	movw	r30, r16
     afc:	31 97       	sbiw	r30, 0x01	; 1
     afe:	f1 f7       	brne	.-4      	; 0xafc <rotate_RI_CW+0x108>
     b00:	8f 01       	movw	r16, r30
     b02:	1e 87       	std	Y+14, r17	; 0x0e
     b04:	0d 87       	std	Y+13, r16	; 0x0d
	{
		_delay_ms(15);
		if(steps > 0 && stepper_state == 0)
     b06:	8f 85       	ldd	r24, Y+15	; 0x0f
     b08:	98 89       	ldd	r25, Y+16	; 0x10
     b0a:	00 97       	sbiw	r24, 0x00	; 0
     b0c:	c9 f0       	breq	.+50     	; 0xb40 <rotate_RI_CW+0x14c>
     b0e:	80 91 97 00 	lds	r24, 0x0097
     b12:	88 23       	and	r24, r24
     b14:	a9 f4       	brne	.+42     	; 0xb40 <rotate_RI_CW+0x14c>
		{	
			PORTB = (1<<PB2) | (1<<PB1) | (0<<PB0); 
     b16:	88 e3       	ldi	r24, 0x38	; 56
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	26 e0       	ldi	r18, 0x06	; 6
     b1c:	fc 01       	movw	r30, r24
     b1e:	20 83       	st	Z, r18
			PORTD = (0<<PD7) | (0<<PD6) | (1<<PD5);
     b20:	82 e3       	ldi	r24, 0x32	; 50
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	20 e2       	ldi	r18, 0x20	; 32
     b26:	fc 01       	movw	r30, r24
     b28:	20 83       	st	Z, r18
			steps--;
     b2a:	8f 85       	ldd	r24, Y+15	; 0x0f
     b2c:	98 89       	ldd	r25, Y+16	; 0x10
     b2e:	01 97       	sbiw	r24, 0x01	; 1
     b30:	98 8b       	std	Y+16, r25	; 0x10
     b32:	8f 87       	std	Y+15, r24	; 0x0f
			stepper_state++;
     b34:	80 91 97 00 	lds	r24, 0x0097
     b38:	8f 5f       	subi	r24, 0xFF	; 255
     b3a:	80 93 97 00 	sts	0x0097, r24
     b3e:	52 c0       	rjmp	.+164    	; 0xbe4 <rotate_RI_CW+0x1f0>
		}			
		
		else if(steps > 0 && stepper_state == 1)
     b40:	8f 85       	ldd	r24, Y+15	; 0x0f
     b42:	98 89       	ldd	r25, Y+16	; 0x10
     b44:	00 97       	sbiw	r24, 0x00	; 0
     b46:	c9 f0       	breq	.+50     	; 0xb7a <rotate_RI_CW+0x186>
     b48:	80 91 97 00 	lds	r24, 0x0097
     b4c:	81 30       	cpi	r24, 0x01	; 1
     b4e:	a9 f4       	brne	.+42     	; 0xb7a <rotate_RI_CW+0x186>
		{	
			PORTB = (1<<PB2) | (1<<PB1) | (0<<PB0); 
     b50:	88 e3       	ldi	r24, 0x38	; 56
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	26 e0       	ldi	r18, 0x06	; 6
     b56:	fc 01       	movw	r30, r24
     b58:	20 83       	st	Z, r18
			PORTD = (1<<PD7) | (0<<PD6) | (0<<PD5);
     b5a:	82 e3       	ldi	r24, 0x32	; 50
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	20 e8       	ldi	r18, 0x80	; 128
     b60:	fc 01       	movw	r30, r24
     b62:	20 83       	st	Z, r18
			steps--;
     b64:	8f 85       	ldd	r24, Y+15	; 0x0f
     b66:	98 89       	ldd	r25, Y+16	; 0x10
     b68:	01 97       	sbiw	r24, 0x01	; 1
     b6a:	98 8b       	std	Y+16, r25	; 0x10
     b6c:	8f 87       	std	Y+15, r24	; 0x0f
			stepper_state++;
     b6e:	80 91 97 00 	lds	r24, 0x0097
     b72:	8f 5f       	subi	r24, 0xFF	; 255
     b74:	80 93 97 00 	sts	0x0097, r24
     b78:	35 c0       	rjmp	.+106    	; 0xbe4 <rotate_RI_CW+0x1f0>
		}			
		
		else if(steps > 0 && stepper_state == 2)
     b7a:	8f 85       	ldd	r24, Y+15	; 0x0f
     b7c:	98 89       	ldd	r25, Y+16	; 0x10
     b7e:	00 97       	sbiw	r24, 0x00	; 0
     b80:	c9 f0       	breq	.+50     	; 0xbb4 <rotate_RI_CW+0x1c0>
     b82:	80 91 97 00 	lds	r24, 0x0097
     b86:	82 30       	cpi	r24, 0x02	; 2
     b88:	a9 f4       	brne	.+42     	; 0xbb4 <rotate_RI_CW+0x1c0>
		{	
			PORTB = (1<<PB2) | (1<<PB1) | (0<<PB0); 
     b8a:	88 e3       	ldi	r24, 0x38	; 56
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	26 e0       	ldi	r18, 0x06	; 6
     b90:	fc 01       	movw	r30, r24
     b92:	20 83       	st	Z, r18
			PORTD = (0<<PD7) | (1<<PD6) | (0<<PD5);
     b94:	82 e3       	ldi	r24, 0x32	; 50
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	20 e4       	ldi	r18, 0x40	; 64
     b9a:	fc 01       	movw	r30, r24
     b9c:	20 83       	st	Z, r18
			steps--;
     b9e:	8f 85       	ldd	r24, Y+15	; 0x0f
     ba0:	98 89       	ldd	r25, Y+16	; 0x10
     ba2:	01 97       	sbiw	r24, 0x01	; 1
     ba4:	98 8b       	std	Y+16, r25	; 0x10
     ba6:	8f 87       	std	Y+15, r24	; 0x0f
			stepper_state++;
     ba8:	80 91 97 00 	lds	r24, 0x0097
     bac:	8f 5f       	subi	r24, 0xFF	; 255
     bae:	80 93 97 00 	sts	0x0097, r24
     bb2:	18 c0       	rjmp	.+48     	; 0xbe4 <rotate_RI_CW+0x1f0>
		}			
		
		else if(steps > 0 && stepper_state == 3)
     bb4:	8f 85       	ldd	r24, Y+15	; 0x0f
     bb6:	98 89       	ldd	r25, Y+16	; 0x10
     bb8:	00 97       	sbiw	r24, 0x00	; 0
     bba:	a1 f0       	breq	.+40     	; 0xbe4 <rotate_RI_CW+0x1f0>
     bbc:	80 91 97 00 	lds	r24, 0x0097
     bc0:	83 30       	cpi	r24, 0x03	; 3
     bc2:	81 f4       	brne	.+32     	; 0xbe4 <rotate_RI_CW+0x1f0>
		{	
			PORTB = (1<<PB2) | (1<<PB1) | (1<<PB0); 
     bc4:	88 e3       	ldi	r24, 0x38	; 56
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	27 e0       	ldi	r18, 0x07	; 7
     bca:	fc 01       	movw	r30, r24
     bcc:	20 83       	st	Z, r18
			PORTD = (0<<PD7) | (0<<PD6) | (0<<PD5);
     bce:	82 e3       	ldi	r24, 0x32	; 50
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	fc 01       	movw	r30, r24
     bd4:	10 82       	st	Z, r1
			steps--;
     bd6:	8f 85       	ldd	r24, Y+15	; 0x0f
     bd8:	98 89       	ldd	r25, Y+16	; 0x10
     bda:	01 97       	sbiw	r24, 0x01	; 1
     bdc:	98 8b       	std	Y+16, r25	; 0x10
     bde:	8f 87       	std	Y+15, r24	; 0x0f
			stepper_state = 0;
     be0:	10 92 97 00 	sts	0x0097, r1
}		

void rotate_RI_CW(uint16_t steps)
{
	
	while(steps > 0)
     be4:	8f 85       	ldd	r24, Y+15	; 0x0f
     be6:	98 89       	ldd	r25, Y+16	; 0x10
     be8:	00 97       	sbiw	r24, 0x00	; 0
     bea:	09 f0       	breq	.+2      	; 0xbee <rotate_RI_CW+0x1fa>
     bec:	12 cf       	rjmp	.-476    	; 0xa12 <rotate_RI_CW+0x1e>
			
		}			
			
	}
	
}			
     bee:	60 96       	adiw	r28, 0x10	; 16
     bf0:	0f b6       	in	r0, 0x3f	; 63
     bf2:	f8 94       	cli
     bf4:	de bf       	out	0x3e, r29	; 62
     bf6:	0f be       	out	0x3f, r0	; 63
     bf8:	cd bf       	out	0x3d, r28	; 61
     bfa:	cf 91       	pop	r28
     bfc:	df 91       	pop	r29
     bfe:	1f 91       	pop	r17
     c00:	0f 91       	pop	r16
     c02:	08 95       	ret

00000c04 <start_Test>:

void start_Test (void)
{
     c04:	df 93       	push	r29
     c06:	cf 93       	push	r28
     c08:	cd b7       	in	r28, 0x3d	; 61
     c0a:	de b7       	in	r29, 0x3e	; 62
	Command_Display(Clear_Screen);
     c0c:	88 e5       	ldi	r24, 0x58	; 88
     c0e:	d4 db       	rcall	.-2136   	; 0x3b8 <Command_Display>
	Command_Display(Go_Home);
     c10:	88 e4       	ldi	r24, 0x48	; 72
     c12:	d2 db       	rcall	.-2140   	; 0x3b8 <Command_Display>
	UWriteString(start_Screen1);
     c14:	89 e7       	ldi	r24, 0x79	; 121
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	b2 db       	rcall	.-2204   	; 0x37e <UWriteString>
	Set_Cursor_Position(1,2);
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	62 e0       	ldi	r22, 0x02	; 2
     c1e:	ea db       	rcall	.-2092   	; 0x3f4 <Set_Cursor_Position>
	UWriteString(start_Screen2);
     c20:	81 e8       	ldi	r24, 0x81	; 129
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	ac db       	rcall	.-2216   	; 0x37e <UWriteString>
}
     c26:	cf 91       	pop	r28
     c28:	df 91       	pop	r29
     c2a:	08 95       	ret

00000c2c <pause_Test>:

void pause_Test (void)
{
     c2c:	df 93       	push	r29
     c2e:	cf 93       	push	r28
     c30:	cd b7       	in	r28, 0x3d	; 61
     c32:	de b7       	in	r29, 0x3e	; 62
	Command_Display(Clear_Screen);	
     c34:	88 e5       	ldi	r24, 0x58	; 88
     c36:	c0 db       	rcall	.-2176   	; 0x3b8 <Command_Display>
	Command_Display(Go_Home);
     c38:	88 e4       	ldi	r24, 0x48	; 72
     c3a:	be db       	rcall	.-2180   	; 0x3b8 <Command_Display>
	UWriteString(aNumberAsString);	
     c3c:	88 e9       	ldi	r24, 0x98	; 152
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	9e db       	rcall	.-2244   	; 0x37e <UWriteString>
	Set_Cursor_Position(1,2);
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	62 e0       	ldi	r22, 0x02	; 2
     c46:	d6 db       	rcall	.-2132   	; 0x3f4 <Set_Cursor_Position>
	UWriteString(pause_String);
     c48:	89 e6       	ldi	r24, 0x69	; 105
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	98 db       	rcall	.-2256   	; 0x37e <UWriteString>
}
     c4e:	cf 91       	pop	r28
     c50:	df 91       	pop	r29
     c52:	08 95       	ret

00000c54 <RI_Test_1>:

void RI_Test_1(void)
{
     c54:	0f 93       	push	r16
     c56:	1f 93       	push	r17
     c58:	df 93       	push	r29
     c5a:	cf 93       	push	r28
     c5c:	cd b7       	in	r28, 0x3d	; 61
     c5e:	de b7       	in	r29, 0x3e	; 62
     c60:	2e 97       	sbiw	r28, 0x0e	; 14
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	f8 94       	cli
     c66:	de bf       	out	0x3e, r29	; 62
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	cd bf       	out	0x3d, r28	; 61
	if(rotation_Count < 100000)
     c6c:	80 91 92 00 	lds	r24, 0x0092
     c70:	90 91 93 00 	lds	r25, 0x0093
     c74:	a0 91 94 00 	lds	r26, 0x0094
     c78:	b0 91 95 00 	lds	r27, 0x0095
     c7c:	80 3a       	cpi	r24, 0xA0	; 160
     c7e:	26 e8       	ldi	r18, 0x86	; 134
     c80:	92 07       	cpc	r25, r18
     c82:	21 e0       	ldi	r18, 0x01	; 1
     c84:	a2 07       	cpc	r26, r18
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	b2 07       	cpc	r27, r18
     c8a:	08 f0       	brcs	.+2      	; 0xc8e <RI_Test_1+0x3a>
     c8c:	81 c0       	rjmp	.+258    	; 0xd90 <RI_Test_1+0x13c>
	{
		rotate_RI_QTR_CW(5);
     c8e:	85 e0       	ldi	r24, 0x05	; 5
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	24 dc       	rcall	.-1976   	; 0x4dc <rotate_RI_QTR_CW>
		rotate_RI_QTR_Counter_CW(5);
     c94:	85 e0       	ldi	r24, 0x05	; 5
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	e3 dc       	rcall	.-1594   	; 0x660 <rotate_RI_QTR_Counter_CW>
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	aa ef       	ldi	r26, 0xFA	; 250
     ca0:	b3 e4       	ldi	r27, 0x43	; 67
     ca2:	89 83       	std	Y+1, r24	; 0x01
     ca4:	9a 83       	std	Y+2, r25	; 0x02
     ca6:	ab 83       	std	Y+3, r26	; 0x03
     ca8:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     caa:	69 81       	ldd	r22, Y+1	; 0x01
     cac:	7a 81       	ldd	r23, Y+2	; 0x02
     cae:	8b 81       	ldd	r24, Y+3	; 0x03
     cb0:	9c 81       	ldd	r25, Y+4	; 0x04
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	4a ef       	ldi	r20, 0xFA	; 250
     cb8:	54 e4       	ldi	r21, 0x44	; 68
     cba:	7b d3       	rcall	.+1782   	; 0x13b2 <__mulsf3>
     cbc:	dc 01       	movw	r26, r24
     cbe:	cb 01       	movw	r24, r22
     cc0:	8d 83       	std	Y+5, r24	; 0x05
     cc2:	9e 83       	std	Y+6, r25	; 0x06
     cc4:	af 83       	std	Y+7, r26	; 0x07
     cc6:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     cc8:	11 e0       	ldi	r17, 0x01	; 1
     cca:	6d 81       	ldd	r22, Y+5	; 0x05
     ccc:	7e 81       	ldd	r23, Y+6	; 0x06
     cce:	8f 81       	ldd	r24, Y+7	; 0x07
     cd0:	98 85       	ldd	r25, Y+8	; 0x08
     cd2:	20 e0       	ldi	r18, 0x00	; 0
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	40 e8       	ldi	r20, 0x80	; 128
     cd8:	5f e3       	ldi	r21, 0x3F	; 63
     cda:	b6 d4       	rcall	.+2412   	; 0x1648 <__ltsf2>
     cdc:	88 23       	and	r24, r24
     cde:	0c f0       	brlt	.+2      	; 0xce2 <RI_Test_1+0x8e>
     ce0:	10 e0       	ldi	r17, 0x00	; 0
     ce2:	11 23       	and	r17, r17
     ce4:	29 f0       	breq	.+10     	; 0xcf0 <RI_Test_1+0x9c>
		__ticks = 1;
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	9a 87       	std	Y+10, r25	; 0x0a
     cec:	89 87       	std	Y+9, r24	; 0x09
     cee:	42 c0       	rjmp	.+132    	; 0xd74 <RI_Test_1+0x120>
	else if (__tmp > 65535)
     cf0:	11 e0       	ldi	r17, 0x01	; 1
     cf2:	6d 81       	ldd	r22, Y+5	; 0x05
     cf4:	7e 81       	ldd	r23, Y+6	; 0x06
     cf6:	8f 81       	ldd	r24, Y+7	; 0x07
     cf8:	98 85       	ldd	r25, Y+8	; 0x08
     cfa:	20 e0       	ldi	r18, 0x00	; 0
     cfc:	3f ef       	ldi	r19, 0xFF	; 255
     cfe:	4f e7       	ldi	r20, 0x7F	; 127
     d00:	57 e4       	ldi	r21, 0x47	; 71
     d02:	4c d4       	rcall	.+2200   	; 0x159c <__gtsf2>
     d04:	18 16       	cp	r1, r24
     d06:	0c f0       	brlt	.+2      	; 0xd0a <RI_Test_1+0xb6>
     d08:	10 e0       	ldi	r17, 0x00	; 0
     d0a:	11 23       	and	r17, r17
     d0c:	51 f1       	breq	.+84     	; 0xd62 <RI_Test_1+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d0e:	69 81       	ldd	r22, Y+1	; 0x01
     d10:	7a 81       	ldd	r23, Y+2	; 0x02
     d12:	8b 81       	ldd	r24, Y+3	; 0x03
     d14:	9c 81       	ldd	r25, Y+4	; 0x04
     d16:	20 e0       	ldi	r18, 0x00	; 0
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	40 e2       	ldi	r20, 0x20	; 32
     d1c:	51 e4       	ldi	r21, 0x41	; 65
     d1e:	49 d3       	rcall	.+1682   	; 0x13b2 <__mulsf3>
     d20:	dc 01       	movw	r26, r24
     d22:	cb 01       	movw	r24, r22
     d24:	bc 01       	movw	r22, r24
     d26:	cd 01       	movw	r24, r26
     d28:	82 d1       	rcall	.+772    	; 0x102e <__fixunssfsi>
     d2a:	dc 01       	movw	r26, r24
     d2c:	cb 01       	movw	r24, r22
     d2e:	9a 87       	std	Y+10, r25	; 0x0a
     d30:	89 87       	std	Y+9, r24	; 0x09
     d32:	12 c0       	rjmp	.+36     	; 0xd58 <RI_Test_1+0x104>
     d34:	88 ec       	ldi	r24, 0xC8	; 200
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	9c 87       	std	Y+12, r25	; 0x0c
     d3a:	8b 87       	std	Y+11, r24	; 0x0b
     d3c:	8b 85       	ldd	r24, Y+11	; 0x0b
     d3e:	9c 85       	ldd	r25, Y+12	; 0x0c
     d40:	8c 01       	movw	r16, r24
     d42:	c8 01       	movw	r24, r16
     d44:	01 97       	sbiw	r24, 0x01	; 1
     d46:	f1 f7       	brne	.-4      	; 0xd44 <RI_Test_1+0xf0>
     d48:	8c 01       	movw	r16, r24
     d4a:	1c 87       	std	Y+12, r17	; 0x0c
     d4c:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d4e:	89 85       	ldd	r24, Y+9	; 0x09
     d50:	9a 85       	ldd	r25, Y+10	; 0x0a
     d52:	01 97       	sbiw	r24, 0x01	; 1
     d54:	9a 87       	std	Y+10, r25	; 0x0a
     d56:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d58:	89 85       	ldd	r24, Y+9	; 0x09
     d5a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d5c:	00 97       	sbiw	r24, 0x00	; 0
     d5e:	51 f7       	brne	.-44     	; 0xd34 <RI_Test_1+0xe0>
		while(1)
		{
			
		}		
	}
}
     d60:	35 c0       	rjmp	.+106    	; 0xdcc <RI_Test_1+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d62:	6d 81       	ldd	r22, Y+5	; 0x05
     d64:	7e 81       	ldd	r23, Y+6	; 0x06
     d66:	8f 81       	ldd	r24, Y+7	; 0x07
     d68:	98 85       	ldd	r25, Y+8	; 0x08
     d6a:	61 d1       	rcall	.+706    	; 0x102e <__fixunssfsi>
     d6c:	dc 01       	movw	r26, r24
     d6e:	cb 01       	movw	r24, r22
     d70:	9a 87       	std	Y+10, r25	; 0x0a
     d72:	89 87       	std	Y+9, r24	; 0x09
     d74:	89 85       	ldd	r24, Y+9	; 0x09
     d76:	9a 85       	ldd	r25, Y+10	; 0x0a
     d78:	9e 87       	std	Y+14, r25	; 0x0e
     d7a:	8d 87       	std	Y+13, r24	; 0x0d
     d7c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d7e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d80:	8c 01       	movw	r16, r24
     d82:	c8 01       	movw	r24, r16
     d84:	01 97       	sbiw	r24, 0x01	; 1
     d86:	f1 f7       	brne	.-4      	; 0xd84 <RI_Test_1+0x130>
     d88:	8c 01       	movw	r16, r24
     d8a:	1e 87       	std	Y+14, r17	; 0x0e
     d8c:	0d 87       	std	Y+13, r16	; 0x0d
     d8e:	1e c0       	rjmp	.+60     	; 0xdcc <RI_Test_1+0x178>
		rotate_RI_QTR_Counter_CW(5);
		_delay_ms(500);
	}
	else
	{
		Command_Display(Clear_Screen);	
     d90:	88 e5       	ldi	r24, 0x58	; 88
     d92:	12 db       	rcall	.-2524   	; 0x3b8 <Command_Display>
		Command_Display(Go_Home);
     d94:	88 e4       	ldi	r24, 0x48	; 72
     d96:	10 db       	rcall	.-2528   	; 0x3b8 <Command_Display>
		ltoa(rotation_Count, aNumberAsString, 10);
     d98:	80 91 92 00 	lds	r24, 0x0092
     d9c:	90 91 93 00 	lds	r25, 0x0093
     da0:	a0 91 94 00 	lds	r26, 0x0094
     da4:	b0 91 95 00 	lds	r27, 0x0095
     da8:	28 e9       	ldi	r18, 0x98	; 152
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	bc 01       	movw	r22, r24
     dae:	cd 01       	movw	r24, r26
     db0:	a9 01       	movw	r20, r18
     db2:	2a e0       	ldi	r18, 0x0A	; 10
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	88 d6       	rcall	.+3344   	; 0x1ac8 <ltoa>
		UWriteString(aNumberAsString);	
     db8:	88 e9       	ldi	r24, 0x98	; 152
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	e0 da       	rcall	.-2624   	; 0x37e <UWriteString>
		Set_Cursor_Position(1,2);
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	62 e0       	ldi	r22, 0x02	; 2
     dc2:	18 db       	rcall	.-2512   	; 0x3f4 <Set_Cursor_Position>
		UWriteString(finished_String);
     dc4:	80 e7       	ldi	r24, 0x70	; 112
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	da da       	rcall	.-2636   	; 0x37e <UWriteString>
		while(1)
		{
			
		}		
     dca:	ff cf       	rjmp	.-2      	; 0xdca <RI_Test_1+0x176>
	}
}
     dcc:	2e 96       	adiw	r28, 0x0e	; 14
     dce:	0f b6       	in	r0, 0x3f	; 63
     dd0:	f8 94       	cli
     dd2:	de bf       	out	0x3e, r29	; 62
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	cd bf       	out	0x3d, r28	; 61
     dd8:	cf 91       	pop	r28
     dda:	df 91       	pop	r29
     ddc:	1f 91       	pop	r17
     dde:	0f 91       	pop	r16
     de0:	08 95       	ret

00000de2 <main>:
int main(void) 
{
     de2:	0f 93       	push	r16
     de4:	1f 93       	push	r17
     de6:	df 93       	push	r29
     de8:	cf 93       	push	r28
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
     dee:	6c 97       	sbiw	r28, 0x1c	; 28
     df0:	0f b6       	in	r0, 0x3f	; 63
     df2:	f8 94       	cli
     df4:	de bf       	out	0x3e, r29	; 62
     df6:	0f be       	out	0x3f, r0	; 63
     df8:	cd bf       	out	0x3d, r28	; 61
	//timer0_init(); // timer 0 initialize 
	SystemInit(); // system variables and state initialize
     dfa:	2e db       	rcall	.-2468   	; 0x458 <SystemInit>
	PortInit(); // inputs and outputs initialize
     dfc:	0f db       	rcall	.-2530   	; 0x41c <PortInit>
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	aa ef       	ldi	r26, 0xFA	; 250
     e04:	b3 e4       	ldi	r27, 0x43	; 67
     e06:	89 83       	std	Y+1, r24	; 0x01
     e08:	9a 83       	std	Y+2, r25	; 0x02
     e0a:	ab 83       	std	Y+3, r26	; 0x03
     e0c:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     e0e:	69 81       	ldd	r22, Y+1	; 0x01
     e10:	7a 81       	ldd	r23, Y+2	; 0x02
     e12:	8b 81       	ldd	r24, Y+3	; 0x03
     e14:	9c 81       	ldd	r25, Y+4	; 0x04
     e16:	20 e0       	ldi	r18, 0x00	; 0
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	4a ef       	ldi	r20, 0xFA	; 250
     e1c:	54 e4       	ldi	r21, 0x44	; 68
     e1e:	c9 d2       	rcall	.+1426   	; 0x13b2 <__mulsf3>
     e20:	dc 01       	movw	r26, r24
     e22:	cb 01       	movw	r24, r22
     e24:	8d 83       	std	Y+5, r24	; 0x05
     e26:	9e 83       	std	Y+6, r25	; 0x06
     e28:	af 83       	std	Y+7, r26	; 0x07
     e2a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     e2c:	11 e0       	ldi	r17, 0x01	; 1
     e2e:	6d 81       	ldd	r22, Y+5	; 0x05
     e30:	7e 81       	ldd	r23, Y+6	; 0x06
     e32:	8f 81       	ldd	r24, Y+7	; 0x07
     e34:	98 85       	ldd	r25, Y+8	; 0x08
     e36:	20 e0       	ldi	r18, 0x00	; 0
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	40 e8       	ldi	r20, 0x80	; 128
     e3c:	5f e3       	ldi	r21, 0x3F	; 63
     e3e:	04 d4       	rcall	.+2056   	; 0x1648 <__ltsf2>
     e40:	88 23       	and	r24, r24
     e42:	0c f0       	brlt	.+2      	; 0xe46 <main+0x64>
     e44:	10 e0       	ldi	r17, 0x00	; 0
     e46:	11 23       	and	r17, r17
     e48:	29 f0       	breq	.+10     	; 0xe54 <main+0x72>
		__ticks = 1;
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	9a 87       	std	Y+10, r25	; 0x0a
     e50:	89 87       	std	Y+9, r24	; 0x09
     e52:	42 c0       	rjmp	.+132    	; 0xed8 <main+0xf6>
	else if (__tmp > 65535)
     e54:	11 e0       	ldi	r17, 0x01	; 1
     e56:	6d 81       	ldd	r22, Y+5	; 0x05
     e58:	7e 81       	ldd	r23, Y+6	; 0x06
     e5a:	8f 81       	ldd	r24, Y+7	; 0x07
     e5c:	98 85       	ldd	r25, Y+8	; 0x08
     e5e:	20 e0       	ldi	r18, 0x00	; 0
     e60:	3f ef       	ldi	r19, 0xFF	; 255
     e62:	4f e7       	ldi	r20, 0x7F	; 127
     e64:	57 e4       	ldi	r21, 0x47	; 71
     e66:	9a d3       	rcall	.+1844   	; 0x159c <__gtsf2>
     e68:	18 16       	cp	r1, r24
     e6a:	0c f0       	brlt	.+2      	; 0xe6e <main+0x8c>
     e6c:	10 e0       	ldi	r17, 0x00	; 0
     e6e:	11 23       	and	r17, r17
     e70:	51 f1       	breq	.+84     	; 0xec6 <main+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e72:	69 81       	ldd	r22, Y+1	; 0x01
     e74:	7a 81       	ldd	r23, Y+2	; 0x02
     e76:	8b 81       	ldd	r24, Y+3	; 0x03
     e78:	9c 81       	ldd	r25, Y+4	; 0x04
     e7a:	20 e0       	ldi	r18, 0x00	; 0
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	40 e2       	ldi	r20, 0x20	; 32
     e80:	51 e4       	ldi	r21, 0x41	; 65
     e82:	97 d2       	rcall	.+1326   	; 0x13b2 <__mulsf3>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	bc 01       	movw	r22, r24
     e8a:	cd 01       	movw	r24, r26
     e8c:	d0 d0       	rcall	.+416    	; 0x102e <__fixunssfsi>
     e8e:	dc 01       	movw	r26, r24
     e90:	cb 01       	movw	r24, r22
     e92:	9a 87       	std	Y+10, r25	; 0x0a
     e94:	89 87       	std	Y+9, r24	; 0x09
     e96:	12 c0       	rjmp	.+36     	; 0xebc <main+0xda>
     e98:	88 ec       	ldi	r24, 0xC8	; 200
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	9c 87       	std	Y+12, r25	; 0x0c
     e9e:	8b 87       	std	Y+11, r24	; 0x0b
     ea0:	8b 85       	ldd	r24, Y+11	; 0x0b
     ea2:	9c 85       	ldd	r25, Y+12	; 0x0c
     ea4:	8c 01       	movw	r16, r24
     ea6:	c8 01       	movw	r24, r16
     ea8:	01 97       	sbiw	r24, 0x01	; 1
     eaa:	f1 f7       	brne	.-4      	; 0xea8 <main+0xc6>
     eac:	8c 01       	movw	r16, r24
     eae:	1c 87       	std	Y+12, r17	; 0x0c
     eb0:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eb2:	89 85       	ldd	r24, Y+9	; 0x09
     eb4:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb6:	01 97       	sbiw	r24, 0x01	; 1
     eb8:	9a 87       	std	Y+10, r25	; 0x0a
     eba:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ebc:	89 85       	ldd	r24, Y+9	; 0x09
     ebe:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec0:	00 97       	sbiw	r24, 0x00	; 0
     ec2:	51 f7       	brne	.-44     	; 0xe98 <main+0xb6>
     ec4:	16 c0       	rjmp	.+44     	; 0xef2 <main+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ec6:	6d 81       	ldd	r22, Y+5	; 0x05
     ec8:	7e 81       	ldd	r23, Y+6	; 0x06
     eca:	8f 81       	ldd	r24, Y+7	; 0x07
     ecc:	98 85       	ldd	r25, Y+8	; 0x08
     ece:	af d0       	rcall	.+350    	; 0x102e <__fixunssfsi>
     ed0:	dc 01       	movw	r26, r24
     ed2:	cb 01       	movw	r24, r22
     ed4:	9a 87       	std	Y+10, r25	; 0x0a
     ed6:	89 87       	std	Y+9, r24	; 0x09
     ed8:	89 85       	ldd	r24, Y+9	; 0x09
     eda:	9a 85       	ldd	r25, Y+10	; 0x0a
     edc:	9e 87       	std	Y+14, r25	; 0x0e
     ede:	8d 87       	std	Y+13, r24	; 0x0d
     ee0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ee2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ee4:	8c 01       	movw	r16, r24
     ee6:	f8 01       	movw	r30, r16
     ee8:	31 97       	sbiw	r30, 0x01	; 1
     eea:	f1 f7       	brne	.-4      	; 0xee8 <main+0x106>
     eec:	8f 01       	movw	r16, r30
     eee:	1e 87       	std	Y+14, r17	; 0x0e
     ef0:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(500);
	start_Test();
     ef2:	88 de       	rcall	.-752    	; 0xc04 <start_Test>
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	90 e4       	ldi	r25, 0x40	; 64
     ef8:	ac e9       	ldi	r26, 0x9C	; 156
     efa:	b5 e4       	ldi	r27, 0x45	; 69
     efc:	8f 87       	std	Y+15, r24	; 0x0f
     efe:	98 8b       	std	Y+16, r25	; 0x10
     f00:	a9 8b       	std	Y+17, r26	; 0x11
     f02:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     f04:	6f 85       	ldd	r22, Y+15	; 0x0f
     f06:	78 89       	ldd	r23, Y+16	; 0x10
     f08:	89 89       	ldd	r24, Y+17	; 0x11
     f0a:	9a 89       	ldd	r25, Y+18	; 0x12
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	4a ef       	ldi	r20, 0xFA	; 250
     f12:	54 e4       	ldi	r21, 0x44	; 68
     f14:	4e d2       	rcall	.+1180   	; 0x13b2 <__mulsf3>
     f16:	dc 01       	movw	r26, r24
     f18:	cb 01       	movw	r24, r22
     f1a:	8b 8b       	std	Y+19, r24	; 0x13
     f1c:	9c 8b       	std	Y+20, r25	; 0x14
     f1e:	ad 8b       	std	Y+21, r26	; 0x15
     f20:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     f22:	11 e0       	ldi	r17, 0x01	; 1
     f24:	6b 89       	ldd	r22, Y+19	; 0x13
     f26:	7c 89       	ldd	r23, Y+20	; 0x14
     f28:	8d 89       	ldd	r24, Y+21	; 0x15
     f2a:	9e 89       	ldd	r25, Y+22	; 0x16
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	40 e8       	ldi	r20, 0x80	; 128
     f32:	5f e3       	ldi	r21, 0x3F	; 63
     f34:	89 d3       	rcall	.+1810   	; 0x1648 <__ltsf2>
     f36:	88 23       	and	r24, r24
     f38:	0c f0       	brlt	.+2      	; 0xf3c <main+0x15a>
     f3a:	10 e0       	ldi	r17, 0x00	; 0
     f3c:	11 23       	and	r17, r17
     f3e:	29 f0       	breq	.+10     	; 0xf4a <main+0x168>
		__ticks = 1;
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	98 8f       	std	Y+24, r25	; 0x18
     f46:	8f 8b       	std	Y+23, r24	; 0x17
     f48:	42 c0       	rjmp	.+132    	; 0xfce <main+0x1ec>
	else if (__tmp > 65535)
     f4a:	11 e0       	ldi	r17, 0x01	; 1
     f4c:	6b 89       	ldd	r22, Y+19	; 0x13
     f4e:	7c 89       	ldd	r23, Y+20	; 0x14
     f50:	8d 89       	ldd	r24, Y+21	; 0x15
     f52:	9e 89       	ldd	r25, Y+22	; 0x16
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	3f ef       	ldi	r19, 0xFF	; 255
     f58:	4f e7       	ldi	r20, 0x7F	; 127
     f5a:	57 e4       	ldi	r21, 0x47	; 71
     f5c:	1f d3       	rcall	.+1598   	; 0x159c <__gtsf2>
     f5e:	18 16       	cp	r1, r24
     f60:	0c f0       	brlt	.+2      	; 0xf64 <main+0x182>
     f62:	10 e0       	ldi	r17, 0x00	; 0
     f64:	11 23       	and	r17, r17
     f66:	51 f1       	breq	.+84     	; 0xfbc <main+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f68:	6f 85       	ldd	r22, Y+15	; 0x0f
     f6a:	78 89       	ldd	r23, Y+16	; 0x10
     f6c:	89 89       	ldd	r24, Y+17	; 0x11
     f6e:	9a 89       	ldd	r25, Y+18	; 0x12
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	40 e2       	ldi	r20, 0x20	; 32
     f76:	51 e4       	ldi	r21, 0x41	; 65
     f78:	1c d2       	rcall	.+1080   	; 0x13b2 <__mulsf3>
     f7a:	dc 01       	movw	r26, r24
     f7c:	cb 01       	movw	r24, r22
     f7e:	bc 01       	movw	r22, r24
     f80:	cd 01       	movw	r24, r26
     f82:	55 d0       	rcall	.+170    	; 0x102e <__fixunssfsi>
     f84:	dc 01       	movw	r26, r24
     f86:	cb 01       	movw	r24, r22
     f88:	98 8f       	std	Y+24, r25	; 0x18
     f8a:	8f 8b       	std	Y+23, r24	; 0x17
     f8c:	12 c0       	rjmp	.+36     	; 0xfb2 <main+0x1d0>
     f8e:	88 ec       	ldi	r24, 0xC8	; 200
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	9a 8f       	std	Y+26, r25	; 0x1a
     f94:	89 8f       	std	Y+25, r24	; 0x19
     f96:	89 8d       	ldd	r24, Y+25	; 0x19
     f98:	9a 8d       	ldd	r25, Y+26	; 0x1a
     f9a:	8c 01       	movw	r16, r24
     f9c:	c8 01       	movw	r24, r16
     f9e:	01 97       	sbiw	r24, 0x01	; 1
     fa0:	f1 f7       	brne	.-4      	; 0xf9e <main+0x1bc>
     fa2:	8c 01       	movw	r16, r24
     fa4:	1a 8f       	std	Y+26, r17	; 0x1a
     fa6:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fa8:	8f 89       	ldd	r24, Y+23	; 0x17
     faa:	98 8d       	ldd	r25, Y+24	; 0x18
     fac:	01 97       	sbiw	r24, 0x01	; 1
     fae:	98 8f       	std	Y+24, r25	; 0x18
     fb0:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fb2:	8f 89       	ldd	r24, Y+23	; 0x17
     fb4:	98 8d       	ldd	r25, Y+24	; 0x18
     fb6:	00 97       	sbiw	r24, 0x00	; 0
     fb8:	51 f7       	brne	.-44     	; 0xf8e <main+0x1ac>
     fba:	18 c0       	rjmp	.+48     	; 0xfec <main+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fbc:	6b 89       	ldd	r22, Y+19	; 0x13
     fbe:	7c 89       	ldd	r23, Y+20	; 0x14
     fc0:	8d 89       	ldd	r24, Y+21	; 0x15
     fc2:	9e 89       	ldd	r25, Y+22	; 0x16
     fc4:	34 d0       	rcall	.+104    	; 0x102e <__fixunssfsi>
     fc6:	dc 01       	movw	r26, r24
     fc8:	cb 01       	movw	r24, r22
     fca:	98 8f       	std	Y+24, r25	; 0x18
     fcc:	8f 8b       	std	Y+23, r24	; 0x17
     fce:	8f 89       	ldd	r24, Y+23	; 0x17
     fd0:	98 8d       	ldd	r25, Y+24	; 0x18
     fd2:	9c 8f       	std	Y+28, r25	; 0x1c
     fd4:	8b 8f       	std	Y+27, r24	; 0x1b
     fd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fda:	8c 01       	movw	r16, r24
     fdc:	f8 01       	movw	r30, r16
     fde:	31 97       	sbiw	r30, 0x01	; 1
     fe0:	f1 f7       	brne	.-4      	; 0xfde <main+0x1fc>
     fe2:	8f 01       	movw	r16, r30
     fe4:	1c 8f       	std	Y+28, r17	; 0x1c
     fe6:	0b 8f       	std	Y+27, r16	; 0x1b
     fe8:	01 c0       	rjmp	.+2      	; 0xfec <main+0x20a>
		else
		{
			first_Pause= 0;
			RI_Test_1();
		}
	}
     fea:	00 00       	nop
	_delay_ms(500);
	start_Test();
	_delay_ms(5000);
	while(1)
	{
		if(is_high(PINB,PB7))
     fec:	86 e3       	ldi	r24, 0x36	; 54
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	fc 01       	movw	r30, r24
     ff2:	80 81       	ld	r24, Z
     ff4:	88 23       	and	r24, r24
     ff6:	bc f4       	brge	.+46     	; 0x1026 <main+0x244>
		{
			if(first_Pause == 0)
     ff8:	80 91 96 00 	lds	r24, 0x0096
     ffc:	88 23       	and	r24, r24
     ffe:	a9 f7       	brne	.-22     	; 0xfea <main+0x208>
			{
				Command_Display(Clear_Screen);	
    1000:	88 e5       	ldi	r24, 0x58	; 88
    1002:	da d9       	rcall	.-3148   	; 0x3b8 <Command_Display>
				Command_Display(Go_Home);
    1004:	88 e4       	ldi	r24, 0x48	; 72
    1006:	d8 d9       	rcall	.-3152   	; 0x3b8 <Command_Display>
				UWriteString(aNumberAsString);	
    1008:	88 e9       	ldi	r24, 0x98	; 152
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	b8 d9       	rcall	.-3216   	; 0x37e <UWriteString>
				Set_Cursor_Position(1,2);
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	62 e0       	ldi	r22, 0x02	; 2
    1012:	f0 d9       	rcall	.-3104   	; 0x3f4 <Set_Cursor_Position>
				UWriteString(pause_String);
    1014:	89 e6       	ldi	r24, 0x69	; 105
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	b2 d9       	rcall	.-3228   	; 0x37e <UWriteString>
				first_Pause++;
    101a:	80 91 96 00 	lds	r24, 0x0096
    101e:	8f 5f       	subi	r24, 0xFF	; 255
    1020:	80 93 96 00 	sts	0x0096, r24
		else
		{
			first_Pause= 0;
			RI_Test_1();
		}
	}
    1024:	e3 cf       	rjmp	.-58     	; 0xfec <main+0x20a>
				first_Pause++;
			}
		}
		else
		{
			first_Pause= 0;
    1026:	10 92 96 00 	sts	0x0096, r1
			RI_Test_1();
    102a:	14 de       	rcall	.-984    	; 0xc54 <RI_Test_1>
		}
	}
    102c:	df cf       	rjmp	.-66     	; 0xfec <main+0x20a>

0000102e <__fixunssfsi>:
    102e:	ef 92       	push	r14
    1030:	ff 92       	push	r15
    1032:	0f 93       	push	r16
    1034:	1f 93       	push	r17
    1036:	7b 01       	movw	r14, r22
    1038:	8c 01       	movw	r16, r24
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	40 e0       	ldi	r20, 0x00	; 0
    1040:	5f e4       	ldi	r21, 0x4F	; 79
    1042:	d7 d2       	rcall	.+1454   	; 0x15f2 <__gesf2>
    1044:	87 fd       	sbrc	r24, 7
    1046:	0f c0       	rjmp	.+30     	; 0x1066 <__fixunssfsi+0x38>
    1048:	c8 01       	movw	r24, r16
    104a:	b7 01       	movw	r22, r14
    104c:	20 e0       	ldi	r18, 0x00	; 0
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	40 e0       	ldi	r20, 0x00	; 0
    1052:	5f e4       	ldi	r21, 0x4F	; 79
    1054:	83 d1       	rcall	.+774    	; 0x135c <__subsf3>
    1056:	23 d3       	rcall	.+1606   	; 0x169e <__fixsfsi>
    1058:	9b 01       	movw	r18, r22
    105a:	ac 01       	movw	r20, r24
    105c:	20 50       	subi	r18, 0x00	; 0
    105e:	30 40       	sbci	r19, 0x00	; 0
    1060:	40 40       	sbci	r20, 0x00	; 0
    1062:	50 48       	sbci	r21, 0x80	; 128
    1064:	05 c0       	rjmp	.+10     	; 0x1070 <__fixunssfsi+0x42>
    1066:	c8 01       	movw	r24, r16
    1068:	b7 01       	movw	r22, r14
    106a:	19 d3       	rcall	.+1586   	; 0x169e <__fixsfsi>
    106c:	9b 01       	movw	r18, r22
    106e:	ac 01       	movw	r20, r24
    1070:	b9 01       	movw	r22, r18
    1072:	ca 01       	movw	r24, r20
    1074:	1f 91       	pop	r17
    1076:	0f 91       	pop	r16
    1078:	ff 90       	pop	r15
    107a:	ef 90       	pop	r14
    107c:	08 95       	ret

0000107e <_fpadd_parts>:
    107e:	a0 e0       	ldi	r26, 0x00	; 0
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	e4 e4       	ldi	r30, 0x44	; 68
    1084:	f8 e0       	ldi	r31, 0x08	; 8
    1086:	ed c4       	rjmp	.+2522   	; 0x1a62 <__prologue_saves__+0x8>
    1088:	fc 01       	movw	r30, r24
    108a:	ea 01       	movw	r28, r20
    108c:	80 81       	ld	r24, Z
    108e:	82 30       	cpi	r24, 0x02	; 2
    1090:	08 f4       	brcc	.+2      	; 0x1094 <_fpadd_parts+0x16>
    1092:	38 c1       	rjmp	.+624    	; 0x1304 <_fpadd_parts+0x286>
    1094:	db 01       	movw	r26, r22
    1096:	9c 91       	ld	r25, X
    1098:	92 30       	cpi	r25, 0x02	; 2
    109a:	08 f4       	brcc	.+2      	; 0x109e <_fpadd_parts+0x20>
    109c:	30 c1       	rjmp	.+608    	; 0x12fe <_fpadd_parts+0x280>
    109e:	84 30       	cpi	r24, 0x04	; 4
    10a0:	59 f4       	brne	.+22     	; 0x10b8 <_fpadd_parts+0x3a>
    10a2:	94 30       	cpi	r25, 0x04	; 4
    10a4:	09 f0       	breq	.+2      	; 0x10a8 <_fpadd_parts+0x2a>
    10a6:	2e c1       	rjmp	.+604    	; 0x1304 <_fpadd_parts+0x286>
    10a8:	91 81       	ldd	r25, Z+1	; 0x01
    10aa:	11 96       	adiw	r26, 0x01	; 1
    10ac:	8c 91       	ld	r24, X
    10ae:	11 97       	sbiw	r26, 0x01	; 1
    10b0:	98 17       	cp	r25, r24
    10b2:	09 f0       	breq	.+2      	; 0x10b6 <_fpadd_parts+0x38>
    10b4:	21 c1       	rjmp	.+578    	; 0x12f8 <_fpadd_parts+0x27a>
    10b6:	26 c1       	rjmp	.+588    	; 0x1304 <_fpadd_parts+0x286>
    10b8:	94 30       	cpi	r25, 0x04	; 4
    10ba:	09 f4       	brne	.+2      	; 0x10be <_fpadd_parts+0x40>
    10bc:	20 c1       	rjmp	.+576    	; 0x12fe <_fpadd_parts+0x280>
    10be:	92 30       	cpi	r25, 0x02	; 2
    10c0:	b1 f4       	brne	.+44     	; 0x10ee <_fpadd_parts+0x70>
    10c2:	82 30       	cpi	r24, 0x02	; 2
    10c4:	09 f0       	breq	.+2      	; 0x10c8 <_fpadd_parts+0x4a>
    10c6:	1e c1       	rjmp	.+572    	; 0x1304 <_fpadd_parts+0x286>
    10c8:	ca 01       	movw	r24, r20
    10ca:	af 01       	movw	r20, r30
    10cc:	28 e0       	ldi	r18, 0x08	; 8
    10ce:	da 01       	movw	r26, r20
    10d0:	0d 90       	ld	r0, X+
    10d2:	ad 01       	movw	r20, r26
    10d4:	dc 01       	movw	r26, r24
    10d6:	0d 92       	st	X+, r0
    10d8:	cd 01       	movw	r24, r26
    10da:	21 50       	subi	r18, 0x01	; 1
    10dc:	c1 f7       	brne	.-16     	; 0x10ce <_fpadd_parts+0x50>
    10de:	db 01       	movw	r26, r22
    10e0:	11 96       	adiw	r26, 0x01	; 1
    10e2:	8c 91       	ld	r24, X
    10e4:	11 97       	sbiw	r26, 0x01	; 1
    10e6:	91 81       	ldd	r25, Z+1	; 0x01
    10e8:	89 23       	and	r24, r25
    10ea:	89 83       	std	Y+1, r24	; 0x01
    10ec:	0a c1       	rjmp	.+532    	; 0x1302 <_fpadd_parts+0x284>
    10ee:	82 30       	cpi	r24, 0x02	; 2
    10f0:	09 f4       	brne	.+2      	; 0x10f4 <_fpadd_parts+0x76>
    10f2:	05 c1       	rjmp	.+522    	; 0x12fe <_fpadd_parts+0x280>
    10f4:	c2 80       	ldd	r12, Z+2	; 0x02
    10f6:	d3 80       	ldd	r13, Z+3	; 0x03
    10f8:	db 01       	movw	r26, r22
    10fa:	12 96       	adiw	r26, 0x02	; 2
    10fc:	6d 90       	ld	r6, X+
    10fe:	7c 90       	ld	r7, X
    1100:	13 97       	sbiw	r26, 0x03	; 3
    1102:	24 81       	ldd	r18, Z+4	; 0x04
    1104:	35 81       	ldd	r19, Z+5	; 0x05
    1106:	46 81       	ldd	r20, Z+6	; 0x06
    1108:	57 81       	ldd	r21, Z+7	; 0x07
    110a:	14 96       	adiw	r26, 0x04	; 4
    110c:	ed 90       	ld	r14, X+
    110e:	fd 90       	ld	r15, X+
    1110:	0d 91       	ld	r16, X+
    1112:	1c 91       	ld	r17, X
    1114:	17 97       	sbiw	r26, 0x07	; 7
    1116:	c6 01       	movw	r24, r12
    1118:	86 19       	sub	r24, r6
    111a:	97 09       	sbc	r25, r7
    111c:	5c 01       	movw	r10, r24
    111e:	97 ff       	sbrs	r25, 7
    1120:	04 c0       	rjmp	.+8      	; 0x112a <_fpadd_parts+0xac>
    1122:	aa 24       	eor	r10, r10
    1124:	bb 24       	eor	r11, r11
    1126:	a8 1a       	sub	r10, r24
    1128:	b9 0a       	sbc	r11, r25
    112a:	b0 e2       	ldi	r27, 0x20	; 32
    112c:	ab 16       	cp	r10, r27
    112e:	b1 04       	cpc	r11, r1
    1130:	0c f0       	brlt	.+2      	; 0x1134 <_fpadd_parts+0xb6>
    1132:	61 c0       	rjmp	.+194    	; 0x11f6 <_fpadd_parts+0x178>
    1134:	18 16       	cp	r1, r24
    1136:	19 06       	cpc	r1, r25
    1138:	6c f5       	brge	.+90     	; 0x1194 <_fpadd_parts+0x116>
    113a:	37 01       	movw	r6, r14
    113c:	48 01       	movw	r8, r16
    113e:	0a 2c       	mov	r0, r10
    1140:	04 c0       	rjmp	.+8      	; 0x114a <_fpadd_parts+0xcc>
    1142:	96 94       	lsr	r9
    1144:	87 94       	ror	r8
    1146:	77 94       	ror	r7
    1148:	67 94       	ror	r6
    114a:	0a 94       	dec	r0
    114c:	d2 f7       	brpl	.-12     	; 0x1142 <_fpadd_parts+0xc4>
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	a0 e0       	ldi	r26, 0x00	; 0
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	0a 2c       	mov	r0, r10
    1158:	04 c0       	rjmp	.+8      	; 0x1162 <_fpadd_parts+0xe4>
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	aa 1f       	adc	r26, r26
    1160:	bb 1f       	adc	r27, r27
    1162:	0a 94       	dec	r0
    1164:	d2 f7       	brpl	.-12     	; 0x115a <_fpadd_parts+0xdc>
    1166:	01 97       	sbiw	r24, 0x01	; 1
    1168:	a1 09       	sbc	r26, r1
    116a:	b1 09       	sbc	r27, r1
    116c:	8e 21       	and	r24, r14
    116e:	9f 21       	and	r25, r15
    1170:	a0 23       	and	r26, r16
    1172:	b1 23       	and	r27, r17
    1174:	ee 24       	eor	r14, r14
    1176:	ff 24       	eor	r15, r15
    1178:	87 01       	movw	r16, r14
    117a:	e3 94       	inc	r14
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	a1 05       	cpc	r26, r1
    1180:	b1 05       	cpc	r27, r1
    1182:	19 f4       	brne	.+6      	; 0x118a <_fpadd_parts+0x10c>
    1184:	ee 24       	eor	r14, r14
    1186:	ff 24       	eor	r15, r15
    1188:	87 01       	movw	r16, r14
    118a:	e6 28       	or	r14, r6
    118c:	f7 28       	or	r15, r7
    118e:	08 29       	or	r16, r8
    1190:	19 29       	or	r17, r9
    1192:	3c c0       	rjmp	.+120    	; 0x120c <_fpadd_parts+0x18e>
    1194:	00 97       	sbiw	r24, 0x00	; 0
    1196:	d1 f1       	breq	.+116    	; 0x120c <_fpadd_parts+0x18e>
    1198:	ca 0c       	add	r12, r10
    119a:	db 1c       	adc	r13, r11
    119c:	39 01       	movw	r6, r18
    119e:	4a 01       	movw	r8, r20
    11a0:	0a 2c       	mov	r0, r10
    11a2:	04 c0       	rjmp	.+8      	; 0x11ac <_fpadd_parts+0x12e>
    11a4:	96 94       	lsr	r9
    11a6:	87 94       	ror	r8
    11a8:	77 94       	ror	r7
    11aa:	67 94       	ror	r6
    11ac:	0a 94       	dec	r0
    11ae:	d2 f7       	brpl	.-12     	; 0x11a4 <_fpadd_parts+0x126>
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	a0 e0       	ldi	r26, 0x00	; 0
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	0a 2c       	mov	r0, r10
    11ba:	04 c0       	rjmp	.+8      	; 0x11c4 <_fpadd_parts+0x146>
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	aa 1f       	adc	r26, r26
    11c2:	bb 1f       	adc	r27, r27
    11c4:	0a 94       	dec	r0
    11c6:	d2 f7       	brpl	.-12     	; 0x11bc <_fpadd_parts+0x13e>
    11c8:	01 97       	sbiw	r24, 0x01	; 1
    11ca:	a1 09       	sbc	r26, r1
    11cc:	b1 09       	sbc	r27, r1
    11ce:	82 23       	and	r24, r18
    11d0:	93 23       	and	r25, r19
    11d2:	a4 23       	and	r26, r20
    11d4:	b5 23       	and	r27, r21
    11d6:	21 e0       	ldi	r18, 0x01	; 1
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	40 e0       	ldi	r20, 0x00	; 0
    11dc:	50 e0       	ldi	r21, 0x00	; 0
    11de:	00 97       	sbiw	r24, 0x00	; 0
    11e0:	a1 05       	cpc	r26, r1
    11e2:	b1 05       	cpc	r27, r1
    11e4:	19 f4       	brne	.+6      	; 0x11ec <_fpadd_parts+0x16e>
    11e6:	20 e0       	ldi	r18, 0x00	; 0
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	a9 01       	movw	r20, r18
    11ec:	26 29       	or	r18, r6
    11ee:	37 29       	or	r19, r7
    11f0:	48 29       	or	r20, r8
    11f2:	59 29       	or	r21, r9
    11f4:	0b c0       	rjmp	.+22     	; 0x120c <_fpadd_parts+0x18e>
    11f6:	6c 14       	cp	r6, r12
    11f8:	7d 04       	cpc	r7, r13
    11fa:	24 f4       	brge	.+8      	; 0x1204 <_fpadd_parts+0x186>
    11fc:	ee 24       	eor	r14, r14
    11fe:	ff 24       	eor	r15, r15
    1200:	87 01       	movw	r16, r14
    1202:	04 c0       	rjmp	.+8      	; 0x120c <_fpadd_parts+0x18e>
    1204:	63 01       	movw	r12, r6
    1206:	20 e0       	ldi	r18, 0x00	; 0
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	a9 01       	movw	r20, r18
    120c:	81 81       	ldd	r24, Z+1	; 0x01
    120e:	fb 01       	movw	r30, r22
    1210:	91 81       	ldd	r25, Z+1	; 0x01
    1212:	89 17       	cp	r24, r25
    1214:	09 f4       	brne	.+2      	; 0x1218 <_fpadd_parts+0x19a>
    1216:	45 c0       	rjmp	.+138    	; 0x12a2 <_fpadd_parts+0x224>
    1218:	88 23       	and	r24, r24
    121a:	49 f0       	breq	.+18     	; 0x122e <_fpadd_parts+0x1b0>
    121c:	d8 01       	movw	r26, r16
    121e:	c7 01       	movw	r24, r14
    1220:	82 1b       	sub	r24, r18
    1222:	93 0b       	sbc	r25, r19
    1224:	a4 0b       	sbc	r26, r20
    1226:	b5 0b       	sbc	r27, r21
    1228:	9c 01       	movw	r18, r24
    122a:	ad 01       	movw	r20, r26
    122c:	04 c0       	rjmp	.+8      	; 0x1236 <_fpadd_parts+0x1b8>
    122e:	2e 19       	sub	r18, r14
    1230:	3f 09       	sbc	r19, r15
    1232:	40 0b       	sbc	r20, r16
    1234:	51 0b       	sbc	r21, r17
    1236:	57 fd       	sbrc	r21, 7
    1238:	04 c0       	rjmp	.+8      	; 0x1242 <_fpadd_parts+0x1c4>
    123a:	19 82       	std	Y+1, r1	; 0x01
    123c:	db 82       	std	Y+3, r13	; 0x03
    123e:	ca 82       	std	Y+2, r12	; 0x02
    1240:	0b c0       	rjmp	.+22     	; 0x1258 <_fpadd_parts+0x1da>
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	89 83       	std	Y+1, r24	; 0x01
    1246:	db 82       	std	Y+3, r13	; 0x03
    1248:	ca 82       	std	Y+2, r12	; 0x02
    124a:	50 95       	com	r21
    124c:	40 95       	com	r20
    124e:	30 95       	com	r19
    1250:	21 95       	neg	r18
    1252:	3f 4f       	sbci	r19, 0xFF	; 255
    1254:	4f 4f       	sbci	r20, 0xFF	; 255
    1256:	5f 4f       	sbci	r21, 0xFF	; 255
    1258:	2c 83       	std	Y+4, r18	; 0x04
    125a:	3d 83       	std	Y+5, r19	; 0x05
    125c:	4e 83       	std	Y+6, r20	; 0x06
    125e:	5f 83       	std	Y+7, r21	; 0x07
    1260:	0d c0       	rjmp	.+26     	; 0x127c <_fpadd_parts+0x1fe>
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	aa 1f       	adc	r26, r26
    1268:	bb 1f       	adc	r27, r27
    126a:	8c 83       	std	Y+4, r24	; 0x04
    126c:	9d 83       	std	Y+5, r25	; 0x05
    126e:	ae 83       	std	Y+6, r26	; 0x06
    1270:	bf 83       	std	Y+7, r27	; 0x07
    1272:	8a 81       	ldd	r24, Y+2	; 0x02
    1274:	9b 81       	ldd	r25, Y+3	; 0x03
    1276:	01 97       	sbiw	r24, 0x01	; 1
    1278:	9b 83       	std	Y+3, r25	; 0x03
    127a:	8a 83       	std	Y+2, r24	; 0x02
    127c:	8c 81       	ldd	r24, Y+4	; 0x04
    127e:	9d 81       	ldd	r25, Y+5	; 0x05
    1280:	ae 81       	ldd	r26, Y+6	; 0x06
    1282:	bf 81       	ldd	r27, Y+7	; 0x07
    1284:	9c 01       	movw	r18, r24
    1286:	ad 01       	movw	r20, r26
    1288:	21 50       	subi	r18, 0x01	; 1
    128a:	30 40       	sbci	r19, 0x00	; 0
    128c:	40 40       	sbci	r20, 0x00	; 0
    128e:	50 40       	sbci	r21, 0x00	; 0
    1290:	2f 3f       	cpi	r18, 0xFF	; 255
    1292:	ef ef       	ldi	r30, 0xFF	; 255
    1294:	3e 07       	cpc	r19, r30
    1296:	ef ef       	ldi	r30, 0xFF	; 255
    1298:	4e 07       	cpc	r20, r30
    129a:	ef e3       	ldi	r30, 0x3F	; 63
    129c:	5e 07       	cpc	r21, r30
    129e:	08 f3       	brcs	.-62     	; 0x1262 <_fpadd_parts+0x1e4>
    12a0:	0b c0       	rjmp	.+22     	; 0x12b8 <_fpadd_parts+0x23a>
    12a2:	89 83       	std	Y+1, r24	; 0x01
    12a4:	db 82       	std	Y+3, r13	; 0x03
    12a6:	ca 82       	std	Y+2, r12	; 0x02
    12a8:	2e 0d       	add	r18, r14
    12aa:	3f 1d       	adc	r19, r15
    12ac:	40 1f       	adc	r20, r16
    12ae:	51 1f       	adc	r21, r17
    12b0:	2c 83       	std	Y+4, r18	; 0x04
    12b2:	3d 83       	std	Y+5, r19	; 0x05
    12b4:	4e 83       	std	Y+6, r20	; 0x06
    12b6:	5f 83       	std	Y+7, r21	; 0x07
    12b8:	83 e0       	ldi	r24, 0x03	; 3
    12ba:	88 83       	st	Y, r24
    12bc:	2c 81       	ldd	r18, Y+4	; 0x04
    12be:	3d 81       	ldd	r19, Y+5	; 0x05
    12c0:	4e 81       	ldd	r20, Y+6	; 0x06
    12c2:	5f 81       	ldd	r21, Y+7	; 0x07
    12c4:	57 ff       	sbrs	r21, 7
    12c6:	1d c0       	rjmp	.+58     	; 0x1302 <_fpadd_parts+0x284>
    12c8:	da 01       	movw	r26, r20
    12ca:	c9 01       	movw	r24, r18
    12cc:	81 70       	andi	r24, 0x01	; 1
    12ce:	90 70       	andi	r25, 0x00	; 0
    12d0:	a0 70       	andi	r26, 0x00	; 0
    12d2:	b0 70       	andi	r27, 0x00	; 0
    12d4:	56 95       	lsr	r21
    12d6:	47 95       	ror	r20
    12d8:	37 95       	ror	r19
    12da:	27 95       	ror	r18
    12dc:	82 2b       	or	r24, r18
    12de:	93 2b       	or	r25, r19
    12e0:	a4 2b       	or	r26, r20
    12e2:	b5 2b       	or	r27, r21
    12e4:	8c 83       	std	Y+4, r24	; 0x04
    12e6:	9d 83       	std	Y+5, r25	; 0x05
    12e8:	ae 83       	std	Y+6, r26	; 0x06
    12ea:	bf 83       	std	Y+7, r27	; 0x07
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	9b 81       	ldd	r25, Y+3	; 0x03
    12f0:	01 96       	adiw	r24, 0x01	; 1
    12f2:	9b 83       	std	Y+3, r25	; 0x03
    12f4:	8a 83       	std	Y+2, r24	; 0x02
    12f6:	05 c0       	rjmp	.+10     	; 0x1302 <_fpadd_parts+0x284>
    12f8:	e9 e8       	ldi	r30, 0x89	; 137
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	03 c0       	rjmp	.+6      	; 0x1304 <_fpadd_parts+0x286>
    12fe:	fb 01       	movw	r30, r22
    1300:	01 c0       	rjmp	.+2      	; 0x1304 <_fpadd_parts+0x286>
    1302:	fe 01       	movw	r30, r28
    1304:	cf 01       	movw	r24, r30
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
    130a:	ee e0       	ldi	r30, 0x0E	; 14
    130c:	c6 c3       	rjmp	.+1932   	; 0x1a9a <__epilogue_restores__+0x8>

0000130e <__addsf3>:
    130e:	a0 e2       	ldi	r26, 0x20	; 32
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	ec e8       	ldi	r30, 0x8C	; 140
    1314:	f9 e0       	ldi	r31, 0x09	; 9
    1316:	ad c3       	rjmp	.+1882   	; 0x1a72 <__prologue_saves__+0x18>
    1318:	69 83       	std	Y+1, r22	; 0x01
    131a:	7a 83       	std	Y+2, r23	; 0x02
    131c:	8b 83       	std	Y+3, r24	; 0x03
    131e:	9c 83       	std	Y+4, r25	; 0x04
    1320:	2d 83       	std	Y+5, r18	; 0x05
    1322:	3e 83       	std	Y+6, r19	; 0x06
    1324:	4f 83       	std	Y+7, r20	; 0x07
    1326:	58 87       	std	Y+8, r21	; 0x08
    1328:	89 e0       	ldi	r24, 0x09	; 9
    132a:	e8 2e       	mov	r14, r24
    132c:	f1 2c       	mov	r15, r1
    132e:	ec 0e       	add	r14, r28
    1330:	fd 1e       	adc	r15, r29
    1332:	ce 01       	movw	r24, r28
    1334:	01 96       	adiw	r24, 0x01	; 1
    1336:	b7 01       	movw	r22, r14
    1338:	ce d2       	rcall	.+1436   	; 0x18d6 <__unpack_f>
    133a:	8e 01       	movw	r16, r28
    133c:	0f 5e       	subi	r16, 0xEF	; 239
    133e:	1f 4f       	sbci	r17, 0xFF	; 255
    1340:	ce 01       	movw	r24, r28
    1342:	05 96       	adiw	r24, 0x05	; 5
    1344:	b8 01       	movw	r22, r16
    1346:	c7 d2       	rcall	.+1422   	; 0x18d6 <__unpack_f>
    1348:	c7 01       	movw	r24, r14
    134a:	b8 01       	movw	r22, r16
    134c:	ae 01       	movw	r20, r28
    134e:	47 5e       	subi	r20, 0xE7	; 231
    1350:	5f 4f       	sbci	r21, 0xFF	; 255
    1352:	95 de       	rcall	.-726    	; 0x107e <_fpadd_parts>
    1354:	f3 d1       	rcall	.+998    	; 0x173c <__pack_f>
    1356:	a0 96       	adiw	r28, 0x20	; 32
    1358:	e6 e0       	ldi	r30, 0x06	; 6
    135a:	a7 c3       	rjmp	.+1870   	; 0x1aaa <__epilogue_restores__+0x18>

0000135c <__subsf3>:
    135c:	a0 e2       	ldi	r26, 0x20	; 32
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	e3 eb       	ldi	r30, 0xB3	; 179
    1362:	f9 e0       	ldi	r31, 0x09	; 9
    1364:	86 c3       	rjmp	.+1804   	; 0x1a72 <__prologue_saves__+0x18>
    1366:	69 83       	std	Y+1, r22	; 0x01
    1368:	7a 83       	std	Y+2, r23	; 0x02
    136a:	8b 83       	std	Y+3, r24	; 0x03
    136c:	9c 83       	std	Y+4, r25	; 0x04
    136e:	2d 83       	std	Y+5, r18	; 0x05
    1370:	3e 83       	std	Y+6, r19	; 0x06
    1372:	4f 83       	std	Y+7, r20	; 0x07
    1374:	58 87       	std	Y+8, r21	; 0x08
    1376:	8e 01       	movw	r16, r28
    1378:	07 5f       	subi	r16, 0xF7	; 247
    137a:	1f 4f       	sbci	r17, 0xFF	; 255
    137c:	ce 01       	movw	r24, r28
    137e:	01 96       	adiw	r24, 0x01	; 1
    1380:	b8 01       	movw	r22, r16
    1382:	a9 d2       	rcall	.+1362   	; 0x18d6 <__unpack_f>
    1384:	91 e1       	ldi	r25, 0x11	; 17
    1386:	e9 2e       	mov	r14, r25
    1388:	f1 2c       	mov	r15, r1
    138a:	ec 0e       	add	r14, r28
    138c:	fd 1e       	adc	r15, r29
    138e:	ce 01       	movw	r24, r28
    1390:	05 96       	adiw	r24, 0x05	; 5
    1392:	b7 01       	movw	r22, r14
    1394:	a0 d2       	rcall	.+1344   	; 0x18d6 <__unpack_f>
    1396:	8a 89       	ldd	r24, Y+18	; 0x12
    1398:	91 e0       	ldi	r25, 0x01	; 1
    139a:	89 27       	eor	r24, r25
    139c:	8a 8b       	std	Y+18, r24	; 0x12
    139e:	c8 01       	movw	r24, r16
    13a0:	b7 01       	movw	r22, r14
    13a2:	ae 01       	movw	r20, r28
    13a4:	47 5e       	subi	r20, 0xE7	; 231
    13a6:	5f 4f       	sbci	r21, 0xFF	; 255
    13a8:	6a de       	rcall	.-812    	; 0x107e <_fpadd_parts>
    13aa:	c8 d1       	rcall	.+912    	; 0x173c <__pack_f>
    13ac:	a0 96       	adiw	r28, 0x20	; 32
    13ae:	e6 e0       	ldi	r30, 0x06	; 6
    13b0:	7c c3       	rjmp	.+1784   	; 0x1aaa <__epilogue_restores__+0x18>

000013b2 <__mulsf3>:
    13b2:	a0 e2       	ldi	r26, 0x20	; 32
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	ee ed       	ldi	r30, 0xDE	; 222
    13b8:	f9 e0       	ldi	r31, 0x09	; 9
    13ba:	4f c3       	rjmp	.+1694   	; 0x1a5a <__prologue_saves__>
    13bc:	69 83       	std	Y+1, r22	; 0x01
    13be:	7a 83       	std	Y+2, r23	; 0x02
    13c0:	8b 83       	std	Y+3, r24	; 0x03
    13c2:	9c 83       	std	Y+4, r25	; 0x04
    13c4:	2d 83       	std	Y+5, r18	; 0x05
    13c6:	3e 83       	std	Y+6, r19	; 0x06
    13c8:	4f 83       	std	Y+7, r20	; 0x07
    13ca:	58 87       	std	Y+8, r21	; 0x08
    13cc:	ce 01       	movw	r24, r28
    13ce:	01 96       	adiw	r24, 0x01	; 1
    13d0:	be 01       	movw	r22, r28
    13d2:	67 5f       	subi	r22, 0xF7	; 247
    13d4:	7f 4f       	sbci	r23, 0xFF	; 255
    13d6:	7f d2       	rcall	.+1278   	; 0x18d6 <__unpack_f>
    13d8:	ce 01       	movw	r24, r28
    13da:	05 96       	adiw	r24, 0x05	; 5
    13dc:	be 01       	movw	r22, r28
    13de:	6f 5e       	subi	r22, 0xEF	; 239
    13e0:	7f 4f       	sbci	r23, 0xFF	; 255
    13e2:	79 d2       	rcall	.+1266   	; 0x18d6 <__unpack_f>
    13e4:	99 85       	ldd	r25, Y+9	; 0x09
    13e6:	92 30       	cpi	r25, 0x02	; 2
    13e8:	78 f0       	brcs	.+30     	; 0x1408 <__mulsf3+0x56>
    13ea:	89 89       	ldd	r24, Y+17	; 0x11
    13ec:	82 30       	cpi	r24, 0x02	; 2
    13ee:	c0 f0       	brcs	.+48     	; 0x1420 <__mulsf3+0x6e>
    13f0:	94 30       	cpi	r25, 0x04	; 4
    13f2:	19 f4       	brne	.+6      	; 0x13fa <__mulsf3+0x48>
    13f4:	82 30       	cpi	r24, 0x02	; 2
    13f6:	41 f4       	brne	.+16     	; 0x1408 <__mulsf3+0x56>
    13f8:	cb c0       	rjmp	.+406    	; 0x1590 <__mulsf3+0x1de>
    13fa:	84 30       	cpi	r24, 0x04	; 4
    13fc:	19 f4       	brne	.+6      	; 0x1404 <__mulsf3+0x52>
    13fe:	92 30       	cpi	r25, 0x02	; 2
    1400:	79 f4       	brne	.+30     	; 0x1420 <__mulsf3+0x6e>
    1402:	c6 c0       	rjmp	.+396    	; 0x1590 <__mulsf3+0x1de>
    1404:	92 30       	cpi	r25, 0x02	; 2
    1406:	51 f4       	brne	.+20     	; 0x141c <__mulsf3+0x6a>
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	2a 85       	ldd	r18, Y+10	; 0x0a
    140c:	9a 89       	ldd	r25, Y+18	; 0x12
    140e:	29 17       	cp	r18, r25
    1410:	09 f4       	brne	.+2      	; 0x1414 <__mulsf3+0x62>
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	8a 87       	std	Y+10, r24	; 0x0a
    1416:	ce 01       	movw	r24, r28
    1418:	09 96       	adiw	r24, 0x09	; 9
    141a:	bc c0       	rjmp	.+376    	; 0x1594 <__mulsf3+0x1e2>
    141c:	82 30       	cpi	r24, 0x02	; 2
    141e:	51 f4       	brne	.+20     	; 0x1434 <__mulsf3+0x82>
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	2a 85       	ldd	r18, Y+10	; 0x0a
    1424:	9a 89       	ldd	r25, Y+18	; 0x12
    1426:	29 17       	cp	r18, r25
    1428:	09 f4       	brne	.+2      	; 0x142c <__mulsf3+0x7a>
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	8a 8b       	std	Y+18, r24	; 0x12
    142e:	ce 01       	movw	r24, r28
    1430:	41 96       	adiw	r24, 0x11	; 17
    1432:	b0 c0       	rjmp	.+352    	; 0x1594 <__mulsf3+0x1e2>
    1434:	6d 84       	ldd	r6, Y+13	; 0x0d
    1436:	7e 84       	ldd	r7, Y+14	; 0x0e
    1438:	8f 84       	ldd	r8, Y+15	; 0x0f
    143a:	98 88       	ldd	r9, Y+16	; 0x10
    143c:	ed 88       	ldd	r14, Y+21	; 0x15
    143e:	fe 88       	ldd	r15, Y+22	; 0x16
    1440:	0f 89       	ldd	r16, Y+23	; 0x17
    1442:	18 8d       	ldd	r17, Y+24	; 0x18
    1444:	e0 e2       	ldi	r30, 0x20	; 32
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 e0       	ldi	r24, 0x00	; 0
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	dc 01       	movw	r26, r24
    144e:	aa 24       	eor	r10, r10
    1450:	bb 24       	eor	r11, r11
    1452:	65 01       	movw	r12, r10
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	a9 01       	movw	r20, r18
    145a:	b3 01       	movw	r22, r6
    145c:	61 70       	andi	r22, 0x01	; 1
    145e:	70 70       	andi	r23, 0x00	; 0
    1460:	61 15       	cp	r22, r1
    1462:	71 05       	cpc	r23, r1
    1464:	d1 f0       	breq	.+52     	; 0x149a <__mulsf3+0xe8>
    1466:	2e 0d       	add	r18, r14
    1468:	3f 1d       	adc	r19, r15
    146a:	40 1f       	adc	r20, r16
    146c:	51 1f       	adc	r21, r17
    146e:	15 01       	movw	r2, r10
    1470:	26 01       	movw	r4, r12
    1472:	28 0e       	add	r2, r24
    1474:	39 1e       	adc	r3, r25
    1476:	4a 1e       	adc	r4, r26
    1478:	5b 1e       	adc	r5, r27
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	a0 e0       	ldi	r26, 0x00	; 0
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	2e 15       	cp	r18, r14
    1484:	3f 05       	cpc	r19, r15
    1486:	40 07       	cpc	r20, r16
    1488:	51 07       	cpc	r21, r17
    148a:	18 f0       	brcs	.+6      	; 0x1492 <__mulsf3+0xe0>
    148c:	80 e0       	ldi	r24, 0x00	; 0
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	dc 01       	movw	r26, r24
    1492:	82 0d       	add	r24, r2
    1494:	93 1d       	adc	r25, r3
    1496:	a4 1d       	adc	r26, r4
    1498:	b5 1d       	adc	r27, r5
    149a:	aa 0c       	add	r10, r10
    149c:	bb 1c       	adc	r11, r11
    149e:	cc 1c       	adc	r12, r12
    14a0:	dd 1c       	adc	r13, r13
    14a2:	17 ff       	sbrs	r17, 7
    14a4:	09 c0       	rjmp	.+18     	; 0x14b8 <__mulsf3+0x106>
    14a6:	61 e0       	ldi	r22, 0x01	; 1
    14a8:	26 2e       	mov	r2, r22
    14aa:	31 2c       	mov	r3, r1
    14ac:	41 2c       	mov	r4, r1
    14ae:	51 2c       	mov	r5, r1
    14b0:	a2 28       	or	r10, r2
    14b2:	b3 28       	or	r11, r3
    14b4:	c4 28       	or	r12, r4
    14b6:	d5 28       	or	r13, r5
    14b8:	31 97       	sbiw	r30, 0x01	; 1
    14ba:	49 f0       	breq	.+18     	; 0x14ce <__mulsf3+0x11c>
    14bc:	ee 0c       	add	r14, r14
    14be:	ff 1c       	adc	r15, r15
    14c0:	00 1f       	adc	r16, r16
    14c2:	11 1f       	adc	r17, r17
    14c4:	96 94       	lsr	r9
    14c6:	87 94       	ror	r8
    14c8:	77 94       	ror	r7
    14ca:	67 94       	ror	r6
    14cc:	c6 cf       	rjmp	.-116    	; 0x145a <__mulsf3+0xa8>
    14ce:	6b 89       	ldd	r22, Y+19	; 0x13
    14d0:	7c 89       	ldd	r23, Y+20	; 0x14
    14d2:	eb 85       	ldd	r30, Y+11	; 0x0b
    14d4:	fc 85       	ldd	r31, Y+12	; 0x0c
    14d6:	6e 0f       	add	r22, r30
    14d8:	7f 1f       	adc	r23, r31
    14da:	6e 5f       	subi	r22, 0xFE	; 254
    14dc:	7f 4f       	sbci	r23, 0xFF	; 255
    14de:	7c 8f       	std	Y+28, r23	; 0x1c
    14e0:	6b 8f       	std	Y+27, r22	; 0x1b
    14e2:	61 e0       	ldi	r22, 0x01	; 1
    14e4:	ea 85       	ldd	r30, Y+10	; 0x0a
    14e6:	7a 89       	ldd	r23, Y+18	; 0x12
    14e8:	e7 17       	cp	r30, r23
    14ea:	09 f4       	brne	.+2      	; 0x14ee <__mulsf3+0x13c>
    14ec:	60 e0       	ldi	r22, 0x00	; 0
    14ee:	6a 8f       	std	Y+26, r22	; 0x1a
    14f0:	6b 8d       	ldd	r22, Y+27	; 0x1b
    14f2:	7c 8d       	ldd	r23, Y+28	; 0x1c
    14f4:	10 c0       	rjmp	.+32     	; 0x1516 <__mulsf3+0x164>
    14f6:	fc 01       	movw	r30, r24
    14f8:	e1 70       	andi	r30, 0x01	; 1
    14fa:	f0 70       	andi	r31, 0x00	; 0
    14fc:	30 97       	sbiw	r30, 0x00	; 0
    14fe:	29 f0       	breq	.+10     	; 0x150a <__mulsf3+0x158>
    1500:	56 95       	lsr	r21
    1502:	47 95       	ror	r20
    1504:	37 95       	ror	r19
    1506:	27 95       	ror	r18
    1508:	50 68       	ori	r21, 0x80	; 128
    150a:	b6 95       	lsr	r27
    150c:	a7 95       	ror	r26
    150e:	97 95       	ror	r25
    1510:	87 95       	ror	r24
    1512:	6f 5f       	subi	r22, 0xFF	; 255
    1514:	7f 4f       	sbci	r23, 0xFF	; 255
    1516:	b7 fd       	sbrc	r27, 7
    1518:	ee cf       	rjmp	.-36     	; 0x14f6 <__mulsf3+0x144>
    151a:	0c c0       	rjmp	.+24     	; 0x1534 <__mulsf3+0x182>
    151c:	88 0f       	add	r24, r24
    151e:	99 1f       	adc	r25, r25
    1520:	aa 1f       	adc	r26, r26
    1522:	bb 1f       	adc	r27, r27
    1524:	57 fd       	sbrc	r21, 7
    1526:	81 60       	ori	r24, 0x01	; 1
    1528:	22 0f       	add	r18, r18
    152a:	33 1f       	adc	r19, r19
    152c:	44 1f       	adc	r20, r20
    152e:	55 1f       	adc	r21, r21
    1530:	61 50       	subi	r22, 0x01	; 1
    1532:	70 40       	sbci	r23, 0x00	; 0
    1534:	80 30       	cpi	r24, 0x00	; 0
    1536:	e0 e0       	ldi	r30, 0x00	; 0
    1538:	9e 07       	cpc	r25, r30
    153a:	e0 e0       	ldi	r30, 0x00	; 0
    153c:	ae 07       	cpc	r26, r30
    153e:	e0 e4       	ldi	r30, 0x40	; 64
    1540:	be 07       	cpc	r27, r30
    1542:	60 f3       	brcs	.-40     	; 0x151c <__mulsf3+0x16a>
    1544:	6b 8f       	std	Y+27, r22	; 0x1b
    1546:	7c 8f       	std	Y+28, r23	; 0x1c
    1548:	6f e7       	ldi	r22, 0x7F	; 127
    154a:	e6 2e       	mov	r14, r22
    154c:	f1 2c       	mov	r15, r1
    154e:	01 2d       	mov	r16, r1
    1550:	11 2d       	mov	r17, r1
    1552:	e8 22       	and	r14, r24
    1554:	f9 22       	and	r15, r25
    1556:	0a 23       	and	r16, r26
    1558:	1b 23       	and	r17, r27
    155a:	60 e4       	ldi	r22, 0x40	; 64
    155c:	e6 16       	cp	r14, r22
    155e:	f1 04       	cpc	r15, r1
    1560:	01 05       	cpc	r16, r1
    1562:	11 05       	cpc	r17, r1
    1564:	61 f4       	brne	.+24     	; 0x157e <__mulsf3+0x1cc>
    1566:	87 fd       	sbrc	r24, 7
    1568:	0a c0       	rjmp	.+20     	; 0x157e <__mulsf3+0x1cc>
    156a:	21 15       	cp	r18, r1
    156c:	31 05       	cpc	r19, r1
    156e:	41 05       	cpc	r20, r1
    1570:	51 05       	cpc	r21, r1
    1572:	29 f0       	breq	.+10     	; 0x157e <__mulsf3+0x1cc>
    1574:	80 5c       	subi	r24, 0xC0	; 192
    1576:	9f 4f       	sbci	r25, 0xFF	; 255
    1578:	af 4f       	sbci	r26, 0xFF	; 255
    157a:	bf 4f       	sbci	r27, 0xFF	; 255
    157c:	80 78       	andi	r24, 0x80	; 128
    157e:	8d 8f       	std	Y+29, r24	; 0x1d
    1580:	9e 8f       	std	Y+30, r25	; 0x1e
    1582:	af 8f       	std	Y+31, r26	; 0x1f
    1584:	b8 a3       	std	Y+32, r27	; 0x20
    1586:	83 e0       	ldi	r24, 0x03	; 3
    1588:	89 8f       	std	Y+25, r24	; 0x19
    158a:	ce 01       	movw	r24, r28
    158c:	49 96       	adiw	r24, 0x19	; 25
    158e:	02 c0       	rjmp	.+4      	; 0x1594 <__mulsf3+0x1e2>
    1590:	89 e8       	ldi	r24, 0x89	; 137
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	d3 d0       	rcall	.+422    	; 0x173c <__pack_f>
    1596:	a0 96       	adiw	r28, 0x20	; 32
    1598:	e2 e1       	ldi	r30, 0x12	; 18
    159a:	7b c2       	rjmp	.+1270   	; 0x1a92 <__epilogue_restores__>

0000159c <__gtsf2>:
    159c:	a8 e1       	ldi	r26, 0x18	; 24
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	e3 ed       	ldi	r30, 0xD3	; 211
    15a2:	fa e0       	ldi	r31, 0x0A	; 10
    15a4:	66 c2       	rjmp	.+1228   	; 0x1a72 <__prologue_saves__+0x18>
    15a6:	69 83       	std	Y+1, r22	; 0x01
    15a8:	7a 83       	std	Y+2, r23	; 0x02
    15aa:	8b 83       	std	Y+3, r24	; 0x03
    15ac:	9c 83       	std	Y+4, r25	; 0x04
    15ae:	2d 83       	std	Y+5, r18	; 0x05
    15b0:	3e 83       	std	Y+6, r19	; 0x06
    15b2:	4f 83       	std	Y+7, r20	; 0x07
    15b4:	58 87       	std	Y+8, r21	; 0x08
    15b6:	8e 01       	movw	r16, r28
    15b8:	07 5f       	subi	r16, 0xF7	; 247
    15ba:	1f 4f       	sbci	r17, 0xFF	; 255
    15bc:	ce 01       	movw	r24, r28
    15be:	01 96       	adiw	r24, 0x01	; 1
    15c0:	b8 01       	movw	r22, r16
    15c2:	89 d1       	rcall	.+786    	; 0x18d6 <__unpack_f>
    15c4:	81 e1       	ldi	r24, 0x11	; 17
    15c6:	e8 2e       	mov	r14, r24
    15c8:	f1 2c       	mov	r15, r1
    15ca:	ec 0e       	add	r14, r28
    15cc:	fd 1e       	adc	r15, r29
    15ce:	ce 01       	movw	r24, r28
    15d0:	05 96       	adiw	r24, 0x05	; 5
    15d2:	b7 01       	movw	r22, r14
    15d4:	80 d1       	rcall	.+768    	; 0x18d6 <__unpack_f>
    15d6:	89 85       	ldd	r24, Y+9	; 0x09
    15d8:	82 30       	cpi	r24, 0x02	; 2
    15da:	38 f0       	brcs	.+14     	; 0x15ea <__gtsf2+0x4e>
    15dc:	89 89       	ldd	r24, Y+17	; 0x11
    15de:	82 30       	cpi	r24, 0x02	; 2
    15e0:	20 f0       	brcs	.+8      	; 0x15ea <__gtsf2+0x4e>
    15e2:	c8 01       	movw	r24, r16
    15e4:	b7 01       	movw	r22, r14
    15e6:	e0 d1       	rcall	.+960    	; 0x19a8 <__fpcmp_parts_f>
    15e8:	01 c0       	rjmp	.+2      	; 0x15ec <__gtsf2+0x50>
    15ea:	8f ef       	ldi	r24, 0xFF	; 255
    15ec:	68 96       	adiw	r28, 0x18	; 24
    15ee:	e6 e0       	ldi	r30, 0x06	; 6
    15f0:	5c c2       	rjmp	.+1208   	; 0x1aaa <__epilogue_restores__+0x18>

000015f2 <__gesf2>:
    15f2:	a8 e1       	ldi	r26, 0x18	; 24
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	ee ef       	ldi	r30, 0xFE	; 254
    15f8:	fa e0       	ldi	r31, 0x0A	; 10
    15fa:	3b c2       	rjmp	.+1142   	; 0x1a72 <__prologue_saves__+0x18>
    15fc:	69 83       	std	Y+1, r22	; 0x01
    15fe:	7a 83       	std	Y+2, r23	; 0x02
    1600:	8b 83       	std	Y+3, r24	; 0x03
    1602:	9c 83       	std	Y+4, r25	; 0x04
    1604:	2d 83       	std	Y+5, r18	; 0x05
    1606:	3e 83       	std	Y+6, r19	; 0x06
    1608:	4f 83       	std	Y+7, r20	; 0x07
    160a:	58 87       	std	Y+8, r21	; 0x08
    160c:	8e 01       	movw	r16, r28
    160e:	07 5f       	subi	r16, 0xF7	; 247
    1610:	1f 4f       	sbci	r17, 0xFF	; 255
    1612:	ce 01       	movw	r24, r28
    1614:	01 96       	adiw	r24, 0x01	; 1
    1616:	b8 01       	movw	r22, r16
    1618:	5e d1       	rcall	.+700    	; 0x18d6 <__unpack_f>
    161a:	81 e1       	ldi	r24, 0x11	; 17
    161c:	e8 2e       	mov	r14, r24
    161e:	f1 2c       	mov	r15, r1
    1620:	ec 0e       	add	r14, r28
    1622:	fd 1e       	adc	r15, r29
    1624:	ce 01       	movw	r24, r28
    1626:	05 96       	adiw	r24, 0x05	; 5
    1628:	b7 01       	movw	r22, r14
    162a:	55 d1       	rcall	.+682    	; 0x18d6 <__unpack_f>
    162c:	89 85       	ldd	r24, Y+9	; 0x09
    162e:	82 30       	cpi	r24, 0x02	; 2
    1630:	38 f0       	brcs	.+14     	; 0x1640 <__gesf2+0x4e>
    1632:	89 89       	ldd	r24, Y+17	; 0x11
    1634:	82 30       	cpi	r24, 0x02	; 2
    1636:	20 f0       	brcs	.+8      	; 0x1640 <__gesf2+0x4e>
    1638:	c8 01       	movw	r24, r16
    163a:	b7 01       	movw	r22, r14
    163c:	b5 d1       	rcall	.+874    	; 0x19a8 <__fpcmp_parts_f>
    163e:	01 c0       	rjmp	.+2      	; 0x1642 <__gesf2+0x50>
    1640:	8f ef       	ldi	r24, 0xFF	; 255
    1642:	68 96       	adiw	r28, 0x18	; 24
    1644:	e6 e0       	ldi	r30, 0x06	; 6
    1646:	31 c2       	rjmp	.+1122   	; 0x1aaa <__epilogue_restores__+0x18>

00001648 <__ltsf2>:
    1648:	a8 e1       	ldi	r26, 0x18	; 24
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	e9 e2       	ldi	r30, 0x29	; 41
    164e:	fb e0       	ldi	r31, 0x0B	; 11
    1650:	10 c2       	rjmp	.+1056   	; 0x1a72 <__prologue_saves__+0x18>
    1652:	69 83       	std	Y+1, r22	; 0x01
    1654:	7a 83       	std	Y+2, r23	; 0x02
    1656:	8b 83       	std	Y+3, r24	; 0x03
    1658:	9c 83       	std	Y+4, r25	; 0x04
    165a:	2d 83       	std	Y+5, r18	; 0x05
    165c:	3e 83       	std	Y+6, r19	; 0x06
    165e:	4f 83       	std	Y+7, r20	; 0x07
    1660:	58 87       	std	Y+8, r21	; 0x08
    1662:	8e 01       	movw	r16, r28
    1664:	07 5f       	subi	r16, 0xF7	; 247
    1666:	1f 4f       	sbci	r17, 0xFF	; 255
    1668:	ce 01       	movw	r24, r28
    166a:	01 96       	adiw	r24, 0x01	; 1
    166c:	b8 01       	movw	r22, r16
    166e:	33 d1       	rcall	.+614    	; 0x18d6 <__unpack_f>
    1670:	81 e1       	ldi	r24, 0x11	; 17
    1672:	e8 2e       	mov	r14, r24
    1674:	f1 2c       	mov	r15, r1
    1676:	ec 0e       	add	r14, r28
    1678:	fd 1e       	adc	r15, r29
    167a:	ce 01       	movw	r24, r28
    167c:	05 96       	adiw	r24, 0x05	; 5
    167e:	b7 01       	movw	r22, r14
    1680:	2a d1       	rcall	.+596    	; 0x18d6 <__unpack_f>
    1682:	89 85       	ldd	r24, Y+9	; 0x09
    1684:	82 30       	cpi	r24, 0x02	; 2
    1686:	38 f0       	brcs	.+14     	; 0x1696 <__ltsf2+0x4e>
    1688:	89 89       	ldd	r24, Y+17	; 0x11
    168a:	82 30       	cpi	r24, 0x02	; 2
    168c:	20 f0       	brcs	.+8      	; 0x1696 <__ltsf2+0x4e>
    168e:	c8 01       	movw	r24, r16
    1690:	b7 01       	movw	r22, r14
    1692:	8a d1       	rcall	.+788    	; 0x19a8 <__fpcmp_parts_f>
    1694:	01 c0       	rjmp	.+2      	; 0x1698 <__ltsf2+0x50>
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	68 96       	adiw	r28, 0x18	; 24
    169a:	e6 e0       	ldi	r30, 0x06	; 6
    169c:	06 c2       	rjmp	.+1036   	; 0x1aaa <__epilogue_restores__+0x18>

0000169e <__fixsfsi>:
    169e:	ac e0       	ldi	r26, 0x0C	; 12
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	e4 e5       	ldi	r30, 0x54	; 84
    16a4:	fb e0       	ldi	r31, 0x0B	; 11
    16a6:	e9 c1       	rjmp	.+978    	; 0x1a7a <__prologue_saves__+0x20>
    16a8:	69 83       	std	Y+1, r22	; 0x01
    16aa:	7a 83       	std	Y+2, r23	; 0x02
    16ac:	8b 83       	std	Y+3, r24	; 0x03
    16ae:	9c 83       	std	Y+4, r25	; 0x04
    16b0:	ce 01       	movw	r24, r28
    16b2:	01 96       	adiw	r24, 0x01	; 1
    16b4:	be 01       	movw	r22, r28
    16b6:	6b 5f       	subi	r22, 0xFB	; 251
    16b8:	7f 4f       	sbci	r23, 0xFF	; 255
    16ba:	0d d1       	rcall	.+538    	; 0x18d6 <__unpack_f>
    16bc:	8d 81       	ldd	r24, Y+5	; 0x05
    16be:	82 30       	cpi	r24, 0x02	; 2
    16c0:	81 f1       	breq	.+96     	; 0x1722 <__fixsfsi+0x84>
    16c2:	82 30       	cpi	r24, 0x02	; 2
    16c4:	70 f1       	brcs	.+92     	; 0x1722 <__fixsfsi+0x84>
    16c6:	84 30       	cpi	r24, 0x04	; 4
    16c8:	21 f4       	brne	.+8      	; 0x16d2 <__fixsfsi+0x34>
    16ca:	8e 81       	ldd	r24, Y+6	; 0x06
    16cc:	88 23       	and	r24, r24
    16ce:	69 f1       	breq	.+90     	; 0x172a <__fixsfsi+0x8c>
    16d0:	0a c0       	rjmp	.+20     	; 0x16e6 <__fixsfsi+0x48>
    16d2:	2f 81       	ldd	r18, Y+7	; 0x07
    16d4:	38 85       	ldd	r19, Y+8	; 0x08
    16d6:	37 fd       	sbrc	r19, 7
    16d8:	24 c0       	rjmp	.+72     	; 0x1722 <__fixsfsi+0x84>
    16da:	6e 81       	ldd	r22, Y+6	; 0x06
    16dc:	2f 31       	cpi	r18, 0x1F	; 31
    16de:	31 05       	cpc	r19, r1
    16e0:	3c f0       	brlt	.+14     	; 0x16f0 <__fixsfsi+0x52>
    16e2:	66 23       	and	r22, r22
    16e4:	11 f1       	breq	.+68     	; 0x172a <__fixsfsi+0x8c>
    16e6:	20 e0       	ldi	r18, 0x00	; 0
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	40 e0       	ldi	r20, 0x00	; 0
    16ec:	50 e8       	ldi	r21, 0x80	; 128
    16ee:	21 c0       	rjmp	.+66     	; 0x1732 <__fixsfsi+0x94>
    16f0:	8e e1       	ldi	r24, 0x1E	; 30
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	82 1b       	sub	r24, r18
    16f6:	93 0b       	sbc	r25, r19
    16f8:	29 85       	ldd	r18, Y+9	; 0x09
    16fa:	3a 85       	ldd	r19, Y+10	; 0x0a
    16fc:	4b 85       	ldd	r20, Y+11	; 0x0b
    16fe:	5c 85       	ldd	r21, Y+12	; 0x0c
    1700:	04 c0       	rjmp	.+8      	; 0x170a <__fixsfsi+0x6c>
    1702:	56 95       	lsr	r21
    1704:	47 95       	ror	r20
    1706:	37 95       	ror	r19
    1708:	27 95       	ror	r18
    170a:	8a 95       	dec	r24
    170c:	d2 f7       	brpl	.-12     	; 0x1702 <__fixsfsi+0x64>
    170e:	66 23       	and	r22, r22
    1710:	81 f0       	breq	.+32     	; 0x1732 <__fixsfsi+0x94>
    1712:	50 95       	com	r21
    1714:	40 95       	com	r20
    1716:	30 95       	com	r19
    1718:	21 95       	neg	r18
    171a:	3f 4f       	sbci	r19, 0xFF	; 255
    171c:	4f 4f       	sbci	r20, 0xFF	; 255
    171e:	5f 4f       	sbci	r21, 0xFF	; 255
    1720:	08 c0       	rjmp	.+16     	; 0x1732 <__fixsfsi+0x94>
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	a9 01       	movw	r20, r18
    1728:	04 c0       	rjmp	.+8      	; 0x1732 <__fixsfsi+0x94>
    172a:	2f ef       	ldi	r18, 0xFF	; 255
    172c:	3f ef       	ldi	r19, 0xFF	; 255
    172e:	4f ef       	ldi	r20, 0xFF	; 255
    1730:	5f e7       	ldi	r21, 0x7F	; 127
    1732:	b9 01       	movw	r22, r18
    1734:	ca 01       	movw	r24, r20
    1736:	2c 96       	adiw	r28, 0x0c	; 12
    1738:	e2 e0       	ldi	r30, 0x02	; 2
    173a:	bb c1       	rjmp	.+886    	; 0x1ab2 <__epilogue_restores__+0x20>

0000173c <__pack_f>:
    173c:	ef 92       	push	r14
    173e:	ff 92       	push	r15
    1740:	0f 93       	push	r16
    1742:	1f 93       	push	r17
    1744:	cf 93       	push	r28
    1746:	df 93       	push	r29
    1748:	fc 01       	movw	r30, r24
    174a:	24 81       	ldd	r18, Z+4	; 0x04
    174c:	35 81       	ldd	r19, Z+5	; 0x05
    174e:	46 81       	ldd	r20, Z+6	; 0x06
    1750:	57 81       	ldd	r21, Z+7	; 0x07
    1752:	61 81       	ldd	r22, Z+1	; 0x01
    1754:	80 81       	ld	r24, Z
    1756:	82 30       	cpi	r24, 0x02	; 2
    1758:	20 f4       	brcc	.+8      	; 0x1762 <__pack_f+0x26>
    175a:	40 61       	ori	r20, 0x10	; 16
    175c:	ef ef       	ldi	r30, 0xFF	; 255
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	a3 c0       	rjmp	.+326    	; 0x18a8 <__pack_f+0x16c>
    1762:	84 30       	cpi	r24, 0x04	; 4
    1764:	09 f4       	brne	.+2      	; 0x1768 <__pack_f+0x2c>
    1766:	9b c0       	rjmp	.+310    	; 0x189e <__pack_f+0x162>
    1768:	82 30       	cpi	r24, 0x02	; 2
    176a:	09 f4       	brne	.+2      	; 0x176e <__pack_f+0x32>
    176c:	92 c0       	rjmp	.+292    	; 0x1892 <__pack_f+0x156>
    176e:	21 15       	cp	r18, r1
    1770:	31 05       	cpc	r19, r1
    1772:	41 05       	cpc	r20, r1
    1774:	51 05       	cpc	r21, r1
    1776:	09 f4       	brne	.+2      	; 0x177a <__pack_f+0x3e>
    1778:	8f c0       	rjmp	.+286    	; 0x1898 <__pack_f+0x15c>
    177a:	02 80       	ldd	r0, Z+2	; 0x02
    177c:	f3 81       	ldd	r31, Z+3	; 0x03
    177e:	e0 2d       	mov	r30, r0
    1780:	8f ef       	ldi	r24, 0xFF	; 255
    1782:	e2 38       	cpi	r30, 0x82	; 130
    1784:	f8 07       	cpc	r31, r24
    1786:	0c f0       	brlt	.+2      	; 0x178a <__pack_f+0x4e>
    1788:	5a c0       	rjmp	.+180    	; 0x183e <__pack_f+0x102>
    178a:	c2 e8       	ldi	r28, 0x82	; 130
    178c:	df ef       	ldi	r29, 0xFF	; 255
    178e:	ce 1b       	sub	r28, r30
    1790:	df 0b       	sbc	r29, r31
    1792:	ca 31       	cpi	r28, 0x1A	; 26
    1794:	d1 05       	cpc	r29, r1
    1796:	6c f5       	brge	.+90     	; 0x17f2 <__pack_f+0xb6>
    1798:	79 01       	movw	r14, r18
    179a:	8a 01       	movw	r16, r20
    179c:	0c 2e       	mov	r0, r28
    179e:	04 c0       	rjmp	.+8      	; 0x17a8 <__pack_f+0x6c>
    17a0:	16 95       	lsr	r17
    17a2:	07 95       	ror	r16
    17a4:	f7 94       	ror	r15
    17a6:	e7 94       	ror	r14
    17a8:	0a 94       	dec	r0
    17aa:	d2 f7       	brpl	.-12     	; 0x17a0 <__pack_f+0x64>
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	a0 e0       	ldi	r26, 0x00	; 0
    17b2:	b0 e0       	ldi	r27, 0x00	; 0
    17b4:	0c 2e       	mov	r0, r28
    17b6:	04 c0       	rjmp	.+8      	; 0x17c0 <__pack_f+0x84>
    17b8:	88 0f       	add	r24, r24
    17ba:	99 1f       	adc	r25, r25
    17bc:	aa 1f       	adc	r26, r26
    17be:	bb 1f       	adc	r27, r27
    17c0:	0a 94       	dec	r0
    17c2:	d2 f7       	brpl	.-12     	; 0x17b8 <__pack_f+0x7c>
    17c4:	01 97       	sbiw	r24, 0x01	; 1
    17c6:	a1 09       	sbc	r26, r1
    17c8:	b1 09       	sbc	r27, r1
    17ca:	82 23       	and	r24, r18
    17cc:	93 23       	and	r25, r19
    17ce:	a4 23       	and	r26, r20
    17d0:	b5 23       	and	r27, r21
    17d2:	21 e0       	ldi	r18, 0x01	; 1
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	40 e0       	ldi	r20, 0x00	; 0
    17d8:	50 e0       	ldi	r21, 0x00	; 0
    17da:	00 97       	sbiw	r24, 0x00	; 0
    17dc:	a1 05       	cpc	r26, r1
    17de:	b1 05       	cpc	r27, r1
    17e0:	19 f4       	brne	.+6      	; 0x17e8 <__pack_f+0xac>
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	a9 01       	movw	r20, r18
    17e8:	2e 29       	or	r18, r14
    17ea:	3f 29       	or	r19, r15
    17ec:	40 2b       	or	r20, r16
    17ee:	51 2b       	or	r21, r17
    17f0:	03 c0       	rjmp	.+6      	; 0x17f8 <__pack_f+0xbc>
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	a9 01       	movw	r20, r18
    17f8:	da 01       	movw	r26, r20
    17fa:	c9 01       	movw	r24, r18
    17fc:	8f 77       	andi	r24, 0x7F	; 127
    17fe:	90 70       	andi	r25, 0x00	; 0
    1800:	a0 70       	andi	r26, 0x00	; 0
    1802:	b0 70       	andi	r27, 0x00	; 0
    1804:	80 34       	cpi	r24, 0x40	; 64
    1806:	91 05       	cpc	r25, r1
    1808:	a1 05       	cpc	r26, r1
    180a:	b1 05       	cpc	r27, r1
    180c:	39 f4       	brne	.+14     	; 0x181c <__pack_f+0xe0>
    180e:	27 ff       	sbrs	r18, 7
    1810:	09 c0       	rjmp	.+18     	; 0x1824 <__pack_f+0xe8>
    1812:	20 5c       	subi	r18, 0xC0	; 192
    1814:	3f 4f       	sbci	r19, 0xFF	; 255
    1816:	4f 4f       	sbci	r20, 0xFF	; 255
    1818:	5f 4f       	sbci	r21, 0xFF	; 255
    181a:	04 c0       	rjmp	.+8      	; 0x1824 <__pack_f+0xe8>
    181c:	21 5c       	subi	r18, 0xC1	; 193
    181e:	3f 4f       	sbci	r19, 0xFF	; 255
    1820:	4f 4f       	sbci	r20, 0xFF	; 255
    1822:	5f 4f       	sbci	r21, 0xFF	; 255
    1824:	e1 e0       	ldi	r30, 0x01	; 1
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	20 30       	cpi	r18, 0x00	; 0
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	38 07       	cpc	r19, r24
    182e:	80 e0       	ldi	r24, 0x00	; 0
    1830:	48 07       	cpc	r20, r24
    1832:	80 e4       	ldi	r24, 0x40	; 64
    1834:	58 07       	cpc	r21, r24
    1836:	28 f5       	brcc	.+74     	; 0x1882 <__pack_f+0x146>
    1838:	e0 e0       	ldi	r30, 0x00	; 0
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	22 c0       	rjmp	.+68     	; 0x1882 <__pack_f+0x146>
    183e:	e0 38       	cpi	r30, 0x80	; 128
    1840:	f1 05       	cpc	r31, r1
    1842:	6c f5       	brge	.+90     	; 0x189e <__pack_f+0x162>
    1844:	e1 58       	subi	r30, 0x81	; 129
    1846:	ff 4f       	sbci	r31, 0xFF	; 255
    1848:	da 01       	movw	r26, r20
    184a:	c9 01       	movw	r24, r18
    184c:	8f 77       	andi	r24, 0x7F	; 127
    184e:	90 70       	andi	r25, 0x00	; 0
    1850:	a0 70       	andi	r26, 0x00	; 0
    1852:	b0 70       	andi	r27, 0x00	; 0
    1854:	80 34       	cpi	r24, 0x40	; 64
    1856:	91 05       	cpc	r25, r1
    1858:	a1 05       	cpc	r26, r1
    185a:	b1 05       	cpc	r27, r1
    185c:	39 f4       	brne	.+14     	; 0x186c <__pack_f+0x130>
    185e:	27 ff       	sbrs	r18, 7
    1860:	09 c0       	rjmp	.+18     	; 0x1874 <__pack_f+0x138>
    1862:	20 5c       	subi	r18, 0xC0	; 192
    1864:	3f 4f       	sbci	r19, 0xFF	; 255
    1866:	4f 4f       	sbci	r20, 0xFF	; 255
    1868:	5f 4f       	sbci	r21, 0xFF	; 255
    186a:	04 c0       	rjmp	.+8      	; 0x1874 <__pack_f+0x138>
    186c:	21 5c       	subi	r18, 0xC1	; 193
    186e:	3f 4f       	sbci	r19, 0xFF	; 255
    1870:	4f 4f       	sbci	r20, 0xFF	; 255
    1872:	5f 4f       	sbci	r21, 0xFF	; 255
    1874:	57 ff       	sbrs	r21, 7
    1876:	05 c0       	rjmp	.+10     	; 0x1882 <__pack_f+0x146>
    1878:	56 95       	lsr	r21
    187a:	47 95       	ror	r20
    187c:	37 95       	ror	r19
    187e:	27 95       	ror	r18
    1880:	31 96       	adiw	r30, 0x01	; 1
    1882:	87 e0       	ldi	r24, 0x07	; 7
    1884:	56 95       	lsr	r21
    1886:	47 95       	ror	r20
    1888:	37 95       	ror	r19
    188a:	27 95       	ror	r18
    188c:	8a 95       	dec	r24
    188e:	d1 f7       	brne	.-12     	; 0x1884 <__pack_f+0x148>
    1890:	0b c0       	rjmp	.+22     	; 0x18a8 <__pack_f+0x16c>
    1892:	e0 e0       	ldi	r30, 0x00	; 0
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	05 c0       	rjmp	.+10     	; 0x18a2 <__pack_f+0x166>
    1898:	e0 e0       	ldi	r30, 0x00	; 0
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	05 c0       	rjmp	.+10     	; 0x18a8 <__pack_f+0x16c>
    189e:	ef ef       	ldi	r30, 0xFF	; 255
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	a9 01       	movw	r20, r18
    18a8:	8e 2f       	mov	r24, r30
    18aa:	87 95       	ror	r24
    18ac:	88 27       	eor	r24, r24
    18ae:	87 95       	ror	r24
    18b0:	94 2f       	mov	r25, r20
    18b2:	9f 77       	andi	r25, 0x7F	; 127
    18b4:	67 95       	ror	r22
    18b6:	66 27       	eor	r22, r22
    18b8:	67 95       	ror	r22
    18ba:	e6 95       	lsr	r30
    18bc:	e2 2e       	mov	r14, r18
    18be:	a9 2f       	mov	r26, r25
    18c0:	a8 2b       	or	r26, r24
    18c2:	fe 2f       	mov	r31, r30
    18c4:	f6 2b       	or	r31, r22
    18c6:	62 2f       	mov	r22, r18
    18c8:	73 2f       	mov	r23, r19
    18ca:	8a 2f       	mov	r24, r26
    18cc:	9f 2f       	mov	r25, r31
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
    18d2:	e6 e0       	ldi	r30, 0x06	; 6
    18d4:	ea c0       	rjmp	.+468    	; 0x1aaa <__epilogue_restores__+0x18>

000018d6 <__unpack_f>:
    18d6:	dc 01       	movw	r26, r24
    18d8:	fb 01       	movw	r30, r22
    18da:	2c 91       	ld	r18, X
    18dc:	11 96       	adiw	r26, 0x01	; 1
    18de:	3c 91       	ld	r19, X
    18e0:	11 97       	sbiw	r26, 0x01	; 1
    18e2:	12 96       	adiw	r26, 0x02	; 2
    18e4:	8c 91       	ld	r24, X
    18e6:	12 97       	sbiw	r26, 0x02	; 2
    18e8:	48 2f       	mov	r20, r24
    18ea:	4f 77       	andi	r20, 0x7F	; 127
    18ec:	50 e0       	ldi	r21, 0x00	; 0
    18ee:	98 2f       	mov	r25, r24
    18f0:	99 1f       	adc	r25, r25
    18f2:	99 27       	eor	r25, r25
    18f4:	99 1f       	adc	r25, r25
    18f6:	13 96       	adiw	r26, 0x03	; 3
    18f8:	6c 91       	ld	r22, X
    18fa:	13 97       	sbiw	r26, 0x03	; 3
    18fc:	86 2f       	mov	r24, r22
    18fe:	88 0f       	add	r24, r24
    1900:	89 2b       	or	r24, r25
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	66 1f       	adc	r22, r22
    1906:	66 27       	eor	r22, r22
    1908:	66 1f       	adc	r22, r22
    190a:	61 83       	std	Z+1, r22	; 0x01
    190c:	00 97       	sbiw	r24, 0x00	; 0
    190e:	39 f5       	brne	.+78     	; 0x195e <__unpack_f+0x88>
    1910:	21 15       	cp	r18, r1
    1912:	31 05       	cpc	r19, r1
    1914:	41 05       	cpc	r20, r1
    1916:	51 05       	cpc	r21, r1
    1918:	11 f4       	brne	.+4      	; 0x191e <__unpack_f+0x48>
    191a:	82 e0       	ldi	r24, 0x02	; 2
    191c:	29 c0       	rjmp	.+82     	; 0x1970 <__unpack_f+0x9a>
    191e:	82 e8       	ldi	r24, 0x82	; 130
    1920:	9f ef       	ldi	r25, 0xFF	; 255
    1922:	93 83       	std	Z+3, r25	; 0x03
    1924:	82 83       	std	Z+2, r24	; 0x02
    1926:	67 e0       	ldi	r22, 0x07	; 7
    1928:	22 0f       	add	r18, r18
    192a:	33 1f       	adc	r19, r19
    192c:	44 1f       	adc	r20, r20
    192e:	55 1f       	adc	r21, r21
    1930:	6a 95       	dec	r22
    1932:	d1 f7       	brne	.-12     	; 0x1928 <__unpack_f+0x52>
    1934:	83 e0       	ldi	r24, 0x03	; 3
    1936:	80 83       	st	Z, r24
    1938:	09 c0       	rjmp	.+18     	; 0x194c <__unpack_f+0x76>
    193a:	22 0f       	add	r18, r18
    193c:	33 1f       	adc	r19, r19
    193e:	44 1f       	adc	r20, r20
    1940:	55 1f       	adc	r21, r21
    1942:	82 81       	ldd	r24, Z+2	; 0x02
    1944:	93 81       	ldd	r25, Z+3	; 0x03
    1946:	01 97       	sbiw	r24, 0x01	; 1
    1948:	93 83       	std	Z+3, r25	; 0x03
    194a:	82 83       	std	Z+2, r24	; 0x02
    194c:	20 30       	cpi	r18, 0x00	; 0
    194e:	80 e0       	ldi	r24, 0x00	; 0
    1950:	38 07       	cpc	r19, r24
    1952:	80 e0       	ldi	r24, 0x00	; 0
    1954:	48 07       	cpc	r20, r24
    1956:	80 e4       	ldi	r24, 0x40	; 64
    1958:	58 07       	cpc	r21, r24
    195a:	78 f3       	brcs	.-34     	; 0x193a <__unpack_f+0x64>
    195c:	20 c0       	rjmp	.+64     	; 0x199e <__unpack_f+0xc8>
    195e:	8f 3f       	cpi	r24, 0xFF	; 255
    1960:	91 05       	cpc	r25, r1
    1962:	79 f4       	brne	.+30     	; 0x1982 <__unpack_f+0xac>
    1964:	21 15       	cp	r18, r1
    1966:	31 05       	cpc	r19, r1
    1968:	41 05       	cpc	r20, r1
    196a:	51 05       	cpc	r21, r1
    196c:	19 f4       	brne	.+6      	; 0x1974 <__unpack_f+0x9e>
    196e:	84 e0       	ldi	r24, 0x04	; 4
    1970:	80 83       	st	Z, r24
    1972:	08 95       	ret
    1974:	44 ff       	sbrs	r20, 4
    1976:	03 c0       	rjmp	.+6      	; 0x197e <__unpack_f+0xa8>
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	80 83       	st	Z, r24
    197c:	10 c0       	rjmp	.+32     	; 0x199e <__unpack_f+0xc8>
    197e:	10 82       	st	Z, r1
    1980:	0e c0       	rjmp	.+28     	; 0x199e <__unpack_f+0xc8>
    1982:	8f 57       	subi	r24, 0x7F	; 127
    1984:	90 40       	sbci	r25, 0x00	; 0
    1986:	93 83       	std	Z+3, r25	; 0x03
    1988:	82 83       	std	Z+2, r24	; 0x02
    198a:	83 e0       	ldi	r24, 0x03	; 3
    198c:	80 83       	st	Z, r24
    198e:	87 e0       	ldi	r24, 0x07	; 7
    1990:	22 0f       	add	r18, r18
    1992:	33 1f       	adc	r19, r19
    1994:	44 1f       	adc	r20, r20
    1996:	55 1f       	adc	r21, r21
    1998:	8a 95       	dec	r24
    199a:	d1 f7       	brne	.-12     	; 0x1990 <__unpack_f+0xba>
    199c:	50 64       	ori	r21, 0x40	; 64
    199e:	24 83       	std	Z+4, r18	; 0x04
    19a0:	35 83       	std	Z+5, r19	; 0x05
    19a2:	46 83       	std	Z+6, r20	; 0x06
    19a4:	57 83       	std	Z+7, r21	; 0x07
    19a6:	08 95       	ret

000019a8 <__fpcmp_parts_f>:
    19a8:	fc 01       	movw	r30, r24
    19aa:	db 01       	movw	r26, r22
    19ac:	90 81       	ld	r25, Z
    19ae:	92 30       	cpi	r25, 0x02	; 2
    19b0:	08 f4       	brcc	.+2      	; 0x19b4 <__fpcmp_parts_f+0xc>
    19b2:	49 c0       	rjmp	.+146    	; 0x1a46 <__fpcmp_parts_f+0x9e>
    19b4:	8c 91       	ld	r24, X
    19b6:	82 30       	cpi	r24, 0x02	; 2
    19b8:	08 f4       	brcc	.+2      	; 0x19bc <__fpcmp_parts_f+0x14>
    19ba:	45 c0       	rjmp	.+138    	; 0x1a46 <__fpcmp_parts_f+0x9e>
    19bc:	94 30       	cpi	r25, 0x04	; 4
    19be:	51 f4       	brne	.+20     	; 0x19d4 <__fpcmp_parts_f+0x2c>
    19c0:	61 81       	ldd	r22, Z+1	; 0x01
    19c2:	84 30       	cpi	r24, 0x04	; 4
    19c4:	b1 f5       	brne	.+108    	; 0x1a32 <__fpcmp_parts_f+0x8a>
    19c6:	11 96       	adiw	r26, 0x01	; 1
    19c8:	2c 91       	ld	r18, X
    19ca:	11 97       	sbiw	r26, 0x01	; 1
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	26 1b       	sub	r18, r22
    19d0:	31 09       	sbc	r19, r1
    19d2:	41 c0       	rjmp	.+130    	; 0x1a56 <__fpcmp_parts_f+0xae>
    19d4:	84 30       	cpi	r24, 0x04	; 4
    19d6:	21 f0       	breq	.+8      	; 0x19e0 <__fpcmp_parts_f+0x38>
    19d8:	92 30       	cpi	r25, 0x02	; 2
    19da:	41 f4       	brne	.+16     	; 0x19ec <__fpcmp_parts_f+0x44>
    19dc:	82 30       	cpi	r24, 0x02	; 2
    19de:	b1 f1       	breq	.+108    	; 0x1a4c <__fpcmp_parts_f+0xa4>
    19e0:	11 96       	adiw	r26, 0x01	; 1
    19e2:	8c 91       	ld	r24, X
    19e4:	11 97       	sbiw	r26, 0x01	; 1
    19e6:	88 23       	and	r24, r24
    19e8:	a1 f1       	breq	.+104    	; 0x1a52 <__fpcmp_parts_f+0xaa>
    19ea:	2d c0       	rjmp	.+90     	; 0x1a46 <__fpcmp_parts_f+0x9e>
    19ec:	61 81       	ldd	r22, Z+1	; 0x01
    19ee:	82 30       	cpi	r24, 0x02	; 2
    19f0:	01 f1       	breq	.+64     	; 0x1a32 <__fpcmp_parts_f+0x8a>
    19f2:	11 96       	adiw	r26, 0x01	; 1
    19f4:	8c 91       	ld	r24, X
    19f6:	11 97       	sbiw	r26, 0x01	; 1
    19f8:	68 17       	cp	r22, r24
    19fa:	d9 f4       	brne	.+54     	; 0x1a32 <__fpcmp_parts_f+0x8a>
    19fc:	22 81       	ldd	r18, Z+2	; 0x02
    19fe:	33 81       	ldd	r19, Z+3	; 0x03
    1a00:	12 96       	adiw	r26, 0x02	; 2
    1a02:	8d 91       	ld	r24, X+
    1a04:	9c 91       	ld	r25, X
    1a06:	13 97       	sbiw	r26, 0x03	; 3
    1a08:	82 17       	cp	r24, r18
    1a0a:	93 07       	cpc	r25, r19
    1a0c:	94 f0       	brlt	.+36     	; 0x1a32 <__fpcmp_parts_f+0x8a>
    1a0e:	28 17       	cp	r18, r24
    1a10:	39 07       	cpc	r19, r25
    1a12:	bc f0       	brlt	.+46     	; 0x1a42 <__fpcmp_parts_f+0x9a>
    1a14:	24 81       	ldd	r18, Z+4	; 0x04
    1a16:	35 81       	ldd	r19, Z+5	; 0x05
    1a18:	46 81       	ldd	r20, Z+6	; 0x06
    1a1a:	57 81       	ldd	r21, Z+7	; 0x07
    1a1c:	14 96       	adiw	r26, 0x04	; 4
    1a1e:	8d 91       	ld	r24, X+
    1a20:	9d 91       	ld	r25, X+
    1a22:	0d 90       	ld	r0, X+
    1a24:	bc 91       	ld	r27, X
    1a26:	a0 2d       	mov	r26, r0
    1a28:	82 17       	cp	r24, r18
    1a2a:	93 07       	cpc	r25, r19
    1a2c:	a4 07       	cpc	r26, r20
    1a2e:	b5 07       	cpc	r27, r21
    1a30:	18 f4       	brcc	.+6      	; 0x1a38 <__fpcmp_parts_f+0x90>
    1a32:	66 23       	and	r22, r22
    1a34:	41 f0       	breq	.+16     	; 0x1a46 <__fpcmp_parts_f+0x9e>
    1a36:	0d c0       	rjmp	.+26     	; 0x1a52 <__fpcmp_parts_f+0xaa>
    1a38:	28 17       	cp	r18, r24
    1a3a:	39 07       	cpc	r19, r25
    1a3c:	4a 07       	cpc	r20, r26
    1a3e:	5b 07       	cpc	r21, r27
    1a40:	28 f4       	brcc	.+10     	; 0x1a4c <__fpcmp_parts_f+0xa4>
    1a42:	66 23       	and	r22, r22
    1a44:	31 f0       	breq	.+12     	; 0x1a52 <__fpcmp_parts_f+0xaa>
    1a46:	21 e0       	ldi	r18, 0x01	; 1
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	05 c0       	rjmp	.+10     	; 0x1a56 <__fpcmp_parts_f+0xae>
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	02 c0       	rjmp	.+4      	; 0x1a56 <__fpcmp_parts_f+0xae>
    1a52:	2f ef       	ldi	r18, 0xFF	; 255
    1a54:	3f ef       	ldi	r19, 0xFF	; 255
    1a56:	c9 01       	movw	r24, r18
    1a58:	08 95       	ret

00001a5a <__prologue_saves__>:
    1a5a:	2f 92       	push	r2
    1a5c:	3f 92       	push	r3
    1a5e:	4f 92       	push	r4
    1a60:	5f 92       	push	r5
    1a62:	6f 92       	push	r6
    1a64:	7f 92       	push	r7
    1a66:	8f 92       	push	r8
    1a68:	9f 92       	push	r9
    1a6a:	af 92       	push	r10
    1a6c:	bf 92       	push	r11
    1a6e:	cf 92       	push	r12
    1a70:	df 92       	push	r13
    1a72:	ef 92       	push	r14
    1a74:	ff 92       	push	r15
    1a76:	0f 93       	push	r16
    1a78:	1f 93       	push	r17
    1a7a:	cf 93       	push	r28
    1a7c:	df 93       	push	r29
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
    1a82:	ca 1b       	sub	r28, r26
    1a84:	db 0b       	sbc	r29, r27
    1a86:	0f b6       	in	r0, 0x3f	; 63
    1a88:	f8 94       	cli
    1a8a:	de bf       	out	0x3e, r29	; 62
    1a8c:	0f be       	out	0x3f, r0	; 63
    1a8e:	cd bf       	out	0x3d, r28	; 61
    1a90:	09 94       	ijmp

00001a92 <__epilogue_restores__>:
    1a92:	2a 88       	ldd	r2, Y+18	; 0x12
    1a94:	39 88       	ldd	r3, Y+17	; 0x11
    1a96:	48 88       	ldd	r4, Y+16	; 0x10
    1a98:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a9a:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a9c:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a9e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1aa0:	9b 84       	ldd	r9, Y+11	; 0x0b
    1aa2:	aa 84       	ldd	r10, Y+10	; 0x0a
    1aa4:	b9 84       	ldd	r11, Y+9	; 0x09
    1aa6:	c8 84       	ldd	r12, Y+8	; 0x08
    1aa8:	df 80       	ldd	r13, Y+7	; 0x07
    1aaa:	ee 80       	ldd	r14, Y+6	; 0x06
    1aac:	fd 80       	ldd	r15, Y+5	; 0x05
    1aae:	0c 81       	ldd	r16, Y+4	; 0x04
    1ab0:	1b 81       	ldd	r17, Y+3	; 0x03
    1ab2:	aa 81       	ldd	r26, Y+2	; 0x02
    1ab4:	b9 81       	ldd	r27, Y+1	; 0x01
    1ab6:	ce 0f       	add	r28, r30
    1ab8:	d1 1d       	adc	r29, r1
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	f8 94       	cli
    1abe:	de bf       	out	0x3e, r29	; 62
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	cd bf       	out	0x3d, r28	; 61
    1ac4:	ed 01       	movw	r28, r26
    1ac6:	08 95       	ret

00001ac8 <ltoa>:
    1ac8:	fa 01       	movw	r30, r20
    1aca:	cf 93       	push	r28
    1acc:	ff 93       	push	r31
    1ace:	ef 93       	push	r30
    1ad0:	22 30       	cpi	r18, 0x02	; 2
    1ad2:	3c f1       	brlt	.+78     	; 0x1b22 <ltoa+0x5a>
    1ad4:	25 32       	cpi	r18, 0x25	; 37
    1ad6:	2c f5       	brge	.+74     	; 0x1b22 <ltoa+0x5a>
    1ad8:	c2 2f       	mov	r28, r18
    1ada:	e8 94       	clt
    1adc:	ca 30       	cpi	r28, 0x0A	; 10
    1ade:	49 f4       	brne	.+18     	; 0x1af2 <ltoa+0x2a>
    1ae0:	97 fb       	bst	r25, 7
    1ae2:	3e f4       	brtc	.+14     	; 0x1af2 <ltoa+0x2a>
    1ae4:	90 95       	com	r25
    1ae6:	80 95       	com	r24
    1ae8:	70 95       	com	r23
    1aea:	61 95       	neg	r22
    1aec:	7f 4f       	sbci	r23, 0xFF	; 255
    1aee:	8f 4f       	sbci	r24, 0xFF	; 255
    1af0:	9f 4f       	sbci	r25, 0xFF	; 255
    1af2:	2c 2f       	mov	r18, r28
    1af4:	33 27       	eor	r19, r19
    1af6:	44 27       	eor	r20, r20
    1af8:	55 27       	eor	r21, r21
    1afa:	ff 93       	push	r31
    1afc:	ef 93       	push	r30
    1afe:	26 d0       	rcall	.+76     	; 0x1b4c <__udivmodsi4>
    1b00:	ef 91       	pop	r30
    1b02:	ff 91       	pop	r31
    1b04:	60 5d       	subi	r22, 0xD0	; 208
    1b06:	6a 33       	cpi	r22, 0x3A	; 58
    1b08:	0c f0       	brlt	.+2      	; 0x1b0c <ltoa+0x44>
    1b0a:	69 5d       	subi	r22, 0xD9	; 217
    1b0c:	61 93       	st	Z+, r22
    1b0e:	b9 01       	movw	r22, r18
    1b10:	ca 01       	movw	r24, r20
    1b12:	60 50       	subi	r22, 0x00	; 0
    1b14:	70 40       	sbci	r23, 0x00	; 0
    1b16:	80 40       	sbci	r24, 0x00	; 0
    1b18:	90 40       	sbci	r25, 0x00	; 0
    1b1a:	59 f7       	brne	.-42     	; 0x1af2 <ltoa+0x2a>
    1b1c:	16 f4       	brtc	.+4      	; 0x1b22 <ltoa+0x5a>
    1b1e:	cd e2       	ldi	r28, 0x2D	; 45
    1b20:	c1 93       	st	Z+, r28
    1b22:	10 82       	st	Z, r1
    1b24:	8f 91       	pop	r24
    1b26:	9f 91       	pop	r25
    1b28:	cf 91       	pop	r28
    1b2a:	00 c0       	rjmp	.+0      	; 0x1b2c <strrev>

00001b2c <strrev>:
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	fc 01       	movw	r30, r24
    1b30:	67 2f       	mov	r22, r23
    1b32:	71 91       	ld	r23, Z+
    1b34:	77 23       	and	r23, r23
    1b36:	e1 f7       	brne	.-8      	; 0x1b30 <strrev+0x4>
    1b38:	32 97       	sbiw	r30, 0x02	; 2
    1b3a:	04 c0       	rjmp	.+8      	; 0x1b44 <strrev+0x18>
    1b3c:	7c 91       	ld	r23, X
    1b3e:	6d 93       	st	X+, r22
    1b40:	70 83       	st	Z, r23
    1b42:	62 91       	ld	r22, -Z
    1b44:	ae 17       	cp	r26, r30
    1b46:	bf 07       	cpc	r27, r31
    1b48:	c8 f3       	brcs	.-14     	; 0x1b3c <strrev+0x10>
    1b4a:	08 95       	ret

00001b4c <__udivmodsi4>:
    1b4c:	a1 e2       	ldi	r26, 0x21	; 33
    1b4e:	1a 2e       	mov	r1, r26
    1b50:	aa 1b       	sub	r26, r26
    1b52:	bb 1b       	sub	r27, r27
    1b54:	fd 01       	movw	r30, r26
    1b56:	0d c0       	rjmp	.+26     	; 0x1b72 <__udivmodsi4_ep>

00001b58 <__udivmodsi4_loop>:
    1b58:	aa 1f       	adc	r26, r26
    1b5a:	bb 1f       	adc	r27, r27
    1b5c:	ee 1f       	adc	r30, r30
    1b5e:	ff 1f       	adc	r31, r31
    1b60:	a2 17       	cp	r26, r18
    1b62:	b3 07       	cpc	r27, r19
    1b64:	e4 07       	cpc	r30, r20
    1b66:	f5 07       	cpc	r31, r21
    1b68:	20 f0       	brcs	.+8      	; 0x1b72 <__udivmodsi4_ep>
    1b6a:	a2 1b       	sub	r26, r18
    1b6c:	b3 0b       	sbc	r27, r19
    1b6e:	e4 0b       	sbc	r30, r20
    1b70:	f5 0b       	sbc	r31, r21

00001b72 <__udivmodsi4_ep>:
    1b72:	66 1f       	adc	r22, r22
    1b74:	77 1f       	adc	r23, r23
    1b76:	88 1f       	adc	r24, r24
    1b78:	99 1f       	adc	r25, r25
    1b7a:	1a 94       	dec	r1
    1b7c:	69 f7       	brne	.-38     	; 0x1b58 <__udivmodsi4_loop>
    1b7e:	60 95       	com	r22
    1b80:	70 95       	com	r23
    1b82:	80 95       	com	r24
    1b84:	90 95       	com	r25
    1b86:	9b 01       	movw	r18, r22
    1b88:	ac 01       	movw	r20, r24
    1b8a:	bd 01       	movw	r22, r26
    1b8c:	cf 01       	movw	r24, r30
    1b8e:	08 95       	ret

00001b90 <_exit>:
    1b90:	f8 94       	cli

00001b92 <__stop_program>:
    1b92:	ff cf       	rjmp	.-2      	; 0x1b92 <__stop_program>
