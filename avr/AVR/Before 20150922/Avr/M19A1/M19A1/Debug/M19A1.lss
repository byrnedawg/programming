
M19A1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000564  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000016  00800060  00800060  000005d8  2**0
                  ALLOC
  2 .debug_aranges 00000098  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000223  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002f9  00000000  00000000  00000893  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000b8  00000000  00000000  00000b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000604  00000000  00000000  00000c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000110  00000000  00000000  00001248  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000249  00000000  00000000  00001358  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000013  00000000  00000000  000015a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000090  00000000  00000000  000015b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	TCNT1 = 0x00; // Start Timer
	timer1Overflows = 0; // Start timer overflows at 0
}

void Analog_Comparator_init(void) // Initialize Analog Comparator
{
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	cd c1       	rjmp	.+922    	; 0x3a0 <__vector_2>
   6:	b8 c1       	rjmp	.+880    	; 0x378 <__vector_3>
   8:	66 c1       	rjmp	.+716    	; 0x2d6 <__vector_4>
   a:	6d c0       	rjmp	.+218    	; 0xe6 <__vector_5>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	18 c0       	rjmp	.+48     	; 0x40 <__vector_7>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__vector_8>
  12:	bc c1       	rjmp	.+888    	; 0x38c <__vector_9>
  14:	4c c1       	rjmp	.+664    	; 0x2ae <__vector_10>
  16:	55 c1       	rjmp	.+682    	; 0x2c2 <__vector_11>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a6 37       	cpi	r26, 0x76	; 118
  36:	b1 07       	cpc	r27, r17
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	60 d2       	rcall	.+1216   	; 0x4fc <main>
  3c:	91 c2       	rjmp	.+1314   	; 0x560 <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <__vector_7>:
volatile uint16_t Auto_Off_Sample_Rate;
volatile bool Light_on; // true if LDR_Value > Light_On_Threshold
volatile bool BTN_Down; // true if the push button is being help down

ISR(ANA_COMP_vect)
{
  40:	1f 92       	push	r1
  42:	0f 92       	push	r0
  44:	0f b6       	in	r0, 0x3f	; 63
  46:	0f 92       	push	r0
  48:	11 24       	eor	r1, r1

}
  4a:	0f 90       	pop	r0
  4c:	0f be       	out	0x3f, r0	; 63
  4e:	0f 90       	pop	r0
  50:	1f 90       	pop	r1
  52:	18 95       	reti

00000054 <__vector_8>:

ISR(ADC_vect) // Interrupt for ADC Converter
{
  54:	1f 92       	push	r1
  56:	0f 92       	push	r0
  58:	0f b6       	in	r0, 0x3f	; 63
  5a:	0f 92       	push	r0
  5c:	11 24       	eor	r1, r1
  5e:	2f 93       	push	r18
  60:	3f 93       	push	r19
  62:	5f 93       	push	r21
  64:	6f 93       	push	r22
  66:	7f 93       	push	r23
  68:	8f 93       	push	r24
  6a:	9f 93       	push	r25
  6c:	af 93       	push	r26
  6e:	bf 93       	push	r27
	uint8_t temp; // raw a2d variable
	temp = ADCH ; // ADCH is the high portion of the a2d
  70:	65 b1       	in	r22, 0x05	; 5
	LDR_Value = (56 * 255 / temp); // 56/ 1.1v = 255/5v (5v/wanted voltage level = 255/ 8 bit quantized voltage
  72:	88 ec       	ldi	r24, 0xC8	; 200
  74:	97 e3       	ldi	r25, 0x37	; 55
  76:	70 e0       	ldi	r23, 0x00	; 0
  78:	60 d2       	rcall	.+1216   	; 0x53a <__divmodhi4>
  7a:	86 2f       	mov	r24, r22
  7c:	97 2f       	mov	r25, r23
  7e:	90 93 61 00 	sts	0x0061, r25
  82:	80 93 60 00 	sts	0x0060, r24

	//if(LDR_Value > Light_On_Threshold) //132/2.6V Low Battery Voltage divider R1 324Ohms R2 200
	if(LDR_Value > Light_On_Threshold) //250
  86:	80 91 67 00 	lds	r24, 0x0067
  8a:	20 91 60 00 	lds	r18, 0x0060
  8e:	30 91 61 00 	lds	r19, 0x0061
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	82 17       	cp	r24, r18
  96:	93 07       	cpc	r25, r19
  98:	20 f4       	brcc	.+8      	; 0xa2 <__vector_8+0x4e>
	{
		Light_on = true; // light should power on cause the LDR is reading it is dark
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	80 93 68 00 	sts	0x0068, r24
  a0:	14 c0       	rjmp	.+40     	; 0xca <__vector_8+0x76>
	}
	else
	{
		Light_on = false; // LDR senses light
  a2:	10 92 68 00 	sts	0x0068, r1
		if(switch_state != 0) // If light is on
  a6:	80 91 6e 00 	lds	r24, 0x006E
  aa:	88 23       	and	r24, r24
  ac:	61 f0       	breq	.+24     	; 0xc6 <__vector_8+0x72>
		{
			if(switch_state == 9) // If light is on but in the off mode
  ae:	80 91 6e 00 	lds	r24, 0x006E
  b2:	89 30       	cpi	r24, 0x09	; 9
  b4:	21 f4       	brne	.+8      	; 0xbe <__vector_8+0x6a>
			{
				last_switch_state = 1; // store switch state as red so when it is dark again the unit powers on with a light and not in the off mode
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	80 93 75 00 	sts	0x0075, r24
  bc:	04 c0       	rjmp	.+8      	; 0xc6 <__vector_8+0x72>
			}
			else
			{
				last_switch_state = switch_state; // store the previous light state so when it is dark again the correct mode powers up
  be:	80 91 6e 00 	lds	r24, 0x006E
  c2:	80 93 75 00 	sts	0x0075, r24
			}
		}
		switch_state = 0; // set to power off state because of light detected
  c6:	10 92 6e 00 	sts	0x006E, r1
	}

}
  ca:	bf 91       	pop	r27
  cc:	af 91       	pop	r26
  ce:	9f 91       	pop	r25
  d0:	8f 91       	pop	r24
  d2:	7f 91       	pop	r23
  d4:	6f 91       	pop	r22
  d6:	5f 91       	pop	r21
  d8:	3f 91       	pop	r19
  da:	2f 91       	pop	r18
  dc:	0f 90       	pop	r0
  de:	0f be       	out	0x3f, r0	; 63
  e0:	0f 90       	pop	r0
  e2:	1f 90       	pop	r1
  e4:	18 95       	reti

000000e6 <__vector_5>:

ISR(TIMER0_OVF_vect) // timer 0 overflow interrupt
{
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	2f 93       	push	r18
  f2:	3f 93       	push	r19
  f4:	5f 93       	push	r21
  f6:	6f 93       	push	r22
  f8:	7f 93       	push	r23
  fa:	8f 93       	push	r24
  fc:	9f 93       	push	r25
  fe:	af 93       	push	r26
 100:	bf 93       	push	r27
 102:	ef 93       	push	r30
 104:	ff 93       	push	r31
	timer0Overflows++;	// 225 1 min // 1125 5 min // 2250 10min // 15 4seconds // keep track of timer 0 overflows for timer interrupt polling
 106:	80 91 65 00 	lds	r24, 0x0065
 10a:	90 91 66 00 	lds	r25, 0x0066
 10e:	01 96       	adiw	r24, 0x01	; 1
 110:	90 93 66 00 	sts	0x0066, r25
 114:	80 93 65 00 	sts	0x0065, r24
	if((timer0Overflows % 5) == 0) //15 4 seconds
 118:	80 91 65 00 	lds	r24, 0x0065
 11c:	90 91 66 00 	lds	r25, 0x0066
 120:	65 e0       	ldi	r22, 0x05	; 5
 122:	70 e0       	ldi	r23, 0x00	; 0
 124:	f6 d1       	rcall	.+1004   	; 0x512 <__udivmodhi4>
 126:	89 2b       	or	r24, r25
 128:	09 f0       	breq	.+2      	; 0x12c <__vector_5+0x46>
 12a:	74 c0       	rjmp	.+232    	; 0x214 <__vector_5+0x12e>
	{
		if(switch_state == 0 && Light_on == true) // if the light is off and its supposed to be on
 12c:	80 91 6e 00 	lds	r24, 0x006E
 130:	88 23       	and	r24, r24
 132:	59 f4       	brne	.+22     	; 0x14a <__vector_5+0x64>
 134:	80 91 68 00 	lds	r24, 0x0068
 138:	88 23       	and	r24, r24
 13a:	39 f0       	breq	.+14     	; 0x14a <__vector_5+0x64>
		{
			switch_state = last_switch_state; // restore previous powered on switch state
 13c:	80 91 75 00 	lds	r24, 0x0075
 140:	80 93 6e 00 	sts	0x006E, r24
			last_switch_state = 1; // set last switch state to 1
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	80 93 75 00 	sts	0x0075, r24
		}
		if(switch_state == 1)	//Red
 14a:	80 91 6e 00 	lds	r24, 0x006E
 14e:	81 30       	cpi	r24, 0x01	; 1
 150:	49 f4       	brne	.+18     	; 0x164 <__vector_5+0x7e>
		{
			Led_Strip_Brightness = 51; // **** NOTE: Red and green should be switched and for there timer 0 is 100% and 255 is 0%
 152:	83 e3       	ldi	r24, 0x33	; 51
 154:	80 93 64 00 	sts	0x0064, r24
			Aux_PWM = 0;
 158:	10 92 74 00 	sts	0x0074, r1
			Power_Latch = 255;  // **** NOTE: for blue 0 is 0% and 255 is 100%
 15c:	8f ef       	ldi	r24, 0xFF	; 255
 15e:	80 93 73 00 	sts	0x0073, r24
 162:	4d c0       	rjmp	.+154    	; 0x1fe <__vector_5+0x118>
		}
		else if(switch_state == 2)	//Orange
 164:	80 91 6e 00 	lds	r24, 0x006E
 168:	82 30       	cpi	r24, 0x02	; 2
 16a:	49 f4       	brne	.+18     	; 0x17e <__vector_5+0x98>
		{
			Led_Strip_Brightness = 102; //245
 16c:	86 e6       	ldi	r24, 0x66	; 102
 16e:	80 93 64 00 	sts	0x0064, r24
			Aux_PWM = 0; //165
 172:	10 92 74 00 	sts	0x0074, r1
			Power_Latch = 255;
 176:	8f ef       	ldi	r24, 0xFF	; 255
 178:	80 93 73 00 	sts	0x0073, r24
 17c:	40 c0       	rjmp	.+128    	; 0x1fe <__vector_5+0x118>
		}
		else if(switch_state == 3)	//Yellow
 17e:	80 91 6e 00 	lds	r24, 0x006E
 182:	83 30       	cpi	r24, 0x03	; 3
 184:	49 f4       	brne	.+18     	; 0x198 <__vector_5+0xb2>
		{
			Led_Strip_Brightness = 153; //40 is less brighter than 0
 186:	89 e9       	ldi	r24, 0x99	; 153
 188:	80 93 64 00 	sts	0x0064, r24
			Aux_PWM = 0; //40 is less brighter than 0
 18c:	10 92 74 00 	sts	0x0074, r1
			Power_Latch = 255;
 190:	8f ef       	ldi	r24, 0xFF	; 255
 192:	80 93 73 00 	sts	0x0073, r24
 196:	33 c0       	rjmp	.+102    	; 0x1fe <__vector_5+0x118>
		}
		
		else if(switch_state == 4)	//Green
 198:	80 91 6e 00 	lds	r24, 0x006E
 19c:	84 30       	cpi	r24, 0x04	; 4
 19e:	49 f4       	brne	.+18     	; 0x1b2 <__vector_5+0xcc>
		{
			Led_Strip_Brightness = 204;
 1a0:	8c ec       	ldi	r24, 0xCC	; 204
 1a2:	80 93 64 00 	sts	0x0064, r24
			Aux_PWM = 0;
 1a6:	10 92 74 00 	sts	0x0074, r1
			Power_Latch = 255;
 1aa:	8f ef       	ldi	r24, 0xFF	; 255
 1ac:	80 93 73 00 	sts	0x0073, r24
 1b0:	26 c0       	rjmp	.+76     	; 0x1fe <__vector_5+0x118>
		}
		else if(switch_state == 5)	//Blue
 1b2:	80 91 6e 00 	lds	r24, 0x006E
 1b6:	85 30       	cpi	r24, 0x05	; 5
 1b8:	41 f4       	brne	.+16     	; 0x1ca <__vector_5+0xe4>
		{
			Led_Strip_Brightness = 255;
 1ba:	8f ef       	ldi	r24, 0xFF	; 255
 1bc:	80 93 64 00 	sts	0x0064, r24
			Aux_PWM = 0;
 1c0:	10 92 74 00 	sts	0x0074, r1
			Power_Latch = 255;
 1c4:	80 93 73 00 	sts	0x0073, r24
 1c8:	1a c0       	rjmp	.+52     	; 0x1fe <__vector_5+0x118>
		}
		else if(switch_state == 6)	//Blue
 1ca:	80 91 6e 00 	lds	r24, 0x006E
 1ce:	86 30       	cpi	r24, 0x06	; 6
 1d0:	39 f4       	brne	.+14     	; 0x1e0 <__vector_5+0xfa>
		{
			Led_Strip_Brightness = 0;
 1d2:	10 92 64 00 	sts	0x0064, r1
			Aux_PWM = 0;
 1d6:	10 92 74 00 	sts	0x0074, r1
			Power_Latch = 0;
 1da:	10 92 73 00 	sts	0x0073, r1
 1de:	0f c0       	rjmp	.+30     	; 0x1fe <__vector_5+0x118>
		}
		else if(switch_state == 0)	//Light detected OFF
 1e0:	80 91 6e 00 	lds	r24, 0x006E
 1e4:	88 23       	and	r24, r24
 1e6:	49 f4       	brne	.+18     	; 0x1fa <__vector_5+0x114>
		{
			Led_Strip_Brightness = 0;
 1e8:	10 92 64 00 	sts	0x0064, r1
			Aux_PWM = 0;
 1ec:	10 92 74 00 	sts	0x0074, r1
			Power_Latch = 0;
 1f0:	10 92 73 00 	sts	0x0073, r1
			switch_state = 0;
 1f4:	10 92 6e 00 	sts	0x006E, r1
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <__vector_5+0x118>
		}
		else
		{
			
			switch_state = 0; // set switch state to 0 if the state is above 9
 1fa:	10 92 6e 00 	sts	0x006E, r1
			
		}
		
		OCR0B = (255 - Led_Strip_Brightness);  // PWM Duty cycle value
 1fe:	80 91 64 00 	lds	r24, 0x0064
 202:	80 95       	com	r24
 204:	88 bd       	out	0x28, r24	; 40
		OCR0A = (255 - Aux_PWM); // PWM Duty cycle value switched green and red
 206:	80 91 74 00 	lds	r24, 0x0074
 20a:	80 95       	com	r24
 20c:	89 bd       	out	0x29, r24	; 41
		OCR1B = Power_Latch; // PWM Duty cycle value
 20e:	80 91 73 00 	lds	r24, 0x0073
 212:	8b bd       	out	0x2b, r24	; 43
	}

	if((timer0Overflows % Sensor_Sample_Rate) == 0) //  Sensor_Sample_Rate = %500
 214:	80 91 65 00 	lds	r24, 0x0065
 218:	90 91 66 00 	lds	r25, 0x0066
 21c:	60 91 69 00 	lds	r22, 0x0069
 220:	70 91 6a 00 	lds	r23, 0x006A
 224:	76 d1       	rcall	.+748    	; 0x512 <__udivmodhi4>
 226:	89 2b       	or	r24, r25
 228:	59 f4       	brne	.+22     	; 0x240 <__vector_5+0x15a>
	{
		ADCSRA|=(1<<ADSC); // setting ADSC to 1 starts A2D Conversion
 22a:	e6 e2       	ldi	r30, 0x26	; 38
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	80 64       	ori	r24, 0x40	; 64
 232:	80 83       	st	Z, r24
		if(Light_on == false) // return from A2D interrupt check if the light should be on
 234:	80 91 68 00 	lds	r24, 0x0068
 238:	88 23       	and	r24, r24
 23a:	11 f4       	brne	.+4      	; 0x240 <__vector_5+0x15a>
		{
			switch_state = 0; // if light should be off set to state 0 or the off state
 23c:	10 92 6e 00 	sts	0x006E, r1
		}
		
	}
	
	if((timer0Overflows % Auto_Off_Sample_Rate) == 0) //  Sensor_Sample_Rate = %500
 240:	80 91 65 00 	lds	r24, 0x0065
 244:	90 91 66 00 	lds	r25, 0x0066
 248:	60 91 71 00 	lds	r22, 0x0071
 24c:	70 91 72 00 	lds	r23, 0x0072
 250:	60 d1       	rcall	.+704    	; 0x512 <__udivmodhi4>
 252:	89 2b       	or	r24, r25
 254:	e1 f4       	brne	.+56     	; 0x28e <__stack+0x2f>
	{	
		if(Auto_Off_Timer >= Auto_Off_Seconds) // Value in Seconds
 256:	20 91 62 00 	lds	r18, 0x0062
 25a:	30 91 63 00 	lds	r19, 0x0063
 25e:	80 91 6b 00 	lds	r24, 0x006B
 262:	90 91 6c 00 	lds	r25, 0x006C
 266:	28 17       	cp	r18, r24
 268:	39 07       	cpc	r19, r25
 26a:	40 f0       	brcs	.+16     	; 0x27c <__stack+0x1d>
		{
			switch_state = 6; // if light should be off set to state 0 or the off state
 26c:	86 e0       	ldi	r24, 0x06	; 6
 26e:	80 93 6e 00 	sts	0x006E, r24
			Auto_Off_Timer = 0;
 272:	10 92 63 00 	sts	0x0063, r1
 276:	10 92 62 00 	sts	0x0062, r1
 27a:	09 c0       	rjmp	.+18     	; 0x28e <__stack+0x2f>
		}
		else
		{
			Auto_Off_Timer++;
 27c:	80 91 62 00 	lds	r24, 0x0062
 280:	90 91 63 00 	lds	r25, 0x0063
 284:	01 96       	adiw	r24, 0x01	; 1
 286:	90 93 63 00 	sts	0x0063, r25
 28a:	80 93 62 00 	sts	0x0062, r24
		}
		
	}

	
}
 28e:	ff 91       	pop	r31
 290:	ef 91       	pop	r30
 292:	bf 91       	pop	r27
 294:	af 91       	pop	r26
 296:	9f 91       	pop	r25
 298:	8f 91       	pop	r24
 29a:	7f 91       	pop	r23
 29c:	6f 91       	pop	r22
 29e:	5f 91       	pop	r21
 2a0:	3f 91       	pop	r19
 2a2:	2f 91       	pop	r18
 2a4:	0f 90       	pop	r0
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	0f 90       	pop	r0
 2aa:	1f 90       	pop	r1
 2ac:	18 95       	reti

000002ae <__vector_10>:
ISR(TIMER0_COMPA_vect) // timer 0 compare A interrupt
{
 2ae:	1f 92       	push	r1
 2b0:	0f 92       	push	r0
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	0f 92       	push	r0
 2b6:	11 24       	eor	r1, r1
	
}
 2b8:	0f 90       	pop	r0
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	0f 90       	pop	r0
 2be:	1f 90       	pop	r1
 2c0:	18 95       	reti

000002c2 <__vector_11>:

ISR(TIMER0_COMPB_vect) // timer 0 compare B interrupt
{
 2c2:	1f 92       	push	r1
 2c4:	0f 92       	push	r0
 2c6:	0f b6       	in	r0, 0x3f	; 63
 2c8:	0f 92       	push	r0
 2ca:	11 24       	eor	r1, r1

}
 2cc:	0f 90       	pop	r0
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	0f 90       	pop	r0
 2d2:	1f 90       	pop	r1
 2d4:	18 95       	reti

000002d6 <__vector_4>:

ISR(TIMER1_OVF_vect) // timer 1 overflow interrupt
{
 2d6:	1f 92       	push	r1
 2d8:	0f 92       	push	r0
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	0f 92       	push	r0
 2de:	11 24       	eor	r1, r1
 2e0:	5f 93       	push	r21
 2e2:	6f 93       	push	r22
 2e4:	7f 93       	push	r23
 2e6:	8f 93       	push	r24
 2e8:	9f 93       	push	r25
 2ea:	af 93       	push	r26
 2ec:	bf 93       	push	r27
	timer1Overflows++; //keep track of timer 1 overflows for timer interrupt polling
 2ee:	80 91 6f 00 	lds	r24, 0x006F
 2f2:	90 91 70 00 	lds	r25, 0x0070
 2f6:	01 96       	adiw	r24, 0x01	; 1
 2f8:	90 93 70 00 	sts	0x0070, r25
 2fc:	80 93 6f 00 	sts	0x006F, r24
	
	if((timer1Overflows % 20) == 0) // push button polling 195 1 sec /975 5 sec/ 11700 1 min/
 300:	80 91 6f 00 	lds	r24, 0x006F
 304:	90 91 70 00 	lds	r25, 0x0070
 308:	64 e1       	ldi	r22, 0x14	; 20
 30a:	70 e0       	ldi	r23, 0x00	; 0
 30c:	02 d1       	rcall	.+516    	; 0x512 <__udivmodhi4>
 30e:	89 2b       	or	r24, r25
 310:	49 f4       	brne	.+18     	; 0x324 <__vector_4+0x4e>
	{
		if(bit_is_clear(PINB, 2)) // if the push button is held down connecting pin B2 to ground
 312:	b2 99       	sbic	0x16, 2	; 22
 314:	07 c0       	rjmp	.+14     	; 0x324 <__vector_4+0x4e>
		{
			BTN_Down = true; // button down is true
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	80 93 6d 00 	sts	0x006D, r24
			Auto_Off_Timer = 0;
 31c:	10 92 63 00 	sts	0x0063, r1
 320:	10 92 62 00 	sts	0x0062, r1
		}
	}
	if((timer1Overflows % 25) == 0) // push button polling on the release
 324:	80 91 6f 00 	lds	r24, 0x006F
 328:	90 91 70 00 	lds	r25, 0x0070
 32c:	69 e1       	ldi	r22, 0x19	; 25
 32e:	70 e0       	ldi	r23, 0x00	; 0
 330:	f0 d0       	rcall	.+480    	; 0x512 <__udivmodhi4>
 332:	89 2b       	or	r24, r25
 334:	a9 f4       	brne	.+42     	; 0x360 <__vector_4+0x8a>
	{

		if(bit_is_set(PINB, 2) && BTN_Down) // push button release to set pin B2 to high again after being held low
 336:	b2 9b       	sbis	0x16, 2	; 22
 338:	13 c0       	rjmp	.+38     	; 0x360 <__vector_4+0x8a>
 33a:	80 91 6d 00 	lds	r24, 0x006D
 33e:	88 23       	and	r24, r24
 340:	79 f0       	breq	.+30     	; 0x360 <__vector_4+0x8a>
		{
			//sbi(PORTB,PB3);
			switch_state++; // increment mode states by 1 i.e. red -> yellow, green - > blue
 342:	80 91 6e 00 	lds	r24, 0x006E
 346:	8f 5f       	subi	r24, 0xFF	; 255
 348:	80 93 6e 00 	sts	0x006E, r24
			last_switch_state = switch_state; // update the last switch state to hold the value of switch state in case of a light power down
 34c:	80 91 6e 00 	lds	r24, 0x006E
 350:	80 93 75 00 	sts	0x0075, r24
			BTN_Down = false; // push button is released so the button is no longer held down
 354:	10 92 6d 00 	sts	0x006D, r1
			Auto_Off_Timer = 0;
 358:	10 92 63 00 	sts	0x0063, r1
 35c:	10 92 62 00 	sts	0x0062, r1
		}
	}
	
}
 360:	bf 91       	pop	r27
 362:	af 91       	pop	r26
 364:	9f 91       	pop	r25
 366:	8f 91       	pop	r24
 368:	7f 91       	pop	r23
 36a:	6f 91       	pop	r22
 36c:	5f 91       	pop	r21
 36e:	0f 90       	pop	r0
 370:	0f be       	out	0x3f, r0	; 63
 372:	0f 90       	pop	r0
 374:	1f 90       	pop	r1
 376:	18 95       	reti

00000378 <__vector_3>:



ISR(TIMER1_COMPA_vect) // timer 1 compare A interrupt
{
 378:	1f 92       	push	r1
 37a:	0f 92       	push	r0
 37c:	0f b6       	in	r0, 0x3f	; 63
 37e:	0f 92       	push	r0
 380:	11 24       	eor	r1, r1

}
 382:	0f 90       	pop	r0
 384:	0f be       	out	0x3f, r0	; 63
 386:	0f 90       	pop	r0
 388:	1f 90       	pop	r1
 38a:	18 95       	reti

0000038c <__vector_9>:

ISR(TIMER1_COMPB_vect) // timer 1 compare B interrupt
{
 38c:	1f 92       	push	r1
 38e:	0f 92       	push	r0
 390:	0f b6       	in	r0, 0x3f	; 63
 392:	0f 92       	push	r0
 394:	11 24       	eor	r1, r1

}
 396:	0f 90       	pop	r0
 398:	0f be       	out	0x3f, r0	; 63
 39a:	0f 90       	pop	r0
 39c:	1f 90       	pop	r1
 39e:	18 95       	reti

000003a0 <__vector_2>:

ISR(PCINT0_vect) // Pin Change interrupt service routine
{
 3a0:	1f 92       	push	r1
 3a2:	0f 92       	push	r0
 3a4:	0f b6       	in	r0, 0x3f	; 63
 3a6:	0f 92       	push	r0
 3a8:	11 24       	eor	r1, r1
 3aa:	8f 93       	push	r24
 3ac:	ef 93       	push	r30
 3ae:	ff 93       	push	r31
	sleep_disable(); // If pins change state wake up
 3b0:	e5 e5       	ldi	r30, 0x55	; 85
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	80 81       	ld	r24, Z
 3b6:	8f 7d       	andi	r24, 0xDF	; 223
 3b8:	80 83       	st	Z, r24
	TCNT0 = 0x00; // reset timer 0
 3ba:	12 be       	out	0x32, r1	; 50
	TCNT1 = 0x00; // reset timer 1
 3bc:	1f bc       	out	0x2f, r1	; 47
	timer0Overflows = 0; // reset timer o overflows
 3be:	10 92 66 00 	sts	0x0066, r1
 3c2:	10 92 65 00 	sts	0x0065, r1
	//timer1Overflows = 0; // dont reset timer 1 overflows keep running forever
}
 3c6:	ff 91       	pop	r31
 3c8:	ef 91       	pop	r30
 3ca:	8f 91       	pop	r24
 3cc:	0f 90       	pop	r0
 3ce:	0f be       	out	0x3f, r0	; 63
 3d0:	0f 90       	pop	r0
 3d2:	1f 90       	pop	r1
 3d4:	18 95       	reti

000003d6 <PortInit>:
	//	(PCINT3/XTAL1/CLKI/~OC1B/ADC3)	LDR		--PB3 |		 |PB2--	Switch	(SCK/USCK/SCL/ADC1/T0/INT0/PCINT2)
	//	(PCINT4/XTAL2/CLKO/OC1B/ADC2)	BLU LED	--PB4 |		 |PB1--	RED LED	(MISO/DO/AIN1/OC0B/OC1A/PCINT1)
	//											--GND |______|PB0--	GRN LED	(MOSI/DI/SDA/AIN0/OC0A/~OC1A/AREF/PCINT0)
	//

	PORTB = (1<<PB4)|(1<<PB3)|(1<<PB2)|(1<<PB1)|(1<<PB0); // set all pins we are using high
 3d6:	e8 e3       	ldi	r30, 0x38	; 56
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	8f e1       	ldi	r24, 0x1F	; 31
 3dc:	80 83       	st	Z, r24
	DDRB = (1<<DDB4)|(0<<DDB3)|(0<<DDB2)|(1<<DDB1)|(1<<DDB0); // set PB4, PB1 and PB0 as outputs and PB3 and PB2 as inputs
 3de:	83 e1       	ldi	r24, 0x13	; 19
 3e0:	87 bb       	out	0x17, r24	; 23
	PORTB = (0<<PB4)|(0<<PB1)|(0<<PB0); // set all outputs to 0
 3e2:	10 82       	st	Z, r1
}
 3e4:	08 95       	ret

000003e6 <SystemInit>:

void SystemInit(void) // Power on variable initialization
{
	Light_on = true; // initialize the light to be powered on
 3e6:	21 e0       	ldi	r18, 0x01	; 1
 3e8:	20 93 68 00 	sts	0x0068, r18
	Auto_Off_Sample_Rate = 500; // 500 with 60 seconds almost exactly 1 min
 3ec:	84 ef       	ldi	r24, 0xF4	; 244
 3ee:	91 e0       	ldi	r25, 0x01	; 1
 3f0:	90 93 72 00 	sts	0x0072, r25
 3f4:	80 93 71 00 	sts	0x0071, r24
	Auto_Off_Seconds = 90;  // 60 with 500 sample rate almost exactly 1 min
 3f8:	8a e5       	ldi	r24, 0x5A	; 90
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	90 93 6c 00 	sts	0x006C, r25
 400:	80 93 6b 00 	sts	0x006B, r24
	Sensor_Sample_Rate = 1000; // set Auto Off and ADC read speed to 350 is about 1 second
 404:	88 ee       	ldi	r24, 0xE8	; 232
 406:	93 e0       	ldi	r25, 0x03	; 3
 408:	90 93 6a 00 	sts	0x006A, r25
 40c:	80 93 69 00 	sts	0x0069, r24
	Light_On_Threshold = 250; // set LDR > Light_On_Threshold = 250
 410:	8a ef       	ldi	r24, 0xFA	; 250
 412:	80 93 67 00 	sts	0x0067, r24
	OCR1C = PWM_200Hz; // set PWM for timer 1 to 200 hz
 416:	87 e2       	ldi	r24, 0x27	; 39
 418:	8d bd       	out	0x2d, r24	; 45
	switch_state = 1; // set to state 1 which is red
 41a:	20 93 6e 00 	sts	0x006E, r18
	last_switch_state = switch_state; // initialize last switch state to red
 41e:	80 91 6e 00 	lds	r24, 0x006E
 422:	80 93 75 00 	sts	0x0075, r24
	Led_Strip_Brightness = 51; // red values
 426:	83 e3       	ldi	r24, 0x33	; 51
 428:	80 93 64 00 	sts	0x0064, r24
	Aux_PWM = 0; // red values
 42c:	10 92 74 00 	sts	0x0074, r1
	Power_Latch = 255; // red values
 430:	8f ef       	ldi	r24, 0xFF	; 255
 432:	80 93 73 00 	sts	0x0073, r24
	OCR0B = (255 - Led_Strip_Brightness); // red values
 436:	80 91 64 00 	lds	r24, 0x0064
 43a:	80 95       	com	r24
 43c:	88 bd       	out	0x28, r24	; 40
	OCR0A = (255 - Aux_PWM); // red values
 43e:	80 91 74 00 	lds	r24, 0x0074
 442:	80 95       	com	r24
 444:	89 bd       	out	0x29, r24	; 41
	OCR1B = Power_Latch; // red values
 446:	80 91 73 00 	lds	r24, 0x0073
 44a:	8b bd       	out	0x2b, r24	; 43
	
	BTN_Down = false; // button is not pushed down
 44c:	10 92 6d 00 	sts	0x006D, r1
	PCMSK |= (1<<PCINT2); // pin change mask: listen to portb bit 2 PB2
 450:	e5 e3       	ldi	r30, 0x35	; 53
 452:	f0 e0       	ldi	r31, 0x00	; 0
 454:	80 81       	ld	r24, Z
 456:	84 60       	ori	r24, 0x04	; 4
 458:	80 83       	st	Z, r24
	GIMSK |= (1<<PCIE); // enable PCINT interrupt
 45a:	eb e5       	ldi	r30, 0x5B	; 91
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	80 81       	ld	r24, Z
 460:	80 62       	ori	r24, 0x20	; 32
 462:	80 83       	st	Z, r24
	MCUCR |= (1<<BODS)|(0<<PUD)|(1<<SE)|(0<<SM1)|(1<<SM0)|(0<<BODSE)|(1<<ISC01)|(0<<ISC00); // disable BOD during sleep, Sleep Enable, ADC Noise Reduction, The falling edge of INT0 generates an interrupt request
 464:	e5 e5       	ldi	r30, 0x55	; 85
 466:	f0 e0       	ldi	r31, 0x00	; 0
 468:	80 81       	ld	r24, Z
 46a:	8a 6a       	ori	r24, 0xAA	; 170
 46c:	80 83       	st	Z, r24
	sei(); // enable all interrupts
 46e:	78 94       	sei
	timer0Overflows = 0; // time0roverflows set to 0
 470:	10 92 66 00 	sts	0x0066, r1
 474:	10 92 65 00 	sts	0x0065, r1
	timer1Overflows = 0; // time1roverflows set to 0
 478:	10 92 70 00 	sts	0x0070, r1
 47c:	10 92 6f 00 	sts	0x006F, r1
}
 480:	08 95       	ret

00000482 <timer0_init>:
void timer0_init(void) // Initialize timer 0
{
	// NOTE: Assumes DIV8 fuse set for 1 MHz operation
	// 8-bit counter means overflow interrupt every 61 Hz to turn on the LED
	// Variable Compare_A interrupt in between OVF to turn off the LED
	TCCR0A |= (1<<COM0A1)|(1<<COM0A0)|(1<<COM0B1)|(1<<COM0B0)|(1<<WGM01)|(1<<WGM00); // Set OC0A/OC0B on Compare Match, clear OC0A/OC0B at BOTTOM (inverting mode) ,Fast PWM Mode
 482:	ea e4       	ldi	r30, 0x4A	; 74
 484:	f0 e0       	ldi	r31, 0x00	; 0
 486:	80 81       	ld	r24, Z
 488:	83 6f       	ori	r24, 0xF3	; 243
 48a:	80 83       	st	Z, r24
	TCCR0B |= (0<<FOC0A)|(0<<FOC0B)|(0<<WGM02)|(0<<CS02)|(1<<CS01)|(0<<CS00); //0x02;	pre-scale= CK/8
 48c:	e3 e5       	ldi	r30, 0x53	; 83
 48e:	f0 e0       	ldi	r31, 0x00	; 0
 490:	80 81       	ld	r24, Z
 492:	82 60       	ori	r24, 0x02	; 2
 494:	80 83       	st	Z, r24
	OCR0A = 0x00; // Governs Duty Cycle (192 ~75% of 256) for inverting mode OCR0A = (255-duty-cycle)
 496:	19 bc       	out	0x29, r1	; 41
	OCR0B = 0x00; // Governs Duty Cycle (192 ~75% of 256) for inverting mode OCR0B = (255-duty-cycle)
 498:	18 bc       	out	0x28, r1	; 40
	TCNT0 = 0x00; // Start Timer
 49a:	12 be       	out	0x32, r1	; 50
	timer0Overflows = 0; // Start timer overflows at 0
 49c:	10 92 66 00 	sts	0x0066, r1
 4a0:	10 92 65 00 	sts	0x0065, r1
}
 4a4:	08 95       	ret

000004a6 <timer1_init>:

void timer1_init(void) // Initialize timer 1
{
	TCCR1 |= (0<<CTC1)|(0<<PWM1A)|(0<<COM1A1)|(0<<COM1A0)|(1<<CS13)|(0<<CS12)|(0<<CS11)|(0<<CS10); // PWM1A Disabled, Timer/Counter Comparator A disconnected from output pin OC1A, prescale= CK/128 right now was CK/8 1000b ~ 1100b
 4a6:	e0 e5       	ldi	r30, 0x50	; 80
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
 4aa:	80 81       	ld	r24, Z
 4ac:	88 60       	ori	r24, 0x08	; 8
 4ae:	80 83       	st	Z, r24
	GTCCR |= (0<<TSM)|(1<<PWM1B)|(1<<COM1B1)|(0<<COM1B0)|(0<<FOC1B)|(0<<FOC1A)|(0<<PSR1)|(0<<PSR0); //PWM1B Enabled, OC1B cleared on compare match. Set when TCNT1 = $00
 4b0:	ec e4       	ldi	r30, 0x4C	; 76
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	80 81       	ld	r24, Z
 4b6:	80 66       	ori	r24, 0x60	; 96
 4b8:	80 83       	st	Z, r24
	//OCR1A = 0x00; // Disabled Governs Duty Cycle (128 ~50% of 256)
	OCR1B = 0x00; // Governs Duty Cycle (192 ~75% of 256)
 4ba:	1b bc       	out	0x2b, r1	; 43
	OCR1C = PWM_200Hz;	// OCR1C = Governs PWM Frequency :: (1Mhz/prescaler)/(OCR1C+1)= PWM Frequency :: 1M/128/39+1 = 200Hz	0x27 1M/128/252+1 = 33Hz	0xFC
 4bc:	87 e2       	ldi	r24, 0x27	; 39
 4be:	8d bd       	out	0x2d, r24	; 45
	TIMSK |= (0<<OCIE1A)|(1<<OCIE1B)|(0<<OCIE0A)|(0<<OCIE0B)|(1<<TOIE1)|(1<<TOIE0);	// Compare A and OVF Interrupt enabled
 4c0:	e9 e5       	ldi	r30, 0x59	; 89
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
 4c4:	80 81       	ld	r24, Z
 4c6:	86 62       	ori	r24, 0x26	; 38
 4c8:	80 83       	st	Z, r24
	TCNT1 = 0x00; // Start Timer
 4ca:	1f bc       	out	0x2f, r1	; 47
	timer1Overflows = 0; // Start timer overflows at 0
 4cc:	10 92 70 00 	sts	0x0070, r1
 4d0:	10 92 6f 00 	sts	0x006F, r1
}
 4d4:	08 95       	ret

000004d6 <ADC_init>:
	DIDR0 |= (0<<ADC0D)|(0<<ADC2D)|(0<<ADC3D)|(0<<ADC1D)|(0<<AIN1D)|(0<<AIN0D); // Digital input Disable Register
}

void ADC_init(void) // Initialize Analog to Digital Converter
{
	ADMUX |= (0<<REFS1)|(0<<REFS0)|(1<<ADLAR)|(0<<REFS2)|(0<<MUX3)|(0<<MUX2)|(1<<MUX1)|(1<<MUX0); //ADC Multiplexer Selection Register... (ADC3(PB3) Selected ADC Input)
 4d6:	e7 e2       	ldi	r30, 0x27	; 39
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	80 81       	ld	r24, Z
 4dc:	83 62       	ori	r24, 0x23	; 35
 4de:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN)|(1<<ADSC)|(0<<ADATE)|(0<<ADIF)|(1<<ADIE)|(0<<ADPS2)|(0<<ADPS1)|(0<<ADPS0); // ADC Control Register A
 4e0:	e6 e2       	ldi	r30, 0x26	; 38
 4e2:	f0 e0       	ldi	r31, 0x00	; 0
 4e4:	80 81       	ld	r24, Z
 4e6:	88 6c       	ori	r24, 0xC8	; 200
 4e8:	80 83       	st	Z, r24
	ADCSRB |= (0<<BIN)|(0<<ACME)|(0<<IPR)|(0<<ADTS2)|(0<<ADTS1)|(0<<ADTS0); // ADC Control Register B
 4ea:	e3 e2       	ldi	r30, 0x23	; 35
 4ec:	f0 e0       	ldi	r31, 0x00	; 0
 4ee:	80 81       	ld	r24, Z
 4f0:	80 83       	st	Z, r24
	DIDR0 |= (0<<ADC0D)|(0<<ADC2D)|(0<<ADC3D)|(0<<ADC1D)|(0<<AIN1D)|(0<<AIN0D); // Digital input Disable Register
 4f2:	e4 e3       	ldi	r30, 0x34	; 52
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	80 81       	ld	r24, Z
 4f8:	80 83       	st	Z, r24
}
 4fa:	08 95       	ret

000004fc <main>:

int main(void)
{
	timer0_init(); // timer 0 initialize
 4fc:	c2 df       	rcall	.-124    	; 0x482 <timer0_init>
	timer1_init(); // timer 1 initialize
 4fe:	d3 df       	rcall	.-90     	; 0x4a6 <timer1_init>
	ADC_init(); // analog to digital converter initialize
 500:	ea df       	rcall	.-44     	; 0x4d6 <ADC_init>
	PortInit(); // inputs and outputs initialize
 502:	69 df       	rcall	.-302    	; 0x3d6 <PortInit>
	SystemInit(); // system variables and state initialize
 504:	70 df       	rcall	.-288    	; 0x3e6 <SystemInit>

	while(1)
	{
		sleep_enable(); // sleep until pin interrupt
 506:	e5 e5       	ldi	r30, 0x55	; 85
 508:	f0 e0       	ldi	r31, 0x00	; 0
 50a:	80 81       	ld	r24, Z
 50c:	80 62       	ori	r24, 0x20	; 32
 50e:	80 83       	st	Z, r24
 510:	fc cf       	rjmp	.-8      	; 0x50a <main+0xe>

00000512 <__udivmodhi4>:
 512:	aa 1b       	sub	r26, r26
 514:	bb 1b       	sub	r27, r27
 516:	51 e1       	ldi	r21, 0x11	; 17
 518:	07 c0       	rjmp	.+14     	; 0x528 <__udivmodhi4_ep>

0000051a <__udivmodhi4_loop>:
 51a:	aa 1f       	adc	r26, r26
 51c:	bb 1f       	adc	r27, r27
 51e:	a6 17       	cp	r26, r22
 520:	b7 07       	cpc	r27, r23
 522:	10 f0       	brcs	.+4      	; 0x528 <__udivmodhi4_ep>
 524:	a6 1b       	sub	r26, r22
 526:	b7 0b       	sbc	r27, r23

00000528 <__udivmodhi4_ep>:
 528:	88 1f       	adc	r24, r24
 52a:	99 1f       	adc	r25, r25
 52c:	5a 95       	dec	r21
 52e:	a9 f7       	brne	.-22     	; 0x51a <__udivmodhi4_loop>
 530:	80 95       	com	r24
 532:	90 95       	com	r25
 534:	bc 01       	movw	r22, r24
 536:	cd 01       	movw	r24, r26
 538:	08 95       	ret

0000053a <__divmodhi4>:
 53a:	97 fb       	bst	r25, 7
 53c:	09 2e       	mov	r0, r25
 53e:	07 26       	eor	r0, r23
 540:	0a d0       	rcall	.+20     	; 0x556 <__divmodhi4_neg1>
 542:	77 fd       	sbrc	r23, 7
 544:	04 d0       	rcall	.+8      	; 0x54e <__divmodhi4_neg2>
 546:	e5 df       	rcall	.-54     	; 0x512 <__udivmodhi4>
 548:	06 d0       	rcall	.+12     	; 0x556 <__divmodhi4_neg1>
 54a:	00 20       	and	r0, r0
 54c:	1a f4       	brpl	.+6      	; 0x554 <__divmodhi4_exit>

0000054e <__divmodhi4_neg2>:
 54e:	70 95       	com	r23
 550:	61 95       	neg	r22
 552:	7f 4f       	sbci	r23, 0xFF	; 255

00000554 <__divmodhi4_exit>:
 554:	08 95       	ret

00000556 <__divmodhi4_neg1>:
 556:	f6 f7       	brtc	.-4      	; 0x554 <__divmodhi4_exit>
 558:	90 95       	com	r25
 55a:	81 95       	neg	r24
 55c:	9f 4f       	sbci	r25, 0xFF	; 255
 55e:	08 95       	ret

00000560 <_exit>:
 560:	f8 94       	cli

00000562 <__stop_program>:
 562:	ff cf       	rjmp	.-2      	; 0x562 <__stop_program>
