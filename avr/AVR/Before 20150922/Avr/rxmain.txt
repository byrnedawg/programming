#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

#ifndef F_CPU
//define cpu clock speed if not defined
#define F_CPU 16000000
#endif
//set desired baud rate
#define BAUDRATE 1200
//calculate UBRR value
#define UBRRVAL ((F_CPU/(BAUDRATE*16UL))-1)
//define receive parameters
#define sbi(x,y) x |= _BV(y) //set bit
#define cbi(x,y) x &= ~(_BV(y)) //clear bit
#define tbi(x,y) x ^= _BV(y) //toggle bit
#define is_high(x,y) (x & _BV(y)) == _BV(y) //(for input) checks if the 							  // input is high (Logic 1)
							  // if(is_high(PIND,PD0))
#define SYNC 0XAA// synchro signal
#define RADDR 0x44
#define LEDON 0x11//LED on command
#define LEDOFF 0x22//LED off command

void USART_Init(void)
{
	//Set baud rate
	UBRR1L=(uint8_t)UBRRVAL;		//low byte
	UBRR1H=(UBRRVAL>>8);	//high byte
	//Set data frame format: asynchronous mode,no parity, 1 stop bit, 8 bit size
	UCSR1C=(1<<7)|(0<<UMSEL)|(0<<UPM1)|(0<<UPM0)|
		(0<<USBS)|(0<<UCSZ2)|(1<<UCSZ1)|(1<<UCSZ0);	
	//Enable Transmitter and Receiver and Interrupt on receive complete
	UCSR1B=(1<<RXEN)|(1<<RXCIE);//|(1<<TXEN);
	//enable global interrupts

}
uint8_t USART_vReceiveByte(void)
{
    // Wait until a byte has been received
    while((UCSR1A&(1<<RXC)) == 0);
    // Return received data
    return UDR1;
}
ISR(USART_RXC_vect)
{
	//define variables
	uint8_t raddress, data, chk;//transmitter address
	//receive destination address
	raddress=USART_vReceiveByte();
	//receive data
	data=USART_vReceiveByte();
	//receive checksum
	chk=USART_vReceiveByte();
	//compare received checksum with calculated
	if(chk==(raddress+data))//if match perform operations
	{
		//if transmitter address match
		if(raddress==RADDR)
			{
				if(data==LEDON)
					{
						sbi(PORTC,PC0); //LED ON
					}
				else if(data==LEDOFF)
					{
						cbi(PORTC,PC0); //LED OFF
					}
				else
				{
					//blink led as error
					cbi(PORTC,PC0); //LED OFF
					_delay_ms(255);
					_delay_ms(255);
					sbi(PORTC,PC0); //LED ON
				}
			}
	}
}
void Main_Init(void)
{
	DDRC=0xff;//define port C pin 0 as output;
      PORTC=0x00;
      //sbi(PORTC,PC0); //LED ON             
      cbi(PORTC,PC0); //LED OFF
	//enable global interrupts
	sei();
}
int main(void)
{

	Main_Init();
	USART_Init();
	while(1)
	{

	}
	//nothing here interrupts are working
	return 0;
}


