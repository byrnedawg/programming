
ButtonClick.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  000003e0  00000474  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004d  00800202  00800202  00000476  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000476  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001bb  00000000  00000000  000004b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000057b  00000000  00000000  00000671  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002e0  00000000  00000000  00000bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000488  00000000  00000000  00000ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000110  00000000  00000000  00001354  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000213  00000000  00000000  00001464  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d5  00000000  00000000  00001677  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  0000174c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__vector_11>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 a9 00 	jmp	0x152	; 0x152 <__vector_21>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__vector_23>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__vector_25>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 ee       	ldi	r30, 0xE0	; 224
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 30       	cpi	r26, 0x02	; 2
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	a2 e0       	ldi	r26, 0x02	; 2
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	af 34       	cpi	r26, 0x4F	; 79
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <main>
 122:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <__vector_23>:

volatile unsigned long i;


ISR(TIMER0_OVF_vect)
{
 12a:	1f 92       	push	r1
 12c:	0f 92       	push	r0
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	0f 92       	push	r0
 132:	11 24       	eor	r1, r1
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25
      PORTC RESET LED_mask;  				// Turn on
 138:	98 b1       	in	r25, 0x08	; 8
 13a:	80 91 00 02 	lds	r24, 0x0200
 13e:	80 95       	com	r24
 140:	89 23       	and	r24, r25
 142:	88 b9       	out	0x08, r24	; 8

}
 144:	9f 91       	pop	r25
 146:	8f 91       	pop	r24
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <__vector_21>:

ISR(TIMER0_COMPA_vect)
{
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	8f 93       	push	r24
 15e:	9f 93       	push	r25
      PORTC SET LED_mask;   				// Turn off
 160:	98 b1       	in	r25, 0x08	; 8
 162:	80 91 00 02 	lds	r24, 0x0200
 166:	89 2b       	or	r24, r25
 168:	88 b9       	out	0x08, r24	; 8
}
 16a:	9f 91       	pop	r25
 16c:	8f 91       	pop	r24
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <__vector_11>:

ISR(PCINT2_vect)
{
 178:	1f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
 182:	8f 93       	push	r24
	switch_temp = PINK;
 184:	80 91 06 01 	lds	r24, 0x0106
 188:	80 93 05 02 	sts	0x0205, r24
	if (switch_temp != 0x00){					// Skip if button release
 18c:	80 91 05 02 	lds	r24, 0x0205
 190:	88 23       	and	r24, r24
 192:	61 f0       	breq	.+24     	; 0x1ac <__vector_11+0x34>
		PORTC = switch_temp;
 194:	80 91 05 02 	lds	r24, 0x0205
 198:	88 b9       	out	0x08, r24	; 8
		//data=PINK;
		if(is_high(PINK,PK0))
 19a:	80 91 06 01 	lds	r24, 0x0106
 19e:	80 ff       	sbrs	r24, 0
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <__vector_11+0x2e>
		{
			data=0x05 ;
 1a2:	85 e0       	ldi	r24, 0x05	; 5
 1a4:	01 c0       	rjmp	.+2      	; 0x1a8 <__vector_11+0x30>
		}
		else
		{
			data=0xFE;
 1a6:	8e ef       	ldi	r24, 0xFE	; 254
 1a8:	80 93 0d 02 	sts	0x020D, r24
		}
		
	}
	
}
 1ac:	8f 91       	pop	r24
 1ae:	0f 90       	pop	r0
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	0f 90       	pop	r0
 1b4:	1f 90       	pop	r1
 1b6:	18 95       	reti

000001b8 <delayms>:

void delayms(uint8_t t)//delay in ms
{
 1b8:	90 e0       	ldi	r25, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1ba:	2a ef       	ldi	r18, 0xFA	; 250
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	04 c0       	rjmp	.+8      	; 0x1c8 <delayms+0x10>
 1c0:	f9 01       	movw	r30, r18
 1c2:	31 97       	sbiw	r30, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <delayms+0xa>
uint8_t i;
for(i=0;i<t;i++)
 1c6:	9f 5f       	subi	r25, 0xFF	; 255
 1c8:	98 17       	cp	r25, r24
 1ca:	d0 f3       	brcs	.-12     	; 0x1c0 <delayms+0x8>
	_delay_ms(1);
}
 1cc:	08 95       	ret

000001ce <timer0_init>:
//	OCR0A = slider_value;
//  	TCCR0A = 0x03; 							// Fast PWM Mode
//	TCCR0B = 0x03;							// Set prescaler to 64
//	TIMSK0 |= (1<<OCIE0A) | (1<<TOIE0);		// Compare A and OVF Interupt enabled 
//	TCNT0  = 0x00;
}
 1ce:	08 95       	ret

000001d0 <LED_init>:

void LED_init(void)
{
	PORTC = 0xFF;							// All PORTC set (LED off)
 1d0:	8f ef       	ldi	r24, 0xFF	; 255
 1d2:	88 b9       	out	0x08, r24	; 8
	DDRC = 0xFF;							// All PORTC output
 1d4:	87 b9       	out	0x07, r24	; 7
}
 1d6:	08 95       	ret

000001d8 <SW_init>:

void SW_init(void)
{
	PORTK = 0xFF;							// All PORTK set
 1d8:	9f ef       	ldi	r25, 0xFF	; 255
 1da:	90 93 08 01 	sts	0x0108, r25
	DDRK = 0x00;							// All PORTK input
 1de:	10 92 07 01 	sts	0x0107, r1
	PCICR = 1 << PCIE2;						// Enable pin change interrupt 16..23
 1e2:	84 e0       	ldi	r24, 0x04	; 4
 1e4:	80 93 68 00 	sts	0x0068, r24
	PCMSK2 = 0xFF;							// Enable mask for PCINT
 1e8:	90 93 6d 00 	sts	0x006D, r25
}
 1ec:	08 95       	ret

000001ee <power_init>:
void power_init(void)
{
//	PRR0 = 0xCF;							// Only Timer0 enabled
	//PRR1 = 0x3F;							// All disabled
//	SMCR = 0x01;							// Enable Idle mode
}
 1ee:	08 95       	ret

000001f0 <main>:

int main(void)
{
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
//	TCNT0  = 0x00;
}

void LED_init(void)
{
	PORTC = 0xFF;							// All PORTC set (LED off)
 1f4:	8f ef       	ldi	r24, 0xFF	; 255
 1f6:	88 b9       	out	0x08, r24	; 8
	DDRC = 0xFF;							// All PORTC output
 1f8:	87 b9       	out	0x07, r24	; 7
}

void SW_init(void)
{
	PORTK = 0xFF;							// All PORTK set
 1fa:	80 93 08 01 	sts	0x0108, r24
	DDRK = 0x00;							// All PORTK input
 1fe:	10 92 07 01 	sts	0x0107, r1
	PCICR = 1 << PCIE2;						// Enable pin change interrupt 16..23
 202:	94 e0       	ldi	r25, 0x04	; 4
 204:	90 93 68 00 	sts	0x0068, r25
	PCMSK2 = 0xFF;							// Enable mask for PCINT
 208:	80 93 6d 00 	sts	0x006D, r24

	LED_init();
	SW_init();
	power_init();
	//Initialize the USART with Baud rate = 2400bps
	USARTInit(416);
 20c:	80 ea       	ldi	r24, 0xA0	; 160
 20e:	91 e0       	ldi	r25, 0x01	; 1
 210:	0e 94 1c 01 	call	0x238	; 0x238 <USARTInit>
	data = 0xFE;//0b01010101;
 214:	8e ef       	ldi	r24, 0xFE	; 254
 216:	80 93 0d 02 	sts	0x020D, r24

	sei(); 
 21a:	78 94       	sei
 21c:	ca ef       	ldi	r28, 0xFA	; 250
 21e:	d0 e0       	ldi	r29, 0x00	; 0

		//Send Another 'A'
	//	UWriteData('A');

		//Send the data;
		UWriteData(data);
 220:	80 91 0d 02 	lds	r24, 0x020D
 224:	0e 94 b1 01 	call	0x362	; 0x362 <UWriteData>
 228:	20 e0       	ldi	r18, 0x00	; 0
 22a:	ce 01       	movw	r24, r28
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <main+0x3c>
}

void delayms(uint8_t t)//delay in ms
{
uint8_t i;
for(i=0;i<t;i++)
 230:	2f 5f       	subi	r18, 0xFF	; 255
 232:	24 31       	cpi	r18, 0x14	; 20
 234:	d1 f7       	brne	.-12     	; 0x22a <main+0x3a>
 236:	f4 cf       	rjmp	.-24     	; 0x220 <main+0x30>

00000238 <USARTInit>:


void USARTInit(uint16_t ubrrvalue)
{
	//Setup q
	UQFront=UQEnd=-1;
 238:	2f ef       	ldi	r18, 0xFF	; 255
 23a:	20 93 0e 02 	sts	0x020E, r18
 23e:	20 91 0e 02 	lds	r18, 0x020E
 242:	20 93 0c 02 	sts	0x020C, r18

	//Set Baud rate
	UBRR0H=(unsigned char)(ubrrvalue>>8);
 246:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L=(unsigned char)ubrrvalue;
 24a:	80 93 c4 00 	sts	0x00C4, r24
	1 StopBit
	char size 8

	*/

	UCSR0C=(0<<UMSEL01)|(0<<UMSEL00)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);
 24e:	86 e0       	ldi	r24, 0x06	; 6
 250:	80 93 c2 00 	sts	0x00C2, r24

	Enable The recevier and transmitter

	*/

	UCSR0B=(1<<RXCIE0)|(1<<TXEN0);
 254:	88 e8       	ldi	r24, 0x88	; 136
 256:	80 93 c1 00 	sts	0x00C1, r24
	sei();
 25a:	78 94       	sei

}
 25c:	08 95       	ret

0000025e <__vector_25>:

//The USART ISR
ISR(USART0_RX_vect)
{
 25e:	1f 92       	push	r1
 260:	0f 92       	push	r0
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	0f 92       	push	r0
 266:	0b b6       	in	r0, 0x3b	; 59
 268:	0f 92       	push	r0
 26a:	11 24       	eor	r1, r1
 26c:	2f 93       	push	r18
 26e:	3f 93       	push	r19
 270:	4f 93       	push	r20
 272:	8f 93       	push	r24
 274:	9f 93       	push	r25
 276:	ef 93       	push	r30
 278:	ff 93       	push	r31
	//Read the data
	char data=UDR0;
 27a:	40 91 c6 00 	lds	r20, 0x00C6

	//Now add it to q

	if(((UQEnd==RECEIVE_BUFF_SIZE-1) && UQFront==0) || ((UQEnd+1)==UQFront))
 27e:	80 91 0e 02 	lds	r24, 0x020E
 282:	8f 33       	cpi	r24, 0x3F	; 63
 284:	21 f4       	brne	.+8      	; 0x28e <__vector_25+0x30>
 286:	80 91 0c 02 	lds	r24, 0x020C
 28a:	88 23       	and	r24, r24
 28c:	71 f0       	breq	.+28     	; 0x2aa <__vector_25+0x4c>
 28e:	80 91 0e 02 	lds	r24, 0x020E
 292:	20 91 0c 02 	lds	r18, 0x020C
 296:	99 27       	eor	r25, r25
 298:	87 fd       	sbrc	r24, 7
 29a:	90 95       	com	r25
 29c:	01 96       	adiw	r24, 0x01	; 1
 29e:	33 27       	eor	r19, r19
 2a0:	27 fd       	sbrc	r18, 7
 2a2:	30 95       	com	r19
 2a4:	82 17       	cp	r24, r18
 2a6:	93 07       	cpc	r25, r19
 2a8:	59 f4       	brne	.+22     	; 0x2c0 <__vector_25+0x62>
	{
		//Q Full
		UQFront++;
 2aa:	80 91 0c 02 	lds	r24, 0x020C
 2ae:	8f 5f       	subi	r24, 0xFF	; 255
 2b0:	80 93 0c 02 	sts	0x020C, r24
		if(UQFront==RECEIVE_BUFF_SIZE) UQFront=0;
 2b4:	80 91 0c 02 	lds	r24, 0x020C
 2b8:	80 34       	cpi	r24, 0x40	; 64
 2ba:	11 f4       	brne	.+4      	; 0x2c0 <__vector_25+0x62>
 2bc:	10 92 0c 02 	sts	0x020C, r1
	}
	

	if(UQEnd==RECEIVE_BUFF_SIZE-1)
 2c0:	80 91 0e 02 	lds	r24, 0x020E
 2c4:	8f 33       	cpi	r24, 0x3F	; 63
 2c6:	19 f4       	brne	.+6      	; 0x2ce <__vector_25+0x70>
		UQEnd=0;
 2c8:	10 92 0e 02 	sts	0x020E, r1
 2cc:	05 c0       	rjmp	.+10     	; 0x2d8 <__vector_25+0x7a>
	else
		UQEnd++;
 2ce:	80 91 0e 02 	lds	r24, 0x020E
 2d2:	8f 5f       	subi	r24, 0xFF	; 255
 2d4:	80 93 0e 02 	sts	0x020E, r24


	URBuff[UQEnd]=data;
 2d8:	e0 91 0e 02 	lds	r30, 0x020E
 2dc:	ff 27       	eor	r31, r31
 2de:	e7 fd       	sbrc	r30, 7
 2e0:	f0 95       	com	r31
 2e2:	e1 5f       	subi	r30, 0xF1	; 241
 2e4:	fd 4f       	sbci	r31, 0xFD	; 253
 2e6:	40 83       	st	Z, r20

	if(UQFront==-1) UQFront=0;
 2e8:	80 91 0c 02 	lds	r24, 0x020C
 2ec:	8f 3f       	cpi	r24, 0xFF	; 255
 2ee:	11 f4       	brne	.+4      	; 0x2f4 <__vector_25+0x96>
 2f0:	10 92 0c 02 	sts	0x020C, r1

}
 2f4:	ff 91       	pop	r31
 2f6:	ef 91       	pop	r30
 2f8:	9f 91       	pop	r25
 2fa:	8f 91       	pop	r24
 2fc:	4f 91       	pop	r20
 2fe:	3f 91       	pop	r19
 300:	2f 91       	pop	r18
 302:	0f 90       	pop	r0
 304:	0b be       	out	0x3b, r0	; 59
 306:	0f 90       	pop	r0
 308:	0f be       	out	0x3f, r0	; 63
 30a:	0f 90       	pop	r0
 30c:	1f 90       	pop	r1
 30e:	18 95       	reti

00000310 <UReadData>:
char UReadData()
{
	char data;
	
	//Check if q is empty
	if(UQFront==-1)
 310:	80 91 0c 02 	lds	r24, 0x020C
 314:	8f 3f       	cpi	r24, 0xFF	; 255
 316:	11 f4       	brne	.+4      	; 0x31c <UReadData+0xc>
 318:	e0 e0       	ldi	r30, 0x00	; 0
 31a:	21 c0       	rjmp	.+66     	; 0x35e <UReadData+0x4e>
		return 0;
	
	data=URBuff[UQFront];
 31c:	e0 91 0c 02 	lds	r30, 0x020C
 320:	ff 27       	eor	r31, r31
 322:	e7 fd       	sbrc	r30, 7
 324:	f0 95       	com	r31
 326:	e1 5f       	subi	r30, 0xF1	; 241
 328:	fd 4f       	sbci	r31, 0xFD	; 253
 32a:	e0 81       	ld	r30, Z
	
	if(UQFront==UQEnd)
 32c:	90 91 0c 02 	lds	r25, 0x020C
 330:	80 91 0e 02 	lds	r24, 0x020E
 334:	98 17       	cp	r25, r24
 336:	41 f4       	brne	.+16     	; 0x348 <UReadData+0x38>
	{
	//If single data is left
	//So empty q
	UQFront=UQEnd=-1;
 338:	8f ef       	ldi	r24, 0xFF	; 255
 33a:	80 93 0e 02 	sts	0x020E, r24
 33e:	80 91 0e 02 	lds	r24, 0x020E
 342:	80 93 0c 02 	sts	0x020C, r24
 346:	0b c0       	rjmp	.+22     	; 0x35e <UReadData+0x4e>
	}
	else
	{
		UQFront++;
 348:	80 91 0c 02 	lds	r24, 0x020C
 34c:	8f 5f       	subi	r24, 0xFF	; 255
 34e:	80 93 0c 02 	sts	0x020C, r24

		if(UQFront==RECEIVE_BUFF_SIZE)
 352:	80 91 0c 02 	lds	r24, 0x020C
 356:	80 34       	cpi	r24, 0x40	; 64
 358:	11 f4       	brne	.+4      	; 0x35e <UReadData+0x4e>
		UQFront=0;
 35a:	10 92 0c 02 	sts	0x020C, r1
	}

	return data;
}
 35e:	8e 2f       	mov	r24, r30
 360:	08 95       	ret

00000362 <UWriteData>:

void UWriteData(char data)
{
 362:	98 2f       	mov	r25, r24
	//Wait For Transmitter to become ready
	while(!(UCSR0A & (1<<UDRE0)));
 364:	80 91 c0 00 	lds	r24, 0x00C0
 368:	85 ff       	sbrs	r24, 5
 36a:	fc cf       	rjmp	.-8      	; 0x364 <UWriteData+0x2>

	//Now write
	UDR0=data;
 36c:	90 93 c6 00 	sts	0x00C6, r25
}
 370:	08 95       	ret

00000372 <UDataAvailable>:

uint8_t UDataAvailable()
{
	if(UQFront==-1) return 0;
 372:	80 91 0c 02 	lds	r24, 0x020C
 376:	8f 3f       	cpi	r24, 0xFF	; 255
 378:	11 f4       	brne	.+4      	; 0x37e <UDataAvailable+0xc>
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	1a c0       	rjmp	.+52     	; 0x3b2 <UDataAvailable+0x40>
	if(UQFront<UQEnd)
 37e:	90 91 0c 02 	lds	r25, 0x020C
 382:	80 91 0e 02 	lds	r24, 0x020E
 386:	98 17       	cp	r25, r24
 388:	34 f4       	brge	.+12     	; 0x396 <UDataAvailable+0x24>
		return(UQEnd-UQFront+1);
 38a:	90 91 0e 02 	lds	r25, 0x020E
 38e:	80 91 0c 02 	lds	r24, 0x020C
 392:	9f 5f       	subi	r25, 0xFF	; 255
 394:	0d c0       	rjmp	.+26     	; 0x3b0 <UDataAvailable+0x3e>
	else if(UQFront>UQEnd)
 396:	90 91 0c 02 	lds	r25, 0x020C
 39a:	80 91 0e 02 	lds	r24, 0x020E
 39e:	89 17       	cp	r24, r25
 3a0:	14 f0       	brlt	.+4      	; 0x3a6 <UDataAvailable+0x34>
 3a2:	91 e0       	ldi	r25, 0x01	; 1
 3a4:	06 c0       	rjmp	.+12     	; 0x3b2 <UDataAvailable+0x40>
		return (RECEIVE_BUFF_SIZE-UQFront+UQEnd+1);
 3a6:	90 91 0e 02 	lds	r25, 0x020E
 3aa:	80 91 0c 02 	lds	r24, 0x020C
 3ae:	9f 5b       	subi	r25, 0xBF	; 191
 3b0:	98 1b       	sub	r25, r24
	else
		return 1;
}
 3b2:	89 2f       	mov	r24, r25
 3b4:	08 95       	ret

000003b6 <UWriteString>:

void UWriteString(char *str)
{
 3b6:	fc 01       	movw	r30, r24
 3b8:	07 c0       	rjmp	.+14     	; 0x3c8 <UWriteString+0x12>
}

void UWriteData(char data)
{
	//Wait For Transmitter to become ready
	while(!(UCSR0A & (1<<UDRE0)));
 3ba:	80 91 c0 00 	lds	r24, 0x00C0
 3be:	85 ff       	sbrs	r24, 5
 3c0:	fc cf       	rjmp	.-8      	; 0x3ba <UWriteString+0x4>

	//Now write
	UDR0=data;
 3c2:	90 93 c6 00 	sts	0x00C6, r25
void UWriteString(char *str)
{
	while((*str)!='\0')
	{
		UWriteData(*str);
		str++;
 3c6:	31 96       	adiw	r30, 0x01	; 1
		return 1;
}

void UWriteString(char *str)
{
	while((*str)!='\0')
 3c8:	90 81       	ld	r25, Z
 3ca:	99 23       	and	r25, r25
 3cc:	b1 f7       	brne	.-20     	; 0x3ba <UWriteString+0x4>
}

void UWriteData(char data)
{
	//Wait For Transmitter to become ready
	while(!(UCSR0A & (1<<UDRE0)));
 3ce:	80 91 c0 00 	lds	r24, 0x00C0
 3d2:	85 ff       	sbrs	r24, 5
 3d4:	fc cf       	rjmp	.-8      	; 0x3ce <UWriteString+0x18>

	//Now write
	UDR0=data;
 3d6:	10 92 c6 00 	sts	0x00C6, r1
		UWriteData(*str);
		str++;
	}

	UWriteData('\0');
}
 3da:	08 95       	ret

000003dc <_exit>:
 3dc:	f8 94       	cli

000003de <__stop_program>:
 3de:	ff cf       	rjmp	.-2      	; 0x3de <__stop_program>
