
RetroliteV20.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000110  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000129  00000000  00000000  0000012b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000ac  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000188  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000488  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000102  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000040  00000000  00000000  000005aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000a8  00000000  00000000  000005ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	02 d0       	rcall	.+4      	; 0x30 <main>
  2c:	35 c0       	rjmp	.+106    	; 0x98 <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <main>:
#define RelayOFF PB2


int main(void)
{
	set_input(DDRB, Switch1);
  30:	e7 e3       	ldi	r30, 0x37	; 55
  32:	f0 e0       	ldi	r31, 0x00	; 0
  34:	80 81       	ld	r24, Z
  36:	8e 7f       	andi	r24, 0xFE	; 254
  38:	80 83       	st	Z, r24
	set_output(DDRB, RelayOFF);
  3a:	80 81       	ld	r24, Z
  3c:	84 60       	ori	r24, 0x04	; 4
  3e:	80 83       	st	Z, r24
	set_output(DDRB, RelayON);
  40:	80 81       	ld	r24, Z
  42:	82 60       	ori	r24, 0x02	; 2
  44:	80 83       	st	Z, r24
	
    while(1)
    {
		if(is_set(PINB, Switch1))
  46:	a6 e3       	ldi	r26, 0x36	; 54
  48:	b0 e0       	ldi	r27, 0x00	; 0
			}
		
		}
		else
		{
			output_high(PORTB, RelayOFF);
  4a:	e8 e3       	ldi	r30, 0x38	; 56
  4c:	f0 e0       	ldi	r31, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  4e:	44 ed       	ldi	r20, 0xD4	; 212
  50:	50 e3       	ldi	r21, 0x30	; 48
	set_output(DDRB, RelayOFF);
	set_output(DDRB, RelayON);
	
    while(1)
    {
		if(is_set(PINB, Switch1))
  52:	22 ee       	ldi	r18, 0xE2	; 226
  54:	34 e0       	ldi	r19, 0x04	; 4
  56:	8c 91       	ld	r24, X
  58:	80 ff       	sbrs	r24, 0
  5a:	14 c0       	rjmp	.+40     	; 0x84 <__SREG__+0x45>
  5c:	ca 01       	movw	r24, r20
  5e:	01 97       	sbiw	r24, 0x01	; 1
  60:	f1 f7       	brne	.-4      	; 0x5e <__SREG__+0x1f>
		{
			_delay_ms(50);
			if(is_set(PINB, Switch1))
  62:	8c 91       	ld	r24, X
  64:	80 ff       	sbrs	r24, 0
  66:	07 c0       	rjmp	.+14     	; 0x76 <__SREG__+0x37>
			{
				output_high(PORTB, RelayON);
  68:	80 81       	ld	r24, Z
  6a:	82 60       	ori	r24, 0x02	; 2
  6c:	80 83       	st	Z, r24
				output_low(PORTB, RelayOFF);
  6e:	80 81       	ld	r24, Z
  70:	8b 7f       	andi	r24, 0xFB	; 251
  72:	80 83       	st	Z, r24
  74:	0d c0       	rjmp	.+26     	; 0x90 <__SREG__+0x51>
			}
			else
			{
				output_high(PORTB, RelayOFF);
  76:	80 81       	ld	r24, Z
  78:	84 60       	ori	r24, 0x04	; 4
  7a:	80 83       	st	Z, r24
				output_low(PORTB, RelayON);
  7c:	80 81       	ld	r24, Z
  7e:	8d 7f       	andi	r24, 0xFD	; 253
  80:	80 83       	st	Z, r24
  82:	06 c0       	rjmp	.+12     	; 0x90 <__SREG__+0x51>
			}
		
		}
		else
		{
			output_high(PORTB, RelayOFF);
  84:	80 81       	ld	r24, Z
  86:	84 60       	ori	r24, 0x04	; 4
  88:	80 83       	st	Z, r24
			output_low(PORTB, RelayON);
  8a:	80 81       	ld	r24, Z
  8c:	8d 7f       	andi	r24, 0xFD	; 253
  8e:	80 83       	st	Z, r24
  90:	c9 01       	movw	r24, r18
  92:	01 97       	sbiw	r24, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <__SREG__+0x53>
  96:	df cf       	rjmp	.-66     	; 0x56 <__SREG__+0x17>

00000098 <_exit>:
  98:	f8 94       	cli

0000009a <__stop_program>:
  9a:	ff cf       	rjmp	.-2      	; 0x9a <__stop_program>
