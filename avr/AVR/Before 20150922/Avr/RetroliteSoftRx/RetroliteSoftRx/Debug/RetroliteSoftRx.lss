
RetroliteSoftRx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000002e2  00000376  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002e  00800060  00800060  00000376  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000376  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  000003a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000800  00000000  00000000  0000042e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000036f  00000000  00000000  00000c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002eb  00000000  00000000  00000f9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000184  00000000  00000000  00001288  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d4  00000000  00000000  0000140c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000506  00000000  00000000  000017e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00001ce6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	20 c0       	rjmp	.+64     	; 0x56 <__vector_10>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e2 ee       	ldi	r30, 0xE2	; 226
  32:	f2 e0       	ldi	r31, 0x02	; 2
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a0 36       	cpi	r26, 0x60	; 96
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	a0 e6       	ldi	r26, 0x60	; 96
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	ae 38       	cpi	r26, 0x8E	; 142
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	e6 d0       	rcall	.+460    	; 0x21e <main>
  52:	45 c1       	rjmp	.+650    	; 0x2de <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <__vector_10>:
		i = -i;
	}

	// fill buffer with digits (in reverse order)
	do {
		buf[len++] = 48 + i % 10;	// ASCII digits start at 48
  56:	1f 92       	push	r1
  58:	0f 92       	push	r0
  5a:	0f b6       	in	r0, 0x3f	; 63
  5c:	0f 92       	push	r0
  5e:	11 24       	eor	r1, r1
  60:	8f 93       	push	r24
  62:	9f 93       	push	r25
  64:	ef 93       	push	r30
  66:	ff 93       	push	r31
  68:	80 91 69 00 	lds	r24, 0x0069
	} while ((i /= 10) > 0 && len < PRINT_INT_BUFSIZE);
  6c:	81 30       	cpi	r24, 0x01	; 1
  6e:	29 f5       	brne	.+74     	; 0xba <__vector_10+0x64>
  70:	80 91 68 00 	lds	r24, 0x0068
  74:	81 50       	subi	r24, 0x01	; 1
  76:	f9 f4       	brne	.+62     	; 0xb6 <__vector_10+0x60>
  78:	80 91 65 00 	lds	r24, 0x0065
  7c:	90 91 66 00 	lds	r25, 0x0066
  80:	80 ff       	sbrs	r24, 0
  82:	02 c0       	rjmp	.+4      	; 0x88 <__vector_10+0x32>
		i = -i;
	}

	// fill buffer with digits (in reverse order)
	do {
		buf[len++] = 48 + i % 10;	// ASCII digits start at 48
  84:	c1 9a       	sbi	0x18, 1	; 24
  86:	01 c0       	rjmp	.+2      	; 0x8a <__vector_10+0x34>
  88:	c1 98       	cbi	0x18, 1	; 24
  8a:	80 91 65 00 	lds	r24, 0x0065
	} while ((i /= 10) > 0 && len < PRINT_INT_BUFSIZE);

	if (sign < 0) {	// don't forget to add the sign
  8e:	90 91 66 00 	lds	r25, 0x0066
		buf[len] = '-';
  92:	96 95       	lsr	r25
  94:	87 95       	ror	r24
  96:	90 93 66 00 	sts	0x0066, r25
  9a:	80 93 65 00 	sts	0x0065, r24
  9e:	80 91 67 00 	lds	r24, 0x0067
		len--;
	}

	// reverse output of the buffer
	do {
		softuart_putchar(buf[len--]);
  a2:	81 50       	subi	r24, 0x01	; 1
  a4:	80 93 67 00 	sts	0x0067, r24
  a8:	81 11       	cpse	r24, r1
  aa:	04 c0       	rjmp	.+8      	; 0xb4 <__vector_10+0x5e>
  ac:	10 92 69 00 	sts	0x0069, r1
  b0:	83 e0       	ldi	r24, 0x03	; 3
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <__vector_10+0x60>
  b4:	83 e0       	ldi	r24, 0x03	; 3
  b6:	80 93 68 00 	sts	0x0068, r24
	} while (len >= 0);
  ba:	80 91 6b 00 	lds	r24, 0x006B
		len--;
	}

	// reverse output of the buffer
	do {
		softuart_putchar(buf[len--]);
  be:	81 11       	cpse	r24, r1
  c0:	56 c0       	rjmp	.+172    	; 0x16e <__vector_10+0x118>
	} while (len >= 0);
}
  c2:	80 91 64 00 	lds	r24, 0x0064
  c6:	88 23       	and	r24, r24
  c8:	e9 f0       	breq	.+58     	; 0x104 <__vector_10+0xae>
  ca:	80 91 63 00 	lds	r24, 0x0063
  ce:	81 50       	subi	r24, 0x01	; 1
  d0:	80 93 63 00 	sts	0x0063, r24
  d4:	81 11       	cpse	r24, r1
  d6:	4b c0       	rjmp	.+150    	; 0x16e <__vector_10+0x118>
  d8:	10 92 64 00 	sts	0x0064, r1
  dc:	10 92 6a 00 	sts	0x006A, r1
  e0:	e0 91 6d 00 	lds	r30, 0x006D
  e4:	f0 e0       	ldi	r31, 0x00	; 0
	if ( flag_rx_off == SU_FALSE ) {
		if ( flag_rx_waiting_for_stop_bit ) {
			if ( --timer_rx_ctr == 0 ) {
				flag_rx_waiting_for_stop_bit = SU_FALSE;
				flag_rx_ready = SU_FALSE;
				inbuf[qin] = internal_rx_buffer;
  e6:	80 91 62 00 	lds	r24, 0x0062
  ea:	e2 59       	subi	r30, 0x92	; 146
  ec:	ff 4f       	sbci	r31, 0xFF	; 255
  ee:	80 83       	st	Z, r24
				if ( ++qin >= SOFTUART_IN_BUF_SIZE ) {
  f0:	80 91 6d 00 	lds	r24, 0x006D
  f4:	8f 5f       	subi	r24, 0xFF	; 255
  f6:	80 93 6d 00 	sts	0x006D, r24
  fa:	80 32       	cpi	r24, 0x20	; 32
  fc:	c0 f1       	brcs	.+112    	; 0x16e <__vector_10+0x118>
					// overflow - reset inbuf-index
					qin = 0;
  fe:	10 92 6d 00 	sts	0x006D, r1
 102:	35 c0       	rjmp	.+106    	; 0x16e <__vector_10+0x118>
				}
			}
		}
		else {  // rx_test_busy
			if ( flag_rx_ready == SU_FALSE ) {
 104:	80 91 6a 00 	lds	r24, 0x006A
 108:	81 11       	cpse	r24, r1
 10a:	10 c0       	rjmp	.+32     	; 0x12c <__vector_10+0xd6>
				start_bit = get_rx_pin_status();
				// test for start bit
				if ( start_bit == 0 ) {
 10c:	b0 99       	sbic	0x16, 0	; 22
 10e:	2f c0       	rjmp	.+94     	; 0x16e <__vector_10+0x118>
					flag_rx_ready      = SU_TRUE;
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	80 93 6a 00 	sts	0x006A, r24
					internal_rx_buffer = 0;
 116:	10 92 62 00 	sts	0x0062, r1
					timer_rx_ctr       = 4;
 11a:	94 e0       	ldi	r25, 0x04	; 4
 11c:	90 93 63 00 	sts	0x0063, r25
					bits_left_in_rx    = RX_NUM_OF_BITS;
 120:	98 e0       	ldi	r25, 0x08	; 8
 122:	90 93 61 00 	sts	0x0061, r25
					rx_mask            = 1;
 126:	80 93 60 00 	sts	0x0060, r24
 12a:	21 c0       	rjmp	.+66     	; 0x16e <__vector_10+0x118>
				}
			}
			else {  // rx_busy
				tmp = timer_rx_ctr;
 12c:	80 91 63 00 	lds	r24, 0x0063
				if ( --tmp == 0 ) { // if ( --timer_rx_ctr == 0 ) {
 130:	81 50       	subi	r24, 0x01	; 1
 132:	d9 f4       	brne	.+54     	; 0x16a <__vector_10+0x114>
					// rcv
					tmp = 3;
					flag_in = get_rx_pin_status();
					if ( flag_in ) {
 134:	b0 9b       	sbis	0x16, 0	; 22
 136:	07 c0       	rjmp	.+14     	; 0x146 <__vector_10+0xf0>
						internal_rx_buffer |= rx_mask;
 138:	90 91 62 00 	lds	r25, 0x0062
 13c:	80 91 60 00 	lds	r24, 0x0060
 140:	89 2b       	or	r24, r25
 142:	80 93 62 00 	sts	0x0062, r24
					}
					rx_mask <<= 1;
 146:	80 91 60 00 	lds	r24, 0x0060
 14a:	88 0f       	add	r24, r24
 14c:	80 93 60 00 	sts	0x0060, r24
					if ( --bits_left_in_rx == 0 ) {
 150:	80 91 61 00 	lds	r24, 0x0061
 154:	81 50       	subi	r24, 0x01	; 1
 156:	80 93 61 00 	sts	0x0061, r24
 15a:	81 11       	cpse	r24, r1
 15c:	05 c0       	rjmp	.+10     	; 0x168 <__vector_10+0x112>
						flag_rx_waiting_for_stop_bit = SU_TRUE;
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	80 93 64 00 	sts	0x0064, r24
			}
			else {  // rx_busy
				tmp = timer_rx_ctr;
				if ( --tmp == 0 ) { // if ( --timer_rx_ctr == 0 ) {
					// rcv
					tmp = 3;
 164:	83 e0       	ldi	r24, 0x03	; 3
 166:	01 c0       	rjmp	.+2      	; 0x16a <__vector_10+0x114>
 168:	83 e0       	ldi	r24, 0x03	; 3
					rx_mask <<= 1;
					if ( --bits_left_in_rx == 0 ) {
						flag_rx_waiting_for_stop_bit = SU_TRUE;
					}
				}
				timer_rx_ctr = tmp;
 16a:	80 93 63 00 	sts	0x0063, r24
			}
		}
	}
}
 16e:	ff 91       	pop	r31
 170:	ef 91       	pop	r30
 172:	9f 91       	pop	r25
 174:	8f 91       	pop	r24
 176:	0f 90       	pop	r0
 178:	0f be       	out	0x3f, r0	; 63
 17a:	0f 90       	pop	r0
 17c:	1f 90       	pop	r1
 17e:	18 95       	reti

00000180 <softuart_init>:
	SREG = sreg_tmp;
}

void softuart_init( void )
{
	flag_tx_busy  = SU_FALSE;
 180:	10 92 69 00 	sts	0x0069, r1
	flag_rx_ready = SU_FALSE;
 184:	10 92 6a 00 	sts	0x006A, r1
	flag_rx_off   = SU_FALSE;
 188:	10 92 6b 00 	sts	0x006B, r1
	
	set_tx_pin_high(); /* mt: set to high to avoid garbage on init */
 18c:	c1 9a       	sbi	0x18, 1	; 24
}

static void io_init(void)
{
	// TX-Pin as output
	SOFTUART_TXDDR |=  ( 1 << SOFTUART_TXBIT );
 18e:	b9 9a       	sbi	0x17, 1	; 23
	// RX-Pin as input
	SOFTUART_RXDDR &= ~( 1 << SOFTUART_RXBIT );
 190:	b8 98       	cbi	0x17, 0	; 23

static void timer_init(void)
{
	unsigned char sreg_tmp;
	
	sreg_tmp = SREG;
 192:	9f b7       	in	r25, 0x3f	; 63
	cli();
 194:	f8 94       	cli
	
	SOFTUART_T_COMP_REG = SOFTUART_TIMERTOP;     /* set top */
 196:	80 e1       	ldi	r24, 0x10	; 16
 198:	89 bd       	out	0x29, r24	; 41

	SOFTUART_T_CONTR_REGA = SOFTUART_CTC_MASKA | SOFTUART_PRESC_MASKA;
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	8a bd       	out	0x2a, r24	; 42
	SOFTUART_T_CONTR_REGB = SOFTUART_CTC_MASKB | SOFTUART_PRESC_MASKB;
 19e:	83 bf       	out	0x33, r24	; 51

	SOFTUART_T_INTCTL_REG |= SOFTUART_CMPINT_EN_MASK;
 1a0:	89 b7       	in	r24, 0x39	; 57
 1a2:	80 61       	ori	r24, 0x10	; 16
 1a4:	89 bf       	out	0x39, r24	; 57

	SOFTUART_T_CNT_REG = 0; /* reset counter */
 1a6:	12 be       	out	0x32, r1	; 50
	
	SREG = sreg_tmp;
 1a8:	9f bf       	out	0x3f, r25	; 63
 1aa:	08 95       	ret

000001ac <softuart_getchar>:

char softuart_getchar( void )
{
	char ch;

	while ( qout == qin ) {
 1ac:	90 91 6c 00 	lds	r25, 0x006C
 1b0:	80 91 6d 00 	lds	r24, 0x006D
 1b4:	98 17       	cp	r25, r24
 1b6:	e1 f3       	breq	.-8      	; 0x1b0 <softuart_getchar+0x4>
		idle();
	}
	ch = inbuf[qout];
 1b8:	e9 2f       	mov	r30, r25
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	e2 59       	subi	r30, 0x92	; 146
 1be:	ff 4f       	sbci	r31, 0xFF	; 255
 1c0:	80 81       	ld	r24, Z
	if ( ++qout >= SOFTUART_IN_BUF_SIZE ) {
 1c2:	9f 5f       	subi	r25, 0xFF	; 255
 1c4:	90 32       	cpi	r25, 0x20	; 32
 1c6:	18 f4       	brcc	.+6      	; 0x1ce <softuart_getchar+0x22>
 1c8:	90 93 6c 00 	sts	0x006C, r25
 1cc:	08 95       	ret
		qout = 0;
 1ce:	10 92 6c 00 	sts	0x006C, r1
	}
	
	return( ch );
}
 1d2:	08 95       	ret

000001d4 <softuart_kbhit>:

unsigned char softuart_kbhit( void )
{
	return( qin != qout );
 1d4:	20 91 6d 00 	lds	r18, 0x006D
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 91 6c 00 	lds	r25, 0x006C
 1de:	29 13       	cpse	r18, r25
 1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <softuart_kbhit+0x10>
 1e2:	80 e0       	ldi	r24, 0x00	; 0
}
 1e4:	08 95       	ret

000001e6 <softuart_putchar>:
	return ( flag_tx_busy == SU_TRUE ) ? 1 : 0;
}

void softuart_putchar( const char ch )
{
	while ( flag_tx_busy == SU_TRUE ) {
 1e6:	90 91 69 00 	lds	r25, 0x0069
 1ea:	91 30       	cpi	r25, 0x01	; 1
 1ec:	e1 f3       	breq	.-8      	; 0x1e6 <softuart_putchar>
		; // wait for transmitter ready
		  // add watchdog-reset here if needed;
	}

	// invoke_UART_transmit
	timer_tx_ctr       = 3;
 1ee:	93 e0       	ldi	r25, 0x03	; 3
 1f0:	90 93 68 00 	sts	0x0068, r25
	bits_left_in_tx    = TX_NUM_OF_BITS;
 1f4:	9a e0       	ldi	r25, 0x0A	; 10
 1f6:	90 93 67 00 	sts	0x0067, r25
	internal_tx_buffer = ( ch << 1 ) | 0x200;
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	92 60       	ori	r25, 0x02	; 2
 202:	90 93 66 00 	sts	0x0066, r25
 206:	80 93 65 00 	sts	0x0065, r24
	flag_tx_busy       = SU_TRUE;
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	80 93 69 00 	sts	0x0069, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 210:	8f ec       	ldi	r24, 0xCF	; 207
 212:	97 e0       	ldi	r25, 0x07	; 7
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <softuart_putchar+0x2e>
 218:	00 c0       	rjmp	.+0      	; 0x21a <softuart_putchar+0x34>
 21a:	00 00       	nop
 21c:	08 95       	ret

0000021e <main>:


// program entry point
int main(void) {
 21e:	cf 93       	push	r28
 220:	df 93       	push	r29
 222:	cd b7       	in	r28, 0x3d	; 61
 224:	de b7       	in	r29, 0x3e	; 62
 226:	a0 97       	sbiw	r28, 0x20	; 32
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	f8 94       	cli
 22c:	de bf       	out	0x3e, r29	; 62
 22e:	0f be       	out	0x3f, r0	; 63
 230:	cd bf       	out	0x3d, r28	; 61
	// DDRB for the UART TX will be set in the softuart_init() function!
	
	 // we set both LED pins to "output"
	 DDRB |= (1 << PIN_LED1) | (1 << PIN_LED2);
 232:	87 b3       	in	r24, 0x17	; 23
 234:	88 61       	ori	r24, 0x18	; 24
 236:	87 bb       	out	0x17, r24	; 23
	 
	 // initially set the pins to "low"
	 Set_Pin_Low(PORTB, PIN_LED1);
 238:	c3 98       	cbi	0x18, 3	; 24
	 Set_Pin_Low(PORTB, PIN_LED2);
 23a:	c4 98       	cbi	0x18, 4	; 24
	
	// we neet to init softuart
	softuart_init();
 23c:	a1 df       	rcall	.-190    	; 0x180 <softuart_init>
	// add watchdog-reset here if needed
}

void softuart_turn_rx_on( void )
{
	flag_rx_off = SU_FALSE;
 23e:	10 92 6b 00 	sts	0x006B, r1
	softuart_turn_rx_on();    // we receive serial data

	sei(); // this enables interupts, which are needed for softuart
 242:	78 94       	sei
	
	uint8_t toggle = 0;
 244:	f1 2c       	mov	r15, r1
	//int8_t command = 85;
	
	while(1)
	{
		Set_Pin_Low(PORTB, (toggle == 0 ? PIN_LED1 : PIN_LED2));
		Set_Pin_High(PORTB, (toggle == 0 ? PIN_LED2 : PIN_LED1));
 246:	68 94       	set
 248:	bb 24       	eor	r11, r11
 24a:	b3 f8       	bld	r11, 3
 24c:	68 94       	set
 24e:	cc 24       	eor	r12, r12
 250:	c4 f8       	bld	r12, 4
		toggle = !toggle;
 252:	dd 24       	eor	r13, r13
 254:	d3 94       	inc	r13
 256:	e1 2c       	mov	r14, r1
	//int8_t sum = 0;
	//int8_t command = 85;
	
	while(1)
	{
		Set_Pin_Low(PORTB, (toggle == 0 ? PIN_LED1 : PIN_LED2));
 258:	88 b3       	in	r24, 0x18	; 24
 25a:	ff 20       	and	r15, r15
 25c:	b1 f1       	breq	.+108    	; 0x2ca <__stack+0x6b>
 25e:	3a c0       	rjmp	.+116    	; 0x2d4 <__stack+0x75>
		Set_Pin_High(PORTB, (toggle == 0 ? PIN_LED2 : PIN_LED1));
 260:	89 2b       	or	r24, r25
 262:	88 bb       	out	0x18, r24	; 24
		toggle = !toggle;
 264:	8d 2d       	mov	r24, r13
 266:	f1 10       	cpse	r15, r1
 268:	8e 2d       	mov	r24, r14
 26a:	f8 2e       	mov	r15, r24
		// Tests whether an input character has been received.
		
		uint8_t dataIn = softuart_getchar();
 26c:	9f df       	rcall	.-194    	; 0x1ac <softuart_getchar>
 26e:	08 2f       	mov	r16, r24
		uint8_t inData[32];
		uint8_t index = 0;
 270:	1e 2d       	mov	r17, r14
		
		
		//while(dataIn != -1)
		while(softuart_kbhit())
 272:	1e c0       	rjmp	.+60     	; 0x2b0 <__stack+0x51>
		{
			inData[index] = dataIn;
 274:	e1 e0       	ldi	r30, 0x01	; 1
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	ec 0f       	add	r30, r28
 27a:	fd 1f       	adc	r31, r29
 27c:	e1 0f       	add	r30, r17
 27e:	f1 1d       	adc	r31, r1
 280:	00 83       	st	Z, r16
			index++;
 282:	1f 5f       	subi	r17, 0xFF	; 255
			dataIn = softuart_getchar();
 284:	93 df       	rcall	.-218    	; 0x1ac <softuart_getchar>
 286:	08 2f       	mov	r16, r24
			
			softuart_putchar(CMD);
 288:	8e ef       	ldi	r24, 0xFE	; 254
 28a:	ad df       	rcall	.-166    	; 0x1e6 <softuart_putchar>
			softuart_putchar(Clear_Screen);
 28c:	88 e5       	ldi	r24, 0x58	; 88
 28e:	ab df       	rcall	.-170    	; 0x1e6 <softuart_putchar>
			
			softuart_putchar(inData[0]);
 290:	89 81       	ldd	r24, Y+1	; 0x01
 292:	a9 df       	rcall	.-174    	; 0x1e6 <softuart_putchar>
			PRINT_Space;
 294:	80 e2       	ldi	r24, 0x20	; 32
 296:	a7 df       	rcall	.-178    	; 0x1e6 <softuart_putchar>
			softuart_putchar(inData[1]);
 298:	8a 81       	ldd	r24, Y+2	; 0x02
 29a:	a5 df       	rcall	.-182    	; 0x1e6 <softuart_putchar>
			PRINT_Space;
 29c:	80 e2       	ldi	r24, 0x20	; 32
 29e:	a3 df       	rcall	.-186    	; 0x1e6 <softuart_putchar>
			softuart_putchar(inData[2]);
 2a0:	8b 81       	ldd	r24, Y+3	; 0x03
 2a2:	a1 df       	rcall	.-190    	; 0x1e6 <softuart_putchar>
			PRINT_Space;
 2a4:	80 e2       	ldi	r24, 0x20	; 32
 2a6:	9f df       	rcall	.-194    	; 0x1e6 <softuart_putchar>
			softuart_putchar(inData[3]);
 2a8:	8c 81       	ldd	r24, Y+4	; 0x04
 2aa:	9d df       	rcall	.-198    	; 0x1e6 <softuart_putchar>
			PRINT_Space;
 2ac:	80 e2       	ldi	r24, 0x20	; 32
 2ae:	9b df       	rcall	.-202    	; 0x1e6 <softuart_putchar>
		uint8_t inData[32];
		uint8_t index = 0;
		
		
		//while(dataIn != -1)
		while(softuart_kbhit())
 2b0:	91 df       	rcall	.-222    	; 0x1d4 <softuart_kbhit>
 2b2:	81 11       	cpse	r24, r1
 2b4:	df cf       	rjmp	.-66     	; 0x274 <__stack+0x15>
 2b6:	2f ef       	ldi	r18, 0xFF	; 255
 2b8:	89 e6       	ldi	r24, 0x69	; 105
 2ba:	98 e1       	ldi	r25, 0x18	; 24
 2bc:	21 50       	subi	r18, 0x01	; 1
 2be:	80 40       	sbci	r24, 0x00	; 0
 2c0:	90 40       	sbci	r25, 0x00	; 0
 2c2:	e1 f7       	brne	.-8      	; 0x2bc <__stack+0x5d>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <__stack+0x67>
 2c6:	00 00       	nop
		*/
		
		
		// make a small delay
		_delay_ms(1000);
	}
 2c8:	c7 cf       	rjmp	.-114    	; 0x258 <main+0x3a>
	//int8_t sum = 0;
	//int8_t command = 85;
	
	while(1)
	{
		Set_Pin_Low(PORTB, (toggle == 0 ? PIN_LED1 : PIN_LED2));
 2ca:	87 7f       	andi	r24, 0xF7	; 247
 2cc:	88 bb       	out	0x18, r24	; 24
		Set_Pin_High(PORTB, (toggle == 0 ? PIN_LED2 : PIN_LED1));
 2ce:	98 b3       	in	r25, 0x18	; 24
 2d0:	8c 2d       	mov	r24, r12
 2d2:	c6 cf       	rjmp	.-116    	; 0x260 <__stack+0x1>
	//int8_t sum = 0;
	//int8_t command = 85;
	
	while(1)
	{
		Set_Pin_Low(PORTB, (toggle == 0 ? PIN_LED1 : PIN_LED2));
 2d4:	8f 7e       	andi	r24, 0xEF	; 239
 2d6:	88 bb       	out	0x18, r24	; 24
		Set_Pin_High(PORTB, (toggle == 0 ? PIN_LED2 : PIN_LED1));
 2d8:	98 b3       	in	r25, 0x18	; 24
 2da:	8b 2d       	mov	r24, r11
 2dc:	c1 cf       	rjmp	.-126    	; 0x260 <__stack+0x1>

000002de <_exit>:
 2de:	f8 94       	cli

000002e0 <__stop_program>:
 2e0:	ff cf       	rjmp	.-2      	; 0x2e0 <__stop_program>
