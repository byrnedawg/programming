
Atmega8_UartRx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000002ce  00000362  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000010b  00800064  00800064  00000366  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000366  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000396  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d8  00000000  00000000  00000446  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000321  00000000  00000000  00000b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f6  00000000  00000000  00000e3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001e8  00000000  00000000  00001138  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000030d  00000000  00000000  00001320  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000057d  00000000  00000000  0000162d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00001baa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	25 c0       	rjmp	.+74     	; 0x5e <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	c2 c0       	rjmp	.+388    	; 0x19c <__vector_11>
  18:	f4 c0       	rjmp	.+488    	; 0x202 <__vector_12>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee ec       	ldi	r30, 0xCE	; 206
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a4 36       	cpi	r26, 0x64	; 100
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	21 e0       	ldi	r18, 0x01	; 1
  4a:	a4 e6       	ldi	r26, 0x64	; 100
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	af 36       	cpi	r26, 0x6F	; 111
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	7f d0       	rcall	.+254    	; 0x158 <main>
  5a:	37 c1       	rjmp	.+622    	; 0x2ca <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_9>:
		i = -i;
	}

	// fill buffer with digits (in reverse order)
	do {
		buf[len++] = 48 + i % 10;	// ASCII digits start at 48
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	8f 93       	push	r24
  6a:	9f 93       	push	r25
	} while ((i /= 10) > 0 && len < PRINT_INT_BUFSIZE);
  6c:	82 b7       	in	r24, 0x32	; 50
  6e:	8a 5f       	subi	r24, 0xFA	; 250
  70:	82 bf       	out	0x32, r24	; 50
  72:	80 91 68 00 	lds	r24, 0x0068
  76:	90 91 69 00 	lds	r25, 0x0069
  7a:	b0 99       	sbic	0x16, 0	; 22
  7c:	03 c0       	rjmp	.+6      	; 0x84 <__vector_9+0x26>
  7e:	81 e0       	ldi	r24, 0x01	; 1
  80:	80 93 67 00 	sts	0x0067, r24
		i = -i;
	}

	// fill buffer with digits (in reverse order)
	do {
		buf[len++] = 48 + i % 10;	// ASCII digits start at 48
  84:	80 91 68 00 	lds	r24, 0x0068
  88:	90 91 69 00 	lds	r25, 0x0069
  8c:	80 fd       	sbrc	r24, 0
	} while ((i /= 10) > 0 && len < PRINT_INT_BUFSIZE);

	if (sign < 0) {	// don't forget to add the sign
  8e:	0d c0       	rjmp	.+26     	; 0xaa <__vector_9+0x4c>
  90:	b0 9b       	sbis	0x16, 0	; 22
		buf[len] = '-';
  92:	0b c0       	rjmp	.+22     	; 0xaa <__vector_9+0x4c>
  94:	80 91 67 00 	lds	r24, 0x0067
  98:	81 30       	cpi	r24, 0x01	; 1
  9a:	39 f4       	brne	.+14     	; 0xaa <__vector_9+0x4c>
  9c:	80 91 62 00 	lds	r24, 0x0062
  a0:	8f 5f       	subi	r24, 0xFF	; 255
		len--;
	}

	// reverse output of the buffer
	do {
		uart_putc(buf[len--]);
  a2:	80 93 62 00 	sts	0x0062, r24
  a6:	10 92 67 00 	sts	0x0067, r1
  aa:	80 91 68 00 	lds	r24, 0x0068
  ae:	90 91 69 00 	lds	r25, 0x0069
  b2:	8f 70       	andi	r24, 0x0F	; 15
  b4:	99 27       	eor	r25, r25
  b6:	89 2b       	or	r24, r25
  b8:	b9 f4       	brne	.+46     	; 0xe8 <__vector_9+0x8a>
	} while (len >= 0);
  ba:	80 91 65 00 	lds	r24, 0x0065
		len--;
	}

	// reverse output of the buffer
	do {
		uart_putc(buf[len--]);
  be:	8f 5f       	subi	r24, 0xFF	; 255
  c0:	80 93 65 00 	sts	0x0065, r24
	} while (len >= 0);
}
  c4:	80 91 64 00 	lds	r24, 0x0064
  c8:	8f 5f       	subi	r24, 0xFF	; 255
  ca:	80 93 64 00 	sts	0x0064, r24
  ce:	80 91 66 00 	lds	r24, 0x0066
  d2:	81 30       	cpi	r24, 0x01	; 1
  d4:	11 f4       	brne	.+4      	; 0xda <__vector_9+0x7c>
  d6:	c1 98       	cbi	0x18, 1	; 24
  d8:	07 c0       	rjmp	.+14     	; 0xe8 <__vector_9+0x8a>
  da:	80 91 65 00 	lds	r24, 0x0065
  de:	82 30       	cpi	r24, 0x02	; 2
  e0:	10 f4       	brcc	.+4      	; 0xe6 <__vector_9+0x88>
  e2:	c1 98       	cbi	0x18, 1	; 24
  e4:	01 c0       	rjmp	.+2      	; 0xe8 <__vector_9+0x8a>
		{
			output_low(PORTB, GreenLED);
		}
		else
		{
			output_high(PORTB, GreenLED);
  e6:	c1 9a       	sbi	0x18, 1	; 24
		}
	}
	if((timer0Overflows % 32) == 0) // push button polling on the release
  e8:	80 91 68 00 	lds	r24, 0x0068
  ec:	90 91 69 00 	lds	r25, 0x0069
  f0:	8f 71       	andi	r24, 0x1F	; 31
  f2:	99 27       	eor	r25, r25
  f4:	89 2b       	or	r24, r25
  f6:	a9 f4       	brne	.+42     	; 0x122 <__vector_9+0xc4>
	{
		if (i == 127) d = -1;   // count down
  f8:	80 91 61 00 	lds	r24, 0x0061
  fc:	8f 37       	cpi	r24, 0x7F	; 127
  fe:	19 f4       	brne	.+6      	; 0x106 <__vector_9+0xa8>
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	80 93 60 00 	sts	0x0060, r24
		if (i == -128) d = 1;   // count up
 106:	80 91 61 00 	lds	r24, 0x0061
 10a:	80 38       	cpi	r24, 0x80	; 128
 10c:	19 f4       	brne	.+6      	; 0x114 <__vector_9+0xb6>
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	80 93 60 00 	sts	0x0060, r24
		i += d;
 114:	80 91 61 00 	lds	r24, 0x0061
 118:	90 91 60 00 	lds	r25, 0x0060
 11c:	89 0f       	add	r24, r25
 11e:	80 93 61 00 	sts	0x0061, r24
		//	switch_state--;
		//}
		
	}
	
	timer0Overflows++;
 122:	80 91 68 00 	lds	r24, 0x0068
 126:	90 91 69 00 	lds	r25, 0x0069
 12a:	01 96       	adiw	r24, 0x01	; 1
 12c:	90 93 69 00 	sts	0x0069, r25
 130:	80 93 68 00 	sts	0x0068, r24
}
 134:	9f 91       	pop	r25
 136:	8f 91       	pop	r24
 138:	0f 90       	pop	r0
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	0f 90       	pop	r0
 13e:	1f 90       	pop	r1
 140:	18 95       	reti

00000142 <timer0_init>:

void timer0_init(void) // Initialize timer 0
{
	TIMSK |= (1<<TOIE0);
 142:	89 b7       	in	r24, 0x39	; 57
 144:	81 60       	ori	r24, 0x01	; 1
 146:	89 bf       	out	0x39, r24	; 57
	TCCR0 |= (1<<CS02)|(0<<CS01)|(1<<CS00); //
 148:	83 b7       	in	r24, 0x33	; 51
 14a:	85 60       	ori	r24, 0x05	; 5
 14c:	83 bf       	out	0x33, r24	; 51

	timer0Overflows = 0; // Start timer overflows at 0
 14e:	10 92 69 00 	sts	0x0069, r1
 152:	10 92 68 00 	sts	0x0068, r1
 156:	08 95       	ret

00000158 <main>:
	uint8_t i; //Clasical loop varriable

	uint8_t packet[5];
	uint8_t data=0;
	
	uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) );
 158:	82 e8       	ldi	r24, 0x82	; 130
 15a:	96 e0       	ldi	r25, 0x06	; 6
 15c:	79 d0       	rcall	.+242    	; 0x250 <uart0_init>
	
	timer0_init();
 15e:	f1 df       	rcall	.-30     	; 0x142 <timer0_init>

	sei();
 160:	78 94       	sei
	
	
	set_input(DDRB, Switch1);
 162:	b8 98       	cbi	0x17, 0	; 23
	set_output(DDRB, GreenLED);
 164:	b9 9a       	sbi	0x17, 1	; 23
	set_input(DDRB, Switch3);
 166:	ba 98       	cbi	0x17, 2	; 23
	output_high(PORTB, GreenLED);
 168:	c1 9a       	sbi	0x18, 1	; 24
			 //_delay_ms(10);
		 }
		 
		 if(uart0_getc()=='A') 
		 {
			 lightOn = 1;
 16a:	c1 e0       	ldi	r28, 0x01	; 1
 16c:	06 c0       	rjmp	.+12     	; 0x17a <main+0x22>
	
	while(1)
	{	 
		 while(!uart0_available())
		 {
			 if(timeOff > 1)
 16e:	80 91 64 00 	lds	r24, 0x0064
 172:	82 30       	cpi	r24, 0x02	; 2
 174:	10 f0       	brcs	.+4      	; 0x17a <main+0x22>
			 {
				 lightOn = 0;
 176:	10 92 66 00 	sts	0x0066, r1
	output_high(PORTB, GreenLED);
	
	
	while(1)
	{	 
		 while(!uart0_available())
 17a:	9b d0       	rcall	.+310    	; 0x2b2 <uart0_available>
 17c:	89 2b       	or	r24, r25
 17e:	b9 f3       	breq	.-18     	; 0x16e <main+0x16>
				 lightOn = 0;
			 }
			 //_delay_ms(10);
		 }
		 
		 if(uart0_getc()=='A') 
 180:	7b d0       	rcall	.+246    	; 0x278 <uart0_getc>
 182:	81 34       	cpi	r24, 0x41	; 65
 184:	91 05       	cpc	r25, r1
 186:	39 f4       	brne	.+14     	; 0x196 <main+0x3e>
		 {
			 lightOn = 1;
 188:	c0 93 66 00 	sts	0x0066, r28
			 lightcounter = 0;
 18c:	10 92 65 00 	sts	0x0065, r1
			 timeOff = 0;
 190:	10 92 64 00 	sts	0x0064, r1
 194:	f2 cf       	rjmp	.-28     	; 0x17a <main+0x22>
			// output_low(PORTB, GreenLED);
		 }
		 else
		 {
			lightOn = 0;
 196:	10 92 66 00 	sts	0x0066, r1
 19a:	ef cf       	rjmp	.-34     	; 0x17a <main+0x22>

0000019c <__vector_11>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
 19c:	1f 92       	push	r1
 19e:	0f 92       	push	r0
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	0f 92       	push	r0
 1a4:	11 24       	eor	r1, r1
 1a6:	2f 93       	push	r18
 1a8:	3f 93       	push	r19
 1aa:	4f 93       	push	r20
 1ac:	5f 93       	push	r21
 1ae:	8f 93       	push	r24
 1b0:	9f 93       	push	r25
 1b2:	ef 93       	push	r30
 1b4:	ff 93       	push	r31
    uint8_t data;
    uint8_t usr;
    uint8_t lastRxError;
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
 1b6:	4b b1       	in	r20, 0x0b	; 11
    data = UART0_DATA;
 1b8:	5c b1       	in	r21, 0x0c	; 12
    
    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
 1ba:	48 71       	andi	r20, 0x18	; 24
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX0_BUFFER_MASK;
 1bc:	80 91 6c 00 	lds	r24, 0x006C
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	01 96       	adiw	r24, 0x01	; 1
 1c4:	8f 77       	andi	r24, 0x7F	; 127
 1c6:	99 27       	eor	r25, r25
    
    if ( tmphead == UART_RxTail ) {
 1c8:	20 91 6b 00 	lds	r18, 0x006B
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	28 17       	cp	r18, r24
 1d0:	39 07       	cpc	r19, r25
 1d2:	39 f0       	breq	.+14     	; 0x1e2 <__vector_11+0x46>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    } else {
        /* store new index */
        UART_RxHead = tmphead;
 1d4:	80 93 6c 00 	sts	0x006C, r24
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 1d8:	fc 01       	movw	r30, r24
 1da:	e1 59       	subi	r30, 0x91	; 145
 1dc:	ff 4f       	sbci	r31, 0xFF	; 255
 1de:	50 83       	st	Z, r21
 1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <__vector_11+0x48>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX0_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 1e2:	42 e0       	ldi	r20, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError = lastRxError;   
 1e4:	40 93 6a 00 	sts	0x006A, r20
}
 1e8:	ff 91       	pop	r31
 1ea:	ef 91       	pop	r30
 1ec:	9f 91       	pop	r25
 1ee:	8f 91       	pop	r24
 1f0:	5f 91       	pop	r21
 1f2:	4f 91       	pop	r20
 1f4:	3f 91       	pop	r19
 1f6:	2f 91       	pop	r18
 1f8:	0f 90       	pop	r0
 1fa:	0f be       	out	0x3f, r0	; 63
 1fc:	0f 90       	pop	r0
 1fe:	1f 90       	pop	r1
 200:	18 95       	reti

00000202 <__vector_12>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 202:	1f 92       	push	r1
 204:	0f 92       	push	r0
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	0f 92       	push	r0
 20a:	11 24       	eor	r1, r1
 20c:	8f 93       	push	r24
 20e:	9f 93       	push	r25
 210:	ef 93       	push	r30
 212:	ff 93       	push	r31
    uint16_t tmptail;

    if ( UART_TxHead != UART_TxTail) {
 214:	90 91 6e 00 	lds	r25, 0x006E
 218:	80 91 6d 00 	lds	r24, 0x006D
 21c:	98 17       	cp	r25, r24
 21e:	71 f0       	breq	.+28     	; 0x23c <__vector_12+0x3a>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX0_BUFFER_MASK;
 220:	80 91 6d 00 	lds	r24, 0x006D
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	01 96       	adiw	r24, 0x01	; 1
 228:	8f 77       	andi	r24, 0x7F	; 127
 22a:	99 27       	eor	r25, r25
        UART_TxTail = tmptail;
 22c:	80 93 6d 00 	sts	0x006D, r24
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 230:	fc 01       	movw	r30, r24
 232:	e1 51       	subi	r30, 0x11	; 17
 234:	ff 4f       	sbci	r31, 0xFF	; 255
 236:	80 81       	ld	r24, Z
 238:	8c b9       	out	0x0c, r24	; 12
 23a:	01 c0       	rjmp	.+2      	; 0x23e <__vector_12+0x3c>
    } else {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 23c:	55 98       	cbi	0x0a, 5	; 10
    }
}
 23e:	ff 91       	pop	r31
 240:	ef 91       	pop	r30
 242:	9f 91       	pop	r25
 244:	8f 91       	pop	r24
 246:	0f 90       	pop	r0
 248:	0f be       	out	0x3f, r0	; 63
 24a:	0f 90       	pop	r0
 24c:	1f 90       	pop	r1
 24e:	18 95       	reti

00000250 <uart0_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart0_init(uint16_t baudrate)
{
	UART_TxHead = 0;
 250:	10 92 6e 00 	sts	0x006E, r1
	UART_TxTail = 0;
 254:	10 92 6d 00 	sts	0x006D, r1
	UART_RxHead = 0;
 258:	10 92 6c 00 	sts	0x006C, r1
	UART_RxTail = 0;
 25c:	10 92 6b 00 	sts	0x006B, r1
	/* enable UART receiver and transmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
	/* Set baud rate */
	if ( baudrate & 0x8000 ) {
 260:	99 23       	and	r25, r25
 262:	1c f4       	brge	.+6      	; 0x26a <uart0_init+0x1a>
		UART0_STATUS = (1<<U2X);  //Enable 2x speed
 264:	22 e0       	ldi	r18, 0x02	; 2
 266:	2b b9       	out	0x0b, r18	; 11
		baudrate &= ~0x8000;
 268:	9f 77       	andi	r25, 0x7F	; 127
	}
	UBRRH = (uint8_t)(baudrate>>8);
 26a:	90 bd       	out	0x20, r25	; 32
	UBRRL = (uint8_t) baudrate;
 26c:	89 b9       	out	0x09, r24	; 9

	/* Enable USART receiver and transmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
 26e:	88 e9       	ldi	r24, 0x98	; 152
 270:	8a b9       	out	0x0a, r24	; 10

	/* Set frame format: asynchronous, 8data, no parity, 1stop bit */
#ifdef URSEL
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
 272:	86 e8       	ldi	r24, 0x86	; 134
 274:	80 bd       	out	0x20, r24	; 32
 276:	08 95       	ret

00000278 <uart0_getc>:
uint16_t uart0_getc(void)
{
	uint16_t tmptail;
	uint8_t data;

	if ( UART_RxHead == UART_RxTail ) {
 278:	90 91 6c 00 	lds	r25, 0x006C
 27c:	80 91 6b 00 	lds	r24, 0x006B
 280:	98 17       	cp	r25, r24
 282:	a1 f0       	breq	.+40     	; 0x2ac <uart0_getc+0x34>
		return UART_NO_DATA;   /* no data available */
	}

	/* calculate /store buffer index */
	tmptail = (UART_RxTail + 1) & UART_RX0_BUFFER_MASK;
 284:	80 91 6b 00 	lds	r24, 0x006B
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	01 96       	adiw	r24, 0x01	; 1
 28c:	8f 77       	andi	r24, 0x7F	; 127
 28e:	99 27       	eor	r25, r25
	UART_RxTail = tmptail;
 290:	80 93 6b 00 	sts	0x006B, r24

	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];
 294:	fc 01       	movw	r30, r24
 296:	e1 59       	subi	r30, 0x91	; 145
 298:	ff 4f       	sbci	r31, 0xFF	; 255
 29a:	20 81       	ld	r18, Z

	return (UART_LastRxError << 8) + data;
 29c:	80 91 6a 00 	lds	r24, 0x006A
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	98 2f       	mov	r25, r24
 2a4:	88 27       	eor	r24, r24
 2a6:	82 0f       	add	r24, r18
 2a8:	91 1d       	adc	r25, r1
 2aa:	08 95       	ret
{
	uint16_t tmptail;
	uint8_t data;

	if ( UART_RxHead == UART_RxTail ) {
		return UART_NO_DATA;   /* no data available */
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	91 e0       	ldi	r25, 0x01	; 1
	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];

	return (UART_LastRxError << 8) + data;

} /* uart0_getc */
 2b0:	08 95       	ret

000002b2 <uart0_available>:
Input:    None
Returns:  Integer number of bytes in the receive buffer
**************************************************************************/
uint16_t uart0_available(void)
{
	return (UART_RX0_BUFFER_SIZE + UART_RxHead - UART_RxTail) & UART_RX0_BUFFER_MASK;
 2b2:	80 91 6c 00 	lds	r24, 0x006C
 2b6:	20 91 6b 00 	lds	r18, 0x006B
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	80 58       	subi	r24, 0x80	; 128
 2be:	9f 4f       	sbci	r25, 0xFF	; 255
 2c0:	82 1b       	sub	r24, r18
 2c2:	91 09       	sbc	r25, r1
} /* uart0_available */
 2c4:	8f 77       	andi	r24, 0x7F	; 127
 2c6:	99 27       	eor	r25, r25
 2c8:	08 95       	ret

000002ca <_exit>:
 2ca:	f8 94       	cli

000002cc <__stop_program>:
 2cc:	ff cf       	rjmp	.-2      	; 0x2cc <__stop_program>
