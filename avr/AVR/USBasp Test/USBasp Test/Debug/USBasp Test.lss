
USBasp Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000110  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000fe  00000000  00000000  0000014b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000009d  00000000  00000000  00000249  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000019f  00000000  00000000  000002e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000488  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000e0  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000028  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000060  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	02 d0       	rcall	.+4      	; 0x30 <main>
  2c:	45 c0       	rjmp	.+138    	; 0xb8 <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <main>:



int main(void)
{
	set_input(DDRB, Switch1);
  30:	e7 e3       	ldi	r30, 0x37	; 55
  32:	f0 e0       	ldi	r31, 0x00	; 0
  34:	80 81       	ld	r24, Z
  36:	87 7f       	andi	r24, 0xF7	; 247
  38:	80 83       	st	Z, r24
	set_input(DDRB, Switch2);
  3a:	80 81       	ld	r24, Z
  3c:	8f 7e       	andi	r24, 0xEF	; 239
  3e:	80 83       	st	Z, r24
	set_output(DDRB, GreenLED);
  40:	80 81       	ld	r24, Z
  42:	81 60       	ori	r24, 0x01	; 1
  44:	80 83       	st	Z, r24
	set_output(DDRB, YellowLED);
  46:	80 81       	ld	r24, Z
  48:	82 60       	ori	r24, 0x02	; 2
  4a:	80 83       	st	Z, r24
	set_output(DDRB, RedLED);
  4c:	80 81       	ld	r24, Z
  4e:	84 60       	ori	r24, 0x04	; 4
  50:	80 83       	st	Z, r24
	
	while(1)
	{
		if(is_set(PINB, Switch1) && is_set(PINB, Switch2))
  52:	a6 e3       	ldi	r26, 0x36	; 54
  54:	b0 e0       	ldi	r27, 0x00	; 0
			output_high(PORTB, YellowLED);
			output_high(PORTB, GreenLED);
		}
		else
		{
			output_low(PORTB, YellowLED);
  56:	e8 e3       	ldi	r30, 0x38	; 56
  58:	f0 e0       	ldi	r31, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  5a:	28 ea       	ldi	r18, 0xA8	; 168
  5c:	31 e6       	ldi	r19, 0x61	; 97
	set_output(DDRB, YellowLED);
	set_output(DDRB, RedLED);
	
	while(1)
	{
		if(is_set(PINB, Switch1) && is_set(PINB, Switch2))
  5e:	8c 91       	ld	r24, X
  60:	83 ff       	sbrs	r24, 3
  62:	0d c0       	rjmp	.+26     	; 0x7e <__SREG__+0x3f>
  64:	8c 91       	ld	r24, X
  66:	84 ff       	sbrs	r24, 4
  68:	0a c0       	rjmp	.+20     	; 0x7e <__SREG__+0x3f>
		{
			output_low(PORTB, GreenLED);
  6a:	80 81       	ld	r24, Z
  6c:	8e 7f       	andi	r24, 0xFE	; 254
  6e:	80 83       	st	Z, r24
			output_high(PORTB, RedLED);
  70:	80 81       	ld	r24, Z
  72:	84 60       	ori	r24, 0x04	; 4
  74:	80 83       	st	Z, r24
			output_high(PORTB, YellowLED);
  76:	80 81       	ld	r24, Z
  78:	82 60       	ori	r24, 0x02	; 2
  7a:	80 83       	st	Z, r24
  7c:	19 c0       	rjmp	.+50     	; 0xb0 <__SREG__+0x71>
		}
		
		else if(is_clear(PINB, Switch1) && is_clear(PINB, Switch2))
  7e:	8c 91       	ld	r24, X
  80:	83 fd       	sbrc	r24, 3
  82:	0d c0       	rjmp	.+26     	; 0x9e <__SREG__+0x5f>
  84:	8c 91       	ld	r24, X
  86:	84 fd       	sbrc	r24, 4
  88:	0a c0       	rjmp	.+20     	; 0x9e <__SREG__+0x5f>
		{
			output_low(PORTB, RedLED);
  8a:	80 81       	ld	r24, Z
  8c:	8b 7f       	andi	r24, 0xFB	; 251
  8e:	80 83       	st	Z, r24
			output_high(PORTB, YellowLED);
  90:	80 81       	ld	r24, Z
  92:	82 60       	ori	r24, 0x02	; 2
  94:	80 83       	st	Z, r24
			output_high(PORTB, GreenLED);
  96:	80 81       	ld	r24, Z
  98:	81 60       	ori	r24, 0x01	; 1
  9a:	80 83       	st	Z, r24
  9c:	09 c0       	rjmp	.+18     	; 0xb0 <__SREG__+0x71>
		}
		else
		{
			output_low(PORTB, YellowLED);
  9e:	80 81       	ld	r24, Z
  a0:	8d 7f       	andi	r24, 0xFD	; 253
  a2:	80 83       	st	Z, r24
			output_high(PORTB, RedLED);
  a4:	80 81       	ld	r24, Z
  a6:	84 60       	ori	r24, 0x04	; 4
  a8:	80 83       	st	Z, r24
			output_high(PORTB, GreenLED);
  aa:	80 81       	ld	r24, Z
  ac:	81 60       	ori	r24, 0x01	; 1
  ae:	80 83       	st	Z, r24
  b0:	c9 01       	movw	r24, r18
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <__SREG__+0x73>
  b6:	d3 cf       	rjmp	.-90     	; 0x5e <__SREG__+0x1f>

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>
