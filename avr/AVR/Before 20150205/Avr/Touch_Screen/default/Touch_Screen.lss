
Touch_Screen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000906  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000076  00800060  00000906  0000099a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000055  008000d6  008000d6  00000a10  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000363  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009f1  00000000  00000000  00000db3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000314  00000000  00000000  000017a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009b6  00000000  00000000  00001ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000210  00000000  00000000  00002470  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035d  00000000  00000000  00002680  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004c6  00000000  00000000  000029dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 17 02 	jmp	0x42e	; 0x42e <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 8c 03 	jmp	0x718	; 0x718 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e0       	ldi	r30, 0x06	; 6
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 3d       	cpi	r26, 0xD6	; 214
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a6 ed       	ldi	r26, 0xD6	; 214
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 32       	cpi	r26, 0x2B	; 43
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 aa 02 	call	0x554	; 0x554 <main>
  8a:	0c 94 81 04 	jmp	0x902	; 0x902 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <InitTimer>:
//*********************************************************

void InitTimer()
{
   // Prescaler = FCPU/256/256 = 61.0352 hz 
   TCCR0|=(1<<CS02)|(0<<CS00)|(0<<CS00);
  92:	83 b7       	in	r24, 0x33	; 51
  94:	84 60       	ori	r24, 0x04	; 4
  96:	83 bf       	out	0x33, r24	; 51

   //Enable Overflow Interrupt Enable
   TIMSK|=(1<<TOIE0);
  98:	89 b7       	in	r24, 0x39	; 57
  9a:	81 60       	ori	r24, 0x01	; 1
  9c:	89 bf       	out	0x39, r24	; 57

   //Initialize Counter
   TCNT0=0;
  9e:	12 be       	out	0x32, r1	; 50

   //Initialize our varriable
   count=0;
  a0:	10 92 29 01 	sts	0x0129, r1
   //sei();
}
  a4:	08 95       	ret

000000a6 <InitADC>:
	Command_Display(Clear_Screen);
}
 
void InitADC()
{
ADMUX=(1<<REFS0);                         // For Aref=AVcc;
  a6:	80 e4       	ldi	r24, 0x40	; 64
  a8:	87 b9       	out	0x07, r24	; 7
ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADIE); //Rrescalar div factor =128
  aa:	8f e8       	ldi	r24, 0x8F	; 143
  ac:	86 b9       	out	0x06, r24	; 6
sei();  //start interrupt
  ae:	78 94       	sei
}
  b0:	08 95       	ret

000000b2 <Wait>:
   }
}

//********************************************************************************
void Wait(uint8_t time)
{
  b2:	90 e0       	ldi	r25, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b4:	20 e0       	ldi	r18, 0x00	; 0
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	04 c0       	rjmp	.+8      	; 0xc2 <Wait+0x10>
  ba:	f9 01       	movw	r30, r18
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <Wait+0xa>
   uint8_t i;
   for(i=0;i<time;i++)
  c0:	9f 5f       	subi	r25, 0xFF	; 255
  c2:	98 17       	cp	r25, r24
  c4:	d0 f3       	brcs	.-12     	; 0xba <Wait+0x8>
      _delay_loop_2(0); 
}
  c6:	08 95       	ret

000000c8 <ReadADC>:

uint16_t ReadADC(uint8_t ch)
{
   //Select ADC Channel ch must be 0-7
   ch=ch&0b00000111;
   ADMUX|=ch;
  c8:	97 b1       	in	r25, 0x07	; 7
  ca:	87 70       	andi	r24, 0x07	; 7
  cc:	89 2b       	or	r24, r25
  ce:	87 b9       	out	0x07, r24	; 7

   //Start Single conversion
   ADCSRA|=(1<<ADSC);
  d0:	36 9a       	sbi	0x06, 6	; 6

   //Wait for conversion to complete
   while(!(ADCSRA & (1<<ADIF)));
  d2:	34 9b       	sbis	0x06, 4	; 6
  d4:	fe cf       	rjmp	.-4      	; 0xd2 <ReadADC+0xa>
   //Clear ADIF by writing one to it
   //Note you may be wondering why we have write one to clear it
   //This is standard way of clearing bits in io as said in datasheets.
   //The code writes '1' but it result in setting bit to '0' !!!

   ADCSRA|=(1<<ADIF);
  d6:	34 9a       	sbi	0x06, 4	; 6

   return(ADC); 
  d8:	24 b1       	in	r18, 0x04	; 4
  da:	35 b1       	in	r19, 0x05	; 5
}
  dc:	c9 01       	movw	r24, r18
  de:	08 95       	ret

000000e0 <RESET_vect>:
} 


//******************************************************************************
ISR(RESET_vect)
{
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1

}
  ea:	0f 90       	pop	r0
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	0f 90       	pop	r0
  f0:	1f 90       	pop	r1
  f2:	18 95       	reti

000000f4 <__vector_1>:


ISR(INT0_vect)
{
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
		//	pulse_incr -= 2;
	//	}
	//	brightness = INCREASING;
		//slider_value = 0x00;				// Start new cycle with LED off
//	}
}
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <WriteString>:

   return(ADC); 
}

void WriteString(unsigned char *strPointer)
{   
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	ec 01       	movw	r28, r24
 10e:	03 c0       	rjmp	.+6      	; 0x116 <WriteString+0xe>
   while (*strPointer)
   {
      UWriteData(*strPointer);
 110:	0e 94 09 04 	call	0x812	; 0x812 <UWriteData>
      strPointer++;   
 114:	21 96       	adiw	r28, 0x01	; 1
   return(ADC); 
}

void WriteString(unsigned char *strPointer)
{   
   while (*strPointer)
 116:	88 81       	ld	r24, Y
 118:	88 23       	and	r24, r24
 11a:	d1 f7       	brne	.-12     	; 0x110 <WriteString+0x8>
      UWriteData(*strPointer);
      strPointer++;   
   }
   
   return;
} 
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	08 95       	ret

00000122 <Write_Blank>:
   for(i=0;i<time;i++)
      _delay_loop_2(0); 
}

void Write_Blank(uint8_t spaces)
{
 122:	0f 93       	push	r16
 124:	1f 93       	push	r17
 126:	08 2f       	mov	r16, r24
 128:	10 e0       	ldi	r17, 0x00	; 0
 12a:	05 c0       	rjmp	.+10     	; 0x136 <Write_Blank+0x14>
   uint8_t i;
   for(i=0;i<spaces;i++)
      WriteString(Empty);  
 12c:	8e ec       	ldi	r24, 0xCE	; 206
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 84 00 	call	0x108	; 0x108 <WriteString>
}

void Write_Blank(uint8_t spaces)
{
   uint8_t i;
   for(i=0;i<spaces;i++)
 134:	1f 5f       	subi	r17, 0xFF	; 255
 136:	10 17       	cp	r17, r16
 138:	c8 f3       	brcs	.-14     	; 0x12c <Write_Blank+0xa>
      WriteString(Empty);  
}
 13a:	1f 91       	pop	r17
 13c:	0f 91       	pop	r16
 13e:	08 95       	ret

00000140 <Command_Display>:
	Command_Display(Set_Font);
	UWriteData(font_id);
} 

void Command_Display(unsigned char command)
{	
 140:	1f 93       	push	r17
 142:	18 2f       	mov	r17, r24
	UWriteData(CMD);
 144:	8e ef       	ldi	r24, 0xFE	; 254
 146:	0e 94 09 04 	call	0x812	; 0x812 <UWriteData>
	UWriteData(command);
 14a:	81 2f       	mov	r24, r17
 14c:	0e 94 09 04 	call	0x812	; 0x812 <UWriteData>
}
 150:	1f 91       	pop	r17
 152:	08 95       	ret

00000154 <Touch_Calibration>:
	UWriteData(key_up);
}

void Touch_Calibration()
{	
	Command_Display(Touch_Calibrat);
 154:	8b e8       	ldi	r24, 0x8B	; 139
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 a0 00 	call	0x140	; 0x140 <Command_Display>

}
 15c:	08 95       	ret

0000015e <Cursor_Coordinate>:
	UWriteData(col);
	UWriteData(row);
}

void Cursor_Coordinate(unsigned char horiz, unsigned char vert)
{	
 15e:	0f 93       	push	r16
 160:	1f 93       	push	r17
 162:	18 2f       	mov	r17, r24
 164:	06 2f       	mov	r16, r22
	Command_Display(Cursor_Cord);
 166:	89 e7       	ldi	r24, 0x79	; 121
 168:	0e 94 a0 00 	call	0x140	; 0x140 <Command_Display>
	UWriteData(horiz);
 16c:	81 2f       	mov	r24, r17
 16e:	0e 94 09 04 	call	0x812	; 0x812 <UWriteData>
	UWriteData(vert);
 172:	80 2f       	mov	r24, r16
 174:	0e 94 09 04 	call	0x812	; 0x812 <UWriteData>
}
 178:	1f 91       	pop	r17
 17a:	0f 91       	pop	r16
 17c:	08 95       	ret

0000017e <__vector_16>:
		//slider_value = 0x00;				// Start new cycle with LED off
//	}
}

ISR(ADC_vect)
{
 17e:	1f 92       	push	r1
 180:	0f 92       	push	r0
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	0f 92       	push	r0
 186:	11 24       	eor	r1, r1
 188:	2f 93       	push	r18
 18a:	3f 93       	push	r19
 18c:	4f 93       	push	r20
 18e:	5f 93       	push	r21
 190:	6f 93       	push	r22
 192:	7f 93       	push	r23
 194:	8f 93       	push	r24
 196:	9f 93       	push	r25
 198:	af 93       	push	r26
 19a:	bf 93       	push	r27
 19c:	ef 93       	push	r30
 19e:	ff 93       	push	r31
	adc_result=ADC; 
 1a0:	24 b1       	in	r18, 0x04	; 4
 1a2:	35 b1       	in	r19, 0x05	; 5
 1a4:	30 93 e3 00 	sts	0x00E3, r19
 1a8:	20 93 e2 00 	sts	0x00E2, r18
	if(abs(temp-adc_result) > 2)
 1ac:	40 91 d6 00 	lds	r20, 0x00D6
 1b0:	50 91 d7 00 	lds	r21, 0x00D7
 1b4:	ca 01       	movw	r24, r20
 1b6:	82 1b       	sub	r24, r18
 1b8:	93 0b       	sbc	r25, r19
 1ba:	97 ff       	sbrs	r25, 7
 1bc:	03 c0       	rjmp	.+6      	; 0x1c4 <__vector_16+0x46>
 1be:	90 95       	com	r25
 1c0:	81 95       	neg	r24
 1c2:	9f 4f       	sbci	r25, 0xFF	; 255
 1c4:	03 97       	sbiw	r24, 0x03	; 3
 1c6:	44 f1       	brlt	.+80     	; 0x218 <__vector_16+0x9a>
	{
		if(temp > adc_result)
 1c8:	24 17       	cp	r18, r20
 1ca:	35 07       	cpc	r19, r21
 1cc:	18 f0       	brcs	.+6      	; 0x1d4 <__vector_16+0x56>
			whole = adc_result;///204;
			//WriteString(Value);
			itoa(whole, message1, 10); 
			WriteString(message1);
		}
		else if(temp < adc_result)
 1ce:	42 17       	cp	r20, r18
 1d0:	53 07       	cpc	r21, r19
 1d2:	10 f5       	brcc	.+68     	; 0x218 <__vector_16+0x9a>
		{
			temp = adc_result;
 1d4:	30 93 d7 00 	sts	0x00D7, r19
 1d8:	20 93 d6 00 	sts	0x00D6, r18
			//Command_Display(Go_Home);
			//Cursor_Pos(4,5);
			Cursor_Coordinate(90,60);
 1dc:	8a e5       	ldi	r24, 0x5A	; 90
 1de:	6c e3       	ldi	r22, 0x3C	; 60
 1e0:	0e 94 af 00 	call	0x15e	; 0x15e <Cursor_Coordinate>
			Write_Blank(10);
 1e4:	8a e0       	ldi	r24, 0x0A	; 10
 1e6:	0e 94 91 00 	call	0x122	; 0x122 <Write_Blank>
			//Command_Display(Go_Home);
			//Cursor_Pos(4,5);
			Cursor_Coordinate(90,60);
 1ea:	8a e5       	ldi	r24, 0x5A	; 90
 1ec:	6c e3       	ldi	r22, 0x3C	; 60
 1ee:	0e 94 af 00 	call	0x15e	; 0x15e <Cursor_Coordinate>
			whole = adc_result;///204;
 1f2:	80 91 e2 00 	lds	r24, 0x00E2
 1f6:	90 91 e3 00 	lds	r25, 0x00E3
 1fa:	90 93 e1 00 	sts	0x00E1, r25
 1fe:	80 93 e0 00 	sts	0x00E0, r24
			//WriteString(Value);
			itoa(whole, message1, 10); 
 202:	6e ed       	ldi	r22, 0xDE	; 222
 204:	70 e0       	ldi	r23, 0x00	; 0
 206:	4a e0       	ldi	r20, 0x0A	; 10
 208:	50 e0       	ldi	r21, 0x00	; 0
 20a:	0e 94 3c 04 	call	0x878	; 0x878 <itoa>
			WriteString(message1);
 20e:	8e ed       	ldi	r24, 0xDE	; 222
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 84 00 	call	0x108	; 0x108 <WriteString>
 216:	04 c0       	rjmp	.+8      	; 0x220 <__vector_16+0xa2>
			temp = adc_result;
		}
	}
	else
	{
		temp = adc_result;
 218:	30 93 d7 00 	sts	0x00D7, r19
 21c:	20 93 d6 00 	sts	0x00D6, r18
	}

}
 220:	ff 91       	pop	r31
 222:	ef 91       	pop	r30
 224:	bf 91       	pop	r27
 226:	af 91       	pop	r26
 228:	9f 91       	pop	r25
 22a:	8f 91       	pop	r24
 22c:	7f 91       	pop	r23
 22e:	6f 91       	pop	r22
 230:	5f 91       	pop	r21
 232:	4f 91       	pop	r20
 234:	3f 91       	pop	r19
 236:	2f 91       	pop	r18
 238:	0f 90       	pop	r0
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	0f 90       	pop	r0
 23e:	1f 90       	pop	r1
 240:	18 95       	reti

00000242 <Cursor_Pos>:
	UWriteData(CMD);
	UWriteData(command);
}

void Cursor_Pos(unsigned char col, unsigned char row)
{	
 242:	0f 93       	push	r16
 244:	1f 93       	push	r17
 246:	18 2f       	mov	r17, r24
 248:	06 2f       	mov	r16, r22
	Command_Display(Cursor);
 24a:	87 e4       	ldi	r24, 0x47	; 71
 24c:	0e 94 a0 00 	call	0x140	; 0x140 <Command_Display>
	UWriteData(col);
 250:	81 2f       	mov	r24, r17
 252:	0e 94 09 04 	call	0x812	; 0x812 <UWriteData>
	UWriteData(row);
 256:	80 2f       	mov	r24, r16
 258:	0e 94 09 04 	call	0x812	; 0x812 <UWriteData>
}
 25c:	1f 91       	pop	r17
 25e:	0f 91       	pop	r16
 260:	08 95       	ret

00000262 <Choose_Font>:
	Command_Display(Drawing_Color);
	UWriteData(color);
}

void Choose_Font(unsigned char font_id)
{
 262:	1f 93       	push	r17
 264:	18 2f       	mov	r17, r24
	Command_Display(Set_Font);
 266:	81 e3       	ldi	r24, 0x31	; 49
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 a0 00 	call	0x140	; 0x140 <Command_Display>
	UWriteData(font_id);
 26e:	81 2f       	mov	r24, r17
 270:	0e 94 09 04 	call	0x812	; 0x812 <UWriteData>
} 
 274:	1f 91       	pop	r17
 276:	08 95       	ret

00000278 <Choose_Color>:
	UWriteData(x);
	UWriteData(y);
}

void Choose_Color(unsigned char color)
{
 278:	1f 93       	push	r17
 27a:	18 2f       	mov	r17, r24
	Command_Display(Drawing_Color);
 27c:	83 e6       	ldi	r24, 0x63	; 99
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	0e 94 a0 00 	call	0x140	; 0x140 <Command_Display>
	UWriteData(color);
 284:	81 2f       	mov	r24, r17
 286:	0e 94 09 04 	call	0x812	; 0x812 <UWriteData>
}
 28a:	1f 91       	pop	r17
 28c:	08 95       	ret

0000028e <Draw_Pixel_At>:
	UWriteData(x2);
	UWriteData(y2);
}

void Draw_Pixel_At(unsigned char x, unsigned char y)
{	
 28e:	0f 93       	push	r16
 290:	1f 93       	push	r17
 292:	18 2f       	mov	r17, r24
 294:	06 2f       	mov	r16, r22
	Command_Display(Draw_Pixel);
 296:	80 e7       	ldi	r24, 0x70	; 112
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 a0 00 	call	0x140	; 0x140 <Command_Display>
	UWriteData(x);
 29e:	81 2f       	mov	r24, r17
 2a0:	0e 94 09 04 	call	0x812	; 0x812 <UWriteData>
	UWriteData(y);
 2a4:	80 2f       	mov	r24, r16
 2a6:	0e 94 09 04 	call	0x812	; 0x812 <UWriteData>
}
 2aa:	1f 91       	pop	r17
 2ac:	0f 91       	pop	r16
 2ae:	08 95       	ret

000002b0 <Draw_Line_At>:
	UWriteData(y);

}

void Draw_Line_At(unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2)
{	
 2b0:	ef 92       	push	r14
 2b2:	ff 92       	push	r15
 2b4:	0f 93       	push	r16
 2b6:	1f 93       	push	r17
 2b8:	18 2f       	mov	r17, r24
 2ba:	06 2f       	mov	r16, r22
 2bc:	f4 2e       	mov	r15, r20
 2be:	e2 2e       	mov	r14, r18
	Command_Display(Drawing_Line);
 2c0:	8c e6       	ldi	r24, 0x6C	; 108
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	0e 94 a0 00 	call	0x140	; 0x140 <Command_Display>
	UWriteData(x1);
 2c8:	81 2f       	mov	r24, r17
 2ca:	0e 94 09 04 	call	0x812	; 0x812 <UWriteData>
	UWriteData(y1);
 2ce:	80 2f       	mov	r24, r16
 2d0:	0e 94 09 04 	call	0x812	; 0x812 <UWriteData>
	UWriteData(x2);
 2d4:	8f 2d       	mov	r24, r15
 2d6:	0e 94 09 04 	call	0x812	; 0x812 <UWriteData>
	UWriteData(y2);
 2da:	8e 2d       	mov	r24, r14
 2dc:	0e 94 09 04 	call	0x812	; 0x812 <UWriteData>
}
 2e0:	1f 91       	pop	r17
 2e2:	0f 91       	pop	r16
 2e4:	ff 90       	pop	r15
 2e6:	ef 90       	pop	r14
 2e8:	08 95       	ret

000002ea <Continue_Line_To>:
	UWriteData(x2);
	UWriteData(y2);
}

void Continue_Line_To(unsigned char x, unsigned char y)
{	
 2ea:	0f 93       	push	r16
 2ec:	1f 93       	push	r17
 2ee:	18 2f       	mov	r17, r24
 2f0:	06 2f       	mov	r16, r22
	Command_Display(Continue_Line);
 2f2:	85 e6       	ldi	r24, 0x65	; 101
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 a0 00 	call	0x140	; 0x140 <Command_Display>
	UWriteData(x);
 2fa:	81 2f       	mov	r24, r17
 2fc:	0e 94 09 04 	call	0x812	; 0x812 <UWriteData>
	UWriteData(y);
 300:	80 2f       	mov	r24, r16
 302:	0e 94 09 04 	call	0x812	; 0x812 <UWriteData>

}
 306:	1f 91       	pop	r17
 308:	0f 91       	pop	r16
 30a:	08 95       	ret

0000030c <Draw_Rect_At>:
	UWriteData(x2);
	UWriteData(y2);
}

void Draw_Rect_At(unsigned char color, unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2)
{	
 30c:	df 92       	push	r13
 30e:	ef 92       	push	r14
 310:	ff 92       	push	r15
 312:	0f 93       	push	r16
 314:	1f 93       	push	r17
 316:	18 2f       	mov	r17, r24
 318:	f6 2e       	mov	r15, r22
 31a:	e4 2e       	mov	r14, r20
 31c:	d2 2e       	mov	r13, r18
	Command_Display(Draw_Rectangle);
 31e:	82 e7       	ldi	r24, 0x72	; 114
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 a0 00 	call	0x140	; 0x140 <Command_Display>
	UWriteData(color);
 326:	81 2f       	mov	r24, r17
 328:	0e 94 09 04 	call	0x812	; 0x812 <UWriteData>
	UWriteData(x1);
 32c:	8f 2d       	mov	r24, r15
 32e:	0e 94 09 04 	call	0x812	; 0x812 <UWriteData>
	UWriteData(y1);
 332:	8e 2d       	mov	r24, r14
 334:	0e 94 09 04 	call	0x812	; 0x812 <UWriteData>
	UWriteData(x2);
 338:	8d 2d       	mov	r24, r13
 33a:	0e 94 09 04 	call	0x812	; 0x812 <UWriteData>
	UWriteData(y2);
 33e:	80 2f       	mov	r24, r16
 340:	0e 94 09 04 	call	0x812	; 0x812 <UWriteData>
}
 344:	1f 91       	pop	r17
 346:	0f 91       	pop	r16
 348:	ff 90       	pop	r15
 34a:	ef 90       	pop	r14
 34c:	df 90       	pop	r13
 34e:	08 95       	ret

00000350 <Draw_Solid_Rect>:
	Command_Display(Touch_Calibrat);

}

void Draw_Solid_Rect(unsigned char color, unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2)
{	
 350:	df 92       	push	r13
 352:	ef 92       	push	r14
 354:	ff 92       	push	r15
 356:	0f 93       	push	r16
 358:	1f 93       	push	r17
 35a:	18 2f       	mov	r17, r24
 35c:	f6 2e       	mov	r15, r22
 35e:	e4 2e       	mov	r14, r20
 360:	d2 2e       	mov	r13, r18
	Command_Display(DRW_Solid_Rect);
 362:	88 e7       	ldi	r24, 0x78	; 120
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0e 94 a0 00 	call	0x140	; 0x140 <Command_Display>
	UWriteData(color);
 36a:	81 2f       	mov	r24, r17
 36c:	0e 94 09 04 	call	0x812	; 0x812 <UWriteData>
	UWriteData(x1);
 370:	8f 2d       	mov	r24, r15
 372:	0e 94 09 04 	call	0x812	; 0x812 <UWriteData>
	UWriteData(y1);
 376:	8e 2d       	mov	r24, r14
 378:	0e 94 09 04 	call	0x812	; 0x812 <UWriteData>
	UWriteData(x2);
 37c:	8d 2d       	mov	r24, r13
 37e:	0e 94 09 04 	call	0x812	; 0x812 <UWriteData>
	UWriteData(y2);
 382:	80 2f       	mov	r24, r16
 384:	0e 94 09 04 	call	0x812	; 0x812 <UWriteData>
}
 388:	1f 91       	pop	r17
 38a:	0f 91       	pop	r16
 38c:	ff 90       	pop	r15
 38e:	ef 90       	pop	r14
 390:	df 90       	pop	r13
 392:	08 95       	ret

00000394 <Set_Touch_Region>:
	Command_Display(Touch_Mode);
	UWriteData(touch_mode);
}
void Set_Touch_Region(unsigned char RegNum, unsigned char x, unsigned char y, 
						unsigned char w, unsigned char h, unsigned char key_down, unsigned char key_up)
{
 394:	bf 92       	push	r11
 396:	cf 92       	push	r12
 398:	df 92       	push	r13
 39a:	ef 92       	push	r14
 39c:	ff 92       	push	r15
 39e:	0f 93       	push	r16
 3a0:	1f 93       	push	r17
 3a2:	18 2f       	mov	r17, r24
 3a4:	f6 2e       	mov	r15, r22
 3a6:	d4 2e       	mov	r13, r20
 3a8:	b2 2e       	mov	r11, r18
	Command_Display(Touch_Region);
 3aa:	84 e8       	ldi	r24, 0x84	; 132
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 a0 00 	call	0x140	; 0x140 <Command_Display>
	UWriteData(RegNum);
 3b2:	81 2f       	mov	r24, r17
 3b4:	0e 94 09 04 	call	0x812	; 0x812 <UWriteData>
	UWriteData(x);
 3b8:	8f 2d       	mov	r24, r15
 3ba:	0e 94 09 04 	call	0x812	; 0x812 <UWriteData>
	UWriteData(y);
 3be:	8d 2d       	mov	r24, r13
 3c0:	0e 94 09 04 	call	0x812	; 0x812 <UWriteData>
	UWriteData(w);
 3c4:	8b 2d       	mov	r24, r11
 3c6:	0e 94 09 04 	call	0x812	; 0x812 <UWriteData>
	UWriteData(h);
 3ca:	80 2f       	mov	r24, r16
 3cc:	0e 94 09 04 	call	0x812	; 0x812 <UWriteData>
	UWriteData(key_down);
 3d0:	8e 2d       	mov	r24, r14
 3d2:	0e 94 09 04 	call	0x812	; 0x812 <UWriteData>
	UWriteData(key_up);
 3d6:	8c 2d       	mov	r24, r12
 3d8:	0e 94 09 04 	call	0x812	; 0x812 <UWriteData>
}
 3dc:	1f 91       	pop	r17
 3de:	0f 91       	pop	r16
 3e0:	ff 90       	pop	r15
 3e2:	ef 90       	pop	r14
 3e4:	df 90       	pop	r13
 3e6:	cf 90       	pop	r12
 3e8:	bf 90       	pop	r11
 3ea:	08 95       	ret

000003ec <Set_Touch_Mode>:
      WriteString(Empty);  
}


void Set_Touch_Mode(unsigned char touch_mode)
{
 3ec:	1f 93       	push	r17
 3ee:	18 2f       	mov	r17, r24
	Command_Display(Touch_Mode);
 3f0:	87 e8       	ldi	r24, 0x87	; 135
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	0e 94 a0 00 	call	0x140	; 0x140 <Command_Display>
	UWriteData(touch_mode);
 3f8:	81 2f       	mov	r24, r17
 3fa:	0e 94 09 04 	call	0x812	; 0x812 <UWriteData>
}
 3fe:	1f 91       	pop	r17
 400:	08 95       	ret

00000402 <InitDisplay>:
   //sei();
}

void InitDisplay()
{
	Command_Display(Display_On);
 402:	82 e4       	ldi	r24, 0x42	; 66
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	0e 94 a0 00 	call	0x140	; 0x140 <Command_Display>
	Choose_Font(Small_Filled);
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	0e 94 31 01 	call	0x262	; 0x262 <Choose_Font>
	Choose_Color(color);
 412:	80 91 d4 00 	lds	r24, 0x00D4
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	0e 94 3c 01 	call	0x278	; 0x278 <Choose_Color>
	Set_Touch_Mode(Co_ordinate); // Region or Co_ordinate
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	0e 94 f6 01 	call	0x3ec	; 0x3ec <Set_Touch_Mode>
	//Set_Touch_Region(1, 90, 90, 35, 35, 170, 195);
	Command_Display(Clear_Screen);
 424:	88 e5       	ldi	r24, 0x58	; 88
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	0e 94 a0 00 	call	0x140	; 0x140 <Command_Display>
}
 42c:	08 95       	ret

0000042e <__vector_11>:
	}

}

ISR(TIMER0_OVF_vect)
{
 42e:	1f 92       	push	r1
 430:	0f 92       	push	r0
 432:	0f b6       	in	r0, 0x3f	; 63
 434:	0f 92       	push	r0
 436:	11 24       	eor	r1, r1
 438:	2f 93       	push	r18
 43a:	3f 93       	push	r19
 43c:	4f 93       	push	r20
 43e:	5f 93       	push	r21
 440:	6f 93       	push	r22
 442:	7f 93       	push	r23
 444:	8f 93       	push	r24
 446:	9f 93       	push	r25
 448:	af 93       	push	r26
 44a:	bf 93       	push	r27
 44c:	ef 93       	push	r30
 44e:	ff 93       	push	r31
   //This is the interrupt service routine for TIMER0 OVERFLOW Interrupt.
   //CPU automatically call this when TIMER0 overflows.

   //Increment our variable
   count++;
 450:	80 91 29 01 	lds	r24, 0x0129
 454:	8f 5f       	subi	r24, 0xFF	; 255
 456:	80 93 29 01 	sts	0x0129, r24
   if(count==20)  //61 = 1 sec : 20 = 1/3 sec
 45a:	80 91 29 01 	lds	r24, 0x0129
 45e:	84 31       	cpi	r24, 0x14	; 20
 460:	09 f0       	breq	.+2      	; 0x464 <__vector_11+0x36>
 462:	67 c0       	rjmp	.+206    	; 0x532 <__vector_11+0x104>
   {
      ADCSRA|=(1<<ADSC);
 464:	36 9a       	sbi	0x06, 6	; 6
	  data=PINC;
 466:	83 b3       	in	r24, 0x13	; 19
 468:	80 93 e7 00 	sts	0x00E7, r24
		if(data == 0xFE) //FE FD FB F7 EF DF BF 7F
 46c:	8e 3f       	cpi	r24, 0xFE	; 254
 46e:	61 f4       	brne	.+24     	; 0x488 <__vector_11+0x5a>
		{
			
			Command_Display(Go_Home);
 470:	88 e4       	ldi	r24, 0x48	; 72
 472:	0e 94 a0 00 	call	0x140	; 0x140 <Command_Display>
			Write_Blank(36);
 476:	84 e2       	ldi	r24, 0x24	; 36
 478:	0e 94 91 00 	call	0x122	; 0x122 <Write_Blank>
			Command_Display(Go_Home);
 47c:	88 e4       	ldi	r24, 0x48	; 72
 47e:	0e 94 a0 00 	call	0x140	; 0x140 <Command_Display>
			WriteString(Wulf);
 482:	80 e6       	ldi	r24, 0x60	; 96
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	0d c0       	rjmp	.+26     	; 0x4a2 <__vector_11+0x74>
		}
		else if(data == 0xFD)
 488:	8d 3f       	cpi	r24, 0xFD	; 253
 48a:	71 f4       	brne	.+28     	; 0x4a8 <__vector_11+0x7a>
		{
			Command_Display(Go_Home);
 48c:	88 e4       	ldi	r24, 0x48	; 72
 48e:	0e 94 a0 00 	call	0x140	; 0x140 <Command_Display>
			Write_Blank(36);
 492:	84 e2       	ldi	r24, 0x24	; 36
 494:	0e 94 91 00 	call	0x122	; 0x122 <Write_Blank>
			Command_Display(Go_Home);
 498:	88 e4       	ldi	r24, 0x48	; 72
 49a:	0e 94 a0 00 	call	0x140	; 0x140 <Command_Display>
			WriteString(Status);
 49e:	8a e6       	ldi	r24, 0x6A	; 106
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	0e 94 84 00 	call	0x108	; 0x108 <WriteString>
 4a6:	43 c0       	rjmp	.+134    	; 0x52e <__vector_11+0x100>
		}
		else if(data == 0xFB)
 4a8:	8b 3f       	cpi	r24, 0xFB	; 251
 4aa:	f9 f4       	brne	.+62     	; 0x4ea <__vector_11+0xbc>
		{
			//for(i=1;i<3;i++)
			//	{
					packet[0]=UReadData();
 4ac:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <UReadData>
 4b0:	80 93 da 00 	sts	0x00DA, r24
				//}
			
				p_data=packet[0];
 4b4:	80 93 df 00 	sts	0x00DF, r24
		    	Command_Display(Go_Home);
 4b8:	88 e4       	ldi	r24, 0x48	; 72
 4ba:	0e 94 a0 00 	call	0x140	; 0x140 <Command_Display>
				Write_Blank(36);
 4be:	84 e2       	ldi	r24, 0x24	; 36
 4c0:	0e 94 91 00 	call	0x122	; 0x122 <Write_Blank>
				Command_Display(Go_Home);
 4c4:	88 e4       	ldi	r24, 0x48	; 72
 4c6:	0e 94 a0 00 	call	0x140	; 0x140 <Command_Display>
				WriteString(Packet);
 4ca:	86 e9       	ldi	r24, 0x96	; 150
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	0e 94 84 00 	call	0x108	; 0x108 <WriteString>
				itoa(p_data, message3, 10); 
 4d2:	80 91 df 00 	lds	r24, 0x00DF
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	6a e2       	ldi	r22, 0x2A	; 42
 4da:	71 e0       	ldi	r23, 0x01	; 1
 4dc:	4a e0       	ldi	r20, 0x0A	; 10
 4de:	50 e0       	ldi	r21, 0x00	; 0
 4e0:	0e 94 3c 04 	call	0x878	; 0x878 <itoa>
				WriteString(message3);
 4e4:	8a e2       	ldi	r24, 0x2A	; 42
 4e6:	91 e0       	ldi	r25, 0x01	; 1
 4e8:	dc cf       	rjmp	.-72     	; 0x4a2 <__vector_11+0x74>
		}
		else if(data == 0xF7)
 4ea:	87 3f       	cpi	r24, 0xF7	; 247
 4ec:	51 f4       	brne	.+20     	; 0x502 <__vector_11+0xd4>
		{
			draw_y++;
 4ee:	60 91 d9 00 	lds	r22, 0x00D9
 4f2:	6f 5f       	subi	r22, 0xFF	; 255
 4f4:	60 93 d9 00 	sts	0x00D9, r22
			Draw_Pixel_At(draw_x, draw_y);
 4f8:	80 91 d8 00 	lds	r24, 0x00D8
 4fc:	0e 94 47 01 	call	0x28e	; 0x28e <Draw_Pixel_At>
 500:	16 c0       	rjmp	.+44     	; 0x52e <__vector_11+0x100>
		}
		else if(data == 0xEF)
 502:	8f 3e       	cpi	r24, 0xEF	; 239
 504:	31 f4       	brne	.+12     	; 0x512 <__vector_11+0xe4>
		{
			Command_Display(Display_On);
 506:	82 e4       	ldi	r24, 0x42	; 66
 508:	0e 94 a0 00 	call	0x140	; 0x140 <Command_Display>
			InitDisplay();
 50c:	0e 94 01 02 	call	0x402	; 0x402 <InitDisplay>
 510:	0e c0       	rjmp	.+28     	; 0x52e <__vector_11+0x100>
		}
		else if(data == 0xDF)
 512:	8f 3d       	cpi	r24, 0xDF	; 223
 514:	11 f4       	brne	.+4      	; 0x51a <__vector_11+0xec>
		{
			Command_Display(Display_OFF);
 516:	86 e4       	ldi	r24, 0x46	; 70
 518:	03 c0       	rjmp	.+6      	; 0x520 <__vector_11+0xf2>
		}
		else if(data == 0xBF)
 51a:	8f 3b       	cpi	r24, 0xBF	; 191
 51c:	21 f4       	brne	.+8      	; 0x526 <__vector_11+0xf8>
		{
			Command_Display(Clear_Screen);
 51e:	88 e5       	ldi	r24, 0x58	; 88
 520:	0e 94 a0 00 	call	0x140	; 0x140 <Command_Display>
 524:	04 c0       	rjmp	.+8      	; 0x52e <__vector_11+0x100>
		}
		else if(data == 0x7F)
 526:	8f 37       	cpi	r24, 0x7F	; 127
 528:	11 f4       	brne	.+4      	; 0x52e <__vector_11+0x100>
		{
			Touch_Calibration();
 52a:	0e 94 aa 00 	call	0x154	; 0x154 <Touch_Calibration>
		{
		//	Command_Display(Go_Home);
		//	Write_Blank(36);
		//	Command_Display(Go_Home);	
		}
		count=0;
 52e:	10 92 29 01 	sts	0x0129, r1
		
   }


}
 532:	ff 91       	pop	r31
 534:	ef 91       	pop	r30
 536:	bf 91       	pop	r27
 538:	af 91       	pop	r26
 53a:	9f 91       	pop	r25
 53c:	8f 91       	pop	r24
 53e:	7f 91       	pop	r23
 540:	6f 91       	pop	r22
 542:	5f 91       	pop	r21
 544:	4f 91       	pop	r20
 546:	3f 91       	pop	r19
 548:	2f 91       	pop	r18
 54a:	0f 90       	pop	r0
 54c:	0f be       	out	0x3f, r0	; 63
 54e:	0f 90       	pop	r0
 550:	1f 90       	pop	r1
 552:	18 95       	reti

00000554 <main>:
}


//***********************************************************************
void main()
{
 554:	0f 93       	push	r16
 556:	1f 93       	push	r17
    WDTCR = (1<<WDE)|(1<<WDP2)|(1<<WDP1)|(1<<WDP0);
 558:	8f e0       	ldi	r24, 0x0F	; 15
 55a:	81 bd       	out	0x21, r24	; 33
   	InitTimer();
 55c:	0e 94 49 00 	call	0x92	; 0x92 <InitTimer>
	Command_Display(Clear_Screen);
}
 
void InitADC()
{
ADMUX=(1<<REFS0);                         // For Aref=AVcc;
 560:	80 e4       	ldi	r24, 0x40	; 64
 562:	87 b9       	out	0x07, r24	; 7
ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADIE); //Rrescalar div factor =128
 564:	8f e8       	ldi	r24, 0x8F	; 143
 566:	86 b9       	out	0x06, r24	; 6
sei();  //start interrupt
 568:	78 94       	sei
   	InitTimer();
   //Initialize ADC
   	InitADC();
	
	//Initialize the USART with Baud rate = 2400bps 
	USARTInit(12);// 19200 4mhz 12 2400 4mhz 103 8mhz 207 9600 4mhz 25
 56a:	8c e0       	ldi	r24, 0x0C	; 12
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	0e 94 7d 03 	call	0x6fa	; 0x6fa <USARTInit>

	//Enable Internal Pullups on PORTC
	PORTC=0xFF;
 572:	8f ef       	ldi	r24, 0xFF	; 255
 574:	85 bb       	out	0x15, r24	; 21
	
	InitDisplay();
 576:	0e 94 01 02 	call	0x402	; 0x402 <InitDisplay>
	
	Command_Display(Go_Home);
 57a:	88 e4       	ldi	r24, 0x48	; 72
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	0e 94 a0 00 	call	0x140	; 0x140 <Command_Display>
	Write_Blank(36);
 582:	84 e2       	ldi	r24, 0x24	; 36
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	0e 94 91 00 	call	0x122	; 0x122 <Write_Blank>
	Command_Display(Go_Home);
 58a:	88 e4       	ldi	r24, 0x48	; 72
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	0e 94 a0 00 	call	0x140	; 0x140 <Command_Display>
	for(i=1;i<4;i++)
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	23 c0       	rjmp	.+70     	; 0x5dc <main+0x88>
	{
		packet[i]=UReadData();
 596:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <UReadData>
 59a:	e1 2f       	mov	r30, r17
 59c:	f0 e0       	ldi	r31, 0x00	; 0
 59e:	e6 52       	subi	r30, 0x26	; 38
 5a0:	ff 4f       	sbci	r31, 0xFF	; 255
 5a2:	80 83       	st	Z, r24
		p_data=packet[i];
 5a4:	e0 91 e4 00 	lds	r30, 0x00E4
 5a8:	f0 e0       	ldi	r31, 0x00	; 0
 5aa:	e6 52       	subi	r30, 0x26	; 38
 5ac:	ff 4f       	sbci	r31, 0xFF	; 255
 5ae:	80 81       	ld	r24, Z
 5b0:	80 93 df 00 	sts	0x00DF, r24
		Write_Blank(2);
 5b4:	82 e0       	ldi	r24, 0x02	; 2
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	0e 94 91 00 	call	0x122	; 0x122 <Write_Blank>
		itoa(p_data, message3, 10); 
 5bc:	80 91 df 00 	lds	r24, 0x00DF
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	6a e2       	ldi	r22, 0x2A	; 42
 5c4:	71 e0       	ldi	r23, 0x01	; 1
 5c6:	4a e0       	ldi	r20, 0x0A	; 10
 5c8:	50 e0       	ldi	r21, 0x00	; 0
 5ca:	0e 94 3c 04 	call	0x878	; 0x878 <itoa>
		WriteString(message3);
 5ce:	8a e2       	ldi	r24, 0x2A	; 42
 5d0:	91 e0       	ldi	r25, 0x01	; 1
 5d2:	0e 94 84 00 	call	0x108	; 0x108 <WriteString>
	InitDisplay();
	
	Command_Display(Go_Home);
	Write_Blank(36);
	Command_Display(Go_Home);
	for(i=1;i<4;i++)
 5d6:	80 91 e4 00 	lds	r24, 0x00E4
 5da:	8f 5f       	subi	r24, 0xFF	; 255
 5dc:	80 93 e4 00 	sts	0x00E4, r24
 5e0:	10 91 e4 00 	lds	r17, 0x00E4
 5e4:	14 30       	cpi	r17, 0x04	; 4
 5e6:	b8 f2       	brcs	.-82     	; 0x596 <main+0x42>
		itoa(p_data, message3, 10); 
		WriteString(message3);
	}


	Cursor_Coordinate(50,60);
 5e8:	82 e3       	ldi	r24, 0x32	; 50
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	6c e3       	ldi	r22, 0x3C	; 60
 5ee:	70 e0       	ldi	r23, 0x00	; 0
 5f0:	0e 94 af 00 	call	0x15e	; 0x15e <Cursor_Coordinate>
	Write_Blank(10);
 5f4:	8a e0       	ldi	r24, 0x0A	; 10
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	0e 94 91 00 	call	0x122	; 0x122 <Write_Blank>
	Cursor_Coordinate(50,60);
 5fc:	82 e3       	ldi	r24, 0x32	; 50
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	6c e3       	ldi	r22, 0x3C	; 60
 602:	70 e0       	ldi	r23, 0x00	; 0
 604:	0e 94 af 00 	call	0x15e	; 0x15e <Cursor_Coordinate>
	whole = adc_result;///204;
 608:	80 91 e2 00 	lds	r24, 0x00E2
 60c:	90 91 e3 00 	lds	r25, 0x00E3
 610:	90 93 e1 00 	sts	0x00E1, r25
 614:	80 93 e0 00 	sts	0x00E0, r24
	WriteString(Value);
 618:	8f e8       	ldi	r24, 0x8F	; 143
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	0e 94 84 00 	call	0x108	; 0x108 <WriteString>
	itoa(whole, message1, 10); 
 620:	80 91 e0 00 	lds	r24, 0x00E0
 624:	90 91 e1 00 	lds	r25, 0x00E1
 628:	6e ed       	ldi	r22, 0xDE	; 222
 62a:	70 e0       	ldi	r23, 0x00	; 0
 62c:	4a e0       	ldi	r20, 0x0A	; 10
 62e:	50 e0       	ldi	r21, 0x00	; 0
 630:	0e 94 3c 04 	call	0x878	; 0x878 <itoa>
	WriteString(message1);
 634:	8e ed       	ldi	r24, 0xDE	; 222
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	0e 94 84 00 	call	0x108	; 0x108 <WriteString>
	Draw_Rect_At(255, 90, 90, 125, 125);
 63c:	8f ef       	ldi	r24, 0xFF	; 255
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	6a e5       	ldi	r22, 0x5A	; 90
 642:	70 e0       	ldi	r23, 0x00	; 0
 644:	4a e5       	ldi	r20, 0x5A	; 90
 646:	50 e0       	ldi	r21, 0x00	; 0
 648:	2d e7       	ldi	r18, 0x7D	; 125
 64a:	30 e0       	ldi	r19, 0x00	; 0
 64c:	0d e7       	ldi	r16, 0x7D	; 125
 64e:	10 e0       	ldi	r17, 0x00	; 0
 650:	0e 94 86 01 	call	0x30c	; 0x30c <Draw_Rect_At>
	Draw_Solid_Rect(255, 70, 70, 80, 80);
 654:	8f ef       	ldi	r24, 0xFF	; 255
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	66 e4       	ldi	r22, 0x46	; 70
 65a:	70 e0       	ldi	r23, 0x00	; 0
 65c:	46 e4       	ldi	r20, 0x46	; 70
 65e:	50 e0       	ldi	r21, 0x00	; 0
 660:	20 e5       	ldi	r18, 0x50	; 80
 662:	30 e0       	ldi	r19, 0x00	; 0
 664:	00 e5       	ldi	r16, 0x50	; 80
 666:	10 e0       	ldi	r17, 0x00	; 0
 668:	0e 94 a8 01 	call	0x350	; 0x350 <Draw_Solid_Rect>

	ADCSRA|=(1<<ADSC);
 66c:	36 9a       	sbi	0x06, 6	; 6
		}
				p_data=0;
				Command_Display(Go_Home);
				Write_Blank(36);
				Command_Display(Go_Home);
				for(i=1;i<4;i++)
 66e:	01 e0       	ldi	r16, 0x01	; 1
 670:	05 c0       	rjmp	.+10     	; 0x67c <main+0x128>
      //	Wait(5);
	//	while(!UDataAvailable());
	//	if(UReadData()!=0xFE) continue;
		while(UDataAvailable()!=3)
		{
			if(packet[1]!=1)
 672:	80 91 db 00 	lds	r24, 0x00DB
 676:	81 30       	cpi	r24, 0x01	; 1
 678:	09 f0       	breq	.+2      	; 0x67c <main+0x128>
			{
				wdt_reset();
 67a:	a8 95       	wdr
		
		//ADCSRA|=(1<<ADSC); 
      //	Wait(5);
	//	while(!UDataAvailable());
	//	if(UReadData()!=0xFE) continue;
		while(UDataAvailable()!=3)
 67c:	0e 94 0d 04 	call	0x81a	; 0x81a <UDataAvailable>
 680:	83 30       	cpi	r24, 0x03	; 3
 682:	b9 f7       	brne	.-18     	; 0x672 <main+0x11e>
			if(packet[1]!=1)
			{
				wdt_reset();
			}
		}
				p_data=0;
 684:	10 92 df 00 	sts	0x00DF, r1
				Command_Display(Go_Home);
 688:	88 e4       	ldi	r24, 0x48	; 72
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	0e 94 a0 00 	call	0x140	; 0x140 <Command_Display>
				Write_Blank(36);
 690:	84 e2       	ldi	r24, 0x24	; 36
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	0e 94 91 00 	call	0x122	; 0x122 <Write_Blank>
				Command_Display(Go_Home);
 698:	88 e4       	ldi	r24, 0x48	; 72
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	0e 94 a0 00 	call	0x140	; 0x140 <Command_Display>
				for(i=1;i<4;i++)
 6a0:	00 93 e4 00 	sts	0x00E4, r16
 6a4:	25 c0       	rjmp	.+74     	; 0x6f0 <main+0x19c>
				{
					packet[i]=UReadData();
 6a6:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <UReadData>
 6aa:	e1 2f       	mov	r30, r17
 6ac:	f0 e0       	ldi	r31, 0x00	; 0
 6ae:	e6 52       	subi	r30, 0x26	; 38
 6b0:	ff 4f       	sbci	r31, 0xFF	; 255
 6b2:	80 83       	st	Z, r24
					p_data=packet[i];
 6b4:	e0 91 e4 00 	lds	r30, 0x00E4
 6b8:	f0 e0       	ldi	r31, 0x00	; 0
 6ba:	e6 52       	subi	r30, 0x26	; 38
 6bc:	ff 4f       	sbci	r31, 0xFF	; 255
 6be:	80 81       	ld	r24, Z
 6c0:	80 93 df 00 	sts	0x00DF, r24
					Write_Blank(2);
 6c4:	82 e0       	ldi	r24, 0x02	; 2
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	0e 94 91 00 	call	0x122	; 0x122 <Write_Blank>
					itoa(p_data, message3, 10); 
 6cc:	80 91 df 00 	lds	r24, 0x00DF
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	6a e2       	ldi	r22, 0x2A	; 42
 6d4:	71 e0       	ldi	r23, 0x01	; 1
 6d6:	4a e0       	ldi	r20, 0x0A	; 10
 6d8:	50 e0       	ldi	r21, 0x00	; 0
 6da:	0e 94 3c 04 	call	0x878	; 0x878 <itoa>
					WriteString(message3);
 6de:	8a e2       	ldi	r24, 0x2A	; 42
 6e0:	91 e0       	ldi	r25, 0x01	; 1
 6e2:	0e 94 84 00 	call	0x108	; 0x108 <WriteString>
		}
				p_data=0;
				Command_Display(Go_Home);
				Write_Blank(36);
				Command_Display(Go_Home);
				for(i=1;i<4;i++)
 6e6:	80 91 e4 00 	lds	r24, 0x00E4
 6ea:	8f 5f       	subi	r24, 0xFF	; 255
 6ec:	80 93 e4 00 	sts	0x00E4, r24
 6f0:	10 91 e4 00 	lds	r17, 0x00E4
 6f4:	14 30       	cpi	r17, 0x04	; 4
 6f6:	b8 f2       	brcs	.-82     	; 0x6a6 <main+0x152>
 6f8:	c1 cf       	rjmp	.-126    	; 0x67c <main+0x128>

000006fa <USARTInit>:


void USARTInit(uint16_t ubrrvalue)
{
	//Setup q
	UQFront=UQEnd=-1;
 6fa:	2f ef       	ldi	r18, 0xFF	; 255
 6fc:	20 93 e8 00 	sts	0x00E8, r18
 700:	20 91 e8 00 	lds	r18, 0x00E8
 704:	20 93 e6 00 	sts	0x00E6, r18

	//Set Baud rate
	UBRRH=(unsigned char)(ubrrvalue>>8);
 708:	90 bd       	out	0x20, r25	; 32
	UBRRL=(unsigned char)ubrrvalue;
 70a:	89 b9       	out	0x09, r24	; 9
	1 StopBit
	char size 8

	*/

	UCSRC=(1<<URSEL)|(3<<UCSZ0);
 70c:	86 e8       	ldi	r24, 0x86	; 134
 70e:	80 bd       	out	0x20, r24	; 32

	Enable The recevier and transmitter

	*/

	UCSRB=(1<<RXCIE)|(1<<TXEN)|(1<<RXEN);
 710:	88 e9       	ldi	r24, 0x98	; 152
 712:	8a b9       	out	0x0a, r24	; 10
	sei();
 714:	78 94       	sei

}
 716:	08 95       	ret

00000718 <__vector_13>:

//The USART ISR
ISR(USART_RXC_VECT)
{
 718:	1f 92       	push	r1
 71a:	0f 92       	push	r0
 71c:	0f b6       	in	r0, 0x3f	; 63
 71e:	0f 92       	push	r0
 720:	11 24       	eor	r1, r1
 722:	2f 93       	push	r18
 724:	3f 93       	push	r19
 726:	4f 93       	push	r20
 728:	8f 93       	push	r24
 72a:	9f 93       	push	r25
 72c:	ef 93       	push	r30
 72e:	ff 93       	push	r31
	//Read the data
	char data=UDR;
 730:	4c b1       	in	r20, 0x0c	; 12

	//Now add it to q

	if(((UQEnd==RECEIVE_BUFF_SIZE-1) && UQFront==0) || ((UQEnd+1)==UQFront))
 732:	80 91 e8 00 	lds	r24, 0x00E8
 736:	8f 33       	cpi	r24, 0x3F	; 63
 738:	21 f4       	brne	.+8      	; 0x742 <__vector_13+0x2a>
 73a:	80 91 e6 00 	lds	r24, 0x00E6
 73e:	88 23       	and	r24, r24
 740:	71 f0       	breq	.+28     	; 0x75e <__vector_13+0x46>
 742:	80 91 e8 00 	lds	r24, 0x00E8
 746:	20 91 e6 00 	lds	r18, 0x00E6
 74a:	99 27       	eor	r25, r25
 74c:	87 fd       	sbrc	r24, 7
 74e:	90 95       	com	r25
 750:	01 96       	adiw	r24, 0x01	; 1
 752:	33 27       	eor	r19, r19
 754:	27 fd       	sbrc	r18, 7
 756:	30 95       	com	r19
 758:	82 17       	cp	r24, r18
 75a:	93 07       	cpc	r25, r19
 75c:	59 f4       	brne	.+22     	; 0x774 <__vector_13+0x5c>
	{
		//Q Full
		UQFront++;
 75e:	80 91 e6 00 	lds	r24, 0x00E6
 762:	8f 5f       	subi	r24, 0xFF	; 255
 764:	80 93 e6 00 	sts	0x00E6, r24
		if(UQFront==RECEIVE_BUFF_SIZE) UQFront=0;
 768:	80 91 e6 00 	lds	r24, 0x00E6
 76c:	80 34       	cpi	r24, 0x40	; 64
 76e:	11 f4       	brne	.+4      	; 0x774 <__vector_13+0x5c>
 770:	10 92 e6 00 	sts	0x00E6, r1
	}
	

	if(UQEnd==RECEIVE_BUFF_SIZE-1)
 774:	80 91 e8 00 	lds	r24, 0x00E8
 778:	8f 33       	cpi	r24, 0x3F	; 63
 77a:	19 f4       	brne	.+6      	; 0x782 <__vector_13+0x6a>
		UQEnd=0;
 77c:	10 92 e8 00 	sts	0x00E8, r1
 780:	05 c0       	rjmp	.+10     	; 0x78c <__vector_13+0x74>
	else
		UQEnd++;
 782:	80 91 e8 00 	lds	r24, 0x00E8
 786:	8f 5f       	subi	r24, 0xFF	; 255
 788:	80 93 e8 00 	sts	0x00E8, r24


	URBuff[UQEnd]=data;
 78c:	e0 91 e8 00 	lds	r30, 0x00E8
 790:	ff 27       	eor	r31, r31
 792:	e7 fd       	sbrc	r30, 7
 794:	f0 95       	com	r31
 796:	e7 51       	subi	r30, 0x17	; 23
 798:	ff 4f       	sbci	r31, 0xFF	; 255
 79a:	40 83       	st	Z, r20

	if(UQFront==-1) UQFront=0;
 79c:	80 91 e6 00 	lds	r24, 0x00E6
 7a0:	8f 3f       	cpi	r24, 0xFF	; 255
 7a2:	11 f4       	brne	.+4      	; 0x7a8 <__vector_13+0x90>
 7a4:	10 92 e6 00 	sts	0x00E6, r1

}
 7a8:	ff 91       	pop	r31
 7aa:	ef 91       	pop	r30
 7ac:	9f 91       	pop	r25
 7ae:	8f 91       	pop	r24
 7b0:	4f 91       	pop	r20
 7b2:	3f 91       	pop	r19
 7b4:	2f 91       	pop	r18
 7b6:	0f 90       	pop	r0
 7b8:	0f be       	out	0x3f, r0	; 63
 7ba:	0f 90       	pop	r0
 7bc:	1f 90       	pop	r1
 7be:	18 95       	reti

000007c0 <UReadData>:
char UReadData()
{
	char data;
	
	//Check if q is empty
	if(UQFront==-1)
 7c0:	80 91 e6 00 	lds	r24, 0x00E6
 7c4:	8f 3f       	cpi	r24, 0xFF	; 255
 7c6:	11 f4       	brne	.+4      	; 0x7cc <UReadData+0xc>
 7c8:	e0 e0       	ldi	r30, 0x00	; 0
 7ca:	21 c0       	rjmp	.+66     	; 0x80e <UReadData+0x4e>
		return 0;
	
	data=URBuff[UQFront];
 7cc:	e0 91 e6 00 	lds	r30, 0x00E6
 7d0:	ff 27       	eor	r31, r31
 7d2:	e7 fd       	sbrc	r30, 7
 7d4:	f0 95       	com	r31
 7d6:	e7 51       	subi	r30, 0x17	; 23
 7d8:	ff 4f       	sbci	r31, 0xFF	; 255
 7da:	e0 81       	ld	r30, Z
	
	if(UQFront==UQEnd)
 7dc:	90 91 e6 00 	lds	r25, 0x00E6
 7e0:	80 91 e8 00 	lds	r24, 0x00E8
 7e4:	98 17       	cp	r25, r24
 7e6:	41 f4       	brne	.+16     	; 0x7f8 <UReadData+0x38>
	{
	//If single data is left
	//So empty q
	UQFront=UQEnd=-1;
 7e8:	8f ef       	ldi	r24, 0xFF	; 255
 7ea:	80 93 e8 00 	sts	0x00E8, r24
 7ee:	80 91 e8 00 	lds	r24, 0x00E8
 7f2:	80 93 e6 00 	sts	0x00E6, r24
 7f6:	0b c0       	rjmp	.+22     	; 0x80e <UReadData+0x4e>
	}
	else
	{
		UQFront++;
 7f8:	80 91 e6 00 	lds	r24, 0x00E6
 7fc:	8f 5f       	subi	r24, 0xFF	; 255
 7fe:	80 93 e6 00 	sts	0x00E6, r24

		if(UQFront==RECEIVE_BUFF_SIZE)
 802:	80 91 e6 00 	lds	r24, 0x00E6
 806:	80 34       	cpi	r24, 0x40	; 64
 808:	11 f4       	brne	.+4      	; 0x80e <UReadData+0x4e>
		UQFront=0;
 80a:	10 92 e6 00 	sts	0x00E6, r1
	}

	return data;
}
 80e:	8e 2f       	mov	r24, r30
 810:	08 95       	ret

00000812 <UWriteData>:

void UWriteData(char data)
{
	//Wait For Transmitter to become ready
	while(!(UCSRA & (1<<UDRE)));
 812:	5d 9b       	sbis	0x0b, 5	; 11
 814:	fe cf       	rjmp	.-4      	; 0x812 <UWriteData>

	//Now write
	UDR=data;
 816:	8c b9       	out	0x0c, r24	; 12
}
 818:	08 95       	ret

0000081a <UDataAvailable>:

uint8_t UDataAvailable()
{
	if(UQFront==-1) return 0;
 81a:	80 91 e6 00 	lds	r24, 0x00E6
 81e:	8f 3f       	cpi	r24, 0xFF	; 255
 820:	11 f4       	brne	.+4      	; 0x826 <UDataAvailable+0xc>
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	1a c0       	rjmp	.+52     	; 0x85a <UDataAvailable+0x40>
	if(UQFront<UQEnd)
 826:	90 91 e6 00 	lds	r25, 0x00E6
 82a:	80 91 e8 00 	lds	r24, 0x00E8
 82e:	98 17       	cp	r25, r24
 830:	34 f4       	brge	.+12     	; 0x83e <UDataAvailable+0x24>
		return(UQEnd-UQFront+1);
 832:	90 91 e8 00 	lds	r25, 0x00E8
 836:	80 91 e6 00 	lds	r24, 0x00E6
 83a:	9f 5f       	subi	r25, 0xFF	; 255
 83c:	0d c0       	rjmp	.+26     	; 0x858 <UDataAvailable+0x3e>
	else if(UQFront>UQEnd)
 83e:	90 91 e6 00 	lds	r25, 0x00E6
 842:	80 91 e8 00 	lds	r24, 0x00E8
 846:	89 17       	cp	r24, r25
 848:	14 f0       	brlt	.+4      	; 0x84e <UDataAvailable+0x34>
 84a:	91 e0       	ldi	r25, 0x01	; 1
 84c:	06 c0       	rjmp	.+12     	; 0x85a <UDataAvailable+0x40>
		return (RECEIVE_BUFF_SIZE-UQFront+UQEnd+1);
 84e:	90 91 e8 00 	lds	r25, 0x00E8
 852:	80 91 e6 00 	lds	r24, 0x00E6
 856:	9f 5b       	subi	r25, 0xBF	; 191
 858:	98 1b       	sub	r25, r24
	else
		return 1;
}
 85a:	89 2f       	mov	r24, r25
 85c:	08 95       	ret

0000085e <UWriteString>:

void UWriteString(char *str)
{
 85e:	fc 01       	movw	r30, r24
 860:	04 c0       	rjmp	.+8      	; 0x86a <__stack+0xb>
}

void UWriteData(char data)
{
	//Wait For Transmitter to become ready
	while(!(UCSRA & (1<<UDRE)));
 862:	5d 9b       	sbis	0x0b, 5	; 11
 864:	fe cf       	rjmp	.-4      	; 0x862 <__stack+0x3>

	//Now write
	UDR=data;
 866:	8c b9       	out	0x0c, r24	; 12
void UWriteString(char *str)
{
	while((*str)!='\0')
	{
		UWriteData(*str);
		str++;
 868:	31 96       	adiw	r30, 0x01	; 1
		return 1;
}

void UWriteString(char *str)
{
	while((*str)!='\0')
 86a:	80 81       	ld	r24, Z
 86c:	88 23       	and	r24, r24
 86e:	c9 f7       	brne	.-14     	; 0x862 <__stack+0x3>
}

void UWriteData(char data)
{
	//Wait For Transmitter to become ready
	while(!(UCSRA & (1<<UDRE)));
 870:	5d 9b       	sbis	0x0b, 5	; 11
 872:	fe cf       	rjmp	.-4      	; 0x870 <__stack+0x11>

	//Now write
	UDR=data;
 874:	1c b8       	out	0x0c, r1	; 12
		UWriteData(*str);
		str++;
	}

	UWriteData('\0');
}
 876:	08 95       	ret

00000878 <itoa>:
 878:	fb 01       	movw	r30, r22
 87a:	9f 01       	movw	r18, r30
 87c:	e8 94       	clt
 87e:	42 30       	cpi	r20, 0x02	; 2
 880:	c4 f0       	brlt	.+48     	; 0x8b2 <itoa+0x3a>
 882:	45 32       	cpi	r20, 0x25	; 37
 884:	b4 f4       	brge	.+44     	; 0x8b2 <itoa+0x3a>
 886:	4a 30       	cpi	r20, 0x0A	; 10
 888:	29 f4       	brne	.+10     	; 0x894 <itoa+0x1c>
 88a:	97 fb       	bst	r25, 7
 88c:	1e f4       	brtc	.+6      	; 0x894 <itoa+0x1c>
 88e:	90 95       	com	r25
 890:	81 95       	neg	r24
 892:	9f 4f       	sbci	r25, 0xFF	; 255
 894:	64 2f       	mov	r22, r20
 896:	77 27       	eor	r23, r23
 898:	0e 94 6d 04 	call	0x8da	; 0x8da <__udivmodhi4>
 89c:	80 5d       	subi	r24, 0xD0	; 208
 89e:	8a 33       	cpi	r24, 0x3A	; 58
 8a0:	0c f0       	brlt	.+2      	; 0x8a4 <itoa+0x2c>
 8a2:	89 5d       	subi	r24, 0xD9	; 217
 8a4:	81 93       	st	Z+, r24
 8a6:	cb 01       	movw	r24, r22
 8a8:	00 97       	sbiw	r24, 0x00	; 0
 8aa:	a1 f7       	brne	.-24     	; 0x894 <itoa+0x1c>
 8ac:	16 f4       	brtc	.+4      	; 0x8b2 <itoa+0x3a>
 8ae:	5d e2       	ldi	r21, 0x2D	; 45
 8b0:	51 93       	st	Z+, r21
 8b2:	10 82       	st	Z, r1
 8b4:	c9 01       	movw	r24, r18
 8b6:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <strrev>

000008ba <strrev>:
 8ba:	dc 01       	movw	r26, r24
 8bc:	fc 01       	movw	r30, r24
 8be:	67 2f       	mov	r22, r23
 8c0:	71 91       	ld	r23, Z+
 8c2:	77 23       	and	r23, r23
 8c4:	e1 f7       	brne	.-8      	; 0x8be <strrev+0x4>
 8c6:	32 97       	sbiw	r30, 0x02	; 2
 8c8:	04 c0       	rjmp	.+8      	; 0x8d2 <strrev+0x18>
 8ca:	7c 91       	ld	r23, X
 8cc:	6d 93       	st	X+, r22
 8ce:	70 83       	st	Z, r23
 8d0:	62 91       	ld	r22, -Z
 8d2:	ae 17       	cp	r26, r30
 8d4:	bf 07       	cpc	r27, r31
 8d6:	c8 f3       	brcs	.-14     	; 0x8ca <strrev+0x10>
 8d8:	08 95       	ret

000008da <__udivmodhi4>:
 8da:	aa 1b       	sub	r26, r26
 8dc:	bb 1b       	sub	r27, r27
 8de:	51 e1       	ldi	r21, 0x11	; 17
 8e0:	07 c0       	rjmp	.+14     	; 0x8f0 <__udivmodhi4_ep>

000008e2 <__udivmodhi4_loop>:
 8e2:	aa 1f       	adc	r26, r26
 8e4:	bb 1f       	adc	r27, r27
 8e6:	a6 17       	cp	r26, r22
 8e8:	b7 07       	cpc	r27, r23
 8ea:	10 f0       	brcs	.+4      	; 0x8f0 <__udivmodhi4_ep>
 8ec:	a6 1b       	sub	r26, r22
 8ee:	b7 0b       	sbc	r27, r23

000008f0 <__udivmodhi4_ep>:
 8f0:	88 1f       	adc	r24, r24
 8f2:	99 1f       	adc	r25, r25
 8f4:	5a 95       	dec	r21
 8f6:	a9 f7       	brne	.-22     	; 0x8e2 <__udivmodhi4_loop>
 8f8:	80 95       	com	r24
 8fa:	90 95       	com	r25
 8fc:	bc 01       	movw	r22, r24
 8fe:	cd 01       	movw	r24, r26
 900:	08 95       	ret

00000902 <_exit>:
 902:	f8 94       	cli

00000904 <__stop_program>:
 904:	ff cf       	rjmp	.-2      	; 0x904 <__stop_program>
