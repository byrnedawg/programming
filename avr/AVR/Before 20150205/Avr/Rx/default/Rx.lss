
Rx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000284  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000042  00800060  00800060  000002f8  2**0
                  ALLOC
  2 .debug_aranges 00000040  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000ce  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000319  00000000  00000000  00000406  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001ec  00000000  00000000  0000071f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000035f  00000000  00000000  0000090b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  00000c6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000f4  00000000  00000000  00000cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000009a  00000000  00000000  00000df0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 82 00 	jmp	0x104	; 0x104 <__vector_13>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 3a       	cpi	r26, 0xA2	; 162
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 40 01 	jmp	0x280	; 0x280 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include <avr/io.h>

#include "usart.h"

void main()
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	00 d0       	rcall	.+0      	; 0x82 <main+0x6>
  82:	00 d0       	rcall	.+0      	; 0x84 <main+0x8>
  84:	0f 92       	push	r0
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62

	uint8_t i; //Clasical loop varriable
	
	uint8_t packet[5],data=0;
	
	DDRC|=0xFF;	//All Output
  8a:	84 b3       	in	r24, 0x14	; 20
  8c:	8f ef       	ldi	r24, 0xFF	; 255
  8e:	84 bb       	out	0x14, r24	; 20

	//Initialize the USART with Baud rate = 2400bps
	USARTInit(207); //416 16mhz 207 8mhz 103 4mhz 
  90:	8f ec       	ldi	r24, 0xCF	; 207
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	0e 94 73 00 	call	0xe6	; 0xe6 <USARTInit>
	*/

	while(1)
	{
		//Wait for a packet
		while(!UDataAvailable());
  98:	0e 94 0b 01 	call	0x216	; 0x216 <UDataAvailable>
  9c:	88 23       	and	r24, r24
  9e:	e1 f3       	breq	.-8      	; 0x98 <main+0x1c>
		if(UReadData()!='A') continue;
  a0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <UReadData>
  a4:	81 34       	cpi	r24, 0x41	; 65
  a6:	c1 f7       	brne	.-16     	; 0x98 <main+0x1c>
		while(!UDataAvailable());
  a8:	0e 94 0b 01 	call	0x216	; 0x216 <UDataAvailable>
  ac:	88 23       	and	r24, r24
  ae:	e1 f3       	breq	.-8      	; 0xa8 <main+0x2c>
		if(UReadData()!='A') continue;
  b0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <UReadData>
  b4:	81 34       	cpi	r24, 0x41	; 65
  b6:	81 f7       	brne	.-32     	; 0x98 <main+0x1c>
		
		while(UDataAvailable()!=3);
  b8:	0e 94 0b 01 	call	0x216	; 0x216 <UDataAvailable>
  bc:	83 30       	cpi	r24, 0x03	; 3
  be:	e1 f7       	brne	.-8      	; 0xb8 <main+0x3c>

		//Get the packet
		for(i=2;i<5;i++)
		{
			packet[i]=UReadData();
  c0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <UReadData>
  c4:	8b 83       	std	Y+3, r24	; 0x03
  c6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <UReadData>
  ca:	8c 83       	std	Y+4, r24	; 0x04
  cc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <UReadData>
  d0:	28 2f       	mov	r18, r24
  d2:	8d 83       	std	Y+5, r24	; 0x05
		}

		//Is it ok?
		if(packet[2]!=((uint8_t)~packet[3])) continue;
  d4:	9b 81       	ldd	r25, Y+3	; 0x03
  d6:	8c 81       	ldd	r24, Y+4	; 0x04
  d8:	80 95       	com	r24
  da:	98 17       	cp	r25, r24
  dc:	e9 f6       	brne	.-70     	; 0x98 <main+0x1c>

		if(packet[4]!='Z') continue;
  de:	2a 35       	cpi	r18, 0x5A	; 90
  e0:	d9 f6       	brne	.-74     	; 0x98 <main+0x1c>

		//The packet is ok
		data=packet[2];

		//Now we have data put it to PORTC
		PORTC=data;
  e2:	95 bb       	out	0x15, r25	; 21
  e4:	d9 cf       	rjmp	.-78     	; 0x98 <main+0x1c>

000000e6 <USARTInit>:


void USARTInit(uint16_t ubrrvalue)
{
	//Setup q
	UQFront=UQEnd=-1;
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	20 93 61 00 	sts	0x0061, r18
  ec:	20 91 61 00 	lds	r18, 0x0061
  f0:	20 93 60 00 	sts	0x0060, r18

	//Set Baud rate
	UBRRH=(unsigned char)(ubrrvalue>>8);
  f4:	90 bd       	out	0x20, r25	; 32
	UBRRL=(unsigned char)ubrrvalue;
  f6:	89 b9       	out	0x09, r24	; 9
	1 StopBit
	char size 8

	*/

	UCSRC=(1<<URSEL)|(3<<UCSZ0);
  f8:	86 e8       	ldi	r24, 0x86	; 134
  fa:	80 bd       	out	0x20, r24	; 32

	Enable The recevier and transmitter

	*/

	UCSRB=(1<<RXCIE)|(1<<RXEN);
  fc:	80 e9       	ldi	r24, 0x90	; 144
  fe:	8a b9       	out	0x0a, r24	; 10
	sei();
 100:	78 94       	sei

}
 102:	08 95       	ret

00000104 <__vector_13>:

//The USART ISR
ISR(USART_RXC_VECT)
{
 104:	1f 92       	push	r1
 106:	0f 92       	push	r0
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	0f 92       	push	r0
 10c:	11 24       	eor	r1, r1
 10e:	2f 93       	push	r18
 110:	3f 93       	push	r19
 112:	4f 93       	push	r20
 114:	8f 93       	push	r24
 116:	9f 93       	push	r25
 118:	ef 93       	push	r30
 11a:	ff 93       	push	r31
	//Read the data
	char data=UDR;
 11c:	4c b1       	in	r20, 0x0c	; 12

	//Now add it to q

	if(((UQEnd==RECEIVE_BUFF_SIZE-1) && UQFront==0) || ((UQEnd+1)==UQFront))
 11e:	80 91 61 00 	lds	r24, 0x0061
 122:	8f 33       	cpi	r24, 0x3F	; 63
 124:	89 f1       	breq	.+98     	; 0x188 <__vector_13+0x84>
 126:	80 91 61 00 	lds	r24, 0x0061
 12a:	20 91 60 00 	lds	r18, 0x0060
 12e:	99 27       	eor	r25, r25
 130:	87 fd       	sbrc	r24, 7
 132:	90 95       	com	r25
 134:	01 96       	adiw	r24, 0x01	; 1
 136:	33 27       	eor	r19, r19
 138:	27 fd       	sbrc	r18, 7
 13a:	30 95       	com	r19
 13c:	82 17       	cp	r24, r18
 13e:	93 07       	cpc	r25, r19
 140:	39 f1       	breq	.+78     	; 0x190 <__vector_13+0x8c>
		UQFront++;
		if(UQFront==RECEIVE_BUFF_SIZE) UQFront=0;
	}
	

	if(UQEnd==RECEIVE_BUFF_SIZE-1)
 142:	80 91 61 00 	lds	r24, 0x0061
 146:	8f 33       	cpi	r24, 0x3F	; 63
 148:	91 f1       	breq	.+100    	; 0x1ae <__vector_13+0xaa>
		UQEnd=0;
	else
		UQEnd++;
 14a:	80 91 61 00 	lds	r24, 0x0061
 14e:	8f 5f       	subi	r24, 0xFF	; 255
 150:	80 93 61 00 	sts	0x0061, r24


	URBuff[UQEnd]=data;
 154:	e0 91 61 00 	lds	r30, 0x0061
 158:	ff 27       	eor	r31, r31
 15a:	e7 fd       	sbrc	r30, 7
 15c:	f0 95       	com	r31
 15e:	ee 59       	subi	r30, 0x9E	; 158
 160:	ff 4f       	sbci	r31, 0xFF	; 255
 162:	40 83       	st	Z, r20

	if(UQFront==-1) UQFront=0;
 164:	80 91 60 00 	lds	r24, 0x0060
 168:	8f 3f       	cpi	r24, 0xFF	; 255
 16a:	11 f4       	brne	.+4      	; 0x170 <__vector_13+0x6c>
 16c:	10 92 60 00 	sts	0x0060, r1

}
 170:	ff 91       	pop	r31
 172:	ef 91       	pop	r30
 174:	9f 91       	pop	r25
 176:	8f 91       	pop	r24
 178:	4f 91       	pop	r20
 17a:	3f 91       	pop	r19
 17c:	2f 91       	pop	r18
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti
	//Read the data
	char data=UDR;

	//Now add it to q

	if(((UQEnd==RECEIVE_BUFF_SIZE-1) && UQFront==0) || ((UQEnd+1)==UQFront))
 188:	80 91 60 00 	lds	r24, 0x0060
 18c:	88 23       	and	r24, r24
 18e:	59 f6       	brne	.-106    	; 0x126 <__vector_13+0x22>
	{
		//Q Full
		UQFront++;
 190:	80 91 60 00 	lds	r24, 0x0060
 194:	8f 5f       	subi	r24, 0xFF	; 255
 196:	80 93 60 00 	sts	0x0060, r24
		if(UQFront==RECEIVE_BUFF_SIZE) UQFront=0;
 19a:	80 91 60 00 	lds	r24, 0x0060
 19e:	80 34       	cpi	r24, 0x40	; 64
 1a0:	81 f6       	brne	.-96     	; 0x142 <__vector_13+0x3e>
 1a2:	10 92 60 00 	sts	0x0060, r1
	}
	

	if(UQEnd==RECEIVE_BUFF_SIZE-1)
 1a6:	80 91 61 00 	lds	r24, 0x0061
 1aa:	8f 33       	cpi	r24, 0x3F	; 63
 1ac:	71 f6       	brne	.-100    	; 0x14a <__vector_13+0x46>
		UQEnd=0;
 1ae:	10 92 61 00 	sts	0x0061, r1
 1b2:	d0 cf       	rjmp	.-96     	; 0x154 <__vector_13+0x50>

000001b4 <UReadData>:
char UReadData()
{
	char data;
	
	//Check if q is empty
	if(UQFront==-1)
 1b4:	80 91 60 00 	lds	r24, 0x0060
 1b8:	8f 3f       	cpi	r24, 0xFF	; 255
 1ba:	c9 f0       	breq	.+50     	; 0x1ee <UReadData+0x3a>
		return 0;
	
	data=URBuff[UQFront];
 1bc:	e0 91 60 00 	lds	r30, 0x0060
 1c0:	ff 27       	eor	r31, r31
 1c2:	e7 fd       	sbrc	r30, 7
 1c4:	f0 95       	com	r31
 1c6:	ee 59       	subi	r30, 0x9E	; 158
 1c8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ca:	e0 81       	ld	r30, Z
	
	if(UQFront==UQEnd)
 1cc:	90 91 60 00 	lds	r25, 0x0060
 1d0:	80 91 61 00 	lds	r24, 0x0061
 1d4:	98 17       	cp	r25, r24
 1d6:	71 f0       	breq	.+28     	; 0x1f4 <UReadData+0x40>
	//So empty q
	UQFront=UQEnd=-1;
	}
	else
	{
		UQFront++;
 1d8:	80 91 60 00 	lds	r24, 0x0060
 1dc:	8f 5f       	subi	r24, 0xFF	; 255
 1de:	80 93 60 00 	sts	0x0060, r24

		if(UQFront==RECEIVE_BUFF_SIZE)
 1e2:	80 91 60 00 	lds	r24, 0x0060
 1e6:	80 34       	cpi	r24, 0x40	; 64
 1e8:	71 f0       	breq	.+28     	; 0x206 <UReadData+0x52>
		UQFront=0;
	}

	return data;
}
 1ea:	8e 2f       	mov	r24, r30
 1ec:	08 95       	ret
char UReadData()
{
	char data;
	
	//Check if q is empty
	if(UQFront==-1)
 1ee:	e0 e0       	ldi	r30, 0x00	; 0
		if(UQFront==RECEIVE_BUFF_SIZE)
		UQFront=0;
	}

	return data;
}
 1f0:	8e 2f       	mov	r24, r30
 1f2:	08 95       	ret
	
	if(UQFront==UQEnd)
	{
	//If single data is left
	//So empty q
	UQFront=UQEnd=-1;
 1f4:	8f ef       	ldi	r24, 0xFF	; 255
 1f6:	80 93 61 00 	sts	0x0061, r24
 1fa:	80 91 61 00 	lds	r24, 0x0061
 1fe:	80 93 60 00 	sts	0x0060, r24
		if(UQFront==RECEIVE_BUFF_SIZE)
		UQFront=0;
	}

	return data;
}
 202:	8e 2f       	mov	r24, r30
 204:	08 95       	ret
	else
	{
		UQFront++;

		if(UQFront==RECEIVE_BUFF_SIZE)
		UQFront=0;
 206:	10 92 60 00 	sts	0x0060, r1
	}

	return data;
}
 20a:	8e 2f       	mov	r24, r30
 20c:	08 95       	ret

0000020e <UWriteData>:

void UWriteData(char data)
{
	//Wait For Transmitter to become ready
	while(!(UCSRA & (1<<UDRE)));
 20e:	5d 9b       	sbis	0x0b, 5	; 11
 210:	fe cf       	rjmp	.-4      	; 0x20e <UWriteData>

	//Now write
	UDR=data;
 212:	8c b9       	out	0x0c, r24	; 12
}
 214:	08 95       	ret

00000216 <UDataAvailable>:

uint8_t UDataAvailable()
{
	if(UQFront==-1) return 0;
 216:	80 91 60 00 	lds	r24, 0x0060
 21a:	8f 3f       	cpi	r24, 0xFF	; 255
 21c:	e1 f0       	breq	.+56     	; 0x256 <UDataAvailable+0x40>
	if(UQFront<UQEnd)
 21e:	90 91 60 00 	lds	r25, 0x0060
 222:	80 91 61 00 	lds	r24, 0x0061
 226:	98 17       	cp	r25, r24
 228:	74 f0       	brlt	.+28     	; 0x246 <UDataAvailable+0x30>
		return(UQEnd-UQFront+1);
	else if(UQFront>UQEnd)
 22a:	90 91 60 00 	lds	r25, 0x0060
 22e:	80 91 61 00 	lds	r24, 0x0061
 232:	89 17       	cp	r24, r25
 234:	9c f4       	brge	.+38     	; 0x25c <UDataAvailable+0x46>
		return (RECEIVE_BUFF_SIZE-UQFront+UQEnd+1);
 236:	90 91 61 00 	lds	r25, 0x0061
 23a:	80 91 60 00 	lds	r24, 0x0060
 23e:	9f 5b       	subi	r25, 0xBF	; 191
 240:	98 1b       	sub	r25, r24
	else
		return 1;
}
 242:	89 2f       	mov	r24, r25
 244:	08 95       	ret

uint8_t UDataAvailable()
{
	if(UQFront==-1) return 0;
	if(UQFront<UQEnd)
		return(UQEnd-UQFront+1);
 246:	90 91 61 00 	lds	r25, 0x0061
 24a:	80 91 60 00 	lds	r24, 0x0060
 24e:	9f 5f       	subi	r25, 0xFF	; 255
 250:	98 1b       	sub	r25, r24
	else if(UQFront>UQEnd)
		return (RECEIVE_BUFF_SIZE-UQFront+UQEnd+1);
	else
		return 1;
}
 252:	89 2f       	mov	r24, r25
 254:	08 95       	ret
	UDR=data;
}

uint8_t UDataAvailable()
{
	if(UQFront==-1) return 0;
 256:	90 e0       	ldi	r25, 0x00	; 0
		return(UQEnd-UQFront+1);
	else if(UQFront>UQEnd)
		return (RECEIVE_BUFF_SIZE-UQFront+UQEnd+1);
	else
		return 1;
}
 258:	89 2f       	mov	r24, r25
 25a:	08 95       	ret
uint8_t UDataAvailable()
{
	if(UQFront==-1) return 0;
	if(UQFront<UQEnd)
		return(UQEnd-UQFront+1);
	else if(UQFront>UQEnd)
 25c:	91 e0       	ldi	r25, 0x01	; 1
		return (RECEIVE_BUFF_SIZE-UQFront+UQEnd+1);
	else
		return 1;
}
 25e:	89 2f       	mov	r24, r25
 260:	08 95       	ret

00000262 <UWriteString>:

void UWriteString(char *str)
{
 262:	fc 01       	movw	r30, r24
	while((*str)!='\0')
 264:	80 81       	ld	r24, Z
 266:	88 23       	and	r24, r24
 268:	39 f0       	breq	.+14     	; 0x278 <UWriteString+0x16>
}

void UWriteData(char data)
{
	//Wait For Transmitter to become ready
	while(!(UCSRA & (1<<UDRE)));
 26a:	5d 9b       	sbis	0x0b, 5	; 11
 26c:	fe cf       	rjmp	.-4      	; 0x26a <UWriteString+0x8>

	//Now write
	UDR=data;
 26e:	8c b9       	out	0x0c, r24	; 12
void UWriteString(char *str)
{
	while((*str)!='\0')
	{
		UWriteData(*str);
		str++;
 270:	31 96       	adiw	r30, 0x01	; 1
		return 1;
}

void UWriteString(char *str)
{
	while((*str)!='\0')
 272:	80 81       	ld	r24, Z
 274:	88 23       	and	r24, r24
 276:	c9 f7       	brne	.-14     	; 0x26a <UWriteString+0x8>
}

void UWriteData(char data)
{
	//Wait For Transmitter to become ready
	while(!(UCSRA & (1<<UDRE)));
 278:	5d 9b       	sbis	0x0b, 5	; 11
 27a:	fe cf       	rjmp	.-4      	; 0x278 <UWriteString+0x16>

	//Now write
	UDR=data;
 27c:	1c b8       	out	0x0c, r1	; 12
		UWriteData(*str);
		str++;
	}

	UWriteData('\0');
}
 27e:	08 95       	ret

00000280 <_exit>:
 280:	f8 94       	cli

00000282 <__stop_program>:
 282:	ff cf       	rjmp	.-2      	; 0x282 <__stop_program>
