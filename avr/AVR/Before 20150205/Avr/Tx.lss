
Tx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000654  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000042  00800060  00800060  000006c8  2**0
                  ALLOC
  2 .debug_aranges 00000040  00000000  00000000  000006c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000da  00000000  00000000  00000708  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000383  00000000  00000000  000007e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000201  00000000  00000000  00000b65  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000408  00000000  00000000  00000d66  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  00001170  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000011e  00000000  00000000  00001210  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	0f c1       	rjmp	.+542    	; 0x236 <__vector_11>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a2 3a       	cpi	r26, 0xA2	; 162
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	8c d0       	rcall	.+280    	; 0x15c <main>
  44:	05 c3       	rjmp	.+1546   	; 0x650 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <delayms>:
#define tbi(x,y) x ^= _BV(y) //toggle bit
#define is_high(x,y) (x & _BV(y)) == _BV(y) //(for input) checks if the 							  // input is high (Logic 1)
							  // if(is_high(PIND,PD0))

void delayms(uint8_t t)//delay in ms
{
  48:	df 93       	push	r29
  4a:	cf 93       	push	r28
  4c:	cd b7       	in	r28, 0x3d	; 61
  4e:	de b7       	in	r29, 0x3e	; 62
  50:	60 97       	sbiw	r28, 0x10	; 16
  52:	0f b6       	in	r0, 0x3f	; 63
  54:	f8 94       	cli
  56:	de bf       	out	0x3e, r29	; 62
  58:	0f be       	out	0x3f, r0	; 63
  5a:	cd bf       	out	0x3d, r28	; 61
  5c:	88 8b       	std	Y+16, r24	; 0x10
uint8_t i;
for(i=0;i<t;i++)
  5e:	1f 86       	std	Y+15, r1	; 0x0f
  60:	6f c0       	rjmp	.+222    	; 0x140 <delayms+0xf8>
  62:	80 e0       	ldi	r24, 0x00	; 0
  64:	90 e0       	ldi	r25, 0x00	; 0
  66:	a0 e8       	ldi	r26, 0x80	; 128
  68:	bf e3       	ldi	r27, 0x3F	; 63
  6a:	8b 87       	std	Y+11, r24	; 0x0b
  6c:	9c 87       	std	Y+12, r25	; 0x0c
  6e:	ad 87       	std	Y+13, r26	; 0x0d
  70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
  72:	6b 85       	ldd	r22, Y+11	; 0x0b
  74:	7c 85       	ldd	r23, Y+12	; 0x0c
  76:	8d 85       	ldd	r24, Y+13	; 0x0d
  78:	9e 85       	ldd	r25, Y+14	; 0x0e
  7a:	20 e0       	ldi	r18, 0x00	; 0
  7c:	30 e0       	ldi	r19, 0x00	; 0
  7e:	4a ef       	ldi	r20, 0xFA	; 250
  80:	54 e4       	ldi	r21, 0x44	; 68
  82:	5b d2       	rcall	.+1206   	; 0x53a <__mulsf3>
  84:	dc 01       	movw	r26, r24
  86:	cb 01       	movw	r24, r22
  88:	8f 83       	std	Y+7, r24	; 0x07
  8a:	98 87       	std	Y+8, r25	; 0x08
  8c:	a9 87       	std	Y+9, r26	; 0x09
  8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
  90:	6f 81       	ldd	r22, Y+7	; 0x07
  92:	78 85       	ldd	r23, Y+8	; 0x08
  94:	89 85       	ldd	r24, Y+9	; 0x09
  96:	9a 85       	ldd	r25, Y+10	; 0x0a
  98:	20 e0       	ldi	r18, 0x00	; 0
  9a:	30 e0       	ldi	r19, 0x00	; 0
  9c:	40 e8       	ldi	r20, 0x80	; 128
  9e:	5f e3       	ldi	r21, 0x3F	; 63
  a0:	cb d1       	rcall	.+918    	; 0x438 <__cmpsf2>
  a2:	88 23       	and	r24, r24
  a4:	2c f4       	brge	.+10     	; 0xb0 <delayms+0x68>
		__ticks = 1;
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	9e 83       	std	Y+6, r25	; 0x06
  ac:	8d 83       	std	Y+5, r24	; 0x05
  ae:	3b c0       	rjmp	.+118    	; 0x126 <delayms+0xde>
	else if (__tmp > 65535)
  b0:	6f 81       	ldd	r22, Y+7	; 0x07
  b2:	78 85       	ldd	r23, Y+8	; 0x08
  b4:	89 85       	ldd	r24, Y+9	; 0x09
  b6:	9a 85       	ldd	r25, Y+10	; 0x0a
  b8:	20 e0       	ldi	r18, 0x00	; 0
  ba:	3f ef       	ldi	r19, 0xFF	; 255
  bc:	4f e7       	ldi	r20, 0x7F	; 127
  be:	57 e4       	ldi	r21, 0x47	; 71
  c0:	38 d2       	rcall	.+1136   	; 0x532 <__gesf2>
  c2:	18 16       	cp	r1, r24
  c4:	3c f5       	brge	.+78     	; 0x114 <delayms+0xcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
  c6:	6b 85       	ldd	r22, Y+11	; 0x0b
  c8:	7c 85       	ldd	r23, Y+12	; 0x0c
  ca:	8d 85       	ldd	r24, Y+13	; 0x0d
  cc:	9e 85       	ldd	r25, Y+14	; 0x0e
  ce:	20 e0       	ldi	r18, 0x00	; 0
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	40 e2       	ldi	r20, 0x20	; 32
  d4:	51 e4       	ldi	r21, 0x41	; 65
  d6:	31 d2       	rcall	.+1122   	; 0x53a <__mulsf3>
  d8:	dc 01       	movw	r26, r24
  da:	cb 01       	movw	r24, r22
  dc:	bc 01       	movw	r22, r24
  de:	cd 01       	movw	r24, r26
  e0:	af d1       	rcall	.+862    	; 0x440 <__fixunssfsi>
  e2:	dc 01       	movw	r26, r24
  e4:	cb 01       	movw	r24, r22
  e6:	9e 83       	std	Y+6, r25	; 0x06
  e8:	8d 83       	std	Y+5, r24	; 0x05
  ea:	0f c0       	rjmp	.+30     	; 0x10a <delayms+0xc2>
  ec:	88 ec       	ldi	r24, 0xC8	; 200
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	9c 83       	std	Y+4, r25	; 0x04
  f2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  f4:	8b 81       	ldd	r24, Y+3	; 0x03
  f6:	9c 81       	ldd	r25, Y+4	; 0x04
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <delayms+0xb0>
  fc:	9c 83       	std	Y+4, r25	; 0x04
  fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 100:	8d 81       	ldd	r24, Y+5	; 0x05
 102:	9e 81       	ldd	r25, Y+6	; 0x06
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	9e 83       	std	Y+6, r25	; 0x06
 108:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 10a:	8d 81       	ldd	r24, Y+5	; 0x05
 10c:	9e 81       	ldd	r25, Y+6	; 0x06
 10e:	00 97       	sbiw	r24, 0x00	; 0
 110:	69 f7       	brne	.-38     	; 0xec <delayms+0xa4>
 112:	13 c0       	rjmp	.+38     	; 0x13a <delayms+0xf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 114:	6f 81       	ldd	r22, Y+7	; 0x07
 116:	78 85       	ldd	r23, Y+8	; 0x08
 118:	89 85       	ldd	r24, Y+9	; 0x09
 11a:	9a 85       	ldd	r25, Y+10	; 0x0a
 11c:	91 d1       	rcall	.+802    	; 0x440 <__fixunssfsi>
 11e:	dc 01       	movw	r26, r24
 120:	cb 01       	movw	r24, r22
 122:	9e 83       	std	Y+6, r25	; 0x06
 124:	8d 83       	std	Y+5, r24	; 0x05
 126:	8d 81       	ldd	r24, Y+5	; 0x05
 128:	9e 81       	ldd	r25, Y+6	; 0x06
 12a:	9a 83       	std	Y+2, r25	; 0x02
 12c:	89 83       	std	Y+1, r24	; 0x01
 12e:	89 81       	ldd	r24, Y+1	; 0x01
 130:	9a 81       	ldd	r25, Y+2	; 0x02
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <delayms+0xea>
 136:	9a 83       	std	Y+2, r25	; 0x02
 138:	89 83       	std	Y+1, r24	; 0x01
 13a:	8f 85       	ldd	r24, Y+15	; 0x0f
 13c:	8f 5f       	subi	r24, 0xFF	; 255
 13e:	8f 87       	std	Y+15, r24	; 0x0f
 140:	9f 85       	ldd	r25, Y+15	; 0x0f
 142:	88 89       	ldd	r24, Y+16	; 0x10
 144:	98 17       	cp	r25, r24
 146:	08 f4       	brcc	.+2      	; 0x14a <delayms+0x102>
 148:	8c cf       	rjmp	.-232    	; 0x62 <delayms+0x1a>
	_delay_ms(1);
}
 14a:	60 96       	adiw	r28, 0x10	; 16
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	f8 94       	cli
 150:	de bf       	out	0x3e, r29	; 62
 152:	0f be       	out	0x3f, r0	; 63
 154:	cd bf       	out	0x3d, r28	; 61
 156:	cf 91       	pop	r28
 158:	df 91       	pop	r29
 15a:	08 95       	ret

0000015c <main>:

void main()
{
 15c:	df 93       	push	r29
 15e:	cf 93       	push	r28
 160:	0f 92       	push	r0
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
	//Initialize the USART with Baud rate = 2400bps
	USARTInit(UBRRVAL);   //USARTInit(416);
 166:	8f e9       	ldi	r24, 0x9F	; 159
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	3e d0       	rcall	.+124    	; 0x1e8 <USARTInit>

	//Enable Internal Pullups on PORTC
	DDRD = (1<<PIND7);
 16c:	e1 e3       	ldi	r30, 0x31	; 49
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 e8       	ldi	r24, 0x80	; 128
 172:	80 83       	st	Z, r24
	cbi(PORTD,PD7); //LED OFF;
 174:	a2 e3       	ldi	r26, 0x32	; 50
 176:	b0 e0       	ldi	r27, 0x00	; 0
 178:	e2 e3       	ldi	r30, 0x32	; 50
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	8f 77       	andi	r24, 0x7F	; 127
 180:	8c 93       	st	X, r24
	DDRB = (0<<PINB0);
 182:	e7 e3       	ldi	r30, 0x37	; 55
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	10 82       	st	Z, r1
	uint8_t data;
	while(1)
	{
		//data=PINC;

		if(bit_is_clear(PINB,PB0))
 188:	e6 e3       	ldi	r30, 0x36	; 54
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	88 2f       	mov	r24, r24
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	81 70       	andi	r24, 0x01	; 1
 194:	90 70       	andi	r25, 0x00	; 0
 196:	00 97       	sbiw	r24, 0x00	; 0
 198:	61 f4       	brne	.+24     	; 0x1b2 <main+0x56>
		{
			//Send_Packet(RADDR, LEDON);
			sbi(PORTD,PD7); //LED ON;
 19a:	a2 e3       	ldi	r26, 0x32	; 50
 19c:	b0 e0       	ldi	r27, 0x00	; 0
 19e:	e2 e3       	ldi	r30, 0x32	; 50
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 81       	ld	r24, Z
 1a4:	80 68       	ori	r24, 0x80	; 128
 1a6:	8c 93       	st	X, r24
			data = LEDON;
 1a8:	81 e1       	ldi	r24, 0x11	; 17
 1aa:	89 83       	std	Y+1, r24	; 0x01
			delayms(100);
 1ac:	84 e6       	ldi	r24, 0x64	; 100
 1ae:	4c df       	rcall	.-360    	; 0x48 <delayms>
 1b0:	0b c0       	rjmp	.+22     	; 0x1c8 <main+0x6c>
		}
		else
		{
			//send command to switch led OFF
			//Send_Packet(RADDR, LEDOFF);
			cbi(PORTD,PD7); //LED OFF;
 1b2:	a2 e3       	ldi	r26, 0x32	; 50
 1b4:	b0 e0       	ldi	r27, 0x00	; 0
 1b6:	e2 e3       	ldi	r30, 0x32	; 50
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	80 81       	ld	r24, Z
 1bc:	8f 77       	andi	r24, 0x7F	; 127
 1be:	8c 93       	st	X, r24
			data = LEDOFF;
 1c0:	82 e2       	ldi	r24, 0x22	; 34
 1c2:	89 83       	std	Y+1, r24	; 0x01
			delayms(100);
 1c4:	84 e6       	ldi	r24, 0x64	; 100
 1c6:	40 df       	rcall	.-384    	; 0x48 <delayms>
		Packet Format is AA<data><data inverse>Z
		total Packet size if 5 bytes.
		*/

		//Stabilize the Tx Module By Sending JUNK data
		UWriteData('J');	//J for junk
 1c8:	8a e4       	ldi	r24, 0x4A	; 74
 1ca:	cc d0       	rcall	.+408    	; 0x364 <UWriteData>

		//Send 'A'
		UWriteData('A');
 1cc:	81 e4       	ldi	r24, 0x41	; 65
 1ce:	ca d0       	rcall	.+404    	; 0x364 <UWriteData>

		//Send Another 'A'
		UWriteData('A');
 1d0:	81 e4       	ldi	r24, 0x41	; 65
 1d2:	c8 d0       	rcall	.+400    	; 0x364 <UWriteData>

		//Send the data;
		UWriteData(data);
 1d4:	89 81       	ldd	r24, Y+1	; 0x01
 1d6:	c6 d0       	rcall	.+396    	; 0x364 <UWriteData>

		//Send inverse of data for error detection purpose
		UWriteData(~data);
 1d8:	89 81       	ldd	r24, Y+1	; 0x01
 1da:	80 95       	com	r24
 1dc:	c3 d0       	rcall	.+390    	; 0x364 <UWriteData>

		//End the packet by writing 'Z'
		UWriteData('Z');
 1de:	8a e5       	ldi	r24, 0x5A	; 90
 1e0:	c1 d0       	rcall	.+386    	; 0x364 <UWriteData>

		//Wait for some time
		delayms(100);
 1e2:	84 e6       	ldi	r24, 0x64	; 100
 1e4:	31 df       	rcall	.-414    	; 0x48 <delayms>
 1e6:	d0 cf       	rjmp	.-96     	; 0x188 <main+0x2c>

000001e8 <USARTInit>:

#include "usart.h"


void USARTInit(uint16_t ubrrvalue)
{
 1e8:	df 93       	push	r29
 1ea:	cf 93       	push	r28
 1ec:	00 d0       	rcall	.+0      	; 0x1ee <USARTInit+0x6>
 1ee:	cd b7       	in	r28, 0x3d	; 61
 1f0:	de b7       	in	r29, 0x3e	; 62
 1f2:	9a 83       	std	Y+2, r25	; 0x02
 1f4:	89 83       	std	Y+1, r24	; 0x01
	//Setup q
	UQFront=UQEnd=-1;
 1f6:	8f ef       	ldi	r24, 0xFF	; 255
 1f8:	80 93 61 00 	sts	0x0061, r24
 1fc:	80 91 61 00 	lds	r24, 0x0061
 200:	80 93 60 00 	sts	0x0060, r24

	//Set Baud rate
	UBRRH=(unsigned char)(ubrrvalue>>8);
 204:	e0 e4       	ldi	r30, 0x40	; 64
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	89 81       	ldd	r24, Y+1	; 0x01
 20a:	9a 81       	ldd	r25, Y+2	; 0x02
 20c:	89 2f       	mov	r24, r25
 20e:	99 27       	eor	r25, r25
 210:	80 83       	st	Z, r24
	UBRRL=(unsigned char)ubrrvalue;
 212:	e9 e2       	ldi	r30, 0x29	; 41
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	89 81       	ldd	r24, Y+1	; 0x01
 218:	80 83       	st	Z, r24
	1 StopBit
	char size 8

	*/

	UCSRC=(1<<URSEL)|(3<<UCSZ0);
 21a:	e0 e4       	ldi	r30, 0x40	; 64
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	86 e8       	ldi	r24, 0x86	; 134
 220:	80 83       	st	Z, r24

	Enable The recevier and transmitter

	*/

	UCSRB=(1<<RXCIE)|(1<<TXEN);
 222:	ea e2       	ldi	r30, 0x2A	; 42
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	88 e8       	ldi	r24, 0x88	; 136
 228:	80 83       	st	Z, r24
	sei();
 22a:	78 94       	sei

}
 22c:	0f 90       	pop	r0
 22e:	0f 90       	pop	r0
 230:	cf 91       	pop	r28
 232:	df 91       	pop	r29
 234:	08 95       	ret

00000236 <__vector_11>:

//The USART ISR
ISR(USART_RXC_VECT)
{
 236:	1f 92       	push	r1
 238:	0f 92       	push	r0
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	0f 92       	push	r0
 23e:	11 24       	eor	r1, r1
 240:	2f 93       	push	r18
 242:	3f 93       	push	r19
 244:	8f 93       	push	r24
 246:	9f 93       	push	r25
 248:	ef 93       	push	r30
 24a:	ff 93       	push	r31
 24c:	df 93       	push	r29
 24e:	cf 93       	push	r28
 250:	0f 92       	push	r0
 252:	cd b7       	in	r28, 0x3d	; 61
 254:	de b7       	in	r29, 0x3e	; 62
	//Read the data
	char data=UDR;
 256:	ec e2       	ldi	r30, 0x2C	; 44
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	80 81       	ld	r24, Z
 25c:	89 83       	std	Y+1, r24	; 0x01

	//Now add it to q

	if(((UQEnd==RECEIVE_BUFF_SIZE-1) && UQFront==0) || ((UQEnd+1)==UQFront))
 25e:	80 91 61 00 	lds	r24, 0x0061
 262:	8f 33       	cpi	r24, 0x3F	; 63
 264:	21 f4       	brne	.+8      	; 0x26e <__vector_11+0x38>
 266:	80 91 60 00 	lds	r24, 0x0060
 26a:	88 23       	and	r24, r24
 26c:	81 f0       	breq	.+32     	; 0x28e <__vector_11+0x58>
 26e:	80 91 61 00 	lds	r24, 0x0061
 272:	99 27       	eor	r25, r25
 274:	87 fd       	sbrc	r24, 7
 276:	90 95       	com	r25
 278:	9c 01       	movw	r18, r24
 27a:	2f 5f       	subi	r18, 0xFF	; 255
 27c:	3f 4f       	sbci	r19, 0xFF	; 255
 27e:	80 91 60 00 	lds	r24, 0x0060
 282:	99 27       	eor	r25, r25
 284:	87 fd       	sbrc	r24, 7
 286:	90 95       	com	r25
 288:	28 17       	cp	r18, r24
 28a:	39 07       	cpc	r19, r25
 28c:	59 f4       	brne	.+22     	; 0x2a4 <__vector_11+0x6e>
	{
		//Q Full
		UQFront++;
 28e:	80 91 60 00 	lds	r24, 0x0060
 292:	8f 5f       	subi	r24, 0xFF	; 255
 294:	80 93 60 00 	sts	0x0060, r24
		if(UQFront==RECEIVE_BUFF_SIZE) UQFront=0;
 298:	80 91 60 00 	lds	r24, 0x0060
 29c:	80 34       	cpi	r24, 0x40	; 64
 29e:	11 f4       	brne	.+4      	; 0x2a4 <__vector_11+0x6e>
 2a0:	10 92 60 00 	sts	0x0060, r1
	}
	

	if(UQEnd==RECEIVE_BUFF_SIZE-1)
 2a4:	80 91 61 00 	lds	r24, 0x0061
 2a8:	8f 33       	cpi	r24, 0x3F	; 63
 2aa:	19 f4       	brne	.+6      	; 0x2b2 <__vector_11+0x7c>
		UQEnd=0;
 2ac:	10 92 61 00 	sts	0x0061, r1
 2b0:	05 c0       	rjmp	.+10     	; 0x2bc <__vector_11+0x86>
	else
		UQEnd++;
 2b2:	80 91 61 00 	lds	r24, 0x0061
 2b6:	8f 5f       	subi	r24, 0xFF	; 255
 2b8:	80 93 61 00 	sts	0x0061, r24


	URBuff[UQEnd]=data;
 2bc:	80 91 61 00 	lds	r24, 0x0061
 2c0:	99 27       	eor	r25, r25
 2c2:	87 fd       	sbrc	r24, 7
 2c4:	90 95       	com	r25
 2c6:	fc 01       	movw	r30, r24
 2c8:	ee 59       	subi	r30, 0x9E	; 158
 2ca:	ff 4f       	sbci	r31, 0xFF	; 255
 2cc:	89 81       	ldd	r24, Y+1	; 0x01
 2ce:	80 83       	st	Z, r24

	if(UQFront==-1) UQFront=0;
 2d0:	80 91 60 00 	lds	r24, 0x0060
 2d4:	8f 3f       	cpi	r24, 0xFF	; 255
 2d6:	11 f4       	brne	.+4      	; 0x2dc <__vector_11+0xa6>
 2d8:	10 92 60 00 	sts	0x0060, r1

}
 2dc:	0f 90       	pop	r0
 2de:	cf 91       	pop	r28
 2e0:	df 91       	pop	r29
 2e2:	ff 91       	pop	r31
 2e4:	ef 91       	pop	r30
 2e6:	9f 91       	pop	r25
 2e8:	8f 91       	pop	r24
 2ea:	3f 91       	pop	r19
 2ec:	2f 91       	pop	r18
 2ee:	0f 90       	pop	r0
 2f0:	0f be       	out	0x3f, r0	; 63
 2f2:	0f 90       	pop	r0
 2f4:	1f 90       	pop	r1
 2f6:	18 95       	reti

000002f8 <UReadData>:

char UReadData()
{
 2f8:	df 93       	push	r29
 2fa:	cf 93       	push	r28
 2fc:	00 d0       	rcall	.+0      	; 0x2fe <UReadData+0x6>
 2fe:	cd b7       	in	r28, 0x3d	; 61
 300:	de b7       	in	r29, 0x3e	; 62
	char data;
	
	//Check if q is empty
	if(UQFront==-1)
 302:	80 91 60 00 	lds	r24, 0x0060
 306:	8f 3f       	cpi	r24, 0xFF	; 255
 308:	11 f4       	brne	.+4      	; 0x30e <UReadData+0x16>
		return 0;
 30a:	1a 82       	std	Y+2, r1	; 0x02
 30c:	25 c0       	rjmp	.+74     	; 0x358 <UReadData+0x60>
	
	data=URBuff[UQFront];
 30e:	80 91 60 00 	lds	r24, 0x0060
 312:	99 27       	eor	r25, r25
 314:	87 fd       	sbrc	r24, 7
 316:	90 95       	com	r25
 318:	fc 01       	movw	r30, r24
 31a:	ee 59       	subi	r30, 0x9E	; 158
 31c:	ff 4f       	sbci	r31, 0xFF	; 255
 31e:	80 81       	ld	r24, Z
 320:	89 83       	std	Y+1, r24	; 0x01
	
	if(UQFront==UQEnd)
 322:	90 91 60 00 	lds	r25, 0x0060
 326:	80 91 61 00 	lds	r24, 0x0061
 32a:	98 17       	cp	r25, r24
 32c:	41 f4       	brne	.+16     	; 0x33e <UReadData+0x46>
	{
	//If single data is left
	//So empty q
	UQFront=UQEnd=-1;
 32e:	8f ef       	ldi	r24, 0xFF	; 255
 330:	80 93 61 00 	sts	0x0061, r24
 334:	80 91 61 00 	lds	r24, 0x0061
 338:	80 93 60 00 	sts	0x0060, r24
 33c:	0b c0       	rjmp	.+22     	; 0x354 <UReadData+0x5c>
	}
	else
	{
		UQFront++;
 33e:	80 91 60 00 	lds	r24, 0x0060
 342:	8f 5f       	subi	r24, 0xFF	; 255
 344:	80 93 60 00 	sts	0x0060, r24

		if(UQFront==RECEIVE_BUFF_SIZE)
 348:	80 91 60 00 	lds	r24, 0x0060
 34c:	80 34       	cpi	r24, 0x40	; 64
 34e:	11 f4       	brne	.+4      	; 0x354 <UReadData+0x5c>
		UQFront=0;
 350:	10 92 60 00 	sts	0x0060, r1
	}

	return data;
 354:	89 81       	ldd	r24, Y+1	; 0x01
 356:	8a 83       	std	Y+2, r24	; 0x02
 358:	8a 81       	ldd	r24, Y+2	; 0x02
}
 35a:	0f 90       	pop	r0
 35c:	0f 90       	pop	r0
 35e:	cf 91       	pop	r28
 360:	df 91       	pop	r29
 362:	08 95       	ret

00000364 <UWriteData>:

void UWriteData(char data)
{
 364:	df 93       	push	r29
 366:	cf 93       	push	r28
 368:	0f 92       	push	r0
 36a:	cd b7       	in	r28, 0x3d	; 61
 36c:	de b7       	in	r29, 0x3e	; 62
 36e:	89 83       	std	Y+1, r24	; 0x01
	//Wait For Transmitter to become ready
	while(!(UCSRA & (1<<UDRE)));
 370:	eb e2       	ldi	r30, 0x2B	; 43
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	80 81       	ld	r24, Z
 376:	88 2f       	mov	r24, r24
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	80 72       	andi	r24, 0x20	; 32
 37c:	90 70       	andi	r25, 0x00	; 0
 37e:	00 97       	sbiw	r24, 0x00	; 0
 380:	b9 f3       	breq	.-18     	; 0x370 <UWriteData+0xc>

	//Now write
	UDR=data;
 382:	ec e2       	ldi	r30, 0x2C	; 44
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	89 81       	ldd	r24, Y+1	; 0x01
 388:	80 83       	st	Z, r24
}
 38a:	0f 90       	pop	r0
 38c:	cf 91       	pop	r28
 38e:	df 91       	pop	r29
 390:	08 95       	ret

00000392 <UDataAvailable>:

uint8_t UDataAvailable()
{
 392:	df 93       	push	r29
 394:	cf 93       	push	r28
 396:	0f 92       	push	r0
 398:	cd b7       	in	r28, 0x3d	; 61
 39a:	de b7       	in	r29, 0x3e	; 62
	if(UQFront==-1) return 0;
 39c:	80 91 60 00 	lds	r24, 0x0060
 3a0:	8f 3f       	cpi	r24, 0xFF	; 255
 3a2:	11 f4       	brne	.+4      	; 0x3a8 <UDataAvailable+0x16>
 3a4:	19 82       	std	Y+1, r1	; 0x01
 3a6:	26 c0       	rjmp	.+76     	; 0x3f4 <UDataAvailable+0x62>
	if(UQFront<UQEnd)
 3a8:	90 91 60 00 	lds	r25, 0x0060
 3ac:	80 91 61 00 	lds	r24, 0x0061
 3b0:	98 17       	cp	r25, r24
 3b2:	64 f4       	brge	.+24     	; 0x3cc <UDataAvailable+0x3a>
		return(UQEnd-UQFront+1);
 3b4:	80 91 61 00 	lds	r24, 0x0061
 3b8:	98 2f       	mov	r25, r24
 3ba:	80 91 60 00 	lds	r24, 0x0060
 3be:	29 2f       	mov	r18, r25
 3c0:	28 1b       	sub	r18, r24
 3c2:	82 2f       	mov	r24, r18
 3c4:	98 2f       	mov	r25, r24
 3c6:	9f 5f       	subi	r25, 0xFF	; 255
 3c8:	99 83       	std	Y+1, r25	; 0x01
 3ca:	14 c0       	rjmp	.+40     	; 0x3f4 <UDataAvailable+0x62>
	else if(UQFront>UQEnd)
 3cc:	90 91 60 00 	lds	r25, 0x0060
 3d0:	80 91 61 00 	lds	r24, 0x0061
 3d4:	89 17       	cp	r24, r25
 3d6:	64 f4       	brge	.+24     	; 0x3f0 <UDataAvailable+0x5e>
		return (RECEIVE_BUFF_SIZE-UQFront+UQEnd+1);
 3d8:	80 91 61 00 	lds	r24, 0x0061
 3dc:	98 2f       	mov	r25, r24
 3de:	80 91 60 00 	lds	r24, 0x0060
 3e2:	29 2f       	mov	r18, r25
 3e4:	28 1b       	sub	r18, r24
 3e6:	82 2f       	mov	r24, r18
 3e8:	98 2f       	mov	r25, r24
 3ea:	9f 5b       	subi	r25, 0xBF	; 191
 3ec:	99 83       	std	Y+1, r25	; 0x01
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <UDataAvailable+0x62>
	else
		return 1;
 3f0:	21 e0       	ldi	r18, 0x01	; 1
 3f2:	29 83       	std	Y+1, r18	; 0x01
 3f4:	89 81       	ldd	r24, Y+1	; 0x01
}
 3f6:	0f 90       	pop	r0
 3f8:	cf 91       	pop	r28
 3fa:	df 91       	pop	r29
 3fc:	08 95       	ret

000003fe <UWriteString>:

void UWriteString(char *str)
{
 3fe:	df 93       	push	r29
 400:	cf 93       	push	r28
 402:	00 d0       	rcall	.+0      	; 0x404 <UWriteString+0x6>
 404:	cd b7       	in	r28, 0x3d	; 61
 406:	de b7       	in	r29, 0x3e	; 62
 408:	9a 83       	std	Y+2, r25	; 0x02
 40a:	89 83       	std	Y+1, r24	; 0x01
 40c:	09 c0       	rjmp	.+18     	; 0x420 <UWriteString+0x22>
	while((*str)!='\0')
	{
		UWriteData(*str);
 40e:	e9 81       	ldd	r30, Y+1	; 0x01
 410:	fa 81       	ldd	r31, Y+2	; 0x02
 412:	80 81       	ld	r24, Z
 414:	a7 df       	rcall	.-178    	; 0x364 <UWriteData>
		str++;
 416:	89 81       	ldd	r24, Y+1	; 0x01
 418:	9a 81       	ldd	r25, Y+2	; 0x02
 41a:	01 96       	adiw	r24, 0x01	; 1
 41c:	9a 83       	std	Y+2, r25	; 0x02
 41e:	89 83       	std	Y+1, r24	; 0x01
		return 1;
}

void UWriteString(char *str)
{
	while((*str)!='\0')
 420:	e9 81       	ldd	r30, Y+1	; 0x01
 422:	fa 81       	ldd	r31, Y+2	; 0x02
 424:	80 81       	ld	r24, Z
 426:	88 23       	and	r24, r24
 428:	91 f7       	brne	.-28     	; 0x40e <UWriteString+0x10>
	{
		UWriteData(*str);
		str++;
	}

	UWriteData('\0');
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	9b df       	rcall	.-202    	; 0x364 <UWriteData>
}
 42e:	0f 90       	pop	r0
 430:	0f 90       	pop	r0
 432:	cf 91       	pop	r28
 434:	df 91       	pop	r29
 436:	08 95       	ret

00000438 <__cmpsf2>:
 438:	2f d0       	rcall	.+94     	; 0x498 <__fp_cmp>
 43a:	08 f4       	brcc	.+2      	; 0x43e <__cmpsf2+0x6>
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	08 95       	ret

00000440 <__fixunssfsi>:
 440:	57 d0       	rcall	.+174    	; 0x4f0 <__fp_splitA>
 442:	88 f0       	brcs	.+34     	; 0x466 <__stack+0x7>
 444:	9f 57       	subi	r25, 0x7F	; 127
 446:	90 f0       	brcs	.+36     	; 0x46c <__stack+0xd>
 448:	b9 2f       	mov	r27, r25
 44a:	99 27       	eor	r25, r25
 44c:	b7 51       	subi	r27, 0x17	; 23
 44e:	a0 f0       	brcs	.+40     	; 0x478 <__stack+0x19>
 450:	d1 f0       	breq	.+52     	; 0x486 <__stack+0x27>
 452:	66 0f       	add	r22, r22
 454:	77 1f       	adc	r23, r23
 456:	88 1f       	adc	r24, r24
 458:	99 1f       	adc	r25, r25
 45a:	1a f0       	brmi	.+6      	; 0x462 <__stack+0x3>
 45c:	ba 95       	dec	r27
 45e:	c9 f7       	brne	.-14     	; 0x452 <__fixunssfsi+0x12>
 460:	12 c0       	rjmp	.+36     	; 0x486 <__stack+0x27>
 462:	b1 30       	cpi	r27, 0x01	; 1
 464:	81 f0       	breq	.+32     	; 0x486 <__stack+0x27>
 466:	5e d0       	rcall	.+188    	; 0x524 <__fp_zero>
 468:	b1 e0       	ldi	r27, 0x01	; 1
 46a:	08 95       	ret
 46c:	5b c0       	rjmp	.+182    	; 0x524 <__fp_zero>
 46e:	67 2f       	mov	r22, r23
 470:	78 2f       	mov	r23, r24
 472:	88 27       	eor	r24, r24
 474:	b8 5f       	subi	r27, 0xF8	; 248
 476:	39 f0       	breq	.+14     	; 0x486 <__stack+0x27>
 478:	b9 3f       	cpi	r27, 0xF9	; 249
 47a:	cc f3       	brlt	.-14     	; 0x46e <__stack+0xf>
 47c:	86 95       	lsr	r24
 47e:	77 95       	ror	r23
 480:	67 95       	ror	r22
 482:	b3 95       	inc	r27
 484:	d9 f7       	brne	.-10     	; 0x47c <__stack+0x1d>
 486:	3e f4       	brtc	.+14     	; 0x496 <__stack+0x37>
 488:	90 95       	com	r25
 48a:	80 95       	com	r24
 48c:	70 95       	com	r23
 48e:	61 95       	neg	r22
 490:	7f 4f       	sbci	r23, 0xFF	; 255
 492:	8f 4f       	sbci	r24, 0xFF	; 255
 494:	9f 4f       	sbci	r25, 0xFF	; 255
 496:	08 95       	ret

00000498 <__fp_cmp>:
 498:	99 0f       	add	r25, r25
 49a:	00 08       	sbc	r0, r0
 49c:	55 0f       	add	r21, r21
 49e:	aa 0b       	sbc	r26, r26
 4a0:	e0 e8       	ldi	r30, 0x80	; 128
 4a2:	fe ef       	ldi	r31, 0xFE	; 254
 4a4:	16 16       	cp	r1, r22
 4a6:	17 06       	cpc	r1, r23
 4a8:	e8 07       	cpc	r30, r24
 4aa:	f9 07       	cpc	r31, r25
 4ac:	c0 f0       	brcs	.+48     	; 0x4de <__fp_cmp+0x46>
 4ae:	12 16       	cp	r1, r18
 4b0:	13 06       	cpc	r1, r19
 4b2:	e4 07       	cpc	r30, r20
 4b4:	f5 07       	cpc	r31, r21
 4b6:	98 f0       	brcs	.+38     	; 0x4de <__fp_cmp+0x46>
 4b8:	62 1b       	sub	r22, r18
 4ba:	73 0b       	sbc	r23, r19
 4bc:	84 0b       	sbc	r24, r20
 4be:	95 0b       	sbc	r25, r21
 4c0:	39 f4       	brne	.+14     	; 0x4d0 <__fp_cmp+0x38>
 4c2:	0a 26       	eor	r0, r26
 4c4:	61 f0       	breq	.+24     	; 0x4de <__fp_cmp+0x46>
 4c6:	23 2b       	or	r18, r19
 4c8:	24 2b       	or	r18, r20
 4ca:	25 2b       	or	r18, r21
 4cc:	21 f4       	brne	.+8      	; 0x4d6 <__fp_cmp+0x3e>
 4ce:	08 95       	ret
 4d0:	0a 26       	eor	r0, r26
 4d2:	09 f4       	brne	.+2      	; 0x4d6 <__fp_cmp+0x3e>
 4d4:	a1 40       	sbci	r26, 0x01	; 1
 4d6:	a6 95       	lsr	r26
 4d8:	8f ef       	ldi	r24, 0xFF	; 255
 4da:	81 1d       	adc	r24, r1
 4dc:	81 1d       	adc	r24, r1
 4de:	08 95       	ret

000004e0 <__fp_split3>:
 4e0:	57 fd       	sbrc	r21, 7
 4e2:	90 58       	subi	r25, 0x80	; 128
 4e4:	44 0f       	add	r20, r20
 4e6:	55 1f       	adc	r21, r21
 4e8:	59 f0       	breq	.+22     	; 0x500 <__fp_splitA+0x10>
 4ea:	5f 3f       	cpi	r21, 0xFF	; 255
 4ec:	71 f0       	breq	.+28     	; 0x50a <__fp_splitA+0x1a>
 4ee:	47 95       	ror	r20

000004f0 <__fp_splitA>:
 4f0:	88 0f       	add	r24, r24
 4f2:	97 fb       	bst	r25, 7
 4f4:	99 1f       	adc	r25, r25
 4f6:	61 f0       	breq	.+24     	; 0x510 <__fp_splitA+0x20>
 4f8:	9f 3f       	cpi	r25, 0xFF	; 255
 4fa:	79 f0       	breq	.+30     	; 0x51a <__fp_splitA+0x2a>
 4fc:	87 95       	ror	r24
 4fe:	08 95       	ret
 500:	12 16       	cp	r1, r18
 502:	13 06       	cpc	r1, r19
 504:	14 06       	cpc	r1, r20
 506:	55 1f       	adc	r21, r21
 508:	f2 cf       	rjmp	.-28     	; 0x4ee <__fp_split3+0xe>
 50a:	46 95       	lsr	r20
 50c:	f1 df       	rcall	.-30     	; 0x4f0 <__fp_splitA>
 50e:	08 c0       	rjmp	.+16     	; 0x520 <__fp_splitA+0x30>
 510:	16 16       	cp	r1, r22
 512:	17 06       	cpc	r1, r23
 514:	18 06       	cpc	r1, r24
 516:	99 1f       	adc	r25, r25
 518:	f1 cf       	rjmp	.-30     	; 0x4fc <__fp_splitA+0xc>
 51a:	86 95       	lsr	r24
 51c:	71 05       	cpc	r23, r1
 51e:	61 05       	cpc	r22, r1
 520:	08 94       	sec
 522:	08 95       	ret

00000524 <__fp_zero>:
 524:	e8 94       	clt

00000526 <__fp_szero>:
 526:	bb 27       	eor	r27, r27
 528:	66 27       	eor	r22, r22
 52a:	77 27       	eor	r23, r23
 52c:	cb 01       	movw	r24, r22
 52e:	97 f9       	bld	r25, 7
 530:	08 95       	ret

00000532 <__gesf2>:
 532:	b2 df       	rcall	.-156    	; 0x498 <__fp_cmp>
 534:	08 f4       	brcc	.+2      	; 0x538 <__gesf2+0x6>
 536:	8f ef       	ldi	r24, 0xFF	; 255
 538:	08 95       	ret

0000053a <__mulsf3>:
 53a:	0b d0       	rcall	.+22     	; 0x552 <__mulsf3x>
 53c:	78 c0       	rjmp	.+240    	; 0x62e <__fp_round>
 53e:	69 d0       	rcall	.+210    	; 0x612 <__fp_pscA>
 540:	28 f0       	brcs	.+10     	; 0x54c <__mulsf3+0x12>
 542:	6e d0       	rcall	.+220    	; 0x620 <__fp_pscB>
 544:	18 f0       	brcs	.+6      	; 0x54c <__mulsf3+0x12>
 546:	95 23       	and	r25, r21
 548:	09 f0       	breq	.+2      	; 0x54c <__mulsf3+0x12>
 54a:	5a c0       	rjmp	.+180    	; 0x600 <__fp_inf>
 54c:	5f c0       	rjmp	.+190    	; 0x60c <__fp_nan>
 54e:	11 24       	eor	r1, r1
 550:	ea cf       	rjmp	.-44     	; 0x526 <__fp_szero>

00000552 <__mulsf3x>:
 552:	c6 df       	rcall	.-116    	; 0x4e0 <__fp_split3>
 554:	a0 f3       	brcs	.-24     	; 0x53e <__mulsf3+0x4>

00000556 <__mulsf3_pse>:
 556:	95 9f       	mul	r25, r21
 558:	d1 f3       	breq	.-12     	; 0x54e <__mulsf3+0x14>
 55a:	95 0f       	add	r25, r21
 55c:	50 e0       	ldi	r21, 0x00	; 0
 55e:	55 1f       	adc	r21, r21
 560:	62 9f       	mul	r22, r18
 562:	f0 01       	movw	r30, r0
 564:	72 9f       	mul	r23, r18
 566:	bb 27       	eor	r27, r27
 568:	f0 0d       	add	r31, r0
 56a:	b1 1d       	adc	r27, r1
 56c:	63 9f       	mul	r22, r19
 56e:	aa 27       	eor	r26, r26
 570:	f0 0d       	add	r31, r0
 572:	b1 1d       	adc	r27, r1
 574:	aa 1f       	adc	r26, r26
 576:	64 9f       	mul	r22, r20
 578:	66 27       	eor	r22, r22
 57a:	b0 0d       	add	r27, r0
 57c:	a1 1d       	adc	r26, r1
 57e:	66 1f       	adc	r22, r22
 580:	82 9f       	mul	r24, r18
 582:	22 27       	eor	r18, r18
 584:	b0 0d       	add	r27, r0
 586:	a1 1d       	adc	r26, r1
 588:	62 1f       	adc	r22, r18
 58a:	73 9f       	mul	r23, r19
 58c:	b0 0d       	add	r27, r0
 58e:	a1 1d       	adc	r26, r1
 590:	62 1f       	adc	r22, r18
 592:	83 9f       	mul	r24, r19
 594:	a0 0d       	add	r26, r0
 596:	61 1d       	adc	r22, r1
 598:	22 1f       	adc	r18, r18
 59a:	74 9f       	mul	r23, r20
 59c:	33 27       	eor	r19, r19
 59e:	a0 0d       	add	r26, r0
 5a0:	61 1d       	adc	r22, r1
 5a2:	23 1f       	adc	r18, r19
 5a4:	84 9f       	mul	r24, r20
 5a6:	60 0d       	add	r22, r0
 5a8:	21 1d       	adc	r18, r1
 5aa:	82 2f       	mov	r24, r18
 5ac:	76 2f       	mov	r23, r22
 5ae:	6a 2f       	mov	r22, r26
 5b0:	11 24       	eor	r1, r1
 5b2:	9f 57       	subi	r25, 0x7F	; 127
 5b4:	50 40       	sbci	r21, 0x00	; 0
 5b6:	8a f0       	brmi	.+34     	; 0x5da <__mulsf3_pse+0x84>
 5b8:	e1 f0       	breq	.+56     	; 0x5f2 <__mulsf3_pse+0x9c>
 5ba:	88 23       	and	r24, r24
 5bc:	4a f0       	brmi	.+18     	; 0x5d0 <__mulsf3_pse+0x7a>
 5be:	ee 0f       	add	r30, r30
 5c0:	ff 1f       	adc	r31, r31
 5c2:	bb 1f       	adc	r27, r27
 5c4:	66 1f       	adc	r22, r22
 5c6:	77 1f       	adc	r23, r23
 5c8:	88 1f       	adc	r24, r24
 5ca:	91 50       	subi	r25, 0x01	; 1
 5cc:	50 40       	sbci	r21, 0x00	; 0
 5ce:	a9 f7       	brne	.-22     	; 0x5ba <__mulsf3_pse+0x64>
 5d0:	9e 3f       	cpi	r25, 0xFE	; 254
 5d2:	51 05       	cpc	r21, r1
 5d4:	70 f0       	brcs	.+28     	; 0x5f2 <__mulsf3_pse+0x9c>
 5d6:	14 c0       	rjmp	.+40     	; 0x600 <__fp_inf>
 5d8:	a6 cf       	rjmp	.-180    	; 0x526 <__fp_szero>
 5da:	5f 3f       	cpi	r21, 0xFF	; 255
 5dc:	ec f3       	brlt	.-6      	; 0x5d8 <__mulsf3_pse+0x82>
 5de:	98 3e       	cpi	r25, 0xE8	; 232
 5e0:	dc f3       	brlt	.-10     	; 0x5d8 <__mulsf3_pse+0x82>
 5e2:	86 95       	lsr	r24
 5e4:	77 95       	ror	r23
 5e6:	67 95       	ror	r22
 5e8:	b7 95       	ror	r27
 5ea:	f7 95       	ror	r31
 5ec:	e7 95       	ror	r30
 5ee:	9f 5f       	subi	r25, 0xFF	; 255
 5f0:	c1 f7       	brne	.-16     	; 0x5e2 <__mulsf3_pse+0x8c>
 5f2:	fe 2b       	or	r31, r30
 5f4:	88 0f       	add	r24, r24
 5f6:	91 1d       	adc	r25, r1
 5f8:	96 95       	lsr	r25
 5fa:	87 95       	ror	r24
 5fc:	97 f9       	bld	r25, 7
 5fe:	08 95       	ret

00000600 <__fp_inf>:
 600:	97 f9       	bld	r25, 7
 602:	9f 67       	ori	r25, 0x7F	; 127
 604:	80 e8       	ldi	r24, 0x80	; 128
 606:	70 e0       	ldi	r23, 0x00	; 0
 608:	60 e0       	ldi	r22, 0x00	; 0
 60a:	08 95       	ret

0000060c <__fp_nan>:
 60c:	9f ef       	ldi	r25, 0xFF	; 255
 60e:	80 ec       	ldi	r24, 0xC0	; 192
 610:	08 95       	ret

00000612 <__fp_pscA>:
 612:	00 24       	eor	r0, r0
 614:	0a 94       	dec	r0
 616:	16 16       	cp	r1, r22
 618:	17 06       	cpc	r1, r23
 61a:	18 06       	cpc	r1, r24
 61c:	09 06       	cpc	r0, r25
 61e:	08 95       	ret

00000620 <__fp_pscB>:
 620:	00 24       	eor	r0, r0
 622:	0a 94       	dec	r0
 624:	12 16       	cp	r1, r18
 626:	13 06       	cpc	r1, r19
 628:	14 06       	cpc	r1, r20
 62a:	05 06       	cpc	r0, r21
 62c:	08 95       	ret

0000062e <__fp_round>:
 62e:	09 2e       	mov	r0, r25
 630:	03 94       	inc	r0
 632:	00 0c       	add	r0, r0
 634:	11 f4       	brne	.+4      	; 0x63a <__fp_round+0xc>
 636:	88 23       	and	r24, r24
 638:	52 f0       	brmi	.+20     	; 0x64e <__fp_round+0x20>
 63a:	bb 0f       	add	r27, r27
 63c:	40 f4       	brcc	.+16     	; 0x64e <__fp_round+0x20>
 63e:	bf 2b       	or	r27, r31
 640:	11 f4       	brne	.+4      	; 0x646 <__fp_round+0x18>
 642:	60 ff       	sbrs	r22, 0
 644:	04 c0       	rjmp	.+8      	; 0x64e <__fp_round+0x20>
 646:	6f 5f       	subi	r22, 0xFF	; 255
 648:	7f 4f       	sbci	r23, 0xFF	; 255
 64a:	8f 4f       	sbci	r24, 0xFF	; 255
 64c:	9f 4f       	sbci	r25, 0xFF	; 255
 64e:	08 95       	ret

00000650 <_exit>:
 650:	f8 94       	cli

00000652 <__stop_program>:
 652:	ff cf       	rjmp	.-2      	; 0x652 <__stop_program>
