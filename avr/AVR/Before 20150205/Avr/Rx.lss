
Rx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006aa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000042  00800060  00800060  0000071e  2**0
                  ALLOC
  2 .debug_aranges 00000040  00000000  00000000  0000071e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000da  00000000  00000000  0000075e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003ad  00000000  00000000  00000838  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000201  00000000  00000000  00000be5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000430  00000000  00000000  00000de6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  00001218  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000125  00000000  00000000  000012b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	3a c1       	rjmp	.+628    	; 0x28c <__vector_11>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a2 3a       	cpi	r26, 0xA2	; 162
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	8c d0       	rcall	.+280    	; 0x15c <main>
  44:	30 c3       	rjmp	.+1632   	; 0x6a6 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <delayms>:
#define tbi(x,y) x ^= _BV(y) //toggle bit
#define is_high(x,y) (x & _BV(y)) == _BV(y) //(for input) checks if the 							  // input is high (Logic 1)
							  // if(is_high(PIND,PD0))

void delayms(uint8_t t)//delay in ms
{
  48:	df 93       	push	r29
  4a:	cf 93       	push	r28
  4c:	cd b7       	in	r28, 0x3d	; 61
  4e:	de b7       	in	r29, 0x3e	; 62
  50:	60 97       	sbiw	r28, 0x10	; 16
  52:	0f b6       	in	r0, 0x3f	; 63
  54:	f8 94       	cli
  56:	de bf       	out	0x3e, r29	; 62
  58:	0f be       	out	0x3f, r0	; 63
  5a:	cd bf       	out	0x3d, r28	; 61
  5c:	88 8b       	std	Y+16, r24	; 0x10
uint8_t i;
for(i=0;i<t;i++)
  5e:	1f 86       	std	Y+15, r1	; 0x0f
  60:	6f c0       	rjmp	.+222    	; 0x140 <delayms+0xf8>
  62:	80 e0       	ldi	r24, 0x00	; 0
  64:	90 e0       	ldi	r25, 0x00	; 0
  66:	a0 e8       	ldi	r26, 0x80	; 128
  68:	bf e3       	ldi	r27, 0x3F	; 63
  6a:	8b 87       	std	Y+11, r24	; 0x0b
  6c:	9c 87       	std	Y+12, r25	; 0x0c
  6e:	ad 87       	std	Y+13, r26	; 0x0d
  70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
  72:	6b 85       	ldd	r22, Y+11	; 0x0b
  74:	7c 85       	ldd	r23, Y+12	; 0x0c
  76:	8d 85       	ldd	r24, Y+13	; 0x0d
  78:	9e 85       	ldd	r25, Y+14	; 0x0e
  7a:	20 e0       	ldi	r18, 0x00	; 0
  7c:	30 e0       	ldi	r19, 0x00	; 0
  7e:	4a e7       	ldi	r20, 0x7A	; 122
  80:	54 e4       	ldi	r21, 0x44	; 68
  82:	86 d2       	rcall	.+1292   	; 0x590 <__mulsf3>
  84:	dc 01       	movw	r26, r24
  86:	cb 01       	movw	r24, r22
  88:	8f 83       	std	Y+7, r24	; 0x07
  8a:	98 87       	std	Y+8, r25	; 0x08
  8c:	a9 87       	std	Y+9, r26	; 0x09
  8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
  90:	6f 81       	ldd	r22, Y+7	; 0x07
  92:	78 85       	ldd	r23, Y+8	; 0x08
  94:	89 85       	ldd	r24, Y+9	; 0x09
  96:	9a 85       	ldd	r25, Y+10	; 0x0a
  98:	20 e0       	ldi	r18, 0x00	; 0
  9a:	30 e0       	ldi	r19, 0x00	; 0
  9c:	40 e8       	ldi	r20, 0x80	; 128
  9e:	5f e3       	ldi	r21, 0x3F	; 63
  a0:	f6 d1       	rcall	.+1004   	; 0x48e <__cmpsf2>
  a2:	88 23       	and	r24, r24
  a4:	2c f4       	brge	.+10     	; 0xb0 <delayms+0x68>
		__ticks = 1;
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	9e 83       	std	Y+6, r25	; 0x06
  ac:	8d 83       	std	Y+5, r24	; 0x05
  ae:	3b c0       	rjmp	.+118    	; 0x126 <delayms+0xde>
	else if (__tmp > 65535)
  b0:	6f 81       	ldd	r22, Y+7	; 0x07
  b2:	78 85       	ldd	r23, Y+8	; 0x08
  b4:	89 85       	ldd	r24, Y+9	; 0x09
  b6:	9a 85       	ldd	r25, Y+10	; 0x0a
  b8:	20 e0       	ldi	r18, 0x00	; 0
  ba:	3f ef       	ldi	r19, 0xFF	; 255
  bc:	4f e7       	ldi	r20, 0x7F	; 127
  be:	57 e4       	ldi	r21, 0x47	; 71
  c0:	63 d2       	rcall	.+1222   	; 0x588 <__gesf2>
  c2:	18 16       	cp	r1, r24
  c4:	3c f5       	brge	.+78     	; 0x114 <delayms+0xcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
  c6:	6b 85       	ldd	r22, Y+11	; 0x0b
  c8:	7c 85       	ldd	r23, Y+12	; 0x0c
  ca:	8d 85       	ldd	r24, Y+13	; 0x0d
  cc:	9e 85       	ldd	r25, Y+14	; 0x0e
  ce:	20 e0       	ldi	r18, 0x00	; 0
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	40 e2       	ldi	r20, 0x20	; 32
  d4:	51 e4       	ldi	r21, 0x41	; 65
  d6:	5c d2       	rcall	.+1208   	; 0x590 <__mulsf3>
  d8:	dc 01       	movw	r26, r24
  da:	cb 01       	movw	r24, r22
  dc:	bc 01       	movw	r22, r24
  de:	cd 01       	movw	r24, r26
  e0:	da d1       	rcall	.+948    	; 0x496 <__fixunssfsi>
  e2:	dc 01       	movw	r26, r24
  e4:	cb 01       	movw	r24, r22
  e6:	9e 83       	std	Y+6, r25	; 0x06
  e8:	8d 83       	std	Y+5, r24	; 0x05
  ea:	0f c0       	rjmp	.+30     	; 0x10a <delayms+0xc2>
  ec:	84 e6       	ldi	r24, 0x64	; 100
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	9c 83       	std	Y+4, r25	; 0x04
  f2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  f4:	8b 81       	ldd	r24, Y+3	; 0x03
  f6:	9c 81       	ldd	r25, Y+4	; 0x04
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <delayms+0xb0>
  fc:	9c 83       	std	Y+4, r25	; 0x04
  fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 100:	8d 81       	ldd	r24, Y+5	; 0x05
 102:	9e 81       	ldd	r25, Y+6	; 0x06
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	9e 83       	std	Y+6, r25	; 0x06
 108:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 10a:	8d 81       	ldd	r24, Y+5	; 0x05
 10c:	9e 81       	ldd	r25, Y+6	; 0x06
 10e:	00 97       	sbiw	r24, 0x00	; 0
 110:	69 f7       	brne	.-38     	; 0xec <delayms+0xa4>
 112:	13 c0       	rjmp	.+38     	; 0x13a <delayms+0xf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 114:	6f 81       	ldd	r22, Y+7	; 0x07
 116:	78 85       	ldd	r23, Y+8	; 0x08
 118:	89 85       	ldd	r24, Y+9	; 0x09
 11a:	9a 85       	ldd	r25, Y+10	; 0x0a
 11c:	bc d1       	rcall	.+888    	; 0x496 <__fixunssfsi>
 11e:	dc 01       	movw	r26, r24
 120:	cb 01       	movw	r24, r22
 122:	9e 83       	std	Y+6, r25	; 0x06
 124:	8d 83       	std	Y+5, r24	; 0x05
 126:	8d 81       	ldd	r24, Y+5	; 0x05
 128:	9e 81       	ldd	r25, Y+6	; 0x06
 12a:	9a 83       	std	Y+2, r25	; 0x02
 12c:	89 83       	std	Y+1, r24	; 0x01
 12e:	89 81       	ldd	r24, Y+1	; 0x01
 130:	9a 81       	ldd	r25, Y+2	; 0x02
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <delayms+0xea>
 136:	9a 83       	std	Y+2, r25	; 0x02
 138:	89 83       	std	Y+1, r24	; 0x01
 13a:	8f 85       	ldd	r24, Y+15	; 0x0f
 13c:	8f 5f       	subi	r24, 0xFF	; 255
 13e:	8f 87       	std	Y+15, r24	; 0x0f
 140:	9f 85       	ldd	r25, Y+15	; 0x0f
 142:	88 89       	ldd	r24, Y+16	; 0x10
 144:	98 17       	cp	r25, r24
 146:	08 f4       	brcc	.+2      	; 0x14a <delayms+0x102>
 148:	8c cf       	rjmp	.-232    	; 0x62 <delayms+0x1a>
	_delay_ms(1);
}
 14a:	60 96       	adiw	r28, 0x10	; 16
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	f8 94       	cli
 150:	de bf       	out	0x3e, r29	; 62
 152:	0f be       	out	0x3f, r0	; 63
 154:	cd bf       	out	0x3d, r28	; 61
 156:	cf 91       	pop	r28
 158:	df 91       	pop	r29
 15a:	08 95       	ret

0000015c <main>:
void main()
{
 15c:	0f 93       	push	r16
 15e:	1f 93       	push	r17
 160:	df 93       	push	r29
 162:	cf 93       	push	r28
 164:	cd b7       	in	r28, 0x3d	; 61
 166:	de b7       	in	r29, 0x3e	; 62
 168:	27 97       	sbiw	r28, 0x07	; 7
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	f8 94       	cli
 16e:	de bf       	out	0x3e, r29	; 62
 170:	0f be       	out	0x3f, r0	; 63
 172:	cd bf       	out	0x3d, r28	; 61

	uint8_t i; //Clasical loop varriable
	
	uint8_t packet[5],data=0;
 174:	19 82       	std	Y+1, r1	; 0x01

	//Initialize the USART with Baud rate = 2400bps
	USARTInit(UBRRVAL);   //USARTInit(416);
 176:	8f ec       	ldi	r24, 0xCF	; 207
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	61 d0       	rcall	.+194    	; 0x23e <USARTInit>

	//Enable Internal Pullups on PORTC
	DDRD = (1<<PIND7);
 17c:	e1 e3       	ldi	r30, 0x31	; 49
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 e8       	ldi	r24, 0x80	; 128
 182:	80 83       	st	Z, r24
	cbi(PORTD,PD7); //LED OFF;
 184:	a2 e3       	ldi	r26, 0x32	; 50
 186:	b0 e0       	ldi	r27, 0x00	; 0
 188:	e2 e3       	ldi	r30, 0x32	; 50
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	8f 77       	andi	r24, 0x7F	; 127
 190:	8c 93       	st	X, r24
	DDRB = (1<<PINB0);
 192:	e7 e3       	ldi	r30, 0x37	; 55
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	80 83       	st	Z, r24
	*/

	while(1)
	{
		//Wait for a packet
		while(!UDataAvailable());
 19a:	26 d1       	rcall	.+588    	; 0x3e8 <UDataAvailable>
 19c:	88 23       	and	r24, r24
 19e:	e9 f3       	breq	.-6      	; 0x19a <main+0x3e>
		if(UReadData()!='A') continue;
 1a0:	d6 d0       	rcall	.+428    	; 0x34e <UReadData>
 1a2:	81 34       	cpi	r24, 0x41	; 65
 1a4:	d1 f7       	brne	.-12     	; 0x19a <main+0x3e>
		while(!UDataAvailable());
 1a6:	20 d1       	rcall	.+576    	; 0x3e8 <UDataAvailable>
 1a8:	88 23       	and	r24, r24
 1aa:	e9 f3       	breq	.-6      	; 0x1a6 <main+0x4a>
		if(UReadData()!='A') continue;
 1ac:	d0 d0       	rcall	.+416    	; 0x34e <UReadData>
 1ae:	81 34       	cpi	r24, 0x41	; 65
 1b0:	a1 f7       	brne	.-24     	; 0x19a <main+0x3e>
		
		while(UDataAvailable()!=3);
 1b2:	1a d1       	rcall	.+564    	; 0x3e8 <UDataAvailable>
 1b4:	83 30       	cpi	r24, 0x03	; 3
 1b6:	e9 f7       	brne	.-6      	; 0x1b2 <main+0x56>

		//Get the packet
		for(i=2;i<5;i++)
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	8a 83       	std	Y+2, r24	; 0x02
 1bc:	0e c0       	rjmp	.+28     	; 0x1da <main+0x7e>
		{
			packet[i]=UReadData();
 1be:	8a 81       	ldd	r24, Y+2	; 0x02
 1c0:	08 2f       	mov	r16, r24
 1c2:	10 e0       	ldi	r17, 0x00	; 0
 1c4:	c4 d0       	rcall	.+392    	; 0x34e <UReadData>
 1c6:	28 2f       	mov	r18, r24
 1c8:	ce 01       	movw	r24, r28
 1ca:	03 96       	adiw	r24, 0x03	; 3
 1cc:	fc 01       	movw	r30, r24
 1ce:	e0 0f       	add	r30, r16
 1d0:	f1 1f       	adc	r31, r17
 1d2:	20 83       	st	Z, r18
		if(UReadData()!='A') continue;
		
		while(UDataAvailable()!=3);

		//Get the packet
		for(i=2;i<5;i++)
 1d4:	8a 81       	ldd	r24, Y+2	; 0x02
 1d6:	8f 5f       	subi	r24, 0xFF	; 255
 1d8:	8a 83       	std	Y+2, r24	; 0x02
 1da:	8a 81       	ldd	r24, Y+2	; 0x02
 1dc:	85 30       	cpi	r24, 0x05	; 5
 1de:	78 f3       	brcs	.-34     	; 0x1be <main+0x62>
		{
			packet[i]=UReadData();
		}

		//Is it ok?
		if(packet[2]!=((uint8_t)~packet[3])) continue;
 1e0:	8d 81       	ldd	r24, Y+5	; 0x05
 1e2:	9e 81       	ldd	r25, Y+6	; 0x06
 1e4:	90 95       	com	r25
 1e6:	89 17       	cp	r24, r25
 1e8:	c1 f6       	brne	.-80     	; 0x19a <main+0x3e>

		if(packet[4]!='Z') continue;
 1ea:	8f 81       	ldd	r24, Y+7	; 0x07
 1ec:	8a 35       	cpi	r24, 0x5A	; 90
 1ee:	a9 f6       	brne	.-86     	; 0x19a <main+0x3e>

		//The packet is ok
		data=packet[2];
 1f0:	8d 81       	ldd	r24, Y+5	; 0x05
 1f2:	89 83       	std	Y+1, r24	; 0x01

		//Now we have data put it to PORTC
		//PORTC=data;
        if(data == LEDON)
 1f4:	89 81       	ldd	r24, Y+1	; 0x01
 1f6:	81 31       	cpi	r24, 0x11	; 17
 1f8:	89 f4       	brne	.+34     	; 0x21c <main+0xc0>
		{
			//Send_Packet(RADDR, LEDON);
			sbi(PORTD,PD7); //LED ON;
 1fa:	a2 e3       	ldi	r26, 0x32	; 50
 1fc:	b0 e0       	ldi	r27, 0x00	; 0
 1fe:	e2 e3       	ldi	r30, 0x32	; 50
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	80 68       	ori	r24, 0x80	; 128
 206:	8c 93       	st	X, r24
			cbi(PORTB,PB0); //LED OFF;
 208:	a8 e3       	ldi	r26, 0x38	; 56
 20a:	b0 e0       	ldi	r27, 0x00	; 0
 20c:	e8 e3       	ldi	r30, 0x38	; 56
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	8e 7f       	andi	r24, 0xFE	; 254
 214:	8c 93       	st	X, r24
			delayms(100);
 216:	84 e6       	ldi	r24, 0x64	; 100
 218:	17 df       	rcall	.-466    	; 0x48 <delayms>
 21a:	bf cf       	rjmp	.-130    	; 0x19a <main+0x3e>
		}
		else
		{
			//send command to switch led OFF
			//Send_Packet(RADDR, LEDOFF);
			cbi(PORTD,PD7); //LED OFF;
 21c:	a2 e3       	ldi	r26, 0x32	; 50
 21e:	b0 e0       	ldi	r27, 0x00	; 0
 220:	e2 e3       	ldi	r30, 0x32	; 50
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	8f 77       	andi	r24, 0x7F	; 127
 228:	8c 93       	st	X, r24
			sbi(PORTB,PB0); //LED ON;
 22a:	a8 e3       	ldi	r26, 0x38	; 56
 22c:	b0 e0       	ldi	r27, 0x00	; 0
 22e:	e8 e3       	ldi	r30, 0x38	; 56
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	81 60       	ori	r24, 0x01	; 1
 236:	8c 93       	st	X, r24
			delayms(100);
 238:	84 e6       	ldi	r24, 0x64	; 100
 23a:	06 df       	rcall	.-500    	; 0x48 <delayms>
 23c:	ae cf       	rjmp	.-164    	; 0x19a <main+0x3e>

0000023e <USARTInit>:

#include "usart.h"


void USARTInit(uint16_t ubrrvalue)
{
 23e:	df 93       	push	r29
 240:	cf 93       	push	r28
 242:	00 d0       	rcall	.+0      	; 0x244 <USARTInit+0x6>
 244:	cd b7       	in	r28, 0x3d	; 61
 246:	de b7       	in	r29, 0x3e	; 62
 248:	9a 83       	std	Y+2, r25	; 0x02
 24a:	89 83       	std	Y+1, r24	; 0x01
	//Setup q
	UQFront=UQEnd=-1;
 24c:	8f ef       	ldi	r24, 0xFF	; 255
 24e:	80 93 61 00 	sts	0x0061, r24
 252:	80 91 61 00 	lds	r24, 0x0061
 256:	80 93 60 00 	sts	0x0060, r24

	//Set Baud rate
	UBRRH=(unsigned char)(ubrrvalue>>8);
 25a:	e0 e4       	ldi	r30, 0x40	; 64
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	89 81       	ldd	r24, Y+1	; 0x01
 260:	9a 81       	ldd	r25, Y+2	; 0x02
 262:	89 2f       	mov	r24, r25
 264:	99 27       	eor	r25, r25
 266:	80 83       	st	Z, r24
	UBRRL=(unsigned char)ubrrvalue;
 268:	e9 e2       	ldi	r30, 0x29	; 41
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	89 81       	ldd	r24, Y+1	; 0x01
 26e:	80 83       	st	Z, r24
	1 StopBit
	char size 8

	*/

	UCSRC=(1<<URSEL)|(3<<UCSZ0);
 270:	e0 e4       	ldi	r30, 0x40	; 64
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	86 e8       	ldi	r24, 0x86	; 134
 276:	80 83       	st	Z, r24

	Enable The recevier and transmitter

	*/

	UCSRB=(1<<RXCIE)|(1<<TXEN);
 278:	ea e2       	ldi	r30, 0x2A	; 42
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	88 e8       	ldi	r24, 0x88	; 136
 27e:	80 83       	st	Z, r24
	sei();
 280:	78 94       	sei

}
 282:	0f 90       	pop	r0
 284:	0f 90       	pop	r0
 286:	cf 91       	pop	r28
 288:	df 91       	pop	r29
 28a:	08 95       	ret

0000028c <__vector_11>:

//The USART ISR
ISR(USART_RXC_VECT)
{
 28c:	1f 92       	push	r1
 28e:	0f 92       	push	r0
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	0f 92       	push	r0
 294:	11 24       	eor	r1, r1
 296:	2f 93       	push	r18
 298:	3f 93       	push	r19
 29a:	8f 93       	push	r24
 29c:	9f 93       	push	r25
 29e:	ef 93       	push	r30
 2a0:	ff 93       	push	r31
 2a2:	df 93       	push	r29
 2a4:	cf 93       	push	r28
 2a6:	0f 92       	push	r0
 2a8:	cd b7       	in	r28, 0x3d	; 61
 2aa:	de b7       	in	r29, 0x3e	; 62
	//Read the data
	char data=UDR;
 2ac:	ec e2       	ldi	r30, 0x2C	; 44
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	80 81       	ld	r24, Z
 2b2:	89 83       	std	Y+1, r24	; 0x01

	//Now add it to q

	if(((UQEnd==RECEIVE_BUFF_SIZE-1) && UQFront==0) || ((UQEnd+1)==UQFront))
 2b4:	80 91 61 00 	lds	r24, 0x0061
 2b8:	8f 33       	cpi	r24, 0x3F	; 63
 2ba:	21 f4       	brne	.+8      	; 0x2c4 <__vector_11+0x38>
 2bc:	80 91 60 00 	lds	r24, 0x0060
 2c0:	88 23       	and	r24, r24
 2c2:	81 f0       	breq	.+32     	; 0x2e4 <__vector_11+0x58>
 2c4:	80 91 61 00 	lds	r24, 0x0061
 2c8:	99 27       	eor	r25, r25
 2ca:	87 fd       	sbrc	r24, 7
 2cc:	90 95       	com	r25
 2ce:	9c 01       	movw	r18, r24
 2d0:	2f 5f       	subi	r18, 0xFF	; 255
 2d2:	3f 4f       	sbci	r19, 0xFF	; 255
 2d4:	80 91 60 00 	lds	r24, 0x0060
 2d8:	99 27       	eor	r25, r25
 2da:	87 fd       	sbrc	r24, 7
 2dc:	90 95       	com	r25
 2de:	28 17       	cp	r18, r24
 2e0:	39 07       	cpc	r19, r25
 2e2:	59 f4       	brne	.+22     	; 0x2fa <__vector_11+0x6e>
	{
		//Q Full
		UQFront++;
 2e4:	80 91 60 00 	lds	r24, 0x0060
 2e8:	8f 5f       	subi	r24, 0xFF	; 255
 2ea:	80 93 60 00 	sts	0x0060, r24
		if(UQFront==RECEIVE_BUFF_SIZE) UQFront=0;
 2ee:	80 91 60 00 	lds	r24, 0x0060
 2f2:	80 34       	cpi	r24, 0x40	; 64
 2f4:	11 f4       	brne	.+4      	; 0x2fa <__vector_11+0x6e>
 2f6:	10 92 60 00 	sts	0x0060, r1
	}
	

	if(UQEnd==RECEIVE_BUFF_SIZE-1)
 2fa:	80 91 61 00 	lds	r24, 0x0061
 2fe:	8f 33       	cpi	r24, 0x3F	; 63
 300:	19 f4       	brne	.+6      	; 0x308 <__vector_11+0x7c>
		UQEnd=0;
 302:	10 92 61 00 	sts	0x0061, r1
 306:	05 c0       	rjmp	.+10     	; 0x312 <__vector_11+0x86>
	else
		UQEnd++;
 308:	80 91 61 00 	lds	r24, 0x0061
 30c:	8f 5f       	subi	r24, 0xFF	; 255
 30e:	80 93 61 00 	sts	0x0061, r24


	URBuff[UQEnd]=data;
 312:	80 91 61 00 	lds	r24, 0x0061
 316:	99 27       	eor	r25, r25
 318:	87 fd       	sbrc	r24, 7
 31a:	90 95       	com	r25
 31c:	fc 01       	movw	r30, r24
 31e:	ee 59       	subi	r30, 0x9E	; 158
 320:	ff 4f       	sbci	r31, 0xFF	; 255
 322:	89 81       	ldd	r24, Y+1	; 0x01
 324:	80 83       	st	Z, r24

	if(UQFront==-1) UQFront=0;
 326:	80 91 60 00 	lds	r24, 0x0060
 32a:	8f 3f       	cpi	r24, 0xFF	; 255
 32c:	11 f4       	brne	.+4      	; 0x332 <__vector_11+0xa6>
 32e:	10 92 60 00 	sts	0x0060, r1

}
 332:	0f 90       	pop	r0
 334:	cf 91       	pop	r28
 336:	df 91       	pop	r29
 338:	ff 91       	pop	r31
 33a:	ef 91       	pop	r30
 33c:	9f 91       	pop	r25
 33e:	8f 91       	pop	r24
 340:	3f 91       	pop	r19
 342:	2f 91       	pop	r18
 344:	0f 90       	pop	r0
 346:	0f be       	out	0x3f, r0	; 63
 348:	0f 90       	pop	r0
 34a:	1f 90       	pop	r1
 34c:	18 95       	reti

0000034e <UReadData>:

char UReadData()
{
 34e:	df 93       	push	r29
 350:	cf 93       	push	r28
 352:	00 d0       	rcall	.+0      	; 0x354 <UReadData+0x6>
 354:	cd b7       	in	r28, 0x3d	; 61
 356:	de b7       	in	r29, 0x3e	; 62
	char data;
	
	//Check if q is empty
	if(UQFront==-1)
 358:	80 91 60 00 	lds	r24, 0x0060
 35c:	8f 3f       	cpi	r24, 0xFF	; 255
 35e:	11 f4       	brne	.+4      	; 0x364 <UReadData+0x16>
		return 0;
 360:	1a 82       	std	Y+2, r1	; 0x02
 362:	25 c0       	rjmp	.+74     	; 0x3ae <UReadData+0x60>
	
	data=URBuff[UQFront];
 364:	80 91 60 00 	lds	r24, 0x0060
 368:	99 27       	eor	r25, r25
 36a:	87 fd       	sbrc	r24, 7
 36c:	90 95       	com	r25
 36e:	fc 01       	movw	r30, r24
 370:	ee 59       	subi	r30, 0x9E	; 158
 372:	ff 4f       	sbci	r31, 0xFF	; 255
 374:	80 81       	ld	r24, Z
 376:	89 83       	std	Y+1, r24	; 0x01
	
	if(UQFront==UQEnd)
 378:	90 91 60 00 	lds	r25, 0x0060
 37c:	80 91 61 00 	lds	r24, 0x0061
 380:	98 17       	cp	r25, r24
 382:	41 f4       	brne	.+16     	; 0x394 <UReadData+0x46>
	{
	//If single data is left
	//So empty q
	UQFront=UQEnd=-1;
 384:	8f ef       	ldi	r24, 0xFF	; 255
 386:	80 93 61 00 	sts	0x0061, r24
 38a:	80 91 61 00 	lds	r24, 0x0061
 38e:	80 93 60 00 	sts	0x0060, r24
 392:	0b c0       	rjmp	.+22     	; 0x3aa <UReadData+0x5c>
	}
	else
	{
		UQFront++;
 394:	80 91 60 00 	lds	r24, 0x0060
 398:	8f 5f       	subi	r24, 0xFF	; 255
 39a:	80 93 60 00 	sts	0x0060, r24

		if(UQFront==RECEIVE_BUFF_SIZE)
 39e:	80 91 60 00 	lds	r24, 0x0060
 3a2:	80 34       	cpi	r24, 0x40	; 64
 3a4:	11 f4       	brne	.+4      	; 0x3aa <UReadData+0x5c>
		UQFront=0;
 3a6:	10 92 60 00 	sts	0x0060, r1
	}

	return data;
 3aa:	89 81       	ldd	r24, Y+1	; 0x01
 3ac:	8a 83       	std	Y+2, r24	; 0x02
 3ae:	8a 81       	ldd	r24, Y+2	; 0x02
}
 3b0:	0f 90       	pop	r0
 3b2:	0f 90       	pop	r0
 3b4:	cf 91       	pop	r28
 3b6:	df 91       	pop	r29
 3b8:	08 95       	ret

000003ba <UWriteData>:

void UWriteData(char data)
{
 3ba:	df 93       	push	r29
 3bc:	cf 93       	push	r28
 3be:	0f 92       	push	r0
 3c0:	cd b7       	in	r28, 0x3d	; 61
 3c2:	de b7       	in	r29, 0x3e	; 62
 3c4:	89 83       	std	Y+1, r24	; 0x01
	//Wait For Transmitter to become ready
	while(!(UCSRA & (1<<UDRE)));
 3c6:	eb e2       	ldi	r30, 0x2B	; 43
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	80 81       	ld	r24, Z
 3cc:	88 2f       	mov	r24, r24
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	80 72       	andi	r24, 0x20	; 32
 3d2:	90 70       	andi	r25, 0x00	; 0
 3d4:	00 97       	sbiw	r24, 0x00	; 0
 3d6:	b9 f3       	breq	.-18     	; 0x3c6 <UWriteData+0xc>

	//Now write
	UDR=data;
 3d8:	ec e2       	ldi	r30, 0x2C	; 44
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	89 81       	ldd	r24, Y+1	; 0x01
 3de:	80 83       	st	Z, r24
}
 3e0:	0f 90       	pop	r0
 3e2:	cf 91       	pop	r28
 3e4:	df 91       	pop	r29
 3e6:	08 95       	ret

000003e8 <UDataAvailable>:

uint8_t UDataAvailable()
{
 3e8:	df 93       	push	r29
 3ea:	cf 93       	push	r28
 3ec:	0f 92       	push	r0
 3ee:	cd b7       	in	r28, 0x3d	; 61
 3f0:	de b7       	in	r29, 0x3e	; 62
	if(UQFront==-1) return 0;
 3f2:	80 91 60 00 	lds	r24, 0x0060
 3f6:	8f 3f       	cpi	r24, 0xFF	; 255
 3f8:	11 f4       	brne	.+4      	; 0x3fe <UDataAvailable+0x16>
 3fa:	19 82       	std	Y+1, r1	; 0x01
 3fc:	26 c0       	rjmp	.+76     	; 0x44a <UDataAvailable+0x62>
	if(UQFront<UQEnd)
 3fe:	90 91 60 00 	lds	r25, 0x0060
 402:	80 91 61 00 	lds	r24, 0x0061
 406:	98 17       	cp	r25, r24
 408:	64 f4       	brge	.+24     	; 0x422 <UDataAvailable+0x3a>
		return(UQEnd-UQFront+1);
 40a:	80 91 61 00 	lds	r24, 0x0061
 40e:	98 2f       	mov	r25, r24
 410:	80 91 60 00 	lds	r24, 0x0060
 414:	29 2f       	mov	r18, r25
 416:	28 1b       	sub	r18, r24
 418:	82 2f       	mov	r24, r18
 41a:	98 2f       	mov	r25, r24
 41c:	9f 5f       	subi	r25, 0xFF	; 255
 41e:	99 83       	std	Y+1, r25	; 0x01
 420:	14 c0       	rjmp	.+40     	; 0x44a <UDataAvailable+0x62>
	else if(UQFront>UQEnd)
 422:	90 91 60 00 	lds	r25, 0x0060
 426:	80 91 61 00 	lds	r24, 0x0061
 42a:	89 17       	cp	r24, r25
 42c:	64 f4       	brge	.+24     	; 0x446 <UDataAvailable+0x5e>
		return (RECEIVE_BUFF_SIZE-UQFront+UQEnd+1);
 42e:	80 91 61 00 	lds	r24, 0x0061
 432:	98 2f       	mov	r25, r24
 434:	80 91 60 00 	lds	r24, 0x0060
 438:	29 2f       	mov	r18, r25
 43a:	28 1b       	sub	r18, r24
 43c:	82 2f       	mov	r24, r18
 43e:	98 2f       	mov	r25, r24
 440:	9f 5b       	subi	r25, 0xBF	; 191
 442:	99 83       	std	Y+1, r25	; 0x01
 444:	02 c0       	rjmp	.+4      	; 0x44a <UDataAvailable+0x62>
	else
		return 1;
 446:	21 e0       	ldi	r18, 0x01	; 1
 448:	29 83       	std	Y+1, r18	; 0x01
 44a:	89 81       	ldd	r24, Y+1	; 0x01
}
 44c:	0f 90       	pop	r0
 44e:	cf 91       	pop	r28
 450:	df 91       	pop	r29
 452:	08 95       	ret

00000454 <UWriteString>:

void UWriteString(char *str)
{
 454:	df 93       	push	r29
 456:	cf 93       	push	r28
 458:	00 d0       	rcall	.+0      	; 0x45a <UWriteString+0x6>
 45a:	cd b7       	in	r28, 0x3d	; 61
 45c:	de b7       	in	r29, 0x3e	; 62
 45e:	9a 83       	std	Y+2, r25	; 0x02
 460:	89 83       	std	Y+1, r24	; 0x01
 462:	09 c0       	rjmp	.+18     	; 0x476 <__stack+0x17>
	while((*str)!='\0')
	{
		UWriteData(*str);
 464:	e9 81       	ldd	r30, Y+1	; 0x01
 466:	fa 81       	ldd	r31, Y+2	; 0x02
 468:	80 81       	ld	r24, Z
 46a:	a7 df       	rcall	.-178    	; 0x3ba <UWriteData>
		str++;
 46c:	89 81       	ldd	r24, Y+1	; 0x01
 46e:	9a 81       	ldd	r25, Y+2	; 0x02
 470:	01 96       	adiw	r24, 0x01	; 1
 472:	9a 83       	std	Y+2, r25	; 0x02
 474:	89 83       	std	Y+1, r24	; 0x01
		return 1;
}

void UWriteString(char *str)
{
	while((*str)!='\0')
 476:	e9 81       	ldd	r30, Y+1	; 0x01
 478:	fa 81       	ldd	r31, Y+2	; 0x02
 47a:	80 81       	ld	r24, Z
 47c:	88 23       	and	r24, r24
 47e:	91 f7       	brne	.-28     	; 0x464 <__stack+0x5>
	{
		UWriteData(*str);
		str++;
	}

	UWriteData('\0');
 480:	80 e0       	ldi	r24, 0x00	; 0
 482:	9b df       	rcall	.-202    	; 0x3ba <UWriteData>
}
 484:	0f 90       	pop	r0
 486:	0f 90       	pop	r0
 488:	cf 91       	pop	r28
 48a:	df 91       	pop	r29
 48c:	08 95       	ret

0000048e <__cmpsf2>:
 48e:	2f d0       	rcall	.+94     	; 0x4ee <__fp_cmp>
 490:	08 f4       	brcc	.+2      	; 0x494 <__cmpsf2+0x6>
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	08 95       	ret

00000496 <__fixunssfsi>:
 496:	57 d0       	rcall	.+174    	; 0x546 <__fp_splitA>
 498:	88 f0       	brcs	.+34     	; 0x4bc <__fixunssfsi+0x26>
 49a:	9f 57       	subi	r25, 0x7F	; 127
 49c:	90 f0       	brcs	.+36     	; 0x4c2 <__fixunssfsi+0x2c>
 49e:	b9 2f       	mov	r27, r25
 4a0:	99 27       	eor	r25, r25
 4a2:	b7 51       	subi	r27, 0x17	; 23
 4a4:	a0 f0       	brcs	.+40     	; 0x4ce <__fixunssfsi+0x38>
 4a6:	d1 f0       	breq	.+52     	; 0x4dc <__fixunssfsi+0x46>
 4a8:	66 0f       	add	r22, r22
 4aa:	77 1f       	adc	r23, r23
 4ac:	88 1f       	adc	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	1a f0       	brmi	.+6      	; 0x4b8 <__fixunssfsi+0x22>
 4b2:	ba 95       	dec	r27
 4b4:	c9 f7       	brne	.-14     	; 0x4a8 <__fixunssfsi+0x12>
 4b6:	12 c0       	rjmp	.+36     	; 0x4dc <__fixunssfsi+0x46>
 4b8:	b1 30       	cpi	r27, 0x01	; 1
 4ba:	81 f0       	breq	.+32     	; 0x4dc <__fixunssfsi+0x46>
 4bc:	5e d0       	rcall	.+188    	; 0x57a <__fp_zero>
 4be:	b1 e0       	ldi	r27, 0x01	; 1
 4c0:	08 95       	ret
 4c2:	5b c0       	rjmp	.+182    	; 0x57a <__fp_zero>
 4c4:	67 2f       	mov	r22, r23
 4c6:	78 2f       	mov	r23, r24
 4c8:	88 27       	eor	r24, r24
 4ca:	b8 5f       	subi	r27, 0xF8	; 248
 4cc:	39 f0       	breq	.+14     	; 0x4dc <__fixunssfsi+0x46>
 4ce:	b9 3f       	cpi	r27, 0xF9	; 249
 4d0:	cc f3       	brlt	.-14     	; 0x4c4 <__fixunssfsi+0x2e>
 4d2:	86 95       	lsr	r24
 4d4:	77 95       	ror	r23
 4d6:	67 95       	ror	r22
 4d8:	b3 95       	inc	r27
 4da:	d9 f7       	brne	.-10     	; 0x4d2 <__fixunssfsi+0x3c>
 4dc:	3e f4       	brtc	.+14     	; 0x4ec <__fixunssfsi+0x56>
 4de:	90 95       	com	r25
 4e0:	80 95       	com	r24
 4e2:	70 95       	com	r23
 4e4:	61 95       	neg	r22
 4e6:	7f 4f       	sbci	r23, 0xFF	; 255
 4e8:	8f 4f       	sbci	r24, 0xFF	; 255
 4ea:	9f 4f       	sbci	r25, 0xFF	; 255
 4ec:	08 95       	ret

000004ee <__fp_cmp>:
 4ee:	99 0f       	add	r25, r25
 4f0:	00 08       	sbc	r0, r0
 4f2:	55 0f       	add	r21, r21
 4f4:	aa 0b       	sbc	r26, r26
 4f6:	e0 e8       	ldi	r30, 0x80	; 128
 4f8:	fe ef       	ldi	r31, 0xFE	; 254
 4fa:	16 16       	cp	r1, r22
 4fc:	17 06       	cpc	r1, r23
 4fe:	e8 07       	cpc	r30, r24
 500:	f9 07       	cpc	r31, r25
 502:	c0 f0       	brcs	.+48     	; 0x534 <__fp_cmp+0x46>
 504:	12 16       	cp	r1, r18
 506:	13 06       	cpc	r1, r19
 508:	e4 07       	cpc	r30, r20
 50a:	f5 07       	cpc	r31, r21
 50c:	98 f0       	brcs	.+38     	; 0x534 <__fp_cmp+0x46>
 50e:	62 1b       	sub	r22, r18
 510:	73 0b       	sbc	r23, r19
 512:	84 0b       	sbc	r24, r20
 514:	95 0b       	sbc	r25, r21
 516:	39 f4       	brne	.+14     	; 0x526 <__fp_cmp+0x38>
 518:	0a 26       	eor	r0, r26
 51a:	61 f0       	breq	.+24     	; 0x534 <__fp_cmp+0x46>
 51c:	23 2b       	or	r18, r19
 51e:	24 2b       	or	r18, r20
 520:	25 2b       	or	r18, r21
 522:	21 f4       	brne	.+8      	; 0x52c <__fp_cmp+0x3e>
 524:	08 95       	ret
 526:	0a 26       	eor	r0, r26
 528:	09 f4       	brne	.+2      	; 0x52c <__fp_cmp+0x3e>
 52a:	a1 40       	sbci	r26, 0x01	; 1
 52c:	a6 95       	lsr	r26
 52e:	8f ef       	ldi	r24, 0xFF	; 255
 530:	81 1d       	adc	r24, r1
 532:	81 1d       	adc	r24, r1
 534:	08 95       	ret

00000536 <__fp_split3>:
 536:	57 fd       	sbrc	r21, 7
 538:	90 58       	subi	r25, 0x80	; 128
 53a:	44 0f       	add	r20, r20
 53c:	55 1f       	adc	r21, r21
 53e:	59 f0       	breq	.+22     	; 0x556 <__fp_splitA+0x10>
 540:	5f 3f       	cpi	r21, 0xFF	; 255
 542:	71 f0       	breq	.+28     	; 0x560 <__fp_splitA+0x1a>
 544:	47 95       	ror	r20

00000546 <__fp_splitA>:
 546:	88 0f       	add	r24, r24
 548:	97 fb       	bst	r25, 7
 54a:	99 1f       	adc	r25, r25
 54c:	61 f0       	breq	.+24     	; 0x566 <__fp_splitA+0x20>
 54e:	9f 3f       	cpi	r25, 0xFF	; 255
 550:	79 f0       	breq	.+30     	; 0x570 <__fp_splitA+0x2a>
 552:	87 95       	ror	r24
 554:	08 95       	ret
 556:	12 16       	cp	r1, r18
 558:	13 06       	cpc	r1, r19
 55a:	14 06       	cpc	r1, r20
 55c:	55 1f       	adc	r21, r21
 55e:	f2 cf       	rjmp	.-28     	; 0x544 <__fp_split3+0xe>
 560:	46 95       	lsr	r20
 562:	f1 df       	rcall	.-30     	; 0x546 <__fp_splitA>
 564:	08 c0       	rjmp	.+16     	; 0x576 <__fp_splitA+0x30>
 566:	16 16       	cp	r1, r22
 568:	17 06       	cpc	r1, r23
 56a:	18 06       	cpc	r1, r24
 56c:	99 1f       	adc	r25, r25
 56e:	f1 cf       	rjmp	.-30     	; 0x552 <__fp_splitA+0xc>
 570:	86 95       	lsr	r24
 572:	71 05       	cpc	r23, r1
 574:	61 05       	cpc	r22, r1
 576:	08 94       	sec
 578:	08 95       	ret

0000057a <__fp_zero>:
 57a:	e8 94       	clt

0000057c <__fp_szero>:
 57c:	bb 27       	eor	r27, r27
 57e:	66 27       	eor	r22, r22
 580:	77 27       	eor	r23, r23
 582:	cb 01       	movw	r24, r22
 584:	97 f9       	bld	r25, 7
 586:	08 95       	ret

00000588 <__gesf2>:
 588:	b2 df       	rcall	.-156    	; 0x4ee <__fp_cmp>
 58a:	08 f4       	brcc	.+2      	; 0x58e <__gesf2+0x6>
 58c:	8f ef       	ldi	r24, 0xFF	; 255
 58e:	08 95       	ret

00000590 <__mulsf3>:
 590:	0b d0       	rcall	.+22     	; 0x5a8 <__mulsf3x>
 592:	78 c0       	rjmp	.+240    	; 0x684 <__fp_round>
 594:	69 d0       	rcall	.+210    	; 0x668 <__fp_pscA>
 596:	28 f0       	brcs	.+10     	; 0x5a2 <__mulsf3+0x12>
 598:	6e d0       	rcall	.+220    	; 0x676 <__fp_pscB>
 59a:	18 f0       	brcs	.+6      	; 0x5a2 <__mulsf3+0x12>
 59c:	95 23       	and	r25, r21
 59e:	09 f0       	breq	.+2      	; 0x5a2 <__mulsf3+0x12>
 5a0:	5a c0       	rjmp	.+180    	; 0x656 <__fp_inf>
 5a2:	5f c0       	rjmp	.+190    	; 0x662 <__fp_nan>
 5a4:	11 24       	eor	r1, r1
 5a6:	ea cf       	rjmp	.-44     	; 0x57c <__fp_szero>

000005a8 <__mulsf3x>:
 5a8:	c6 df       	rcall	.-116    	; 0x536 <__fp_split3>
 5aa:	a0 f3       	brcs	.-24     	; 0x594 <__mulsf3+0x4>

000005ac <__mulsf3_pse>:
 5ac:	95 9f       	mul	r25, r21
 5ae:	d1 f3       	breq	.-12     	; 0x5a4 <__mulsf3+0x14>
 5b0:	95 0f       	add	r25, r21
 5b2:	50 e0       	ldi	r21, 0x00	; 0
 5b4:	55 1f       	adc	r21, r21
 5b6:	62 9f       	mul	r22, r18
 5b8:	f0 01       	movw	r30, r0
 5ba:	72 9f       	mul	r23, r18
 5bc:	bb 27       	eor	r27, r27
 5be:	f0 0d       	add	r31, r0
 5c0:	b1 1d       	adc	r27, r1
 5c2:	63 9f       	mul	r22, r19
 5c4:	aa 27       	eor	r26, r26
 5c6:	f0 0d       	add	r31, r0
 5c8:	b1 1d       	adc	r27, r1
 5ca:	aa 1f       	adc	r26, r26
 5cc:	64 9f       	mul	r22, r20
 5ce:	66 27       	eor	r22, r22
 5d0:	b0 0d       	add	r27, r0
 5d2:	a1 1d       	adc	r26, r1
 5d4:	66 1f       	adc	r22, r22
 5d6:	82 9f       	mul	r24, r18
 5d8:	22 27       	eor	r18, r18
 5da:	b0 0d       	add	r27, r0
 5dc:	a1 1d       	adc	r26, r1
 5de:	62 1f       	adc	r22, r18
 5e0:	73 9f       	mul	r23, r19
 5e2:	b0 0d       	add	r27, r0
 5e4:	a1 1d       	adc	r26, r1
 5e6:	62 1f       	adc	r22, r18
 5e8:	83 9f       	mul	r24, r19
 5ea:	a0 0d       	add	r26, r0
 5ec:	61 1d       	adc	r22, r1
 5ee:	22 1f       	adc	r18, r18
 5f0:	74 9f       	mul	r23, r20
 5f2:	33 27       	eor	r19, r19
 5f4:	a0 0d       	add	r26, r0
 5f6:	61 1d       	adc	r22, r1
 5f8:	23 1f       	adc	r18, r19
 5fa:	84 9f       	mul	r24, r20
 5fc:	60 0d       	add	r22, r0
 5fe:	21 1d       	adc	r18, r1
 600:	82 2f       	mov	r24, r18
 602:	76 2f       	mov	r23, r22
 604:	6a 2f       	mov	r22, r26
 606:	11 24       	eor	r1, r1
 608:	9f 57       	subi	r25, 0x7F	; 127
 60a:	50 40       	sbci	r21, 0x00	; 0
 60c:	8a f0       	brmi	.+34     	; 0x630 <__mulsf3_pse+0x84>
 60e:	e1 f0       	breq	.+56     	; 0x648 <__mulsf3_pse+0x9c>
 610:	88 23       	and	r24, r24
 612:	4a f0       	brmi	.+18     	; 0x626 <__mulsf3_pse+0x7a>
 614:	ee 0f       	add	r30, r30
 616:	ff 1f       	adc	r31, r31
 618:	bb 1f       	adc	r27, r27
 61a:	66 1f       	adc	r22, r22
 61c:	77 1f       	adc	r23, r23
 61e:	88 1f       	adc	r24, r24
 620:	91 50       	subi	r25, 0x01	; 1
 622:	50 40       	sbci	r21, 0x00	; 0
 624:	a9 f7       	brne	.-22     	; 0x610 <__mulsf3_pse+0x64>
 626:	9e 3f       	cpi	r25, 0xFE	; 254
 628:	51 05       	cpc	r21, r1
 62a:	70 f0       	brcs	.+28     	; 0x648 <__mulsf3_pse+0x9c>
 62c:	14 c0       	rjmp	.+40     	; 0x656 <__fp_inf>
 62e:	a6 cf       	rjmp	.-180    	; 0x57c <__fp_szero>
 630:	5f 3f       	cpi	r21, 0xFF	; 255
 632:	ec f3       	brlt	.-6      	; 0x62e <__mulsf3_pse+0x82>
 634:	98 3e       	cpi	r25, 0xE8	; 232
 636:	dc f3       	brlt	.-10     	; 0x62e <__mulsf3_pse+0x82>
 638:	86 95       	lsr	r24
 63a:	77 95       	ror	r23
 63c:	67 95       	ror	r22
 63e:	b7 95       	ror	r27
 640:	f7 95       	ror	r31
 642:	e7 95       	ror	r30
 644:	9f 5f       	subi	r25, 0xFF	; 255
 646:	c1 f7       	brne	.-16     	; 0x638 <__mulsf3_pse+0x8c>
 648:	fe 2b       	or	r31, r30
 64a:	88 0f       	add	r24, r24
 64c:	91 1d       	adc	r25, r1
 64e:	96 95       	lsr	r25
 650:	87 95       	ror	r24
 652:	97 f9       	bld	r25, 7
 654:	08 95       	ret

00000656 <__fp_inf>:
 656:	97 f9       	bld	r25, 7
 658:	9f 67       	ori	r25, 0x7F	; 127
 65a:	80 e8       	ldi	r24, 0x80	; 128
 65c:	70 e0       	ldi	r23, 0x00	; 0
 65e:	60 e0       	ldi	r22, 0x00	; 0
 660:	08 95       	ret

00000662 <__fp_nan>:
 662:	9f ef       	ldi	r25, 0xFF	; 255
 664:	80 ec       	ldi	r24, 0xC0	; 192
 666:	08 95       	ret

00000668 <__fp_pscA>:
 668:	00 24       	eor	r0, r0
 66a:	0a 94       	dec	r0
 66c:	16 16       	cp	r1, r22
 66e:	17 06       	cpc	r1, r23
 670:	18 06       	cpc	r1, r24
 672:	09 06       	cpc	r0, r25
 674:	08 95       	ret

00000676 <__fp_pscB>:
 676:	00 24       	eor	r0, r0
 678:	0a 94       	dec	r0
 67a:	12 16       	cp	r1, r18
 67c:	13 06       	cpc	r1, r19
 67e:	14 06       	cpc	r1, r20
 680:	05 06       	cpc	r0, r21
 682:	08 95       	ret

00000684 <__fp_round>:
 684:	09 2e       	mov	r0, r25
 686:	03 94       	inc	r0
 688:	00 0c       	add	r0, r0
 68a:	11 f4       	brne	.+4      	; 0x690 <__fp_round+0xc>
 68c:	88 23       	and	r24, r24
 68e:	52 f0       	brmi	.+20     	; 0x6a4 <__fp_round+0x20>
 690:	bb 0f       	add	r27, r27
 692:	40 f4       	brcc	.+16     	; 0x6a4 <__fp_round+0x20>
 694:	bf 2b       	or	r27, r31
 696:	11 f4       	brne	.+4      	; 0x69c <__fp_round+0x18>
 698:	60 ff       	sbrs	r22, 0
 69a:	04 c0       	rjmp	.+8      	; 0x6a4 <__fp_round+0x20>
 69c:	6f 5f       	subi	r22, 0xFF	; 255
 69e:	7f 4f       	sbci	r23, 0xFF	; 255
 6a0:	8f 4f       	sbci	r24, 0xFF	; 255
 6a2:	9f 4f       	sbci	r25, 0xFF	; 255
 6a4:	08 95       	ret

000006a6 <_exit>:
 6a6:	f8 94       	cli

000006a8 <__stop_program>:
 6a8:	ff cf       	rjmp	.-2      	; 0x6a8 <__stop_program>
