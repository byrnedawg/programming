
Tx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000042  00800060  00800060  00000326  2**0
                  ALLOC
  2 .debug_aranges 00000040  00000000  00000000  00000326  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000da  00000000  00000000  00000366  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000004d1  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002b8  00000000  00000000  00000911  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000449  00000000  00000000  00000bc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  00001014  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000160  00000000  00000000  000010b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000133  00000000  00000000  00001214  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000078  00000000  00000000  00001347  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 3a       	cpi	r26, 0xA2	; 162
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  74:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <delayms>:
							  // if(is_high(PIND,PD0))

void delayms(uint8_t t)//delay in ms
{
uint8_t i;
for(i=0;i<t;i++)
  7c:	88 23       	and	r24, r24
  7e:	49 f0       	breq	.+18     	; 0x92 <delayms+0x16>
  80:	90 e0       	ldi	r25, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  82:	20 ed       	ldi	r18, 0xD0	; 208
  84:	37 e0       	ldi	r19, 0x07	; 7
  86:	f9 01       	movw	r30, r18
  88:	31 97       	sbiw	r30, 0x01	; 1
  8a:	f1 f7       	brne	.-4      	; 0x88 <delayms+0xc>
  8c:	9f 5f       	subi	r25, 0xFF	; 255
  8e:	98 17       	cp	r25, r24
  90:	d0 f3       	brcs	.-12     	; 0x86 <delayms+0xa>
  92:	08 95       	ret

00000094 <main>:
	_delay_ms(1);
}

void main()
{
  94:	0f 93       	push	r16
  96:	1f 93       	push	r17
  98:	cf 93       	push	r28
  9a:	df 93       	push	r29
	//Initialize the USART with Baud rate = 2400bps
	USARTInit(UBRRVAL);   //USARTInit(416);
  9c:	8f e9       	ldi	r24, 0x9F	; 159
  9e:	91 e0       	ldi	r25, 0x01	; 1
  a0:	0e 94 8a 00 	call	0x114	; 0x114 <USARTInit>

	//Enable Internal Pullups on PORTC
	DDRD = (1<<PIND7);
  a4:	80 e8       	ldi	r24, 0x80	; 128
  a6:	81 bb       	out	0x11, r24	; 17
	cbi(PORTD,PD7); //LED OFF;
  a8:	97 98       	cbi	0x12, 7	; 18
	DDRB = (0<<PINB0);
  aa:	17 ba       	out	0x17, r1	; 23
  ac:	c0 ed       	ldi	r28, 0xD0	; 208
  ae:	d7 e0       	ldi	r29, 0x07	; 7
	uint8_t data;
	while(1)
	{
		//data=PINC;

		if(bit_is_clear(PINB,PB0))
  b0:	b0 99       	sbic	0x16, 0	; 22
  b2:	25 c0       	rjmp	.+74     	; 0xfe <main+0x6a>
		{
			//Send_Packet(RADDR, LEDON);
			sbi(PORTD,PD7); //LED ON;
  b4:	97 9a       	sbi	0x12, 7	; 18
  b6:	20 e0       	ldi	r18, 0x00	; 0
  b8:	ce 01       	movw	r24, r28
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <main+0x26>
							  // if(is_high(PIND,PD0))

void delayms(uint8_t t)//delay in ms
{
uint8_t i;
for(i=0;i<t;i++)
  be:	2f 5f       	subi	r18, 0xFF	; 255
  c0:	24 36       	cpi	r18, 0x64	; 100
  c2:	d1 f7       	brne	.-12     	; 0xb8 <main+0x24>
  c4:	01 e1       	ldi	r16, 0x11	; 17
  c6:	1e ee       	ldi	r17, 0xEE	; 238
		Packet Format is AA<data><data inverse>Z
		total Packet size if 5 bytes.
		*/

		//Stabilize the Tx Module By Sending JUNK data
		UWriteData('J');	//J for junk
  c8:	8a e4       	ldi	r24, 0x4A	; 74
  ca:	0e 94 1e 01 	call	0x23c	; 0x23c <UWriteData>

		//Send 'A'
		UWriteData('A');
  ce:	81 e4       	ldi	r24, 0x41	; 65
  d0:	0e 94 1e 01 	call	0x23c	; 0x23c <UWriteData>

		//Send Another 'A'
		UWriteData('A');
  d4:	81 e4       	ldi	r24, 0x41	; 65
  d6:	0e 94 1e 01 	call	0x23c	; 0x23c <UWriteData>

		//Send the data;
		UWriteData(data);
  da:	80 2f       	mov	r24, r16
  dc:	0e 94 1e 01 	call	0x23c	; 0x23c <UWriteData>

		//Send inverse of data for error detection purpose
		UWriteData(~data);
  e0:	81 2f       	mov	r24, r17
  e2:	0e 94 1e 01 	call	0x23c	; 0x23c <UWriteData>

		//End the packet by writing 'Z'
		UWriteData('Z');
  e6:	8a e5       	ldi	r24, 0x5A	; 90
  e8:	0e 94 1e 01 	call	0x23c	; 0x23c <UWriteData>
  ec:	20 e0       	ldi	r18, 0x00	; 0
  ee:	ce 01       	movw	r24, r28
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <main+0x5c>
							  // if(is_high(PIND,PD0))

void delayms(uint8_t t)//delay in ms
{
uint8_t i;
for(i=0;i<t;i++)
  f4:	2f 5f       	subi	r18, 0xFF	; 255
  f6:	24 36       	cpi	r18, 0x64	; 100
  f8:	d1 f7       	brne	.-12     	; 0xee <main+0x5a>
	uint8_t data;
	while(1)
	{
		//data=PINC;

		if(bit_is_clear(PINB,PB0))
  fa:	b0 9b       	sbis	0x16, 0	; 22
  fc:	db cf       	rjmp	.-74     	; 0xb4 <main+0x20>
		}
		else
		{
			//send command to switch led OFF
			//Send_Packet(RADDR, LEDOFF);
			cbi(PORTD,PD7); //LED OFF;
  fe:	97 98       	cbi	0x12, 7	; 18
 100:	20 e0       	ldi	r18, 0x00	; 0
 102:	ce 01       	movw	r24, r28
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <main+0x70>
							  // if(is_high(PIND,PD0))

void delayms(uint8_t t)//delay in ms
{
uint8_t i;
for(i=0;i<t;i++)
 108:	2f 5f       	subi	r18, 0xFF	; 255
 10a:	24 36       	cpi	r18, 0x64	; 100
 10c:	d1 f7       	brne	.-12     	; 0x102 <main+0x6e>
 10e:	02 e2       	ldi	r16, 0x22	; 34
 110:	1d ed       	ldi	r17, 0xDD	; 221
 112:	da cf       	rjmp	.-76     	; 0xc8 <main+0x34>

00000114 <USARTInit>:


void USARTInit(uint16_t ubrrvalue)
{
	//Setup q
	UQFront=UQEnd=-1;
 114:	2f ef       	ldi	r18, 0xFF	; 255
 116:	20 93 61 00 	sts	0x0061, r18
 11a:	20 91 61 00 	lds	r18, 0x0061
 11e:	20 93 60 00 	sts	0x0060, r18

	//Set Baud rate
	UBRRH=(unsigned char)(ubrrvalue>>8);
 122:	90 bd       	out	0x20, r25	; 32
	UBRRL=(unsigned char)ubrrvalue;
 124:	89 b9       	out	0x09, r24	; 9
	1 StopBit
	char size 8

	*/

	UCSRC=(1<<URSEL)|(3<<UCSZ0);
 126:	86 e8       	ldi	r24, 0x86	; 134
 128:	80 bd       	out	0x20, r24	; 32

	Enable The recevier and transmitter

	*/

	UCSRB=(1<<RXCIE)|(1<<TXEN);
 12a:	88 e8       	ldi	r24, 0x88	; 136
 12c:	8a b9       	out	0x0a, r24	; 10
	sei();
 12e:	78 94       	sei

}
 130:	08 95       	ret

00000132 <__vector_11>:

//The USART ISR
ISR(USART_RXC_VECT)
{
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	2f 93       	push	r18
 13e:	3f 93       	push	r19
 140:	4f 93       	push	r20
 142:	8f 93       	push	r24
 144:	9f 93       	push	r25
 146:	ef 93       	push	r30
 148:	ff 93       	push	r31
	//Read the data
	char data=UDR;
 14a:	4c b1       	in	r20, 0x0c	; 12

	//Now add it to q

	if(((UQEnd==RECEIVE_BUFF_SIZE-1) && UQFront==0) || ((UQEnd+1)==UQFront))
 14c:	80 91 61 00 	lds	r24, 0x0061
 150:	8f 33       	cpi	r24, 0x3F	; 63
 152:	89 f1       	breq	.+98     	; 0x1b6 <__vector_11+0x84>
 154:	80 91 61 00 	lds	r24, 0x0061
 158:	20 91 60 00 	lds	r18, 0x0060
 15c:	99 27       	eor	r25, r25
 15e:	87 fd       	sbrc	r24, 7
 160:	90 95       	com	r25
 162:	01 96       	adiw	r24, 0x01	; 1
 164:	33 27       	eor	r19, r19
 166:	27 fd       	sbrc	r18, 7
 168:	30 95       	com	r19
 16a:	82 17       	cp	r24, r18
 16c:	93 07       	cpc	r25, r19
 16e:	39 f1       	breq	.+78     	; 0x1be <__vector_11+0x8c>
		UQFront++;
		if(UQFront==RECEIVE_BUFF_SIZE) UQFront=0;
	}
	

	if(UQEnd==RECEIVE_BUFF_SIZE-1)
 170:	80 91 61 00 	lds	r24, 0x0061
 174:	8f 33       	cpi	r24, 0x3F	; 63
 176:	91 f1       	breq	.+100    	; 0x1dc <__vector_11+0xaa>
		UQEnd=0;
	else
		UQEnd++;
 178:	80 91 61 00 	lds	r24, 0x0061
 17c:	8f 5f       	subi	r24, 0xFF	; 255
 17e:	80 93 61 00 	sts	0x0061, r24


	URBuff[UQEnd]=data;
 182:	e0 91 61 00 	lds	r30, 0x0061
 186:	ff 27       	eor	r31, r31
 188:	e7 fd       	sbrc	r30, 7
 18a:	f0 95       	com	r31
 18c:	ee 59       	subi	r30, 0x9E	; 158
 18e:	ff 4f       	sbci	r31, 0xFF	; 255
 190:	40 83       	st	Z, r20

	if(UQFront==-1) UQFront=0;
 192:	80 91 60 00 	lds	r24, 0x0060
 196:	8f 3f       	cpi	r24, 0xFF	; 255
 198:	11 f4       	brne	.+4      	; 0x19e <__vector_11+0x6c>
 19a:	10 92 60 00 	sts	0x0060, r1

}
 19e:	ff 91       	pop	r31
 1a0:	ef 91       	pop	r30
 1a2:	9f 91       	pop	r25
 1a4:	8f 91       	pop	r24
 1a6:	4f 91       	pop	r20
 1a8:	3f 91       	pop	r19
 1aa:	2f 91       	pop	r18
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti
	//Read the data
	char data=UDR;

	//Now add it to q

	if(((UQEnd==RECEIVE_BUFF_SIZE-1) && UQFront==0) || ((UQEnd+1)==UQFront))
 1b6:	80 91 60 00 	lds	r24, 0x0060
 1ba:	88 23       	and	r24, r24
 1bc:	59 f6       	brne	.-106    	; 0x154 <__vector_11+0x22>
	{
		//Q Full
		UQFront++;
 1be:	80 91 60 00 	lds	r24, 0x0060
 1c2:	8f 5f       	subi	r24, 0xFF	; 255
 1c4:	80 93 60 00 	sts	0x0060, r24
		if(UQFront==RECEIVE_BUFF_SIZE) UQFront=0;
 1c8:	80 91 60 00 	lds	r24, 0x0060
 1cc:	80 34       	cpi	r24, 0x40	; 64
 1ce:	81 f6       	brne	.-96     	; 0x170 <__vector_11+0x3e>
 1d0:	10 92 60 00 	sts	0x0060, r1
	}
	

	if(UQEnd==RECEIVE_BUFF_SIZE-1)
 1d4:	80 91 61 00 	lds	r24, 0x0061
 1d8:	8f 33       	cpi	r24, 0x3F	; 63
 1da:	71 f6       	brne	.-100    	; 0x178 <__vector_11+0x46>
		UQEnd=0;
 1dc:	10 92 61 00 	sts	0x0061, r1
 1e0:	d0 cf       	rjmp	.-96     	; 0x182 <__vector_11+0x50>

000001e2 <UReadData>:
char UReadData()
{
	char data;
	
	//Check if q is empty
	if(UQFront==-1)
 1e2:	80 91 60 00 	lds	r24, 0x0060
 1e6:	8f 3f       	cpi	r24, 0xFF	; 255
 1e8:	c9 f0       	breq	.+50     	; 0x21c <UReadData+0x3a>
		return 0;
	
	data=URBuff[UQFront];
 1ea:	e0 91 60 00 	lds	r30, 0x0060
 1ee:	ff 27       	eor	r31, r31
 1f0:	e7 fd       	sbrc	r30, 7
 1f2:	f0 95       	com	r31
 1f4:	ee 59       	subi	r30, 0x9E	; 158
 1f6:	ff 4f       	sbci	r31, 0xFF	; 255
 1f8:	e0 81       	ld	r30, Z
	
	if(UQFront==UQEnd)
 1fa:	90 91 60 00 	lds	r25, 0x0060
 1fe:	80 91 61 00 	lds	r24, 0x0061
 202:	98 17       	cp	r25, r24
 204:	71 f0       	breq	.+28     	; 0x222 <UReadData+0x40>
	//So empty q
	UQFront=UQEnd=-1;
	}
	else
	{
		UQFront++;
 206:	80 91 60 00 	lds	r24, 0x0060
 20a:	8f 5f       	subi	r24, 0xFF	; 255
 20c:	80 93 60 00 	sts	0x0060, r24

		if(UQFront==RECEIVE_BUFF_SIZE)
 210:	80 91 60 00 	lds	r24, 0x0060
 214:	80 34       	cpi	r24, 0x40	; 64
 216:	71 f0       	breq	.+28     	; 0x234 <UReadData+0x52>
		UQFront=0;
	}

	return data;
}
 218:	8e 2f       	mov	r24, r30
 21a:	08 95       	ret
char UReadData()
{
	char data;
	
	//Check if q is empty
	if(UQFront==-1)
 21c:	e0 e0       	ldi	r30, 0x00	; 0
		if(UQFront==RECEIVE_BUFF_SIZE)
		UQFront=0;
	}

	return data;
}
 21e:	8e 2f       	mov	r24, r30
 220:	08 95       	ret
	
	if(UQFront==UQEnd)
	{
	//If single data is left
	//So empty q
	UQFront=UQEnd=-1;
 222:	8f ef       	ldi	r24, 0xFF	; 255
 224:	80 93 61 00 	sts	0x0061, r24
 228:	80 91 61 00 	lds	r24, 0x0061
 22c:	80 93 60 00 	sts	0x0060, r24
		if(UQFront==RECEIVE_BUFF_SIZE)
		UQFront=0;
	}

	return data;
}
 230:	8e 2f       	mov	r24, r30
 232:	08 95       	ret
	else
	{
		UQFront++;

		if(UQFront==RECEIVE_BUFF_SIZE)
		UQFront=0;
 234:	10 92 60 00 	sts	0x0060, r1
	}

	return data;
}
 238:	8e 2f       	mov	r24, r30
 23a:	08 95       	ret

0000023c <UWriteData>:

void UWriteData(char data)
{
	//Wait For Transmitter to become ready
	while(!(UCSRA & (1<<UDRE)));
 23c:	5d 9b       	sbis	0x0b, 5	; 11
 23e:	fe cf       	rjmp	.-4      	; 0x23c <UWriteData>

	//Now write
	UDR=data;
 240:	8c b9       	out	0x0c, r24	; 12
}
 242:	08 95       	ret

00000244 <UDataAvailable>:

uint8_t UDataAvailable()
{
	if(UQFront==-1) return 0;
 244:	80 91 60 00 	lds	r24, 0x0060
 248:	8f 3f       	cpi	r24, 0xFF	; 255
 24a:	e1 f0       	breq	.+56     	; 0x284 <UDataAvailable+0x40>
	if(UQFront<UQEnd)
 24c:	90 91 60 00 	lds	r25, 0x0060
 250:	80 91 61 00 	lds	r24, 0x0061
 254:	98 17       	cp	r25, r24
 256:	74 f0       	brlt	.+28     	; 0x274 <UDataAvailable+0x30>
		return(UQEnd-UQFront+1);
	else if(UQFront>UQEnd)
 258:	90 91 60 00 	lds	r25, 0x0060
 25c:	80 91 61 00 	lds	r24, 0x0061
 260:	89 17       	cp	r24, r25
 262:	9c f4       	brge	.+38     	; 0x28a <UDataAvailable+0x46>
		return (RECEIVE_BUFF_SIZE-UQFront+UQEnd+1);
 264:	90 91 61 00 	lds	r25, 0x0061
 268:	80 91 60 00 	lds	r24, 0x0060
 26c:	9f 5b       	subi	r25, 0xBF	; 191
 26e:	98 1b       	sub	r25, r24
	else
		return 1;
}
 270:	89 2f       	mov	r24, r25
 272:	08 95       	ret

uint8_t UDataAvailable()
{
	if(UQFront==-1) return 0;
	if(UQFront<UQEnd)
		return(UQEnd-UQFront+1);
 274:	90 91 61 00 	lds	r25, 0x0061
 278:	80 91 60 00 	lds	r24, 0x0060
 27c:	9f 5f       	subi	r25, 0xFF	; 255
 27e:	98 1b       	sub	r25, r24
	else if(UQFront>UQEnd)
		return (RECEIVE_BUFF_SIZE-UQFront+UQEnd+1);
	else
		return 1;
}
 280:	89 2f       	mov	r24, r25
 282:	08 95       	ret
	UDR=data;
}

uint8_t UDataAvailable()
{
	if(UQFront==-1) return 0;
 284:	90 e0       	ldi	r25, 0x00	; 0
		return(UQEnd-UQFront+1);
	else if(UQFront>UQEnd)
		return (RECEIVE_BUFF_SIZE-UQFront+UQEnd+1);
	else
		return 1;
}
 286:	89 2f       	mov	r24, r25
 288:	08 95       	ret
uint8_t UDataAvailable()
{
	if(UQFront==-1) return 0;
	if(UQFront<UQEnd)
		return(UQEnd-UQFront+1);
	else if(UQFront>UQEnd)
 28a:	91 e0       	ldi	r25, 0x01	; 1
		return (RECEIVE_BUFF_SIZE-UQFront+UQEnd+1);
	else
		return 1;
}
 28c:	89 2f       	mov	r24, r25
 28e:	08 95       	ret

00000290 <UWriteString>:

void UWriteString(char *str)
{
 290:	fc 01       	movw	r30, r24
	while((*str)!='\0')
 292:	80 81       	ld	r24, Z
 294:	88 23       	and	r24, r24
 296:	39 f0       	breq	.+14     	; 0x2a6 <UWriteString+0x16>
}

void UWriteData(char data)
{
	//Wait For Transmitter to become ready
	while(!(UCSRA & (1<<UDRE)));
 298:	5d 9b       	sbis	0x0b, 5	; 11
 29a:	fe cf       	rjmp	.-4      	; 0x298 <UWriteString+0x8>

	//Now write
	UDR=data;
 29c:	8c b9       	out	0x0c, r24	; 12
void UWriteString(char *str)
{
	while((*str)!='\0')
	{
		UWriteData(*str);
		str++;
 29e:	31 96       	adiw	r30, 0x01	; 1
		return 1;
}

void UWriteString(char *str)
{
	while((*str)!='\0')
 2a0:	80 81       	ld	r24, Z
 2a2:	88 23       	and	r24, r24
 2a4:	c9 f7       	brne	.-14     	; 0x298 <UWriteString+0x8>
}

void UWriteData(char data)
{
	//Wait For Transmitter to become ready
	while(!(UCSRA & (1<<UDRE)));
 2a6:	5d 9b       	sbis	0x0b, 5	; 11
 2a8:	fe cf       	rjmp	.-4      	; 0x2a6 <UWriteString+0x16>

	//Now write
	UDR=data;
 2aa:	1c b8       	out	0x0c, r1	; 12
		UWriteData(*str);
		str++;
	}

	UWriteData('\0');
}
 2ac:	08 95       	ret

000002ae <_exit>:
 2ae:	f8 94       	cli

000002b0 <__stop_program>:
 2b0:	ff cf       	rjmp	.-2      	; 0x2b0 <__stop_program>
