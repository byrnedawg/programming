
I2C Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000017  00800060  00800060  0000095e  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000960  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  0000102c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  000010b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000002df  00000000  00000000  000010f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005bb  00000000  00000000  000013d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000163  00000000  00000000  0000198b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000581  00000000  00000000  00001aee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  00002070  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000283  00000000  00000000  00002100  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000056  00000000  00000000  00002383  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	d3 c0       	rjmp	.+422    	; 0x1a8 <__ctors_end>
   2:	ed c0       	rjmp	.+474    	; 0x1de <__bad_interrupt>
   4:	ec c0       	rjmp	.+472    	; 0x1de <__bad_interrupt>
   6:	eb c0       	rjmp	.+470    	; 0x1de <__bad_interrupt>
   8:	ea c0       	rjmp	.+468    	; 0x1de <__bad_interrupt>
   a:	e9 c0       	rjmp	.+466    	; 0x1de <__bad_interrupt>
   c:	e8 c0       	rjmp	.+464    	; 0x1de <__bad_interrupt>
   e:	e7 c0       	rjmp	.+462    	; 0x1de <__bad_interrupt>
  10:	e6 c0       	rjmp	.+460    	; 0x1de <__bad_interrupt>
  12:	e5 c0       	rjmp	.+458    	; 0x1de <__bad_interrupt>
  14:	e4 c0       	rjmp	.+456    	; 0x1de <__bad_interrupt>
  16:	e3 c0       	rjmp	.+454    	; 0x1de <__bad_interrupt>
  18:	e2 c0       	rjmp	.+452    	; 0x1de <__bad_interrupt>
  1a:	e1 c0       	rjmp	.+450    	; 0x1de <__bad_interrupt>
  1c:	e0 c0       	rjmp	.+448    	; 0x1de <__bad_interrupt>
  1e:	df c0       	rjmp	.+446    	; 0x1de <__bad_interrupt>
  20:	de c0       	rjmp	.+444    	; 0x1de <__bad_interrupt>
  22:	63 c2       	rjmp	.+1222   	; 0x4ea <__vector_17>
  24:	dc c0       	rjmp	.+440    	; 0x1de <__bad_interrupt>
  26:	94 c2       	rjmp	.+1320   	; 0x550 <__vector_17+0x66>
  28:	f8 c3       	rjmp	.+2032   	; 0x81a <__vector_17+0x330>
  2a:	f7 c3       	rjmp	.+2030   	; 0x81a <__vector_17+0x330>
  2c:	f6 c3       	rjmp	.+2028   	; 0x81a <__vector_17+0x330>
  2e:	f5 c3       	rjmp	.+2026   	; 0x81a <__vector_17+0x330>
  30:	f4 c3       	rjmp	.+2024   	; 0x81a <__vector_17+0x330>
  32:	f3 c3       	rjmp	.+2022   	; 0x81a <__vector_17+0x330>
  34:	f2 c3       	rjmp	.+2020   	; 0x81a <__vector_17+0x330>
  36:	8c c2       	rjmp	.+1304   	; 0x550 <__vector_17+0x66>
  38:	f0 c3       	rjmp	.+2016   	; 0x81a <__vector_17+0x330>
  3a:	ef c3       	rjmp	.+2014   	; 0x81a <__vector_17+0x330>
  3c:	ee c3       	rjmp	.+2012   	; 0x81a <__vector_17+0x330>
  3e:	ed c3       	rjmp	.+2010   	; 0x81a <__vector_17+0x330>
  40:	ec c3       	rjmp	.+2008   	; 0x81a <__vector_17+0x330>
  42:	eb c3       	rjmp	.+2006   	; 0x81a <__vector_17+0x330>
  44:	ea c3       	rjmp	.+2004   	; 0x81a <__vector_17+0x330>
  46:	b1 c2       	rjmp	.+1378   	; 0x5aa <__vector_17+0xc0>
  48:	e8 c3       	rjmp	.+2000   	; 0x81a <__vector_17+0x330>
  4a:	e7 c3       	rjmp	.+1998   	; 0x81a <__vector_17+0x330>
  4c:	e6 c3       	rjmp	.+1996   	; 0x81a <__vector_17+0x330>
  4e:	e5 c3       	rjmp	.+1994   	; 0x81a <__vector_17+0x330>
  50:	e4 c3       	rjmp	.+1992   	; 0x81a <__vector_17+0x330>
  52:	e3 c3       	rjmp	.+1990   	; 0x81a <__vector_17+0x330>
  54:	e2 c3       	rjmp	.+1988   	; 0x81a <__vector_17+0x330>
  56:	d3 c3       	rjmp	.+1958   	; 0x7fe <__vector_17+0x314>
  58:	e0 c3       	rjmp	.+1984   	; 0x81a <__vector_17+0x330>
  5a:	df c3       	rjmp	.+1982   	; 0x81a <__vector_17+0x330>
  5c:	de c3       	rjmp	.+1980   	; 0x81a <__vector_17+0x330>
  5e:	dd c3       	rjmp	.+1978   	; 0x81a <__vector_17+0x330>
  60:	dc c3       	rjmp	.+1976   	; 0x81a <__vector_17+0x330>
  62:	db c3       	rjmp	.+1974   	; 0x81a <__vector_17+0x330>
  64:	da c3       	rjmp	.+1972   	; 0x81a <__vector_17+0x330>
  66:	a1 c2       	rjmp	.+1346   	; 0x5aa <__vector_17+0xc0>
  68:	d8 c3       	rjmp	.+1968   	; 0x81a <__vector_17+0x330>
  6a:	d7 c3       	rjmp	.+1966   	; 0x81a <__vector_17+0x330>
  6c:	d6 c3       	rjmp	.+1964   	; 0x81a <__vector_17+0x330>
  6e:	d5 c3       	rjmp	.+1962   	; 0x81a <__vector_17+0x330>
  70:	d4 c3       	rjmp	.+1960   	; 0x81a <__vector_17+0x330>
  72:	d3 c3       	rjmp	.+1958   	; 0x81a <__vector_17+0x330>
  74:	d2 c3       	rjmp	.+1956   	; 0x81a <__vector_17+0x330>
  76:	c3 c3       	rjmp	.+1926   	; 0x7fe <__vector_17+0x314>
  78:	d0 c3       	rjmp	.+1952   	; 0x81a <__vector_17+0x330>
  7a:	cf c3       	rjmp	.+1950   	; 0x81a <__vector_17+0x330>
  7c:	ce c3       	rjmp	.+1948   	; 0x81a <__vector_17+0x330>
  7e:	cd c3       	rjmp	.+1946   	; 0x81a <__vector_17+0x330>
  80:	cc c3       	rjmp	.+1944   	; 0x81a <__vector_17+0x330>
  82:	cb c3       	rjmp	.+1942   	; 0x81a <__vector_17+0x330>
  84:	ca c3       	rjmp	.+1940   	; 0x81a <__vector_17+0x330>
  86:	c9 c3       	rjmp	.+1938   	; 0x81a <__vector_17+0x330>
  88:	c8 c3       	rjmp	.+1936   	; 0x81a <__vector_17+0x330>
  8a:	c7 c3       	rjmp	.+1934   	; 0x81a <__vector_17+0x330>
  8c:	c6 c3       	rjmp	.+1932   	; 0x81a <__vector_17+0x330>
  8e:	c5 c3       	rjmp	.+1930   	; 0x81a <__vector_17+0x330>
  90:	c4 c3       	rjmp	.+1928   	; 0x81a <__vector_17+0x330>
  92:	c3 c3       	rjmp	.+1926   	; 0x81a <__vector_17+0x330>
  94:	c2 c3       	rjmp	.+1924   	; 0x81a <__vector_17+0x330>
  96:	f1 c2       	rjmp	.+1506   	; 0x67a <__vector_17+0x190>
  98:	c0 c3       	rjmp	.+1920   	; 0x81a <__vector_17+0x330>
  9a:	bf c3       	rjmp	.+1918   	; 0x81a <__vector_17+0x330>
  9c:	be c3       	rjmp	.+1916   	; 0x81a <__vector_17+0x330>
  9e:	bd c3       	rjmp	.+1914   	; 0x81a <__vector_17+0x330>
  a0:	bc c3       	rjmp	.+1912   	; 0x81a <__vector_17+0x330>
  a2:	bb c3       	rjmp	.+1910   	; 0x81a <__vector_17+0x330>
  a4:	ba c3       	rjmp	.+1908   	; 0x81a <__vector_17+0x330>
  a6:	ab c3       	rjmp	.+1878   	; 0x7fe <__vector_17+0x314>
  a8:	b8 c3       	rjmp	.+1904   	; 0x81a <__vector_17+0x330>
  aa:	b7 c3       	rjmp	.+1902   	; 0x81a <__vector_17+0x330>
  ac:	b6 c3       	rjmp	.+1900   	; 0x81a <__vector_17+0x330>
  ae:	b5 c3       	rjmp	.+1898   	; 0x81a <__vector_17+0x330>
  b0:	b4 c3       	rjmp	.+1896   	; 0x81a <__vector_17+0x330>
  b2:	b3 c3       	rjmp	.+1894   	; 0x81a <__vector_17+0x330>
  b4:	b2 c3       	rjmp	.+1892   	; 0x81a <__vector_17+0x330>
  b6:	cc c2       	rjmp	.+1432   	; 0x650 <__vector_17+0x166>
  b8:	b0 c3       	rjmp	.+1888   	; 0x81a <__vector_17+0x330>
  ba:	af c3       	rjmp	.+1886   	; 0x81a <__vector_17+0x330>
  bc:	ae c3       	rjmp	.+1884   	; 0x81a <__vector_17+0x330>
  be:	ad c3       	rjmp	.+1882   	; 0x81a <__vector_17+0x330>
  c0:	ac c3       	rjmp	.+1880   	; 0x81a <__vector_17+0x330>
  c2:	ab c3       	rjmp	.+1878   	; 0x81a <__vector_17+0x330>
  c4:	aa c3       	rjmp	.+1876   	; 0x81a <__vector_17+0x330>
  c6:	f3 c2       	rjmp	.+1510   	; 0x6ae <__vector_17+0x1c4>
  c8:	a8 c3       	rjmp	.+1872   	; 0x81a <__vector_17+0x330>
  ca:	a7 c3       	rjmp	.+1870   	; 0x81a <__vector_17+0x330>
  cc:	a6 c3       	rjmp	.+1868   	; 0x81a <__vector_17+0x330>
  ce:	a5 c3       	rjmp	.+1866   	; 0x81a <__vector_17+0x330>
  d0:	a4 c3       	rjmp	.+1864   	; 0x81a <__vector_17+0x330>
  d2:	a3 c3       	rjmp	.+1862   	; 0x81a <__vector_17+0x330>
  d4:	a2 c3       	rjmp	.+1860   	; 0x81a <__vector_17+0x330>
  d6:	20 c3       	rjmp	.+1600   	; 0x718 <__vector_17+0x22e>
  d8:	a0 c3       	rjmp	.+1856   	; 0x81a <__vector_17+0x330>
  da:	9f c3       	rjmp	.+1854   	; 0x81a <__vector_17+0x330>
  dc:	9e c3       	rjmp	.+1852   	; 0x81a <__vector_17+0x330>
  de:	9d c3       	rjmp	.+1850   	; 0x81a <__vector_17+0x330>
  e0:	9c c3       	rjmp	.+1848   	; 0x81a <__vector_17+0x330>
  e2:	9b c3       	rjmp	.+1846   	; 0x81a <__vector_17+0x330>
  e4:	9a c3       	rjmp	.+1844   	; 0x81a <__vector_17+0x330>
  e6:	18 c3       	rjmp	.+1584   	; 0x718 <__vector_17+0x22e>
  e8:	98 c3       	rjmp	.+1840   	; 0x81a <__vector_17+0x330>
  ea:	97 c3       	rjmp	.+1838   	; 0x81a <__vector_17+0x330>
  ec:	96 c3       	rjmp	.+1836   	; 0x81a <__vector_17+0x330>
  ee:	95 c3       	rjmp	.+1834   	; 0x81a <__vector_17+0x330>
  f0:	94 c3       	rjmp	.+1832   	; 0x81a <__vector_17+0x330>
  f2:	93 c3       	rjmp	.+1830   	; 0x81a <__vector_17+0x330>
  f4:	92 c3       	rjmp	.+1828   	; 0x81a <__vector_17+0x330>
  f6:	10 c3       	rjmp	.+1568   	; 0x718 <__vector_17+0x22e>
  f8:	90 c3       	rjmp	.+1824   	; 0x81a <__vector_17+0x330>
  fa:	8f c3       	rjmp	.+1822   	; 0x81a <__vector_17+0x330>
  fc:	8e c3       	rjmp	.+1820   	; 0x81a <__vector_17+0x330>
  fe:	8d c3       	rjmp	.+1818   	; 0x81a <__vector_17+0x330>
 100:	8c c3       	rjmp	.+1816   	; 0x81a <__vector_17+0x330>
 102:	8b c3       	rjmp	.+1814   	; 0x81a <__vector_17+0x330>
 104:	8a c3       	rjmp	.+1812   	; 0x81a <__vector_17+0x330>
 106:	08 c3       	rjmp	.+1552   	; 0x718 <__vector_17+0x22e>
 108:	88 c3       	rjmp	.+1808   	; 0x81a <__vector_17+0x330>
 10a:	87 c3       	rjmp	.+1806   	; 0x81a <__vector_17+0x330>
 10c:	86 c3       	rjmp	.+1804   	; 0x81a <__vector_17+0x330>
 10e:	85 c3       	rjmp	.+1802   	; 0x81a <__vector_17+0x330>
 110:	84 c3       	rjmp	.+1800   	; 0x81a <__vector_17+0x330>
 112:	83 c3       	rjmp	.+1798   	; 0x81a <__vector_17+0x330>
 114:	82 c3       	rjmp	.+1796   	; 0x81a <__vector_17+0x330>
 116:	0a c3       	rjmp	.+1556   	; 0x72c <__vector_17+0x242>
 118:	80 c3       	rjmp	.+1792   	; 0x81a <__vector_17+0x330>
 11a:	7f c3       	rjmp	.+1790   	; 0x81a <__vector_17+0x330>
 11c:	7e c3       	rjmp	.+1788   	; 0x81a <__vector_17+0x330>
 11e:	7d c3       	rjmp	.+1786   	; 0x81a <__vector_17+0x330>
 120:	7c c3       	rjmp	.+1784   	; 0x81a <__vector_17+0x330>
 122:	7b c3       	rjmp	.+1782   	; 0x81a <__vector_17+0x330>
 124:	7a c3       	rjmp	.+1780   	; 0x81a <__vector_17+0x330>
 126:	65 c3       	rjmp	.+1738   	; 0x7f2 <__vector_17+0x308>
 128:	78 c3       	rjmp	.+1776   	; 0x81a <__vector_17+0x330>
 12a:	77 c3       	rjmp	.+1774   	; 0x81a <__vector_17+0x330>
 12c:	76 c3       	rjmp	.+1772   	; 0x81a <__vector_17+0x330>
 12e:	75 c3       	rjmp	.+1770   	; 0x81a <__vector_17+0x330>
 130:	74 c3       	rjmp	.+1768   	; 0x81a <__vector_17+0x330>
 132:	73 c3       	rjmp	.+1766   	; 0x81a <__vector_17+0x330>
 134:	72 c3       	rjmp	.+1764   	; 0x81a <__vector_17+0x330>
 136:	fa c2       	rjmp	.+1524   	; 0x72c <__vector_17+0x242>
 138:	70 c3       	rjmp	.+1760   	; 0x81a <__vector_17+0x330>
 13a:	6f c3       	rjmp	.+1758   	; 0x81a <__vector_17+0x330>
 13c:	6e c3       	rjmp	.+1756   	; 0x81a <__vector_17+0x330>
 13e:	6d c3       	rjmp	.+1754   	; 0x81a <__vector_17+0x330>
 140:	6c c3       	rjmp	.+1752   	; 0x81a <__vector_17+0x330>
 142:	6b c3       	rjmp	.+1750   	; 0x81a <__vector_17+0x330>
 144:	6a c3       	rjmp	.+1748   	; 0x81a <__vector_17+0x330>
 146:	55 c3       	rjmp	.+1706   	; 0x7f2 <__vector_17+0x308>
 148:	68 c3       	rjmp	.+1744   	; 0x81a <__vector_17+0x330>
 14a:	67 c3       	rjmp	.+1742   	; 0x81a <__vector_17+0x330>
 14c:	66 c3       	rjmp	.+1740   	; 0x81a <__vector_17+0x330>
 14e:	65 c3       	rjmp	.+1738   	; 0x81a <__vector_17+0x330>
 150:	64 c3       	rjmp	.+1736   	; 0x81a <__vector_17+0x330>
 152:	63 c3       	rjmp	.+1734   	; 0x81a <__vector_17+0x330>
 154:	62 c3       	rjmp	.+1732   	; 0x81a <__vector_17+0x330>
 156:	10 c3       	rjmp	.+1568   	; 0x778 <__vector_17+0x28e>
 158:	60 c3       	rjmp	.+1728   	; 0x81a <__vector_17+0x330>
 15a:	5f c3       	rjmp	.+1726   	; 0x81a <__vector_17+0x330>
 15c:	5e c3       	rjmp	.+1724   	; 0x81a <__vector_17+0x330>
 15e:	5d c3       	rjmp	.+1722   	; 0x81a <__vector_17+0x330>
 160:	5c c3       	rjmp	.+1720   	; 0x81a <__vector_17+0x330>
 162:	5b c3       	rjmp	.+1718   	; 0x81a <__vector_17+0x330>
 164:	5a c3       	rjmp	.+1716   	; 0x81a <__vector_17+0x330>
 166:	21 c3       	rjmp	.+1602   	; 0x7aa <__vector_17+0x2c0>
 168:	58 c3       	rjmp	.+1712   	; 0x81a <__vector_17+0x330>
 16a:	57 c3       	rjmp	.+1710   	; 0x81a <__vector_17+0x330>
 16c:	56 c3       	rjmp	.+1708   	; 0x81a <__vector_17+0x330>
 16e:	55 c3       	rjmp	.+1706   	; 0x81a <__vector_17+0x330>
 170:	54 c3       	rjmp	.+1704   	; 0x81a <__vector_17+0x330>
 172:	53 c3       	rjmp	.+1702   	; 0x81a <__vector_17+0x330>
 174:	52 c3       	rjmp	.+1700   	; 0x81a <__vector_17+0x330>
 176:	19 c3       	rjmp	.+1586   	; 0x7aa <__vector_17+0x2c0>
 178:	50 c3       	rjmp	.+1696   	; 0x81a <__vector_17+0x330>
 17a:	4f c3       	rjmp	.+1694   	; 0x81a <__vector_17+0x330>
 17c:	4e c3       	rjmp	.+1692   	; 0x81a <__vector_17+0x330>
 17e:	4d c3       	rjmp	.+1690   	; 0x81a <__vector_17+0x330>
 180:	4c c3       	rjmp	.+1688   	; 0x81a <__vector_17+0x330>
 182:	4b c3       	rjmp	.+1686   	; 0x81a <__vector_17+0x330>
 184:	4a c3       	rjmp	.+1684   	; 0x81a <__vector_17+0x330>
 186:	15 c3       	rjmp	.+1578   	; 0x7b2 <__vector_17+0x2c8>
 188:	48 c3       	rjmp	.+1680   	; 0x81a <__vector_17+0x330>
 18a:	47 c3       	rjmp	.+1678   	; 0x81a <__vector_17+0x330>
 18c:	46 c3       	rjmp	.+1676   	; 0x81a <__vector_17+0x330>
 18e:	45 c3       	rjmp	.+1674   	; 0x81a <__vector_17+0x330>
 190:	44 c3       	rjmp	.+1672   	; 0x81a <__vector_17+0x330>
 192:	43 c3       	rjmp	.+1670   	; 0x81a <__vector_17+0x330>
 194:	42 c3       	rjmp	.+1668   	; 0x81a <__vector_17+0x330>
 196:	2d c3       	rjmp	.+1626   	; 0x7f2 <__vector_17+0x308>
 198:	40 c3       	rjmp	.+1664   	; 0x81a <__vector_17+0x330>
 19a:	3f c3       	rjmp	.+1662   	; 0x81a <__vector_17+0x330>
 19c:	3e c3       	rjmp	.+1660   	; 0x81a <__vector_17+0x330>
 19e:	3d c3       	rjmp	.+1658   	; 0x81a <__vector_17+0x330>
 1a0:	3c c3       	rjmp	.+1656   	; 0x81a <__vector_17+0x330>
 1a2:	3b c3       	rjmp	.+1654   	; 0x81a <__vector_17+0x330>
 1a4:	3a c3       	rjmp	.+1652   	; 0x81a <__vector_17+0x330>
 1a6:	25 c3       	rjmp	.+1610   	; 0x7f2 <__vector_17+0x308>

000001a8 <__ctors_end>:
 1a8:	11 24       	eor	r1, r1
 1aa:	1f be       	out	0x3f, r1	; 63
 1ac:	cf e5       	ldi	r28, 0x5F	; 95
 1ae:	d4 e0       	ldi	r29, 0x04	; 4
 1b0:	de bf       	out	0x3e, r29	; 62
 1b2:	cd bf       	out	0x3d, r28	; 61

000001b4 <__do_copy_data>:
 1b4:	10 e0       	ldi	r17, 0x00	; 0
 1b6:	a0 e6       	ldi	r26, 0x60	; 96
 1b8:	b0 e0       	ldi	r27, 0x00	; 0
 1ba:	ea ee       	ldi	r30, 0xEA	; 234
 1bc:	f8 e0       	ldi	r31, 0x08	; 8
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <__do_copy_data+0x10>
 1c0:	05 90       	lpm	r0, Z+
 1c2:	0d 92       	st	X+, r0
 1c4:	a0 36       	cpi	r26, 0x60	; 96
 1c6:	b1 07       	cpc	r27, r17
 1c8:	d9 f7       	brne	.-10     	; 0x1c0 <__do_copy_data+0xc>

000001ca <__do_clear_bss>:
 1ca:	10 e0       	ldi	r17, 0x00	; 0
 1cc:	a0 e6       	ldi	r26, 0x60	; 96
 1ce:	b0 e0       	ldi	r27, 0x00	; 0
 1d0:	01 c0       	rjmp	.+2      	; 0x1d4 <.do_clear_bss_start>

000001d2 <.do_clear_bss_loop>:
 1d2:	1d 92       	st	X+, r1

000001d4 <.do_clear_bss_start>:
 1d4:	a7 37       	cpi	r26, 0x77	; 119
 1d6:	b1 07       	cpc	r27, r17
 1d8:	e1 f7       	brne	.-8      	; 0x1d2 <.do_clear_bss_loop>
 1da:	02 d0       	rcall	.+4      	; 0x1e0 <main>
 1dc:	84 c3       	rjmp	.+1800   	; 0x8e6 <_exit>

000001de <__bad_interrupt>:
 1de:	10 cf       	rjmp	.-480    	; 0x0 <__vectors>

000001e0 <main>:
uint8_t I2C_buffer[sizeof(int)];
#define I2C_SLAVE_ADDRESS 0x1D
void handle_I2C_error(volatile uint8_t TWI_match_addr, uint8_t status);
 
// --------------------------------------------------------------------------------------------------------
int main() {
 1e0:	cf 92       	push	r12
 1e2:	df 92       	push	r13
 1e4:	ef 92       	push	r14
 1e6:	ff 92       	push	r15
 1e8:	0f 93       	push	r16
 1ea:	1f 93       	push	r17
 1ec:	df 93       	push	r29
 1ee:	cf 93       	push	r28
 1f0:	cd b7       	in	r28, 0x3d	; 61
 1f2:	de b7       	in	r29, 0x3e	; 62
    // initialize LCD display
    
 
    // Specify startup parameters for the TWI/I2C driver
    TWI_init(   F_CPU,                      // clock frequency
 1f4:	e5 e6       	ldi	r30, 0x65	; 101
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	60 e0       	ldi	r22, 0x00	; 0
 1fa:	72 e1       	ldi	r23, 0x12	; 18
 1fc:	8a e7       	ldi	r24, 0x7A	; 122
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	20 ee       	ldi	r18, 0xE0	; 224
 202:	33 e9       	ldi	r19, 0x93	; 147
 204:	44 e0       	ldi	r20, 0x04	; 4
 206:	50 e0       	ldi	r21, 0x00	; 0
 208:	8f 01       	movw	r16, r30
 20a:	ee 24       	eor	r14, r14
 20c:	ff 24       	eor	r15, r15
 20e:	68 94       	set
 210:	e1 f8       	bld	r14, 1
 212:	cc 24       	eor	r12, r12
 214:	dd 24       	eor	r13, r13
 216:	14 d0       	rcall	.+40     	; 0x240 <TWI_init>
                sizeof(I2C_buffer),         // size of comm buffer
                0                           // optional pointer to callback function
                );
 
    // Enable interrupts
    sei();
 218:	78 94       	sei
 
   
 
    // send 100 test bytes
    
        TWI_master_start_write(I2C_SLAVE_ADDRESS, 0x2A);
 21a:	8d e1       	ldi	r24, 0x1D	; 29
 21c:	6a e2       	ldi	r22, 0x2A	; 42
 21e:	70 e0       	ldi	r23, 0x00	; 0
 220:	71 d0       	rcall	.+226    	; 0x304 <TWI_master_start_write>
                                     
        // wait for completion
        while(TWI_busy);
 222:	00 00       	nop
 224:	80 91 71 00 	lds	r24, 0x0071
 228:	88 23       	and	r24, r24
 22a:	e1 f7       	brne	.-8      	; 0x224 <main+0x44>
		
		TWI_master_start_write(I2C_SLAVE_ADDRESS, 0x01);
 22c:	8d e1       	ldi	r24, 0x1D	; 29
 22e:	61 e0       	ldi	r22, 0x01	; 1
 230:	70 e0       	ldi	r23, 0x00	; 0
 232:	68 d0       	rcall	.+208    	; 0x304 <TWI_master_start_write>
                                     
        // wait for completion
        while(TWI_busy);
 234:	00 00       	nop
 236:	80 91 71 00 	lds	r24, 0x0071
 23a:	88 23       	and	r24, r24
 23c:	e1 f7       	brne	.-8      	; 0x236 <main+0x56>
       
        
    
 
    // done
    while(true);
 23e:	ff cf       	rjmp	.-2      	; 0x23e <main+0x5e>

00000240 <TWI_init>:
#include <avr/interrupt.h>
#include "TWI.h"
#include <avr/io.h>
 
// initialize the component
void TWI_init(long cpu_freq, long bit_rate, char* buffer, uint16_t max, void (*callback)(volatile uint8_t TWI_return_code)){
 240:	cf 92       	push	r12
 242:	df 92       	push	r13
 244:	ef 92       	push	r14
 246:	ff 92       	push	r15
 248:	0f 93       	push	r16
 24a:	1f 93       	push	r17
 24c:	df 93       	push	r29
 24e:	cf 93       	push	r28
 250:	cd b7       	in	r28, 0x3d	; 61
 252:	de b7       	in	r29, 0x3e	; 62
 254:	2e 97       	sbiw	r28, 0x0e	; 14
 256:	0f b6       	in	r0, 0x3f	; 63
 258:	f8 94       	cli
 25a:	de bf       	out	0x3e, r29	; 62
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	cd bf       	out	0x3d, r28	; 61
 260:	69 83       	std	Y+1, r22	; 0x01
 262:	7a 83       	std	Y+2, r23	; 0x02
 264:	8b 83       	std	Y+3, r24	; 0x03
 266:	9c 83       	std	Y+4, r25	; 0x04
 268:	2d 83       	std	Y+5, r18	; 0x05
 26a:	3e 83       	std	Y+6, r19	; 0x06
 26c:	4f 83       	std	Y+7, r20	; 0x07
 26e:	58 87       	std	Y+8, r21	; 0x08
 270:	1a 87       	std	Y+10, r17	; 0x0a
 272:	09 87       	std	Y+9, r16	; 0x09
 274:	fc 86       	std	Y+12, r15	; 0x0c
 276:	eb 86       	std	Y+11, r14	; 0x0b
 278:	de 86       	std	Y+14, r13	; 0x0e
 27a:	cd 86       	std	Y+13, r12	; 0x0d
    TWI_return_result = callback;
 27c:	8d 85       	ldd	r24, Y+13	; 0x0d
 27e:	9e 85       	ldd	r25, Y+14	; 0x0e
 280:	90 93 6e 00 	sts	0x006E, r25
 284:	80 93 6d 00 	sts	0x006D, r24
    p_TWI_buffer = buffer;
 288:	89 85       	ldd	r24, Y+9	; 0x09
 28a:	9a 85       	ldd	r25, Y+10	; 0x0a
 28c:	90 93 69 00 	sts	0x0069, r25
 290:	80 93 68 00 	sts	0x0068, r24
    TWI_buffer_max = max;
 294:	8b 85       	ldd	r24, Y+11	; 0x0b
 296:	9c 85       	ldd	r25, Y+12	; 0x0c
 298:	90 93 63 00 	sts	0x0063, r25
 29c:	80 93 62 00 	sts	0x0062, r24
    TWBR = ((cpu_freq/bit_rate)-16)/2; // bit rate register 
 2a0:	00 e2       	ldi	r16, 0x20	; 32
 2a2:	10 e0       	ldi	r17, 0x00	; 0
 2a4:	89 81       	ldd	r24, Y+1	; 0x01
 2a6:	9a 81       	ldd	r25, Y+2	; 0x02
 2a8:	ab 81       	ldd	r26, Y+3	; 0x03
 2aa:	bc 81       	ldd	r27, Y+4	; 0x04
 2ac:	2d 81       	ldd	r18, Y+5	; 0x05
 2ae:	3e 81       	ldd	r19, Y+6	; 0x06
 2b0:	4f 81       	ldd	r20, Y+7	; 0x07
 2b2:	58 85       	ldd	r21, Y+8	; 0x08
 2b4:	bc 01       	movw	r22, r24
 2b6:	cd 01       	movw	r24, r26
 2b8:	d9 d2       	rcall	.+1458   	; 0x86c <__divmodsi4>
 2ba:	da 01       	movw	r26, r20
 2bc:	c9 01       	movw	r24, r18
 2be:	40 97       	sbiw	r24, 0x10	; 16
 2c0:	a1 09       	sbc	r26, r1
 2c2:	b1 09       	sbc	r27, r1
 2c4:	22 e0       	ldi	r18, 0x02	; 2
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	40 e0       	ldi	r20, 0x00	; 0
 2ca:	50 e0       	ldi	r21, 0x00	; 0
 2cc:	bc 01       	movw	r22, r24
 2ce:	cd 01       	movw	r24, r26
 2d0:	cd d2       	rcall	.+1434   	; 0x86c <__divmodsi4>
 2d2:	da 01       	movw	r26, r20
 2d4:	c9 01       	movw	r24, r18
 2d6:	f8 01       	movw	r30, r16
 2d8:	80 83       	st	Z, r24
    TWSR = 0; // prescaler
 2da:	81 e2       	ldi	r24, 0x21	; 33
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	fc 01       	movw	r30, r24
 2e0:	10 82       	st	Z, r1
    TWI_busy=0;
 2e2:	10 92 71 00 	sts	0x0071, r1
}
 2e6:	2e 96       	adiw	r28, 0x0e	; 14
 2e8:	0f b6       	in	r0, 0x3f	; 63
 2ea:	f8 94       	cli
 2ec:	de bf       	out	0x3e, r29	; 62
 2ee:	0f be       	out	0x3f, r0	; 63
 2f0:	cd bf       	out	0x3d, r28	; 61
 2f2:	cf 91       	pop	r28
 2f4:	df 91       	pop	r29
 2f6:	1f 91       	pop	r17
 2f8:	0f 91       	pop	r16
 2fa:	ff 90       	pop	r15
 2fc:	ef 90       	pop	r14
 2fe:	df 90       	pop	r13
 300:	cf 90       	pop	r12
 302:	08 95       	ret

00000304 <TWI_master_start_write>:
 
// master write to slave
void TWI_master_start_write(uint8_t slave_addr, uint16_t write_bytes){
 304:	df 93       	push	r29
 306:	cf 93       	push	r28
 308:	00 d0       	rcall	.+0      	; 0x30a <TWI_master_start_write+0x6>
 30a:	0f 92       	push	r0
 30c:	cd b7       	in	r28, 0x3d	; 61
 30e:	de b7       	in	r29, 0x3e	; 62
 310:	89 83       	std	Y+1, r24	; 0x01
 312:	7b 83       	std	Y+3, r23	; 0x03
 314:	6a 83       	std	Y+2, r22	; 0x02
    TWI_busy=1;
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	80 93 71 00 	sts	0x0071, r24
    if(write_bytes>TWI_buffer_max){
 31c:	80 91 62 00 	lds	r24, 0x0062
 320:	90 91 63 00 	lds	r25, 0x0063
 324:	2a 81       	ldd	r18, Y+2	; 0x02
 326:	3b 81       	ldd	r19, Y+3	; 0x03
 328:	82 17       	cp	r24, r18
 32a:	93 07       	cpc	r25, r19
 32c:	48 f4       	brcc	.+18     	; 0x340 <TWI_master_start_write+0x3c>
        TWI_write_bytes=TWI_buffer_max;
 32e:	80 91 62 00 	lds	r24, 0x0062
 332:	90 91 63 00 	lds	r25, 0x0063
 336:	90 93 61 00 	sts	0x0061, r25
 33a:	80 93 60 00 	sts	0x0060, r24
 33e:	06 c0       	rjmp	.+12     	; 0x34c <TWI_master_start_write+0x48>
    }else{
        TWI_write_bytes=write_bytes;
 340:	8a 81       	ldd	r24, Y+2	; 0x02
 342:	9b 81       	ldd	r25, Y+3	; 0x03
 344:	90 93 61 00 	sts	0x0061, r25
 348:	80 93 60 00 	sts	0x0060, r24
    }
    TWI_operation=TWI_OP_WRITE_ONLY;
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	80 93 72 00 	sts	0x0072, r24
    TWI_master_state = TWI_WRITE_STATE;
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	80 93 64 00 	sts	0x0064, r24
    TWI_target_slave_addr = slave_addr;
 358:	89 81       	ldd	r24, Y+1	; 0x01
 35a:	80 93 6f 00 	sts	0x006F, r24
    TWCR = TWI_START; // start TWI master mode
 35e:	86 e5       	ldi	r24, 0x56	; 86
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	25 ea       	ldi	r18, 0xA5	; 165
 364:	fc 01       	movw	r30, r24
 366:	20 83       	st	Z, r18
}
 368:	0f 90       	pop	r0
 36a:	0f 90       	pop	r0
 36c:	0f 90       	pop	r0
 36e:	cf 91       	pop	r28
 370:	df 91       	pop	r29
 372:	08 95       	ret

00000374 <TWI_master_start_read>:
 
// master read from slave
void TWI_master_start_read(uint8_t slave_addr, uint16_t read_bytes){
 374:	df 93       	push	r29
 376:	cf 93       	push	r28
 378:	00 d0       	rcall	.+0      	; 0x37a <TWI_master_start_read+0x6>
 37a:	0f 92       	push	r0
 37c:	cd b7       	in	r28, 0x3d	; 61
 37e:	de b7       	in	r29, 0x3e	; 62
 380:	89 83       	std	Y+1, r24	; 0x01
 382:	7b 83       	std	Y+3, r23	; 0x03
 384:	6a 83       	std	Y+2, r22	; 0x02
    TWI_busy=1;
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	80 93 71 00 	sts	0x0071, r24
    if(read_bytes>TWI_buffer_max){
 38c:	80 91 62 00 	lds	r24, 0x0062
 390:	90 91 63 00 	lds	r25, 0x0063
 394:	2a 81       	ldd	r18, Y+2	; 0x02
 396:	3b 81       	ldd	r19, Y+3	; 0x03
 398:	82 17       	cp	r24, r18
 39a:	93 07       	cpc	r25, r19
 39c:	48 f4       	brcc	.+18     	; 0x3b0 <TWI_master_start_read+0x3c>
        TWI_read_bytes=TWI_buffer_max;
 39e:	80 91 62 00 	lds	r24, 0x0062
 3a2:	90 91 63 00 	lds	r25, 0x0063
 3a6:	90 93 6c 00 	sts	0x006C, r25
 3aa:	80 93 6b 00 	sts	0x006B, r24
 3ae:	06 c0       	rjmp	.+12     	; 0x3bc <TWI_master_start_read+0x48>
    }else{
        TWI_read_bytes=read_bytes;
 3b0:	8a 81       	ldd	r24, Y+2	; 0x02
 3b2:	9b 81       	ldd	r25, Y+3	; 0x03
 3b4:	90 93 6c 00 	sts	0x006C, r25
 3b8:	80 93 6b 00 	sts	0x006B, r24
    }
    TWI_operation=TWI_OP_READ_ONLY;
 3bc:	82 e0       	ldi	r24, 0x02	; 2
 3be:	80 93 72 00 	sts	0x0072, r24
    TWI_master_state = TWI_READ_STATE;
 3c2:	82 e0       	ldi	r24, 0x02	; 2
 3c4:	80 93 64 00 	sts	0x0064, r24
    TWI_target_slave_addr = slave_addr;
 3c8:	89 81       	ldd	r24, Y+1	; 0x01
 3ca:	80 93 6f 00 	sts	0x006F, r24
    TWCR = TWI_START; // start TWI master mode
 3ce:	86 e5       	ldi	r24, 0x56	; 86
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	25 ea       	ldi	r18, 0xA5	; 165
 3d4:	fc 01       	movw	r30, r24
 3d6:	20 83       	st	Z, r18
}
 3d8:	0f 90       	pop	r0
 3da:	0f 90       	pop	r0
 3dc:	0f 90       	pop	r0
 3de:	cf 91       	pop	r28
 3e0:	df 91       	pop	r29
 3e2:	08 95       	ret

000003e4 <TWI_master_start_write_then_read>:
 
// master write then read without releasing buss between
void TWI_master_start_write_then_read(uint8_t slave_addr, uint16_t write_bytes, uint16_t read_bytes){
 3e4:	df 93       	push	r29
 3e6:	cf 93       	push	r28
 3e8:	00 d0       	rcall	.+0      	; 0x3ea <TWI_master_start_write_then_read+0x6>
 3ea:	00 d0       	rcall	.+0      	; 0x3ec <TWI_master_start_write_then_read+0x8>
 3ec:	0f 92       	push	r0
 3ee:	cd b7       	in	r28, 0x3d	; 61
 3f0:	de b7       	in	r29, 0x3e	; 62
 3f2:	89 83       	std	Y+1, r24	; 0x01
 3f4:	7b 83       	std	Y+3, r23	; 0x03
 3f6:	6a 83       	std	Y+2, r22	; 0x02
 3f8:	5d 83       	std	Y+5, r21	; 0x05
 3fa:	4c 83       	std	Y+4, r20	; 0x04
    TWI_busy=1;
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	80 93 71 00 	sts	0x0071, r24
    if(write_bytes>TWI_buffer_max){
 402:	80 91 62 00 	lds	r24, 0x0062
 406:	90 91 63 00 	lds	r25, 0x0063
 40a:	2a 81       	ldd	r18, Y+2	; 0x02
 40c:	3b 81       	ldd	r19, Y+3	; 0x03
 40e:	82 17       	cp	r24, r18
 410:	93 07       	cpc	r25, r19
 412:	48 f4       	brcc	.+18     	; 0x426 <TWI_master_start_write_then_read+0x42>
        TWI_write_bytes=TWI_buffer_max;
 414:	80 91 62 00 	lds	r24, 0x0062
 418:	90 91 63 00 	lds	r25, 0x0063
 41c:	90 93 61 00 	sts	0x0061, r25
 420:	80 93 60 00 	sts	0x0060, r24
 424:	06 c0       	rjmp	.+12     	; 0x432 <TWI_master_start_write_then_read+0x4e>
    }else{
        TWI_write_bytes=write_bytes;
 426:	8a 81       	ldd	r24, Y+2	; 0x02
 428:	9b 81       	ldd	r25, Y+3	; 0x03
 42a:	90 93 61 00 	sts	0x0061, r25
 42e:	80 93 60 00 	sts	0x0060, r24
    }
    if(read_bytes>TWI_buffer_max){
 432:	80 91 62 00 	lds	r24, 0x0062
 436:	90 91 63 00 	lds	r25, 0x0063
 43a:	2c 81       	ldd	r18, Y+4	; 0x04
 43c:	3d 81       	ldd	r19, Y+5	; 0x05
 43e:	82 17       	cp	r24, r18
 440:	93 07       	cpc	r25, r19
 442:	48 f4       	brcc	.+18     	; 0x456 <TWI_master_start_write_then_read+0x72>
        TWI_read_bytes=TWI_buffer_max;
 444:	80 91 62 00 	lds	r24, 0x0062
 448:	90 91 63 00 	lds	r25, 0x0063
 44c:	90 93 6c 00 	sts	0x006C, r25
 450:	80 93 6b 00 	sts	0x006B, r24
 454:	06 c0       	rjmp	.+12     	; 0x462 <__stack+0x3>
    }else{
        TWI_read_bytes=read_bytes;
 456:	8c 81       	ldd	r24, Y+4	; 0x04
 458:	9d 81       	ldd	r25, Y+5	; 0x05
 45a:	90 93 6c 00 	sts	0x006C, r25
 45e:	80 93 6b 00 	sts	0x006B, r24
    }
    TWI_operation=TWI_OP_WRITE_THEN_READ;
 462:	83 e0       	ldi	r24, 0x03	; 3
 464:	80 93 72 00 	sts	0x0072, r24
    TWI_master_state = TWI_WRITE_STATE;
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	80 93 64 00 	sts	0x0064, r24
    TWI_target_slave_addr = slave_addr;
 46e:	89 81       	ldd	r24, Y+1	; 0x01
 470:	80 93 6f 00 	sts	0x006F, r24
    TWCR = TWI_START; // start TWI master mode
 474:	86 e5       	ldi	r24, 0x56	; 86
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	25 ea       	ldi	r18, 0xA5	; 165
 47a:	fc 01       	movw	r30, r24
 47c:	20 83       	st	Z, r18
}
 47e:	0f 90       	pop	r0
 480:	0f 90       	pop	r0
 482:	0f 90       	pop	r0
 484:	0f 90       	pop	r0
 486:	0f 90       	pop	r0
 488:	cf 91       	pop	r28
 48a:	df 91       	pop	r29
 48c:	08 95       	ret

0000048e <TWI_enable_slave_mode>:
 
// enable slave and start receiving messages
void TWI_enable_slave_mode(uint8_t my_slave_addr, uint8_t enable_general_call, void (*TWI_return_fn)(uint8_t TWI_return_value)){
 48e:	df 93       	push	r29
 490:	cf 93       	push	r28
 492:	00 d0       	rcall	.+0      	; 0x494 <TWI_enable_slave_mode+0x6>
 494:	00 d0       	rcall	.+0      	; 0x496 <TWI_enable_slave_mode+0x8>
 496:	cd b7       	in	r28, 0x3d	; 61
 498:	de b7       	in	r29, 0x3e	; 62
 49a:	89 83       	std	Y+1, r24	; 0x01
 49c:	6a 83       	std	Y+2, r22	; 0x02
 49e:	5c 83       	std	Y+4, r21	; 0x04
 4a0:	4b 83       	std	Y+3, r20	; 0x03
    TWI_return_result = TWI_return_fn;
 4a2:	8b 81       	ldd	r24, Y+3	; 0x03
 4a4:	9c 81       	ldd	r25, Y+4	; 0x04
 4a6:	90 93 6e 00 	sts	0x006E, r25
 4aa:	80 93 6d 00 	sts	0x006D, r24
    TWAR = (my_slave_addr<<1); // set my slave addr
 4ae:	82 e2       	ldi	r24, 0x22	; 34
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	29 81       	ldd	r18, Y+1	; 0x01
 4b4:	22 0f       	add	r18, r18
 4b6:	fc 01       	movw	r30, r24
 4b8:	20 83       	st	Z, r18
    if(enable_general_call>0){
 4ba:	8a 81       	ldd	r24, Y+2	; 0x02
 4bc:	88 23       	and	r24, r24
 4be:	49 f0       	breq	.+18     	; 0x4d2 <TWI_enable_slave_mode+0x44>
        TWAR |= _BV(TWGCE); // enable general call receipts
 4c0:	82 e2       	ldi	r24, 0x22	; 34
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	22 e2       	ldi	r18, 0x22	; 34
 4c6:	30 e0       	ldi	r19, 0x00	; 0
 4c8:	f9 01       	movw	r30, r18
 4ca:	20 81       	ld	r18, Z
 4cc:	21 60       	ori	r18, 0x01	; 1
 4ce:	fc 01       	movw	r30, r24
 4d0:	20 83       	st	Z, r18
    }
    TWCR = TWI_ACK; // enable ACK on SLA_W/SLA_R
 4d2:	86 e5       	ldi	r24, 0x56	; 86
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	25 ec       	ldi	r18, 0xC5	; 197
 4d8:	fc 01       	movw	r30, r24
 4da:	20 83       	st	Z, r18
}
 4dc:	0f 90       	pop	r0
 4de:	0f 90       	pop	r0
 4e0:	0f 90       	pop	r0
 4e2:	0f 90       	pop	r0
 4e4:	cf 91       	pop	r28
 4e6:	df 91       	pop	r29
 4e8:	08 95       	ret

000004ea <__vector_17>:
// your application, be sure you return as quickly as possible. Remove significant
// work from the callback and instead perform that work in your main execution loop.
//
// See pages 229, 232, 235, and 238 of the ATmega328 datasheed for detailed 
// explaination of the logic below.
SIGNAL(TWI_vect){
 4ea:	1f 92       	push	r1
 4ec:	0f 92       	push	r0
 4ee:	0f b6       	in	r0, 0x3f	; 63
 4f0:	0f 92       	push	r0
 4f2:	11 24       	eor	r1, r1
 4f4:	2f 93       	push	r18
 4f6:	3f 93       	push	r19
 4f8:	4f 93       	push	r20
 4fa:	5f 93       	push	r21
 4fc:	6f 93       	push	r22
 4fe:	7f 93       	push	r23
 500:	8f 93       	push	r24
 502:	9f 93       	push	r25
 504:	af 93       	push	r26
 506:	bf 93       	push	r27
 508:	ef 93       	push	r30
 50a:	ff 93       	push	r31
 50c:	df 93       	push	r29
 50e:	cf 93       	push	r28
 510:	cd b7       	in	r28, 0x3d	; 61
 512:	de b7       	in	r29, 0x3e	; 62
    TWI_status = TWSR & TWI_TWSR_status_mask;
 514:	81 e2       	ldi	r24, 0x21	; 33
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	fc 01       	movw	r30, r24
 51a:	80 81       	ld	r24, Z
 51c:	88 7f       	andi	r24, 0xF8	; 248
 51e:	80 93 67 00 	sts	0x0067, r24
    switch(TWI_status){
 522:	80 91 67 00 	lds	r24, 0x0067
 526:	88 2f       	mov	r24, r24
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	aa 27       	eor	r26, r26
 52c:	97 fd       	sbrc	r25, 7
 52e:	a0 95       	com	r26
 530:	ba 2f       	mov	r27, r26
 532:	48 e0       	ldi	r20, 0x08	; 8
 534:	50 e0       	ldi	r21, 0x00	; 0
 536:	20 ec       	ldi	r18, 0xC0	; 192
 538:	30 e0       	ldi	r19, 0x00	; 0
 53a:	84 1b       	sub	r24, r20
 53c:	95 0b       	sbc	r25, r21
 53e:	28 17       	cp	r18, r24
 540:	39 07       	cpc	r19, r25
 542:	08 f4       	brcc	.+2      	; 0x546 <__vector_17+0x5c>
 544:	6a c1       	rjmp	.+724    	; 0x81a <__vector_17+0x330>
 546:	8d 5e       	subi	r24, 0xED	; 237
 548:	9f 4f       	sbci	r25, 0xFF	; 255
 54a:	8f 93       	push	r24
 54c:	9f 93       	push	r25
 54e:	08 95       	ret
 
        case TWI_MM_repeated_start_sent_x10:
        case TWI_MM_start_sent_x08:
            switch(TWI_master_state){
 550:	80 91 64 00 	lds	r24, 0x0064
 554:	88 2f       	mov	r24, r24
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	81 30       	cpi	r24, 0x01	; 1
 55a:	91 05       	cpc	r25, r1
 55c:	21 f0       	breq	.+8      	; 0x566 <__vector_17+0x7c>
 55e:	82 30       	cpi	r24, 0x02	; 2
 560:	91 05       	cpc	r25, r1
 562:	69 f0       	breq	.+26     	; 0x57e <__vector_17+0x94>
 564:	1c c0       	rjmp	.+56     	; 0x59e <__vector_17+0xb4>
                case TWI_WRITE_STATE:
                    TWI_buffer_pos=0; // point to 1st byte
 566:	10 92 76 00 	sts	0x0076, r1
 56a:	10 92 75 00 	sts	0x0075, r1
                    TWDR = (TWI_target_slave_addr<<1) | 0x00; // set SLA_W
 56e:	83 e2       	ldi	r24, 0x23	; 35
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	20 91 6f 00 	lds	r18, 0x006F
 576:	22 0f       	add	r18, r18
 578:	fc 01       	movw	r30, r24
 57a:	20 83       	st	Z, r18
                    break;
 57c:	10 c0       	rjmp	.+32     	; 0x59e <__vector_17+0xb4>
                case TWI_READ_STATE:
                    TWI_buffer_pos=0; // point to first byte
 57e:	10 92 76 00 	sts	0x0076, r1
 582:	10 92 75 00 	sts	0x0075, r1
                    TWDR = (TWI_target_slave_addr<<1) | 0x01; // set SLA_R
 586:	83 e2       	ldi	r24, 0x23	; 35
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	20 91 6f 00 	lds	r18, 0x006F
 58e:	22 2f       	mov	r18, r18
 590:	30 e0       	ldi	r19, 0x00	; 0
 592:	22 0f       	add	r18, r18
 594:	33 1f       	adc	r19, r19
 596:	21 60       	ori	r18, 0x01	; 1
 598:	fc 01       	movw	r30, r24
 59a:	20 83       	st	Z, r18
                    break;
 59c:	00 00       	nop
            }
            TWCR = TWI_ACK; // transmit
 59e:	86 e5       	ldi	r24, 0x56	; 86
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	25 ec       	ldi	r18, 0xC5	; 197
 5a4:	fc 01       	movw	r30, r24
 5a6:	20 83       	st	Z, r18
            break;
 5a8:	4e c1       	rjmp	.+668    	; 0x846 <__vector_17+0x35c>
 
        case TWI_MT_SLA_W_sent_ack_received_x18:
        case TWI_MT_data_sent_ack_received_x28:
            if(TWI_buffer_pos==TWI_write_bytes){
 5aa:	20 91 75 00 	lds	r18, 0x0075
 5ae:	30 91 76 00 	lds	r19, 0x0076
 5b2:	80 91 60 00 	lds	r24, 0x0060
 5b6:	90 91 61 00 	lds	r25, 0x0061
 5ba:	28 17       	cp	r18, r24
 5bc:	39 07       	cpc	r19, r25
 5be:	69 f5       	brne	.+90     	; 0x61a <__vector_17+0x130>
                if(TWI_operation==TWI_OP_WRITE_THEN_READ){
 5c0:	80 91 72 00 	lds	r24, 0x0072
 5c4:	83 30       	cpi	r24, 0x03	; 3
 5c6:	49 f4       	brne	.+18     	; 0x5da <__vector_17+0xf0>
                    TWI_master_state=TWI_READ_STATE; // now read from slave
 5c8:	82 e0       	ldi	r24, 0x02	; 2
 5ca:	80 93 64 00 	sts	0x0064, r24
                    TWCR = TWI_START; // transmit repeated start
 5ce:	86 e5       	ldi	r24, 0x56	; 86
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	25 ea       	ldi	r18, 0xA5	; 165
 5d4:	fc 01       	movw	r30, r24
 5d6:	20 83       	st	Z, r18
                }
            }else{
                TWDR = p_TWI_buffer[TWI_buffer_pos++]; // load data
                TWCR = TWI_ENABLE; // transmit
            }
            break;
 5d8:	36 c1       	rjmp	.+620    	; 0x846 <__vector_17+0x35c>
            if(TWI_buffer_pos==TWI_write_bytes){
                if(TWI_operation==TWI_OP_WRITE_THEN_READ){
                    TWI_master_state=TWI_READ_STATE; // now read from slave
                    TWCR = TWI_START; // transmit repeated start
                }else{
                    if(TWI_return_result){
 5da:	80 91 6d 00 	lds	r24, 0x006D
 5de:	90 91 6e 00 	lds	r25, 0x006E
 5e2:	00 97       	sbiw	r24, 0x00	; 0
 5e4:	39 f0       	breq	.+14     	; 0x5f4 <__vector_17+0x10a>
                        (*TWI_return_result)(TWI_success);// callback with results
 5e6:	20 91 6d 00 	lds	r18, 0x006D
 5ea:	30 91 6e 00 	lds	r19, 0x006E
 5ee:	80 e0       	ldi	r24, 0x00	; 0
 5f0:	f9 01       	movw	r30, r18
 5f2:	09 95       	icall
                    }
                    TWCR = TWI_STOP; // release the buss
 5f4:	86 e5       	ldi	r24, 0x56	; 86
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	25 e9       	ldi	r18, 0x95	; 149
 5fa:	fc 01       	movw	r30, r24
 5fc:	20 83       	st	Z, r18
                    while(TWCR & (1<<TWSTO)); // wait for it
 5fe:	00 00       	nop
 600:	86 e5       	ldi	r24, 0x56	; 86
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	fc 01       	movw	r30, r24
 606:	80 81       	ld	r24, Z
 608:	88 2f       	mov	r24, r24
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	80 71       	andi	r24, 0x10	; 16
 60e:	90 70       	andi	r25, 0x00	; 0
 610:	00 97       	sbiw	r24, 0x00	; 0
 612:	b1 f7       	brne	.-20     	; 0x600 <__vector_17+0x116>
                    TWI_busy=0;
 614:	10 92 71 00 	sts	0x0071, r1
                }
            }else{
                TWDR = p_TWI_buffer[TWI_buffer_pos++]; // load data
                TWCR = TWI_ENABLE; // transmit
            }
            break;
 618:	16 c1       	rjmp	.+556    	; 0x846 <__vector_17+0x35c>
                    TWCR = TWI_STOP; // release the buss
                    while(TWCR & (1<<TWSTO)); // wait for it
                    TWI_busy=0;
                }
            }else{
                TWDR = p_TWI_buffer[TWI_buffer_pos++]; // load data
 61a:	23 e2       	ldi	r18, 0x23	; 35
 61c:	30 e0       	ldi	r19, 0x00	; 0
 61e:	40 91 68 00 	lds	r20, 0x0068
 622:	50 91 69 00 	lds	r21, 0x0069
 626:	80 91 75 00 	lds	r24, 0x0075
 62a:	90 91 76 00 	lds	r25, 0x0076
 62e:	48 0f       	add	r20, r24
 630:	59 1f       	adc	r21, r25
 632:	fa 01       	movw	r30, r20
 634:	40 81       	ld	r20, Z
 636:	f9 01       	movw	r30, r18
 638:	40 83       	st	Z, r20
 63a:	01 96       	adiw	r24, 0x01	; 1
 63c:	90 93 76 00 	sts	0x0076, r25
 640:	80 93 75 00 	sts	0x0075, r24
                TWCR = TWI_ENABLE; // transmit
 644:	86 e5       	ldi	r24, 0x56	; 86
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	25 e8       	ldi	r18, 0x85	; 133
 64a:	fc 01       	movw	r30, r24
 64c:	20 83       	st	Z, r18
            }
            break;
 64e:	fb c0       	rjmp	.+502    	; 0x846 <__vector_17+0x35c>
 
        case TWI_MR_data_received_ack_returned_x50:
            p_TWI_buffer[TWI_buffer_pos++]=TWDR; // save byte
 650:	20 91 68 00 	lds	r18, 0x0068
 654:	30 91 69 00 	lds	r19, 0x0069
 658:	80 91 75 00 	lds	r24, 0x0075
 65c:	90 91 76 00 	lds	r25, 0x0076
 660:	28 0f       	add	r18, r24
 662:	39 1f       	adc	r19, r25
 664:	43 e2       	ldi	r20, 0x23	; 35
 666:	50 e0       	ldi	r21, 0x00	; 0
 668:	fa 01       	movw	r30, r20
 66a:	40 81       	ld	r20, Z
 66c:	f9 01       	movw	r30, r18
 66e:	40 83       	st	Z, r20
 670:	01 96       	adiw	r24, 0x01	; 1
 672:	90 93 76 00 	sts	0x0076, r25
 676:	80 93 75 00 	sts	0x0075, r24
        case TWI_MR_SLA_R_sent_ack_received_x40: 
            if(TWI_buffer_pos==(TWI_read_bytes-1)){
 67a:	80 91 6b 00 	lds	r24, 0x006B
 67e:	90 91 6c 00 	lds	r25, 0x006C
 682:	9c 01       	movw	r18, r24
 684:	21 50       	subi	r18, 0x01	; 1
 686:	30 40       	sbci	r19, 0x00	; 0
 688:	80 91 75 00 	lds	r24, 0x0075
 68c:	90 91 76 00 	lds	r25, 0x0076
 690:	28 17       	cp	r18, r24
 692:	39 07       	cpc	r19, r25
 694:	31 f4       	brne	.+12     	; 0x6a2 <__vector_17+0x1b8>
                TWCR = TWI_NACK; // get last byte then nack
 696:	86 e5       	ldi	r24, 0x56	; 86
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	25 e8       	ldi	r18, 0x85	; 133
 69c:	fc 01       	movw	r30, r24
 69e:	20 83       	st	Z, r18
            }else{
                TWCR = TWI_ACK; // get next byte then ack
            }
            break;
 6a0:	d2 c0       	rjmp	.+420    	; 0x846 <__vector_17+0x35c>
            p_TWI_buffer[TWI_buffer_pos++]=TWDR; // save byte
        case TWI_MR_SLA_R_sent_ack_received_x40: 
            if(TWI_buffer_pos==(TWI_read_bytes-1)){
                TWCR = TWI_NACK; // get last byte then nack
            }else{
                TWCR = TWI_ACK; // get next byte then ack
 6a2:	86 e5       	ldi	r24, 0x56	; 86
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	25 ec       	ldi	r18, 0xC5	; 197
 6a8:	fc 01       	movw	r30, r24
 6aa:	20 83       	st	Z, r18
            }
            break;
 6ac:	cc c0       	rjmp	.+408    	; 0x846 <__vector_17+0x35c>
 
        case TWI_MR_data_received_nack_returned_x58:            
            p_TWI_buffer[TWI_buffer_pos++]=TWDR; // save byte
 6ae:	20 91 68 00 	lds	r18, 0x0068
 6b2:	30 91 69 00 	lds	r19, 0x0069
 6b6:	80 91 75 00 	lds	r24, 0x0075
 6ba:	90 91 76 00 	lds	r25, 0x0076
 6be:	28 0f       	add	r18, r24
 6c0:	39 1f       	adc	r19, r25
 6c2:	43 e2       	ldi	r20, 0x23	; 35
 6c4:	50 e0       	ldi	r21, 0x00	; 0
 6c6:	fa 01       	movw	r30, r20
 6c8:	40 81       	ld	r20, Z
 6ca:	f9 01       	movw	r30, r18
 6cc:	40 83       	st	Z, r20
 6ce:	01 96       	adiw	r24, 0x01	; 1
 6d0:	90 93 76 00 	sts	0x0076, r25
 6d4:	80 93 75 00 	sts	0x0075, r24
            if(TWI_return_result){
 6d8:	80 91 6d 00 	lds	r24, 0x006D
 6dc:	90 91 6e 00 	lds	r25, 0x006E
 6e0:	00 97       	sbiw	r24, 0x00	; 0
 6e2:	39 f0       	breq	.+14     	; 0x6f2 <__vector_17+0x208>
                (*TWI_return_result)(TWI_success);// callback with results
 6e4:	20 91 6d 00 	lds	r18, 0x006D
 6e8:	30 91 6e 00 	lds	r19, 0x006E
 6ec:	80 e0       	ldi	r24, 0x00	; 0
 6ee:	f9 01       	movw	r30, r18
 6f0:	09 95       	icall
            }
            TWCR = TWI_STOP; // release the buss
 6f2:	86 e5       	ldi	r24, 0x56	; 86
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	25 e9       	ldi	r18, 0x95	; 149
 6f8:	fc 01       	movw	r30, r24
 6fa:	20 83       	st	Z, r18
            while(TWCR & (1<<TWSTO)); // wait for it
 6fc:	00 00       	nop
 6fe:	86 e5       	ldi	r24, 0x56	; 86
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	fc 01       	movw	r30, r24
 704:	80 81       	ld	r24, Z
 706:	88 2f       	mov	r24, r24
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	80 71       	andi	r24, 0x10	; 16
 70c:	90 70       	andi	r25, 0x00	; 0
 70e:	00 97       	sbiw	r24, 0x00	; 0
 710:	b1 f7       	brne	.-20     	; 0x6fe <__vector_17+0x214>
            TWI_busy=0;
 712:	10 92 71 00 	sts	0x0071, r1
            break;
 716:	97 c0       	rjmp	.+302    	; 0x846 <__vector_17+0x35c>
 
        case TWI_SR_SLA_W_received_ack_sent_x60:
        case TWI_SR_SLA_W_received_after_arbitration_lost_ack_sent_x68:
        case TWI_SR_general_call_received_ack_sent_x70:
        case TWI_SR_general_call_received_after_arbitration_lost_ack_sent_x78:
            TWI_buffer_pos=0; // point to start of input buffer
 718:	10 92 76 00 	sts	0x0076, r1
 71c:	10 92 75 00 	sts	0x0075, r1
            TWCR = TWI_ACK;
 720:	86 e5       	ldi	r24, 0x56	; 86
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	25 ec       	ldi	r18, 0xC5	; 197
 726:	fc 01       	movw	r30, r24
 728:	20 83       	st	Z, r18
            break;
 72a:	8d c0       	rjmp	.+282    	; 0x846 <__vector_17+0x35c>
 
        case TWI_SR_SLA_W_data_received_ack_sent_x80:
        case TWI_SR_general_call_data_received_ack_sent_x90:
            if(TWI_buffer_pos<TWI_buffer_max){
 72c:	20 91 75 00 	lds	r18, 0x0075
 730:	30 91 76 00 	lds	r19, 0x0076
 734:	80 91 62 00 	lds	r24, 0x0062
 738:	90 91 63 00 	lds	r25, 0x0063
 73c:	28 17       	cp	r18, r24
 73e:	39 07       	cpc	r19, r25
 740:	a8 f4       	brcc	.+42     	; 0x76c <__vector_17+0x282>
                p_TWI_buffer[TWI_buffer_pos++]=TWDR; // store data
 742:	20 91 68 00 	lds	r18, 0x0068
 746:	30 91 69 00 	lds	r19, 0x0069
 74a:	80 91 75 00 	lds	r24, 0x0075
 74e:	90 91 76 00 	lds	r25, 0x0076
 752:	28 0f       	add	r18, r24
 754:	39 1f       	adc	r19, r25
 756:	43 e2       	ldi	r20, 0x23	; 35
 758:	50 e0       	ldi	r21, 0x00	; 0
 75a:	fa 01       	movw	r30, r20
 75c:	40 81       	ld	r20, Z
 75e:	f9 01       	movw	r30, r18
 760:	40 83       	st	Z, r20
 762:	01 96       	adiw	r24, 0x01	; 1
 764:	90 93 76 00 	sts	0x0076, r25
 768:	80 93 75 00 	sts	0x0075, r24
            }
            TWCR = TWI_ACK; 
 76c:	86 e5       	ldi	r24, 0x56	; 86
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	25 ec       	ldi	r18, 0xC5	; 197
 772:	fc 01       	movw	r30, r24
 774:	20 83       	st	Z, r18
            break;
 776:	67 c0       	rjmp	.+206    	; 0x846 <__vector_17+0x35c>
 
        case TWI_SR_stop_or_repeated_start_received_xA0:
            TWI_buffer_len=TWI_buffer_pos; // bytes returned
 778:	80 91 75 00 	lds	r24, 0x0075
 77c:	90 91 76 00 	lds	r25, 0x0076
 780:	80 93 70 00 	sts	0x0070, r24
            if(TWI_return_result){
 784:	80 91 6d 00 	lds	r24, 0x006D
 788:	90 91 6e 00 	lds	r25, 0x006E
 78c:	00 97       	sbiw	r24, 0x00	; 0
 78e:	39 f0       	breq	.+14     	; 0x79e <__vector_17+0x2b4>
                (*TWI_return_result)(TWI_success); // callback with results
 790:	20 91 6d 00 	lds	r18, 0x006D
 794:	30 91 6e 00 	lds	r19, 0x006E
 798:	80 e0       	ldi	r24, 0x00	; 0
 79a:	f9 01       	movw	r30, r18
 79c:	09 95       	icall
            }
            TWCR = TWI_ACK; 
 79e:	86 e5       	ldi	r24, 0x56	; 86
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	25 ec       	ldi	r18, 0xC5	; 197
 7a4:	fc 01       	movw	r30, r24
 7a6:	20 83       	st	Z, r18
            break;
 7a8:	4e c0       	rjmp	.+156    	; 0x846 <__vector_17+0x35c>
 
        case TWI_ST_SLA_R_received_after_arbitration_lost_ack_sent_x80:
        case TWI_ST_SLA_R_received_ack_sent_xA8:
            TWI_buffer_pos=0; // point to start of input buffer
 7aa:	10 92 76 00 	sts	0x0076, r1
 7ae:	10 92 75 00 	sts	0x0075, r1
        case TWI_ST_byte_sent_ack_received_x88:
            if(TWI_buffer_pos<TWI_buffer_max){
 7b2:	20 91 75 00 	lds	r18, 0x0075
 7b6:	30 91 76 00 	lds	r19, 0x0076
 7ba:	80 91 62 00 	lds	r24, 0x0062
 7be:	90 91 63 00 	lds	r25, 0x0063
 7c2:	28 17       	cp	r18, r24
 7c4:	39 07       	cpc	r19, r25
 7c6:	a8 f4       	brcc	.+42     	; 0x7f2 <__vector_17+0x308>
                TWDR = p_TWI_buffer[TWI_buffer_pos++]; // load data
 7c8:	23 e2       	ldi	r18, 0x23	; 35
 7ca:	30 e0       	ldi	r19, 0x00	; 0
 7cc:	40 91 68 00 	lds	r20, 0x0068
 7d0:	50 91 69 00 	lds	r21, 0x0069
 7d4:	80 91 75 00 	lds	r24, 0x0075
 7d8:	90 91 76 00 	lds	r25, 0x0076
 7dc:	48 0f       	add	r20, r24
 7de:	59 1f       	adc	r21, r25
 7e0:	fa 01       	movw	r30, r20
 7e2:	40 81       	ld	r20, Z
 7e4:	f9 01       	movw	r30, r18
 7e6:	40 83       	st	Z, r20
 7e8:	01 96       	adiw	r24, 0x01	; 1
 7ea:	90 93 76 00 	sts	0x0076, r25
 7ee:	80 93 75 00 	sts	0x0075, r24
            }
        case TWI_SR_SLA_W_data_received_nack_sent_x88:
        case TWI_SR_general_call_data_received_nack_sent_x98:
        case TWI_ST_byte_sent_nack_received_xC0:
        case TWI_ST_last_byte_sent_ack_received_xC8:
            TWCR = TWI_ACK; 
 7f2:	86 e5       	ldi	r24, 0x56	; 86
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	25 ec       	ldi	r18, 0xC5	; 197
 7f8:	fc 01       	movw	r30, r24
 7fa:	20 83       	st	Z, r18
            break;
 7fc:	24 c0       	rjmp	.+72     	; 0x846 <__vector_17+0x35c>
 
        case TWI_MT_SLA_W_sent_nack_received_x20:
        case TWI_MT_data_sent_nack_received_x30:
        case TWI_MR_SLA_R_sent_nack_received_x48:
            if(TWI_return_result){
 7fe:	80 91 6d 00 	lds	r24, 0x006D
 802:	90 91 6e 00 	lds	r25, 0x006E
 806:	00 97       	sbiw	r24, 0x00	; 0
 808:	41 f0       	breq	.+16     	; 0x81a <__vector_17+0x330>
                (*TWI_return_result)(TWI_status);// callback with status
 80a:	20 91 6d 00 	lds	r18, 0x006D
 80e:	30 91 6e 00 	lds	r19, 0x006E
 812:	80 91 67 00 	lds	r24, 0x0067
 816:	f9 01       	movw	r30, r18
 818:	09 95       	icall
            }
        case TWI_MM_arbitration_lost_x38:
        default:
            TWCR=TWI_STOP; 
 81a:	86 e5       	ldi	r24, 0x56	; 86
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	25 e9       	ldi	r18, 0x95	; 149
 820:	fc 01       	movw	r30, r24
 822:	20 83       	st	Z, r18
            while(TWCR & (1<<TWSTO)); // wait for it
 824:	00 00       	nop
 826:	86 e5       	ldi	r24, 0x56	; 86
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	fc 01       	movw	r30, r24
 82c:	80 81       	ld	r24, Z
 82e:	88 2f       	mov	r24, r24
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	80 71       	andi	r24, 0x10	; 16
 834:	90 70       	andi	r25, 0x00	; 0
 836:	00 97       	sbiw	r24, 0x00	; 0
 838:	b1 f7       	brne	.-20     	; 0x826 <__vector_17+0x33c>
            TWCR=TWI_START; // try again
 83a:	86 e5       	ldi	r24, 0x56	; 86
 83c:	90 e0       	ldi	r25, 0x00	; 0
 83e:	25 ea       	ldi	r18, 0xA5	; 165
 840:	fc 01       	movw	r30, r24
 842:	20 83       	st	Z, r18
            break;
 844:	00 00       	nop
    }
 
 846:	cf 91       	pop	r28
 848:	df 91       	pop	r29
 84a:	ff 91       	pop	r31
 84c:	ef 91       	pop	r30
 84e:	bf 91       	pop	r27
 850:	af 91       	pop	r26
 852:	9f 91       	pop	r25
 854:	8f 91       	pop	r24
 856:	7f 91       	pop	r23
 858:	6f 91       	pop	r22
 85a:	5f 91       	pop	r21
 85c:	4f 91       	pop	r20
 85e:	3f 91       	pop	r19
 860:	2f 91       	pop	r18
 862:	0f 90       	pop	r0
 864:	0f be       	out	0x3f, r0	; 63
 866:	0f 90       	pop	r0
 868:	1f 90       	pop	r1
 86a:	18 95       	reti

0000086c <__divmodsi4>:
 86c:	97 fb       	bst	r25, 7
 86e:	09 2e       	mov	r0, r25
 870:	05 26       	eor	r0, r21
 872:	0e d0       	rcall	.+28     	; 0x890 <__divmodsi4_neg1>
 874:	57 fd       	sbrc	r21, 7
 876:	04 d0       	rcall	.+8      	; 0x880 <__divmodsi4_neg2>
 878:	14 d0       	rcall	.+40     	; 0x8a2 <__udivmodsi4>
 87a:	0a d0       	rcall	.+20     	; 0x890 <__divmodsi4_neg1>
 87c:	00 1c       	adc	r0, r0
 87e:	38 f4       	brcc	.+14     	; 0x88e <__divmodsi4_exit>

00000880 <__divmodsi4_neg2>:
 880:	50 95       	com	r21
 882:	40 95       	com	r20
 884:	30 95       	com	r19
 886:	21 95       	neg	r18
 888:	3f 4f       	sbci	r19, 0xFF	; 255
 88a:	4f 4f       	sbci	r20, 0xFF	; 255
 88c:	5f 4f       	sbci	r21, 0xFF	; 255

0000088e <__divmodsi4_exit>:
 88e:	08 95       	ret

00000890 <__divmodsi4_neg1>:
 890:	f6 f7       	brtc	.-4      	; 0x88e <__divmodsi4_exit>
 892:	90 95       	com	r25
 894:	80 95       	com	r24
 896:	70 95       	com	r23
 898:	61 95       	neg	r22
 89a:	7f 4f       	sbci	r23, 0xFF	; 255
 89c:	8f 4f       	sbci	r24, 0xFF	; 255
 89e:	9f 4f       	sbci	r25, 0xFF	; 255
 8a0:	08 95       	ret

000008a2 <__udivmodsi4>:
 8a2:	a1 e2       	ldi	r26, 0x21	; 33
 8a4:	1a 2e       	mov	r1, r26
 8a6:	aa 1b       	sub	r26, r26
 8a8:	bb 1b       	sub	r27, r27
 8aa:	fd 01       	movw	r30, r26
 8ac:	0d c0       	rjmp	.+26     	; 0x8c8 <__udivmodsi4_ep>

000008ae <__udivmodsi4_loop>:
 8ae:	aa 1f       	adc	r26, r26
 8b0:	bb 1f       	adc	r27, r27
 8b2:	ee 1f       	adc	r30, r30
 8b4:	ff 1f       	adc	r31, r31
 8b6:	a2 17       	cp	r26, r18
 8b8:	b3 07       	cpc	r27, r19
 8ba:	e4 07       	cpc	r30, r20
 8bc:	f5 07       	cpc	r31, r21
 8be:	20 f0       	brcs	.+8      	; 0x8c8 <__udivmodsi4_ep>
 8c0:	a2 1b       	sub	r26, r18
 8c2:	b3 0b       	sbc	r27, r19
 8c4:	e4 0b       	sbc	r30, r20
 8c6:	f5 0b       	sbc	r31, r21

000008c8 <__udivmodsi4_ep>:
 8c8:	66 1f       	adc	r22, r22
 8ca:	77 1f       	adc	r23, r23
 8cc:	88 1f       	adc	r24, r24
 8ce:	99 1f       	adc	r25, r25
 8d0:	1a 94       	dec	r1
 8d2:	69 f7       	brne	.-38     	; 0x8ae <__udivmodsi4_loop>
 8d4:	60 95       	com	r22
 8d6:	70 95       	com	r23
 8d8:	80 95       	com	r24
 8da:	90 95       	com	r25
 8dc:	9b 01       	movw	r18, r22
 8de:	ac 01       	movw	r20, r24
 8e0:	bd 01       	movw	r22, r26
 8e2:	cf 01       	movw	r24, r30
 8e4:	08 95       	ret

000008e6 <_exit>:
 8e6:	f8 94       	cli

000008e8 <__stop_program>:
 8e8:	ff cf       	rjmp	.-2      	; 0x8e8 <__stop_program>
