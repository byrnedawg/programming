
MMA8452 Advance.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001714  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00001714  000017a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000066  00800090  00800090  000017d8  2**0
                  ALLOC
  3 .stab         000033b4  00000000  00000000  000017d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000967  00000000  00000000  00004b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  000054f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000323  00000000  00000000  00005593  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001524  00000000  00000000  000058b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000967  00000000  00000000  00006dda  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000018f8  00000000  00000000  00007741  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000260  00000000  00000000  0000903c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000059a  00000000  00000000  0000929c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000fdc  00000000  00000000  00009836  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000196  00000000  00000000  0000a812  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000048  00000000  00000000  0000a9a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b1 c0       	rjmp	.+354    	; 0x164 <__ctors_end>
       2:	cb c0       	rjmp	.+406    	; 0x19a <__bad_interrupt>
       4:	ca c0       	rjmp	.+404    	; 0x19a <__bad_interrupt>
       6:	c9 c0       	rjmp	.+402    	; 0x19a <__bad_interrupt>
       8:	c8 c0       	rjmp	.+400    	; 0x19a <__bad_interrupt>
       a:	c7 c0       	rjmp	.+398    	; 0x19a <__bad_interrupt>
       c:	c6 c0       	rjmp	.+396    	; 0x19a <__bad_interrupt>
       e:	c5 c0       	rjmp	.+394    	; 0x19a <__bad_interrupt>
      10:	c4 c0       	rjmp	.+392    	; 0x19a <__bad_interrupt>
      12:	c3 c0       	rjmp	.+390    	; 0x19a <__bad_interrupt>
      14:	c2 c0       	rjmp	.+388    	; 0x19a <__bad_interrupt>
      16:	d1 c0       	rjmp	.+418    	; 0x1ba <__vector_11>
      18:	c0 c0       	rjmp	.+384    	; 0x19a <__bad_interrupt>
      1a:	bf c0       	rjmp	.+382    	; 0x19a <__bad_interrupt>
      1c:	be c0       	rjmp	.+380    	; 0x19a <__bad_interrupt>
      1e:	bd c0       	rjmp	.+378    	; 0x19a <__bad_interrupt>
      20:	bc c0       	rjmp	.+376    	; 0x19a <__bad_interrupt>
      22:	bb c0       	rjmp	.+374    	; 0x19a <__bad_interrupt>
      24:	ba c0       	rjmp	.+372    	; 0x19a <__bad_interrupt>
      26:	03 6e       	ori	r16, 0xE3	; 227
      28:	db 36       	cpi	r29, 0x6B	; 107
      2a:	3d 9a       	sbi	0x07, 5	; 7
      2c:	99 99       	sbic	0x13, 1	; 19
      2e:	99 3d       	cpi	r25, 0xD9	; 217
      30:	ab aa       	std	Y+51, r10	; 0x33
      32:	aa 2a       	or	r10, r26
      34:	3e 00       	.word	0x003e	; ????
      36:	00 00       	nop
      38:	80 3f       	cpi	r24, 0xF0	; 240
      3a:	07 2c       	mov	r0, r7
      3c:	7a a5       	ldd	r23, Y+42	; 0x2a
      3e:	ba 6c       	ori	r27, 0xCA	; 202
      40:	c5 90       	lpm	r12, Z+
      42:	da 3b       	cpi	r29, 0xBA	; 186
      44:	93 65       	ori	r25, 0x53	; 83
      46:	fc 8b       	std	Y+20, r31	; 0x14
      48:	bc 53       	subi	r27, 0x3C	; 60
      4a:	f8 10       	cpse	r15, r8
      4c:	fd 3c       	cpi	r31, 0xCD	; 205
      4e:	56 92       	.word	0x9256	; ????
      50:	83 4d       	sbci	r24, 0xD3	; 211
      52:	bd 87       	std	Y+13, r27	; 0x0d
      54:	9d 3a       	cpi	r25, 0xAD	; 173
      56:	b6 3d       	cpi	r27, 0xD6	; 214
      58:	cb c9       	rjmp	.-3178   	; 0xfffff3f0 <__eeprom_end+0xff7ef3f0>
      5a:	bf 5b       	subi	r27, 0xBF	; 191
      5c:	be 73       	andi	r27, 0x3E	; 62
      5e:	da 0f       	add	r29, r26
      60:	c9 3f       	cpi	r28, 0xF9	; 249

00000062 <__c.1912>:
      62:	6e 61 6e 00                                         nan.

00000066 <__c.1910>:
      66:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      76:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      86:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      96:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      a6:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      b6:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      c6:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      d6:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      e6:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      f6:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     106:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     116:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     126:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     136:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     146:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     156:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000164 <__ctors_end>:
     164:	11 24       	eor	r1, r1
     166:	1f be       	out	0x3f, r1	; 63
     168:	cf e5       	ldi	r28, 0x5F	; 95
     16a:	d4 e0       	ldi	r29, 0x04	; 4
     16c:	de bf       	out	0x3e, r29	; 62
     16e:	cd bf       	out	0x3d, r28	; 61

00000170 <__do_copy_data>:
     170:	10 e0       	ldi	r17, 0x00	; 0
     172:	a0 e6       	ldi	r26, 0x60	; 96
     174:	b0 e0       	ldi	r27, 0x00	; 0
     176:	e4 e1       	ldi	r30, 0x14	; 20
     178:	f7 e1       	ldi	r31, 0x17	; 23
     17a:	02 c0       	rjmp	.+4      	; 0x180 <__do_copy_data+0x10>
     17c:	05 90       	lpm	r0, Z+
     17e:	0d 92       	st	X+, r0
     180:	a0 39       	cpi	r26, 0x90	; 144
     182:	b1 07       	cpc	r27, r17
     184:	d9 f7       	brne	.-10     	; 0x17c <__do_copy_data+0xc>

00000186 <__do_clear_bss>:
     186:	10 e0       	ldi	r17, 0x00	; 0
     188:	a0 e9       	ldi	r26, 0x90	; 144
     18a:	b0 e0       	ldi	r27, 0x00	; 0
     18c:	01 c0       	rjmp	.+2      	; 0x190 <.do_clear_bss_start>

0000018e <.do_clear_bss_loop>:
     18e:	1d 92       	st	X+, r1

00000190 <.do_clear_bss_start>:
     190:	a6 3f       	cpi	r26, 0xF6	; 246
     192:	b1 07       	cpc	r27, r17
     194:	e1 f7       	brne	.-8      	; 0x18e <.do_clear_bss_loop>
     196:	60 d1       	rcall	.+704    	; 0x458 <main>
     198:	bb ca       	rjmp	.-2698   	; 0xfffff710 <__eeprom_end+0xff7ef710>

0000019a <__bad_interrupt>:
     19a:	32 cf       	rjmp	.-412    	; 0x0 <__vectors>

0000019c <USARTInit>:


void USARTInit(uint16_t ubrrvalue)
{
	//Setup q
	UQFront=UQEnd=-1;
     19c:	2f ef       	ldi	r18, 0xFF	; 255
     19e:	20 93 91 00 	sts	0x0091, r18
     1a2:	20 91 91 00 	lds	r18, 0x0091
     1a6:	20 93 90 00 	sts	0x0090, r18

	//Set Baud rate
	UBRRH=(unsigned char)(ubrrvalue>>8);
     1aa:	90 bd       	out	0x20, r25	; 32
	UBRRL=(unsigned char)ubrrvalue;
     1ac:	89 b9       	out	0x09, r24	; 9
	1 StopBit
	char size 8

	*/

	UCSRC=(1<<URSEL)|(3<<UCSZ0);
     1ae:	86 e8       	ldi	r24, 0x86	; 134
     1b0:	80 bd       	out	0x20, r24	; 32

	Enable The recevier and transmitter

	*/

	UCSRB=(1<<RXCIE)|(1<<TXEN);
     1b2:	88 e8       	ldi	r24, 0x88	; 136
     1b4:	8a b9       	out	0x0a, r24	; 10
	sei();
     1b6:	78 94       	sei

}
     1b8:	08 95       	ret

000001ba <__vector_11>:

//The USART ISR
ISR(USART_RXC_VECT)
{
     1ba:	1f 92       	push	r1
     1bc:	0f 92       	push	r0
     1be:	0f b6       	in	r0, 0x3f	; 63
     1c0:	0f 92       	push	r0
     1c2:	11 24       	eor	r1, r1
     1c4:	2f 93       	push	r18
     1c6:	3f 93       	push	r19
     1c8:	4f 93       	push	r20
     1ca:	8f 93       	push	r24
     1cc:	9f 93       	push	r25
     1ce:	ef 93       	push	r30
     1d0:	ff 93       	push	r31
	//Read the data
	uint8_t data=UDR;
     1d2:	4c b1       	in	r20, 0x0c	; 12

	//Now add it to q

	if(((UQEnd==RECEIVE_BUFF_SIZE-1) && UQFront==0) || ((UQEnd+1)==UQFront))
     1d4:	80 91 91 00 	lds	r24, 0x0091
     1d8:	8f 33       	cpi	r24, 0x3F	; 63
     1da:	21 f4       	brne	.+8      	; 0x1e4 <__vector_11+0x2a>
     1dc:	80 91 90 00 	lds	r24, 0x0090
     1e0:	88 23       	and	r24, r24
     1e2:	79 f0       	breq	.+30     	; 0x202 <__vector_11+0x48>
     1e4:	20 91 91 00 	lds	r18, 0x0091
     1e8:	80 91 90 00 	lds	r24, 0x0090
     1ec:	33 27       	eor	r19, r19
     1ee:	27 fd       	sbrc	r18, 7
     1f0:	30 95       	com	r19
     1f2:	2f 5f       	subi	r18, 0xFF	; 255
     1f4:	3f 4f       	sbci	r19, 0xFF	; 255
     1f6:	99 27       	eor	r25, r25
     1f8:	87 fd       	sbrc	r24, 7
     1fa:	90 95       	com	r25
     1fc:	28 17       	cp	r18, r24
     1fe:	39 07       	cpc	r19, r25
     200:	59 f4       	brne	.+22     	; 0x218 <__vector_11+0x5e>
	{
		//Q Full
		UQFront++;
     202:	80 91 90 00 	lds	r24, 0x0090
     206:	8f 5f       	subi	r24, 0xFF	; 255
     208:	80 93 90 00 	sts	0x0090, r24
		if(UQFront==RECEIVE_BUFF_SIZE) UQFront=0;
     20c:	80 91 90 00 	lds	r24, 0x0090
     210:	80 34       	cpi	r24, 0x40	; 64
     212:	11 f4       	brne	.+4      	; 0x218 <__vector_11+0x5e>
     214:	10 92 90 00 	sts	0x0090, r1
	}
	

	if(UQEnd==RECEIVE_BUFF_SIZE-1)
     218:	80 91 91 00 	lds	r24, 0x0091
     21c:	8f 33       	cpi	r24, 0x3F	; 63
     21e:	19 f4       	brne	.+6      	; 0x226 <__vector_11+0x6c>
		UQEnd=0;
     220:	10 92 91 00 	sts	0x0091, r1
     224:	05 c0       	rjmp	.+10     	; 0x230 <__vector_11+0x76>
	else
		UQEnd++;
     226:	80 91 91 00 	lds	r24, 0x0091
     22a:	8f 5f       	subi	r24, 0xFF	; 255
     22c:	80 93 91 00 	sts	0x0091, r24


	URBuff[UQEnd]=data;
     230:	e0 91 91 00 	lds	r30, 0x0091
     234:	ff 27       	eor	r31, r31
     236:	e7 fd       	sbrc	r30, 7
     238:	f0 95       	com	r31
     23a:	ee 56       	subi	r30, 0x6E	; 110
     23c:	ff 4f       	sbci	r31, 0xFF	; 255
     23e:	40 83       	st	Z, r20

	if(UQFront==-1) UQFront=0;
     240:	80 91 90 00 	lds	r24, 0x0090
     244:	8f 3f       	cpi	r24, 0xFF	; 255
     246:	11 f4       	brne	.+4      	; 0x24c <__vector_11+0x92>
     248:	10 92 90 00 	sts	0x0090, r1

}
     24c:	ff 91       	pop	r31
     24e:	ef 91       	pop	r30
     250:	9f 91       	pop	r25
     252:	8f 91       	pop	r24
     254:	4f 91       	pop	r20
     256:	3f 91       	pop	r19
     258:	2f 91       	pop	r18
     25a:	0f 90       	pop	r0
     25c:	0f be       	out	0x3f, r0	; 63
     25e:	0f 90       	pop	r0
     260:	1f 90       	pop	r1
     262:	18 95       	reti

00000264 <UReadData>:
uint8_t UReadData()
{
	uint8_t data;
	
	//Check if q is empty
	if(UQFront==-1)
     264:	80 91 90 00 	lds	r24, 0x0090
     268:	8f 3f       	cpi	r24, 0xFF	; 255
     26a:	11 f1       	breq	.+68     	; 0x2b0 <UReadData+0x4c>
		return 0;
	
	data=URBuff[UQFront];
     26c:	e0 91 90 00 	lds	r30, 0x0090
     270:	ff 27       	eor	r31, r31
     272:	e7 fd       	sbrc	r30, 7
     274:	f0 95       	com	r31
     276:	ee 56       	subi	r30, 0x6E	; 110
     278:	ff 4f       	sbci	r31, 0xFF	; 255
     27a:	80 81       	ld	r24, Z
	
	if(UQFront==UQEnd)
     27c:	20 91 90 00 	lds	r18, 0x0090
     280:	90 91 91 00 	lds	r25, 0x0091
     284:	29 17       	cp	r18, r25
     286:	41 f4       	brne	.+16     	; 0x298 <UReadData+0x34>
	{
	//If single data is left
	//So empty q
	UQFront=UQEnd=-1;
     288:	9f ef       	ldi	r25, 0xFF	; 255
     28a:	90 93 91 00 	sts	0x0091, r25
     28e:	90 91 91 00 	lds	r25, 0x0091
     292:	90 93 90 00 	sts	0x0090, r25
     296:	08 95       	ret
	}
	else
	{
		UQFront++;
     298:	90 91 90 00 	lds	r25, 0x0090
     29c:	9f 5f       	subi	r25, 0xFF	; 255
     29e:	90 93 90 00 	sts	0x0090, r25

		if(UQFront==RECEIVE_BUFF_SIZE)
     2a2:	90 91 90 00 	lds	r25, 0x0090
     2a6:	90 34       	cpi	r25, 0x40	; 64
     2a8:	21 f4       	brne	.+8      	; 0x2b2 <UReadData+0x4e>
		UQFront=0;
     2aa:	10 92 90 00 	sts	0x0090, r1
     2ae:	08 95       	ret
{
	uint8_t data;
	
	//Check if q is empty
	if(UQFront==-1)
		return 0;
     2b0:	80 e0       	ldi	r24, 0x00	; 0
		if(UQFront==RECEIVE_BUFF_SIZE)
		UQFront=0;
	}

	return data;
}
     2b2:	08 95       	ret

000002b4 <UWriteData>:

void UWriteData(uint8_t data)
{
	//Wait For Transmitter to become ready
	while(!(UCSRA & (1<<UDRE)));
     2b4:	5d 9b       	sbis	0x0b, 5	; 11
     2b6:	fe cf       	rjmp	.-4      	; 0x2b4 <UWriteData>

	//Now write
	UDR=data;
     2b8:	8c b9       	out	0x0c, r24	; 12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2ba:	89 ef       	ldi	r24, 0xF9	; 249
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	01 97       	sbiw	r24, 0x01	; 1
     2c0:	f1 f7       	brne	.-4      	; 0x2be <UWriteData+0xa>
     2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <UWriteData+0x10>
     2c4:	00 00       	nop
	_delay_ms(1);
}
     2c6:	08 95       	ret

000002c8 <UDataAvailable>:

uint8_t UDataAvailable()
{
	if(UQFront==-1) return 0;
     2c8:	80 91 90 00 	lds	r24, 0x0090
     2cc:	8f 3f       	cpi	r24, 0xFF	; 255
     2ce:	d1 f0       	breq	.+52     	; 0x304 <UDataAvailable+0x3c>
	if(UQFront<UQEnd)
     2d0:	90 91 90 00 	lds	r25, 0x0090
     2d4:	80 91 91 00 	lds	r24, 0x0091
     2d8:	98 17       	cp	r25, r24
     2da:	3c f4       	brge	.+14     	; 0x2ea <UDataAvailable+0x22>
		return(UQEnd-UQFront+1);
     2dc:	80 91 91 00 	lds	r24, 0x0091
     2e0:	90 91 90 00 	lds	r25, 0x0090
     2e4:	8f 5f       	subi	r24, 0xFF	; 255
     2e6:	89 1b       	sub	r24, r25
     2e8:	08 95       	ret
	else if(UQFront>UQEnd)
     2ea:	90 91 90 00 	lds	r25, 0x0090
     2ee:	80 91 91 00 	lds	r24, 0x0091
     2f2:	89 17       	cp	r24, r25
     2f4:	4c f4       	brge	.+18     	; 0x308 <UDataAvailable+0x40>
		return (RECEIVE_BUFF_SIZE-UQFront+UQEnd+1);
     2f6:	80 91 91 00 	lds	r24, 0x0091
     2fa:	90 91 90 00 	lds	r25, 0x0090
     2fe:	8f 5b       	subi	r24, 0xBF	; 191
     300:	89 1b       	sub	r24, r25
     302:	08 95       	ret
	_delay_ms(1);
}

uint8_t UDataAvailable()
{
	if(UQFront==-1) return 0;
     304:	80 e0       	ldi	r24, 0x00	; 0
     306:	08 95       	ret
	if(UQFront<UQEnd)
		return(UQEnd-UQFront+1);
	else if(UQFront>UQEnd)
		return (RECEIVE_BUFF_SIZE-UQFront+UQEnd+1);
	else
		return 1;
     308:	81 e0       	ldi	r24, 0x01	; 1
}
     30a:	08 95       	ret

0000030c <UWriteString>:

void UWriteString(uint8_t *str)
{
     30c:	cf 93       	push	r28
     30e:	df 93       	push	r29
     310:	ec 01       	movw	r28, r24
	while((*str)!='\0')
     312:	88 81       	ld	r24, Y
     314:	88 23       	and	r24, r24
     316:	29 f0       	breq	.+10     	; 0x322 <UWriteString+0x16>
		return (RECEIVE_BUFF_SIZE-UQFront+UQEnd+1);
	else
		return 1;
}

void UWriteString(uint8_t *str)
     318:	21 96       	adiw	r28, 0x01	; 1
{
	while((*str)!='\0')
	{
		UWriteData(*str);
     31a:	cc df       	rcall	.-104    	; 0x2b4 <UWriteData>
		return 1;
}

void UWriteString(uint8_t *str)
{
	while((*str)!='\0')
     31c:	89 91       	ld	r24, Y+
     31e:	88 23       	and	r24, r24
     320:	e1 f7       	brne	.-8      	; 0x31a <UWriteString+0xe>
		UWriteData(*str);
		str++;
	}

	//UWriteData('\0');
}
     322:	df 91       	pop	r29
     324:	cf 91       	pop	r28
     326:	08 95       	ret

00000328 <usart_putchar_printf>:

// this function is called by printf as a stream handler
int usart_putchar_printf(char var, FILE *stream) {
     328:	1f 93       	push	r17
     32a:	18 2f       	mov	r17, r24
	// translate \n to \r for br@y++ terminal
	if (var == '\n') UWriteData('\r');
     32c:	8a 30       	cpi	r24, 0x0A	; 10
     32e:	11 f4       	brne	.+4      	; 0x334 <usart_putchar_printf+0xc>
     330:	8d e0       	ldi	r24, 0x0D	; 13
     332:	c0 df       	rcall	.-128    	; 0x2b4 <UWriteData>
	UWriteData(var);
     334:	81 2f       	mov	r24, r17
     336:	be df       	rcall	.-132    	; 0x2b4 <UWriteData>
	return 0;
}
     338:	80 e0       	ldi	r24, 0x00	; 0
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	1f 91       	pop	r17
     33e:	08 95       	ret

00000340 <Set_Cursor_Position>:
	UWriteData(Bauderate);
	UWriteData(speed);
}

void Set_Cursor_Position(uint8_t column, uint8_t row)
{	
     340:	0f 93       	push	r16
     342:	1f 93       	push	r17
     344:	08 2f       	mov	r16, r24
     346:	16 2f       	mov	r17, r22
	UWriteData(CMD);
     348:	8e ef       	ldi	r24, 0xFE	; 254
     34a:	b4 df       	rcall	.-152    	; 0x2b4 <UWriteData>
	UWriteData(71);
     34c:	87 e4       	ldi	r24, 0x47	; 71
     34e:	b2 df       	rcall	.-156    	; 0x2b4 <UWriteData>
	UWriteData(column);
     350:	80 2f       	mov	r24, r16
     352:	b0 df       	rcall	.-160    	; 0x2b4 <UWriteData>
	UWriteData(row);
     354:	81 2f       	mov	r24, r17
     356:	ae df       	rcall	.-164    	; 0x2b4 <UWriteData>
     358:	1f 91       	pop	r17
     35a:	0f 91       	pop	r16
     35c:	08 95       	ret

0000035e <Change_Baudrate>:
	UWriteData(CMD);
	UWriteData(command);
}

void Change_Baudrate(uint8_t speed)
{	
     35e:	1f 93       	push	r17
     360:	18 2f       	mov	r17, r24
	UWriteData(CMD);
     362:	8e ef       	ldi	r24, 0xFE	; 254
     364:	a7 df       	rcall	.-178    	; 0x2b4 <UWriteData>
	UWriteData(Bauderate);
     366:	89 e3       	ldi	r24, 0x39	; 57
     368:	a5 df       	rcall	.-182    	; 0x2b4 <UWriteData>
	UWriteData(speed);
     36a:	81 2f       	mov	r24, r17
     36c:	a3 df       	rcall	.-186    	; 0x2b4 <UWriteData>
}
     36e:	1f 91       	pop	r17
     370:	08 95       	ret

00000372 <Command_Display>:
    }
  }
}

void Command_Display(uint8_t command)
{
     372:	1f 93       	push	r17
     374:	18 2f       	mov	r17, r24
	UWriteData(CMD);
     376:	8e ef       	ldi	r24, 0xFE	; 254
     378:	9d df       	rcall	.-198    	; 0x2b4 <UWriteData>
	UWriteData(command);
     37a:	81 2f       	mov	r24, r17
     37c:	9b df       	rcall	.-202    	; 0x2b4 <UWriteData>
}
     37e:	1f 91       	pop	r17
     380:	08 95       	ret

00000382 <SystemInit>:
	}		
		
}

void SystemInit(void) // Power on variable initialization 
{
     382:	cf 93       	push	r28
     384:	df 93       	push	r29
	USARTInit(UBRRVAL);
     386:	89 e1       	ldi	r24, 0x19	; 25
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	08 df       	rcall	.-496    	; 0x19c <USARTInit>
	Change_Baudrate(51); // 19200
     38c:	83 e3       	ldi	r24, 0x33	; 51
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	e6 df       	rcall	.-52     	; 0x35e <Change_Baudrate>
	Command_Display(Clear_Screen);
     392:	c9 eb       	ldi	r28, 0xB9	; 185
     394:	d1 e0       	ldi	r29, 0x01	; 1
     396:	88 e5       	ldi	r24, 0x58	; 88
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	fe 01       	movw	r30, r28
     39c:	09 95       	icall
	Command_Display(Go_Home);
     39e:	88 e4       	ldi	r24, 0x48	; 72
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	fe 01       	movw	r30, r28
     3a4:	09 95       	icall
	//Change_Baudrate(83); // 1200
	
}
     3a6:	df 91       	pop	r29
     3a8:	cf 91       	pop	r28
     3aa:	08 95       	ret

000003ac <i2cSetBitrate>:
	// enable TWI (two-wire interface)
	sbi(TWCR, TWEN);	// Enable TWI
}

void i2cSetBitrate(unsigned short bitrateKHz)
{
     3ac:	bc 01       	movw	r22, r24
	unsigned char bitrate_div;
	// set i2c bitrate
	// SCL freq = F_CPU/(16+2*TWBR))
	cbi(TWSR, TWPS0);
     3ae:	08 98       	cbi	0x01, 0	; 1
	cbi(TWSR, TWPS1);
     3b0:	09 98       	cbi	0x01, 1	; 1
	
	//calculate bitrate division	
	bitrate_div = ((F_CPU/4000l)/bitrateKHz);
     3b2:	80 ed       	ldi	r24, 0xD0	; 208
     3b4:	97 e0       	ldi	r25, 0x07	; 7
     3b6:	d7 d7       	rcall	.+4014   	; 0x1366 <__udivmodhi4>
	if(bitrate_div >= 16)
     3b8:	60 31       	cpi	r22, 0x10	; 16
     3ba:	40 f0       	brcs	.+16     	; 0x3cc <i2cSetBitrate+0x20>
		bitrate_div = (bitrate_div-16)/2;
     3bc:	70 e0       	ldi	r23, 0x00	; 0
     3be:	60 51       	subi	r22, 0x10	; 16
     3c0:	70 40       	sbci	r23, 0x00	; 0
     3c2:	12 f4       	brpl	.+4      	; 0x3c8 <i2cSetBitrate+0x1c>
     3c4:	6f 5f       	subi	r22, 0xFF	; 255
     3c6:	7f 4f       	sbci	r23, 0xFF	; 255
     3c8:	75 95       	asr	r23
     3ca:	67 95       	ror	r22
	outb(TWBR, bitrate_div);
     3cc:	60 b9       	out	0x00, r22	; 0
}
     3ce:	08 95       	ret

000003d0 <i2cInit>:
 *********************/

void i2cInit(void)
{
	// set i2c bit rate to 40KHz
	i2cSetBitrate(100);
     3d0:	84 e6       	ldi	r24, 0x64	; 100
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	eb df       	rcall	.-42     	; 0x3ac <i2cSetBitrate>
	// enable TWI (two-wire interface)
	sbi(TWCR, TWEN);	// Enable TWI
     3d6:	86 b7       	in	r24, 0x36	; 54
     3d8:	84 60       	ori	r24, 0x04	; 4
     3da:	86 bf       	out	0x36, r24	; 54
}
     3dc:	08 95       	ret

000003de <i2cSendStart>:
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     3de:	a4 9a       	sbi	0x14, 4	; 20
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     3e0:	84 ea       	ldi	r24, 0xA4	; 164
     3e2:	86 bf       	out	0x36, r24	; 54
}
     3e4:	08 95       	ret

000003e6 <i2cSendStop>:

void i2cSendStop(void)
{
	// transmit stop condition
        TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     3e6:	84 e9       	ldi	r24, 0x94	; 148
     3e8:	86 bf       	out	0x36, r24	; 54
}
     3ea:	08 95       	ret

000003ec <i2cWaitForComplete>:
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     3ec:	06 b6       	in	r0, 0x36	; 54
     3ee:	07 fc       	sbrc	r0, 7
     3f0:	07 c0       	rjmp	.+14     	; 0x400 <i2cWaitForComplete+0x14>
     3f2:	8a e5       	ldi	r24, 0x5A	; 90
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	06 b6       	in	r0, 0x36	; 54
     3f8:	07 fc       	sbrc	r0, 7
     3fa:	02 c0       	rjmp	.+4      	; 0x400 <i2cWaitForComplete+0x14>
     3fc:	01 97       	sbiw	r24, 0x01	; 1
     3fe:	d9 f7       	brne	.-10     	; 0x3f6 <i2cWaitForComplete+0xa>
     400:	08 95       	ret

00000402 <i2cReceiveByte>:
}

void i2cReceiveByte(unsigned char ackFlag)
{
	// begin receive over i2c
	if( ackFlag )
     402:	88 23       	and	r24, r24
     404:	29 f0       	breq	.+10     	; 0x410 <i2cReceiveByte+0xe>
	{
		// ackFlag = TRUE: ACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
     406:	86 b7       	in	r24, 0x36	; 54
     408:	8f 70       	andi	r24, 0x0F	; 15
     40a:	80 6c       	ori	r24, 0xC0	; 192
     40c:	86 bf       	out	0x36, r24	; 54
     40e:	08 95       	ret
	}
	else
	{
		// ackFlag = FALSE: NACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
     410:	86 b7       	in	r24, 0x36	; 54
     412:	8f 70       	andi	r24, 0x0F	; 15
     414:	80 68       	ori	r24, 0x80	; 128
     416:	86 bf       	out	0x36, r24	; 54
     418:	08 95       	ret

0000041a <i2cGetReceivedByte>:
}

unsigned char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     41a:	83 b1       	in	r24, 0x03	; 3
}
     41c:	08 95       	ret

0000041e <i2cGetStatus>:

unsigned char i2cGetStatus(void)
{
	// retieve current i2c status from i2c TWSR
	return( inb(TWSR) );
     41e:	81 b1       	in	r24, 0x01	; 1
}
     420:	08 95       	ret

00000422 <delay_ms>:

void delay_ms(uint16_t x)
{
  uint8_t y, z;
  for ( ; x > 0 ; x--){
     422:	00 97       	sbiw	r24, 0x00	; 0
     424:	59 f4       	brne	.+22     	; 0x43c <delay_ms+0x1a>
     426:	08 95       	ret
	...
    for ( y = 0 ; y < 90 ; y++){
      for ( z = 0 ; z < 6 ; z++){
        asm volatile ("nop");
     434:	21 50       	subi	r18, 0x01	; 1

void delay_ms(uint16_t x)
{
  uint8_t y, z;
  for ( ; x > 0 ; x--){
    for ( y = 0 ; y < 90 ; y++){
     436:	c1 f7       	brne	.-16     	; 0x428 <delay_ms+0x6>
}

void delay_ms(uint16_t x)
{
  uint8_t y, z;
  for ( ; x > 0 ; x--){
     438:	01 97       	sbiw	r24, 0x01	; 1
     43a:	11 f0       	breq	.+4      	; 0x440 <delay_ms+0x1e>
	// retieve current i2c status from i2c TWSR
	return( inb(TWSR) );
}

void delay_ms(uint16_t x)
{
     43c:	2a e5       	ldi	r18, 0x5A	; 90
     43e:	f4 cf       	rjmp	.-24     	; 0x428 <delay_ms+0x6>
     440:	08 95       	ret

00000442 <i2cSendByte>:
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
}

void i2cSendByte(unsigned char data)
{
     442:	1f 93       	push	r17
     444:	18 2f       	mov	r17, r24
	delay_ms(1);
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	eb df       	rcall	.-42     	; 0x422 <delay_ms>
	//printf("sending 0x%x\n", data);
	WRITE_sda();
     44c:	a4 9a       	sbi	0x14, 4	; 20
	// save data to the TWDR
	TWDR = data;
     44e:	13 b9       	out	0x03, r17	; 3
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
     450:	84 e8       	ldi	r24, 0x84	; 132
     452:	86 bf       	out	0x36, r24	; 54
}
     454:	1f 91       	pop	r17
     456:	08 95       	ret

00000458 <main>:
Main
********************************************************************************/


int main(void)
{
     458:	2f 92       	push	r2
     45a:	3f 92       	push	r3
     45c:	4f 92       	push	r4
     45e:	5f 92       	push	r5
     460:	6f 92       	push	r6
     462:	7f 92       	push	r7
     464:	8f 92       	push	r8
     466:	9f 92       	push	r9
     468:	af 92       	push	r10
     46a:	bf 92       	push	r11
     46c:	cf 92       	push	r12
     46e:	df 92       	push	r13
     470:	ef 92       	push	r14
     472:	ff 92       	push	r15
     474:	0f 93       	push	r16
     476:	1f 93       	push	r17
     478:	cf 93       	push	r28
     47a:	df 93       	push	r29
	stdout = &mystdout;
     47c:	81 e8       	ldi	r24, 0x81	; 129
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	90 93 f3 00 	sts	0x00F3, r25
     484:	80 93 f2 00 	sts	0x00F2, r24
	SystemInit();
     488:	7c df       	rcall	.-264    	; 0x382 <SystemInit>
	Command_Display(Clear_Screen);
     48a:	0f 2e       	mov	r0, r31
     48c:	f9 eb       	ldi	r31, 0xB9	; 185
     48e:	6f 2e       	mov	r6, r31
     490:	f1 e0       	ldi	r31, 0x01	; 1
     492:	7f 2e       	mov	r7, r31
     494:	f0 2d       	mov	r31, r0
     496:	88 e5       	ldi	r24, 0x58	; 88
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	f3 01       	movw	r30, r6
     49c:	09 95       	icall
	Command_Display(Go_Home);
     49e:	88 e4       	ldi	r24, 0x48	; 72
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	f3 01       	movw	r30, r6
     4a4:	09 95       	icall
	//UWriteString(start_Screen1);
	printf("I2C");
     4a6:	00 d0       	rcall	.+0      	; 0x4a8 <__stack+0x49>
     4a8:	80 e6       	ldi	r24, 0x60	; 96
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	ad b7       	in	r26, 0x3d	; 61
     4ae:	be b7       	in	r27, 0x3e	; 62
     4b0:	12 96       	adiw	r26, 0x02	; 2
     4b2:	9c 93       	st	X, r25
     4b4:	8e 93       	st	-X, r24
     4b6:	11 97       	sbiw	r26, 0x01	; 1
     4b8:	bb d8       	rcall	.-3722   	; 0xfffff630 <__eeprom_end+0xff7ef630>
	Set_Cursor_Position(1,2);
     4ba:	0f 90       	pop	r0
     4bc:	0f 90       	pop	r0
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	62 e0       	ldi	r22, 0x02	; 2
     4c4:	70 e0       	ldi	r23, 0x00	; 0
     4c6:	3c df       	rcall	.-392    	; 0x340 <Set_Cursor_Position>
	//UWriteString(start_Screen2);
	printf("MMA8452");
     4c8:	00 d0       	rcall	.+0      	; 0x4ca <__stack+0x6b>
     4ca:	84 e6       	ldi	r24, 0x64	; 100
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	ed b7       	in	r30, 0x3d	; 61
     4d0:	fe b7       	in	r31, 0x3e	; 62
     4d2:	92 83       	std	Z+2, r25	; 0x02
     4d4:	81 83       	std	Z+1, r24	; 0x01
     4d6:	ac d8       	rcall	.-3752   	; 0xfffff630 <__eeprom_end+0xff7ef630>
     4d8:	8f ef       	ldi	r24, 0xFF	; 255
     4da:	93 ed       	ldi	r25, 0xD3	; 211
     4dc:	a0 e3       	ldi	r26, 0x30	; 48
     4de:	81 50       	subi	r24, 0x01	; 1
     4e0:	90 40       	sbci	r25, 0x00	; 0
     4e2:	a0 40       	sbci	r26, 0x00	; 0
     4e4:	e1 f7       	brne	.-8      	; 0x4de <__stack+0x7f>
     4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <__stack+0x89>
     4e8:	00 00       	nop
	_delay_ms(2000);
	set_output(DDRB, LED);
     4ea:	b9 9a       	sbi	0x17, 1	; 23
	void setup();
	MMA8452Active();
     4ec:	0f 90       	pop	r0
     4ee:	0f 90       	pop	r0
     4f0:	3e d1       	rcall	.+636    	; 0x76e <MMA8452Active>
		//static uint8_t source;

  // If int1 goes high, all data registers have new data
  //if (digitalRead(int1Pin)==1)  // Interrupt pin, should probably attach to interrupt function
 // {
		readAccelData(accelCount);  // Read the x/y/z adc values
     4f2:	0f 2e       	mov	r0, r31
     4f4:	f2 ed       	ldi	r31, 0xD2	; 210
     4f6:	af 2e       	mov	r10, r31
     4f8:	f0 e0       	ldi	r31, 0x00	; 0
     4fa:	bf 2e       	mov	r11, r31
     4fc:	f0 2d       	mov	r31, r0

		// Now we'll calculate the accleration value into actual g's
		Command_Display(Clear_Screen);
		Command_Display(Go_Home);
     4fe:	0f 2e       	mov	r0, r31
     500:	f8 ed       	ldi	r31, 0xD8	; 216
     502:	4f 2e       	mov	r4, r31
     504:	f0 e0       	ldi	r31, 0x00	; 0
     506:	5f 2e       	mov	r5, r31
     508:	f0 2d       	mov	r31, r0
     50a:	0f 2e       	mov	r0, r31
     50c:	f4 ee       	ldi	r31, 0xE4	; 228
     50e:	8f 2e       	mov	r8, r31
     510:	f0 e0       	ldi	r31, 0x00	; 0
     512:	9f 2e       	mov	r9, r31
     514:	f0 2d       	mov	r31, r0
/********************************************************************************
Main
********************************************************************************/


int main(void)
     516:	0f 2e       	mov	r0, r31
     518:	f6 e0       	ldi	r31, 0x06	; 6
     51a:	cf 2e       	mov	r12, r31
     51c:	dd 24       	eor	r13, r13
     51e:	f0 2d       	mov	r31, r0
     520:	ca 0c       	add	r12, r10
     522:	db 1c       	adc	r13, r11
		}			
			//switch (i)
			//{
			//case 0 : 
				//printf("X:%.2f ", accelG[0]);
				printf("X:%.2f\n", accelD[0]);
     524:	0f 2e       	mov	r0, r31
     526:	fc e6       	ldi	r31, 0x6C	; 108
     528:	2f 2e       	mov	r2, r31
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	3f 2e       	mov	r3, r31
     52e:	f0 2d       	mov	r31, r0
		//static uint8_t source;

  // If int1 goes high, all data registers have new data
  //if (digitalRead(int1Pin)==1)  // Interrupt pin, should probably attach to interrupt function
 // {
		readAccelData(accelCount);  // Read the x/y/z adc values
     530:	c5 01       	movw	r24, r10
     532:	b8 d0       	rcall	.+368    	; 0x6a4 <readAccelData>

		// Now we'll calculate the accleration value into actual g's
		Command_Display(Clear_Screen);
     534:	88 e5       	ldi	r24, 0x58	; 88
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	f3 01       	movw	r30, r6
     53a:	09 95       	icall
		Command_Display(Go_Home);
     53c:	88 e4       	ldi	r24, 0x48	; 72
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	f3 01       	movw	r30, r6
     542:	09 95       	icall
     544:	e5 01       	movw	r28, r10
     546:	82 01       	movw	r16, r4
     548:	74 01       	movw	r14, r8
		//printf("Buns = %.2f", buns);
		//_delay_ms(2000);
		for (int i=0; i<3; i++)
		{
			accelG[i] = (float)accelCount[i]/((1<<12)/(2*SCALE));  // get actual g value, this depends on scale being set
     54a:	69 91       	ld	r22, Y+
     54c:	79 91       	ld	r23, Y+
     54e:	88 27       	eor	r24, r24
     550:	77 fd       	sbrc	r23, 7
     552:	80 95       	com	r24
     554:	98 2f       	mov	r25, r24
     556:	0b d5       	rcall	.+2582   	; 0xf6e <__floatsisf>
     558:	20 e0       	ldi	r18, 0x00	; 0
     55a:	30 e0       	ldi	r19, 0x00	; 0
     55c:	40 e8       	ldi	r20, 0x80	; 128
     55e:	5a e3       	ldi	r21, 0x3A	; 58
     560:	a3 d5       	rcall	.+2886   	; 0x10a8 <__mulsf3>
     562:	26 2f       	mov	r18, r22
     564:	37 2f       	mov	r19, r23
     566:	48 2f       	mov	r20, r24
     568:	59 2f       	mov	r21, r25
     56a:	d8 01       	movw	r26, r16
     56c:	2d 93       	st	X+, r18
     56e:	3d 93       	st	X+, r19
     570:	4d 93       	st	X+, r20
     572:	5d 93       	st	X+, r21
     574:	8d 01       	movw	r16, r26
			accelD[i] = asin(accelG[i])*57.2957795;
     576:	e2 d4       	rcall	.+2500   	; 0xf3c <asin>
     578:	21 ee       	ldi	r18, 0xE1	; 225
     57a:	3e e2       	ldi	r19, 0x2E	; 46
     57c:	45 e6       	ldi	r20, 0x65	; 101
     57e:	52 e4       	ldi	r21, 0x42	; 66
     580:	93 d5       	rcall	.+2854   	; 0x10a8 <__mulsf3>
     582:	f7 01       	movw	r30, r14
     584:	61 93       	st	Z+, r22
     586:	71 93       	st	Z+, r23
     588:	81 93       	st	Z+, r24
     58a:	91 93       	st	Z+, r25
     58c:	7f 01       	movw	r14, r30
		// Now we'll calculate the accleration value into actual g's
		Command_Display(Clear_Screen);
		Command_Display(Go_Home);
		//printf("Buns = %.2f", buns);
		//_delay_ms(2000);
		for (int i=0; i<3; i++)
     58e:	cc 15       	cp	r28, r12
     590:	dd 05       	cpc	r29, r13
     592:	d9 f6       	brne	.-74     	; 0x54a <__stack+0xeb>
		}			
			//switch (i)
			//{
			//case 0 : 
				//printf("X:%.2f ", accelG[0]);
				printf("X:%.2f\n", accelD[0]);
     594:	00 d0       	rcall	.+0      	; 0x596 <__stack+0x137>
     596:	00 d0       	rcall	.+0      	; 0x598 <__stack+0x139>
     598:	00 d0       	rcall	.+0      	; 0x59a <__stack+0x13b>
     59a:	ad b7       	in	r26, 0x3d	; 61
     59c:	be b7       	in	r27, 0x3e	; 62
     59e:	12 96       	adiw	r26, 0x02	; 2
     5a0:	3c 92       	st	X, r3
     5a2:	2e 92       	st	-X, r2
     5a4:	11 97       	sbiw	r26, 0x01	; 1
     5a6:	f4 01       	movw	r30, r8
     5a8:	80 81       	ld	r24, Z
     5aa:	91 81       	ldd	r25, Z+1	; 0x01
     5ac:	a2 81       	ldd	r26, Z+2	; 0x02
     5ae:	b3 81       	ldd	r27, Z+3	; 0x03
     5b0:	ed b7       	in	r30, 0x3d	; 61
     5b2:	fe b7       	in	r31, 0x3e	; 62
     5b4:	83 83       	std	Z+3, r24	; 0x03
     5b6:	94 83       	std	Z+4, r25	; 0x04
     5b8:	a5 83       	std	Z+5, r26	; 0x05
     5ba:	b6 83       	std	Z+6, r27	; 0x06
     5bc:	39 d8       	rcall	.-3982   	; 0xfffff630 <__eeprom_end+0xff7ef630>
				//break;
			//case 1 : 
				//printf("Y:%.2f\n", accelG[1]);
			//	break;
			//case 2 : 
				printf("Z:%.2f", accelG[2]);
     5be:	e4 e7       	ldi	r30, 0x74	; 116
     5c0:	f0 e0       	ldi	r31, 0x00	; 0
     5c2:	ad b7       	in	r26, 0x3d	; 61
     5c4:	be b7       	in	r27, 0x3e	; 62
     5c6:	12 96       	adiw	r26, 0x02	; 2
     5c8:	fc 93       	st	X, r31
     5ca:	ee 93       	st	-X, r30
     5cc:	11 97       	sbiw	r26, 0x01	; 1
     5ce:	e0 ee       	ldi	r30, 0xE0	; 224
     5d0:	f0 e0       	ldi	r31, 0x00	; 0
     5d2:	80 81       	ld	r24, Z
     5d4:	91 81       	ldd	r25, Z+1	; 0x01
     5d6:	a2 81       	ldd	r26, Z+2	; 0x02
     5d8:	b3 81       	ldd	r27, Z+3	; 0x03
     5da:	ed b7       	in	r30, 0x3d	; 61
     5dc:	fe b7       	in	r31, 0x3e	; 62
     5de:	83 83       	std	Z+3, r24	; 0x03
     5e0:	94 83       	std	Z+4, r25	; 0x04
     5e2:	a5 83       	std	Z+5, r26	; 0x05
     5e4:	b6 83       	std	Z+6, r27	; 0x06
     5e6:	24 d8       	rcall	.-4024   	; 0xfffff630 <__eeprom_end+0xff7ef630>
     5e8:	8f ef       	ldi	r24, 0xFF	; 255
     5ea:	94 e3       	ldi	r25, 0x34	; 52
     5ec:	ac e0       	ldi	r26, 0x0C	; 12
     5ee:	81 50       	subi	r24, 0x01	; 1
     5f0:	90 40       	sbci	r25, 0x00	; 0
     5f2:	a0 40       	sbci	r26, 0x00	; 0
     5f4:	e1 f7       	brne	.-8      	; 0x5ee <__stack+0x18f>
     5f6:	00 c0       	rjmp	.+0      	; 0x5f8 <__stack+0x199>
     5f8:	00 00       	nop
     5fa:	ad b7       	in	r26, 0x3d	; 61
     5fc:	be b7       	in	r27, 0x3e	; 62
     5fe:	16 96       	adiw	r26, 0x06	; 6
     600:	0f b6       	in	r0, 0x3f	; 63
     602:	f8 94       	cli
     604:	be bf       	out	0x3e, r27	; 62
     606:	0f be       	out	0x3f, r0	; 63
     608:	ad bf       	out	0x3d, r26	; 61
     60a:	92 cf       	rjmp	.-220    	; 0x530 <__stack+0xd1>

0000060c <writeRegister>:
	//Change_Baudrate(83); // 1200
	
}

void writeRegister(uint8_t address, uint8_t data)
{
     60c:	0f 93       	push	r16
     60e:	1f 93       	push	r17
     610:	08 2f       	mov	r16, r24
     612:	16 2f       	mov	r17, r22
  i2cSendStart();
     614:	e4 de       	rcall	.-568    	; 0x3de <i2cSendStart>
  i2cWaitForComplete();
     616:	ea de       	rcall	.-556    	; 0x3ec <i2cWaitForComplete>

  i2cSendByte((MMA8452_ADDRESS<<1)); // Write 0xB4
     618:	8a e3       	ldi	r24, 0x3A	; 58
     61a:	13 df       	rcall	.-474    	; 0x442 <i2cSendByte>
  i2cWaitForComplete();
     61c:	e7 de       	rcall	.-562    	; 0x3ec <i2cWaitForComplete>

  i2cSendByte(address);	// Write register address
     61e:	80 2f       	mov	r24, r16
     620:	10 df       	rcall	.-480    	; 0x442 <i2cSendByte>
  i2cWaitForComplete();
     622:	e4 de       	rcall	.-568    	; 0x3ec <i2cWaitForComplete>

  i2cSendByte(data);
     624:	81 2f       	mov	r24, r17
     626:	0d df       	rcall	.-486    	; 0x442 <i2cSendByte>
  i2cWaitForComplete();
     628:	e1 de       	rcall	.-574    	; 0x3ec <i2cWaitForComplete>

  i2cSendStop();
     62a:	dd de       	rcall	.-582    	; 0x3e6 <i2cSendStop>
}
     62c:	1f 91       	pop	r17
     62e:	0f 91       	pop	r16
     630:	08 95       	ret

00000632 <readRegisters>:

void readRegisters(uint8_t address, int i, uint8_t * dest)
{
     632:	df 92       	push	r13
     634:	ef 92       	push	r14
     636:	ff 92       	push	r15
     638:	0f 93       	push	r16
     63a:	1f 93       	push	r17
     63c:	cf 93       	push	r28
     63e:	df 93       	push	r29
     640:	08 2f       	mov	r16, r24
     642:	7b 01       	movw	r14, r22
     644:	14 2f       	mov	r17, r20
     646:	d5 2e       	mov	r13, r21
  i2cSendStart();
     648:	ca de       	rcall	.-620    	; 0x3de <i2cSendStart>
  i2cWaitForComplete();
     64a:	d0 de       	rcall	.-608    	; 0x3ec <i2cWaitForComplete>

  i2cSendByte((MMA8452_ADDRESS<<1)); // write 0xB4
     64c:	8a e3       	ldi	r24, 0x3A	; 58
     64e:	f9 de       	rcall	.-526    	; 0x442 <i2cSendByte>
  i2cWaitForComplete();
     650:	cd de       	rcall	.-614    	; 0x3ec <i2cWaitForComplete>

  i2cSendByte(address);	// write register address
     652:	80 2f       	mov	r24, r16
     654:	f6 de       	rcall	.-532    	; 0x442 <i2cSendByte>
  i2cWaitForComplete();
     656:	ca de       	rcall	.-620    	; 0x3ec <i2cWaitForComplete>

  i2cSendStart();
     658:	c2 de       	rcall	.-636    	; 0x3de <i2cSendStart>
  i2cSendByte((MMA8452_ADDRESS<<1)|0x01); // write 0xB5
     65a:	8b e3       	ldi	r24, 0x3B	; 59
     65c:	f2 de       	rcall	.-540    	; 0x442 <i2cSendByte>
  i2cWaitForComplete();
     65e:	c6 de       	rcall	.-628    	; 0x3ec <i2cWaitForComplete>
  for (int j=0; j<i; j++)
     660:	1e 14       	cp	r1, r14
     662:	1f 04       	cpc	r1, r15
     664:	7c f4       	brge	.+30     	; 0x684 <readRegisters+0x52>
     666:	01 2f       	mov	r16, r17
     668:	1d 2d       	mov	r17, r13
     66a:	c0 e0       	ldi	r28, 0x00	; 0
     66c:	d0 e0       	ldi	r29, 0x00	; 0
  {
    i2cReceiveByte(TRUE);
     66e:	8f ef       	ldi	r24, 0xFF	; 255
     670:	c8 de       	rcall	.-624    	; 0x402 <i2cReceiveByte>
    i2cWaitForComplete();
     672:	bc de       	rcall	.-648    	; 0x3ec <i2cWaitForComplete>
    dest[j] = i2cGetReceivedByte(); // Get MSB result
     674:	d2 de       	rcall	.-604    	; 0x41a <i2cGetReceivedByte>
     676:	f8 01       	movw	r30, r16
     678:	81 93       	st	Z+, r24
     67a:	8f 01       	movw	r16, r30
  i2cWaitForComplete();

  i2cSendStart();
  i2cSendByte((MMA8452_ADDRESS<<1)|0x01); // write 0xB5
  i2cWaitForComplete();
  for (int j=0; j<i; j++)
     67c:	21 96       	adiw	r28, 0x01	; 1
     67e:	ce 15       	cp	r28, r14
     680:	df 05       	cpc	r29, r15
     682:	ac f3       	brlt	.-22     	; 0x66e <readRegisters+0x3c>
  {
    i2cReceiveByte(TRUE);
    i2cWaitForComplete();
    dest[j] = i2cGetReceivedByte(); // Get MSB result
  }
  i2cWaitForComplete();
     684:	b3 de       	rcall	.-666    	; 0x3ec <i2cWaitForComplete>
  i2cSendStop();
     686:	af de       	rcall	.-674    	; 0x3e6 <i2cSendStop>

  cbi(TWCR, TWEN); // Disable TWI
     688:	86 b7       	in	r24, 0x36	; 54
     68a:	8b 7f       	andi	r24, 0xFB	; 251
     68c:	86 bf       	out	0x36, r24	; 54
  sbi(TWCR, TWEN); // Enable TWI
     68e:	86 b7       	in	r24, 0x36	; 54
     690:	84 60       	ori	r24, 0x04	; 4
     692:	86 bf       	out	0x36, r24	; 54
}
     694:	df 91       	pop	r29
     696:	cf 91       	pop	r28
     698:	1f 91       	pop	r17
     69a:	0f 91       	pop	r16
     69c:	ff 90       	pop	r15
     69e:	ef 90       	pop	r14
     6a0:	df 90       	pop	r13
     6a2:	08 95       	ret

000006a4 <readAccelData>:

  MMA8452Active();  // Set to active to start reading
}

void readAccelData(int * destination)
{
     6a4:	cf 92       	push	r12
     6a6:	df 92       	push	r13
     6a8:	ef 92       	push	r14
     6aa:	ff 92       	push	r15
     6ac:	0f 93       	push	r16
     6ae:	1f 93       	push	r17
     6b0:	df 93       	push	r29
     6b2:	cf 93       	push	r28
     6b4:	00 d0       	rcall	.+0      	; 0x6b6 <readAccelData+0x12>
     6b6:	00 d0       	rcall	.+0      	; 0x6b8 <readAccelData+0x14>
     6b8:	00 d0       	rcall	.+0      	; 0x6ba <readAccelData+0x16>
     6ba:	cd b7       	in	r28, 0x3d	; 61
     6bc:	de b7       	in	r29, 0x3e	; 62
     6be:	6c 01       	movw	r12, r24
  uint8_t rawData[6];  // x/y/z accel register data stored here

  readRegisters(0x01, 6, &rawData[0]);  // Read the six raw data registers into data array
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	66 e0       	ldi	r22, 0x06	; 6
     6c4:	70 e0       	ldi	r23, 0x00	; 0
     6c6:	8e 01       	movw	r16, r28
     6c8:	0f 5f       	subi	r16, 0xFF	; 255
     6ca:	1f 4f       	sbci	r17, 0xFF	; 255
     6cc:	a8 01       	movw	r20, r16
     6ce:	b1 df       	rcall	.-158    	; 0x632 <readRegisters>
     6d0:	f8 01       	movw	r30, r16

  // Loop to calculate 12-bit ADC and g value for each axis
  for (int i=0; i<6; i+=2)
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	90 e0       	ldi	r25, 0x00	; 0
  {
    destination[i/2] = ((rawData[i] << 8) | rawData[i+1]) >> 4;  // Turn the MSB and LSB into a 12-bit value
     6d6:	9c 01       	movw	r18, r24
     6d8:	99 23       	and	r25, r25
     6da:	14 f4       	brge	.+4      	; 0x6e0 <readAccelData+0x3c>
     6dc:	2f 5f       	subi	r18, 0xFF	; 255
     6de:	3f 4f       	sbci	r19, 0xFF	; 255
     6e0:	2e 7f       	andi	r18, 0xFE	; 254
     6e2:	d6 01       	movw	r26, r12
     6e4:	a2 0f       	add	r26, r18
     6e6:	b3 1f       	adc	r27, r19
     6e8:	f0 80       	ld	r15, Z
     6ea:	ee 24       	eor	r14, r14
     6ec:	21 81       	ldd	r18, Z+1	; 0x01
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	2e 29       	or	r18, r14
     6f2:	3f 29       	or	r19, r15
     6f4:	35 95       	asr	r19
     6f6:	27 95       	ror	r18
     6f8:	35 95       	asr	r19
     6fa:	27 95       	ror	r18
     6fc:	35 95       	asr	r19
     6fe:	27 95       	ror	r18
     700:	35 95       	asr	r19
     702:	27 95       	ror	r18
     704:	11 96       	adiw	r26, 0x01	; 1
     706:	3c 93       	st	X, r19
     708:	2e 93       	st	-X, r18
  uint8_t rawData[6];  // x/y/z accel register data stored here

  readRegisters(0x01, 6, &rawData[0]);  // Read the six raw data registers into data array

  // Loop to calculate 12-bit ADC and g value for each axis
  for (int i=0; i<6; i+=2)
     70a:	02 96       	adiw	r24, 0x02	; 2
     70c:	32 96       	adiw	r30, 0x02	; 2
     70e:	86 30       	cpi	r24, 0x06	; 6
     710:	91 05       	cpc	r25, r1
     712:	09 f7       	brne	.-62     	; 0x6d6 <readAccelData+0x32>
      // If the number is negative, we have to make it so manually (no 12-bit data type)
      destination[i/2] = ~destination[i/2] + 1;
      destination[i/2] *= -1;  // Transform into negative 2's complement #
    }
  }
}
     714:	26 96       	adiw	r28, 0x06	; 6
     716:	0f b6       	in	r0, 0x3f	; 63
     718:	f8 94       	cli
     71a:	de bf       	out	0x3e, r29	; 62
     71c:	0f be       	out	0x3f, r0	; 63
     71e:	cd bf       	out	0x3d, r28	; 61
     720:	cf 91       	pop	r28
     722:	df 91       	pop	r29
     724:	1f 91       	pop	r17
     726:	0f 91       	pop	r16
     728:	ff 90       	pop	r15
     72a:	ef 90       	pop	r14
     72c:	df 90       	pop	r13
     72e:	cf 90       	pop	r12
     730:	08 95       	ret

00000732 <readRegister>:
  cbi(TWCR, TWEN); // Disable TWI
  sbi(TWCR, TWEN); // Enable TWI
}

unsigned char readRegister(uint8_t address)
{
     732:	1f 93       	push	r17
     734:	18 2f       	mov	r17, r24
  unsigned char data;

  i2cSendStart();
     736:	53 de       	rcall	.-858    	; 0x3de <i2cSendStart>
  i2cWaitForComplete();
     738:	59 de       	rcall	.-846    	; 0x3ec <i2cWaitForComplete>

  i2cSendByte((MMA8452_ADDRESS<<1)); // Write 0xB4
     73a:	8a e3       	ldi	r24, 0x3A	; 58
     73c:	82 de       	rcall	.-764    	; 0x442 <i2cSendByte>
  i2cWaitForComplete();
     73e:	56 de       	rcall	.-852    	; 0x3ec <i2cWaitForComplete>

  i2cSendByte(address);	// Write register address
     740:	81 2f       	mov	r24, r17
     742:	7f de       	rcall	.-770    	; 0x442 <i2cSendByte>
  i2cWaitForComplete();
     744:	53 de       	rcall	.-858    	; 0x3ec <i2cWaitForComplete>

  i2cSendStart();
     746:	4b de       	rcall	.-874    	; 0x3de <i2cSendStart>

  i2cSendByte((MMA8452_ADDRESS<<1)|0x01); // Write 0xB5
     748:	8b e3       	ldi	r24, 0x3B	; 59
     74a:	7b de       	rcall	.-778    	; 0x442 <i2cSendByte>
  i2cWaitForComplete();
     74c:	4f de       	rcall	.-866    	; 0x3ec <i2cWaitForComplete>
  i2cReceiveByte(TRUE);
     74e:	8f ef       	ldi	r24, 0xFF	; 255
     750:	58 de       	rcall	.-848    	; 0x402 <i2cReceiveByte>
  i2cWaitForComplete();
     752:	4c de       	rcall	.-872    	; 0x3ec <i2cWaitForComplete>

  data = i2cGetReceivedByte();	// Get MSB result
     754:	62 de       	rcall	.-828    	; 0x41a <i2cGetReceivedByte>
     756:	18 2f       	mov	r17, r24
  i2cWaitForComplete();
     758:	49 de       	rcall	.-878    	; 0x3ec <i2cWaitForComplete>
  i2cSendStop();
     75a:	45 de       	rcall	.-886    	; 0x3e6 <i2cSendStop>

  cbi(TWCR, TWEN);	// Disable TWI
     75c:	86 b7       	in	r24, 0x36	; 54
     75e:	8b 7f       	andi	r24, 0xFB	; 251
     760:	86 bf       	out	0x36, r24	; 54
  sbi(TWCR, TWEN);	// Enable TWI
     762:	86 b7       	in	r24, 0x36	; 54
     764:	84 60       	ori	r24, 0x04	; 4
     766:	86 bf       	out	0x36, r24	; 54

  return data;
}
     768:	81 2f       	mov	r24, r17
     76a:	1f 91       	pop	r17
     76c:	08 95       	ret

0000076e <MMA8452Active>:

void MMA8452Active()
{
  unsigned char c = readRegister(0x2A);
     76e:	8a e2       	ldi	r24, 0x2A	; 42
     770:	e0 df       	rcall	.-64     	; 0x732 <readRegister>
  writeRegister(0x2A, c | 0x01);
     772:	68 2f       	mov	r22, r24
     774:	61 60       	ori	r22, 0x01	; 1
     776:	8a e2       	ldi	r24, 0x2A	; 42
     778:	49 df       	rcall	.-366    	; 0x60c <writeRegister>
}
     77a:	08 95       	ret

0000077c <MMA8452Standby>:

void MMA8452Standby()
{
  unsigned char c = readRegister(0x2A);
     77c:	8a e2       	ldi	r24, 0x2A	; 42
     77e:	d9 df       	rcall	.-78     	; 0x732 <readRegister>
  writeRegister(0x2A, c & ~(0x01));
     780:	68 2f       	mov	r22, r24
     782:	6e 7f       	andi	r22, 0xFE	; 254
     784:	8a e2       	ldi	r24, 0x2A	; 42
     786:	42 df       	rcall	.-380    	; 0x60c <writeRegister>
}
     788:	08 95       	ret

0000078a <initMMA8452>:
	} // Loop forever if communication doesn't happen
  }
}

void initMMA8452(uint8_t fsr, uint8_t dataRate)
{
     78a:	0f 93       	push	r16
     78c:	1f 93       	push	r17
     78e:	18 2f       	mov	r17, r24
     790:	06 2f       	mov	r16, r22
  MMA8452Standby();  // Must be in standby to change registers
     792:	f4 df       	rcall	.-24     	; 0x77c <MMA8452Standby>

  // Set up the full scale range to 2, 4, or 8g.
  if ((fsr==2)||(fsr==4)||(fsr==8))
     794:	12 30       	cpi	r17, 0x02	; 2
     796:	21 f0       	breq	.+8      	; 0x7a0 <initMMA8452+0x16>
     798:	14 30       	cpi	r17, 0x04	; 4
     79a:	11 f0       	breq	.+4      	; 0x7a0 <initMMA8452+0x16>
     79c:	18 30       	cpi	r17, 0x08	; 8
     79e:	31 f4       	brne	.+12     	; 0x7ac <initMMA8452+0x22>
    writeRegister(0x0E, fsr >> 2);  
     7a0:	61 2f       	mov	r22, r17
     7a2:	66 95       	lsr	r22
     7a4:	66 95       	lsr	r22
     7a6:	8e e0       	ldi	r24, 0x0E	; 14
     7a8:	31 df       	rcall	.-414    	; 0x60c <writeRegister>
     7aa:	03 c0       	rjmp	.+6      	; 0x7b2 <initMMA8452+0x28>
  else
    writeRegister(0x0E, 0);
     7ac:	8e e0       	ldi	r24, 0x0E	; 14
     7ae:	60 e0       	ldi	r22, 0x00	; 0
     7b0:	2d df       	rcall	.-422    	; 0x60c <writeRegister>

  // Setup the 3 data rate bits, from 0 to 7
  writeRegister(0x2A, readRegister(0x2A) & ~(0x38));
     7b2:	8a e2       	ldi	r24, 0x2A	; 42
     7b4:	be df       	rcall	.-132    	; 0x732 <readRegister>
     7b6:	68 2f       	mov	r22, r24
     7b8:	67 7c       	andi	r22, 0xC7	; 199
     7ba:	8a e2       	ldi	r24, 0x2A	; 42
     7bc:	27 df       	rcall	.-434    	; 0x60c <writeRegister>
  if (dataRate <= 7)
     7be:	08 30       	cpi	r16, 0x08	; 8
     7c0:	48 f4       	brcc	.+18     	; 0x7d4 <initMMA8452+0x4a>
    writeRegister(0x2A, readRegister(0x2A) | (dataRate << 3));  
     7c2:	8a e2       	ldi	r24, 0x2A	; 42
     7c4:	b6 df       	rcall	.-148    	; 0x732 <readRegister>
     7c6:	00 0f       	add	r16, r16
     7c8:	00 0f       	add	r16, r16
     7ca:	00 0f       	add	r16, r16
     7cc:	60 2f       	mov	r22, r16
     7ce:	68 2b       	or	r22, r24
     7d0:	8a e2       	ldi	r24, 0x2A	; 42
     7d2:	1c df       	rcall	.-456    	; 0x60c <writeRegister>
  // 1. Enable P/L
  // 2. Set the back/front angle trigger points (z-lock)
  // 3. Set the threshold/hysteresis angle
  // 4. Set the debouce rate
  // For more info check out this app note: http://cache.freescale.com/files/sensors/doc/app_note/AN4068.pdf
  writeRegister(0x11, 0x40);  // 1. Enable P/L
     7d4:	81 e1       	ldi	r24, 0x11	; 17
     7d6:	60 e4       	ldi	r22, 0x40	; 64
     7d8:	19 df       	rcall	.-462    	; 0x60c <writeRegister>
  writeRegister(0x13, 0x44);  // 2. 29deg z-lock (don't think this register is actually writable)
     7da:	83 e1       	ldi	r24, 0x13	; 19
     7dc:	64 e4       	ldi	r22, 0x44	; 68
     7de:	16 df       	rcall	.-468    	; 0x60c <writeRegister>
  writeRegister(0x14, 0x84);  // 3. 45deg thresh, 14deg hyst (don't think this register is writable either)
     7e0:	84 e1       	ldi	r24, 0x14	; 20
     7e2:	64 e8       	ldi	r22, 0x84	; 132
     7e4:	13 df       	rcall	.-474    	; 0x60c <writeRegister>
  writeRegister(0x12, 0x50);  // 4. debounce counter at 100ms (at 800 hz)
     7e6:	82 e1       	ldi	r24, 0x12	; 18
     7e8:	60 e5       	ldi	r22, 0x50	; 80
     7ea:	10 df       	rcall	.-480    	; 0x60c <writeRegister>
   2. Set the threshold - minimum required acceleration to cause a tap.
   3. Set the time limit - the maximum time that a tap can be above the threshold
   4. Set the pulse latency - the minimum required time between one pulse and the next
   5. Set the second pulse window - maximum allowed time between end of latency and start of second pulse
   for more info check out this app note: http://cache.freescale.com/files/sensors/doc/app_note/AN4072.pdf */
  writeRegister(0x21, 0x7F);  // 1. enable single/double taps on all axes
     7ec:	81 e2       	ldi	r24, 0x21	; 33
     7ee:	6f e7       	ldi	r22, 0x7F	; 127
     7f0:	0d df       	rcall	.-486    	; 0x60c <writeRegister>
  // writeRegister(0x21, 0x55);  // 1. single taps only on all axes
  // writeRegister(0x21, 0x6A);  // 1. double taps only on all axes
  writeRegister(0x23, 0x20);  // 2. x thresh at 2g, multiply the value by 0.0625g/LSB to get the threshold
     7f2:	83 e2       	ldi	r24, 0x23	; 35
     7f4:	60 e2       	ldi	r22, 0x20	; 32
     7f6:	0a df       	rcall	.-492    	; 0x60c <writeRegister>
  writeRegister(0x24, 0x20);  // 2. y thresh at 2g, multiply the value by 0.0625g/LSB to get the threshold
     7f8:	84 e2       	ldi	r24, 0x24	; 36
     7fa:	60 e2       	ldi	r22, 0x20	; 32
     7fc:	07 df       	rcall	.-498    	; 0x60c <writeRegister>
  writeRegister(0x25, 0x08);  // 2. z thresh at .5g, multiply the value by 0.0625g/LSB to get the threshold
     7fe:	85 e2       	ldi	r24, 0x25	; 37
     800:	68 e0       	ldi	r22, 0x08	; 8
     802:	04 df       	rcall	.-504    	; 0x60c <writeRegister>
  writeRegister(0x26, 0x30);  // 3. 30ms time limit at 800Hz odr, this is very dependent on data rate, see the app note
     804:	86 e2       	ldi	r24, 0x26	; 38
     806:	60 e3       	ldi	r22, 0x30	; 48
     808:	01 df       	rcall	.-510    	; 0x60c <writeRegister>
  writeRegister(0x27, 0xA0);  // 4. 200ms (at 800Hz odr) between taps min, this also depends on the data rate
     80a:	87 e2       	ldi	r24, 0x27	; 39
     80c:	60 ea       	ldi	r22, 0xA0	; 160
     80e:	fe de       	rcall	.-516    	; 0x60c <writeRegister>
  writeRegister(0x28, 0xFF);  // 5. 318ms (max value) between taps max
     810:	88 e2       	ldi	r24, 0x28	; 40
     812:	6f ef       	ldi	r22, 0xFF	; 255
     814:	fb de       	rcall	.-522    	; 0x60c <writeRegister>

  // Set up interrupt 1 and 2
  writeRegister(0x2C, 0x02);  // Active high, push-pull interrupts
     816:	8c e2       	ldi	r24, 0x2C	; 44
     818:	62 e0       	ldi	r22, 0x02	; 2
     81a:	f8 de       	rcall	.-528    	; 0x60c <writeRegister>
  writeRegister(0x2D, 0x19);  // DRDY, P/L and tap ints enabled
     81c:	8d e2       	ldi	r24, 0x2D	; 45
     81e:	69 e1       	ldi	r22, 0x19	; 25
     820:	f5 de       	rcall	.-534    	; 0x60c <writeRegister>
  writeRegister(0x2E, 0x01);  // DRDY on INT1, P/L and taps on INT2
     822:	8e e2       	ldi	r24, 0x2E	; 46
     824:	61 e0       	ldi	r22, 0x01	; 1
     826:	f2 de       	rcall	.-540    	; 0x60c <writeRegister>

  MMA8452Active();  // Set to active to start reading
     828:	a2 df       	rcall	.-188    	; 0x76e <MMA8452Active>
}
     82a:	1f 91       	pop	r17
     82c:	0f 91       	pop	r16
     82e:	08 95       	ret

00000830 <setup>:
void setup()
{
  unsigned char c;

  // Read the WHO_AM_I register, this is a good test of communication
  c = readRegister(0x0D);  // Read WHO_AM_I register
     830:	8d e0       	ldi	r24, 0x0D	; 13
     832:	7f df       	rcall	.-258    	; 0x732 <readRegister>
  if (c == 0x2A) // WHO_AM_I should always be 0x2A
     834:	8a 32       	cpi	r24, 0x2A	; 42
     836:	31 f4       	brne	.+12     	; 0x844 <setup+0x14>
  {  
    initMMA8452(SCALE, dataRate);  // init the accelerometer if communication is OK
     838:	82 e0       	ldi	r24, 0x02	; 2
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	60 e0       	ldi	r22, 0x00	; 0
     83e:	70 e0       	ldi	r23, 0x00	; 0
     840:	a4 df       	rcall	.-184    	; 0x78a <initMMA8452>
		
		output_low(PORTB, LED);
		_delay_ms(500);
	} // Loop forever if communication doesn't happen
  }
}
     842:	08 95       	ret
  }
  else
  {
    while(1)
	{
		output_high(PORTB, LED);
     844:	c1 9a       	sbi	0x18, 1	; 24
     846:	8f ef       	ldi	r24, 0xFF	; 255
     848:	94 e3       	ldi	r25, 0x34	; 52
     84a:	ac e0       	ldi	r26, 0x0C	; 12
     84c:	81 50       	subi	r24, 0x01	; 1
     84e:	90 40       	sbci	r25, 0x00	; 0
     850:	a0 40       	sbci	r26, 0x00	; 0
     852:	e1 f7       	brne	.-8      	; 0x84c <setup+0x1c>
     854:	00 c0       	rjmp	.+0      	; 0x856 <setup+0x26>
     856:	00 00       	nop
		_delay_ms(500);
		
		output_low(PORTB, LED);
     858:	c1 98       	cbi	0x18, 1	; 24
     85a:	8f ef       	ldi	r24, 0xFF	; 255
     85c:	94 e3       	ldi	r25, 0x34	; 52
     85e:	ac e0       	ldi	r26, 0x0C	; 12
     860:	81 50       	subi	r24, 0x01	; 1
     862:	90 40       	sbci	r25, 0x00	; 0
     864:	a0 40       	sbci	r26, 0x00	; 0
     866:	e1 f7       	brne	.-8      	; 0x860 <setup+0x30>
     868:	00 c0       	rjmp	.+0      	; 0x86a <setup+0x3a>
     86a:	00 00       	nop
     86c:	eb cf       	rjmp	.-42     	; 0x844 <setup+0x14>

0000086e <vfprintf>:
     86e:	a3 e1       	ldi	r26, 0x13	; 19
     870:	b0 e0       	ldi	r27, 0x00	; 0
     872:	ec e3       	ldi	r30, 0x3C	; 60
     874:	f4 e0       	ldi	r31, 0x04	; 4
     876:	8b c5       	rjmp	.+2838   	; 0x138e <__prologue_saves__>
     878:	6c 01       	movw	r12, r24
     87a:	7f 87       	std	Y+15, r23	; 0x0f
     87c:	6e 87       	std	Y+14, r22	; 0x0e
     87e:	fc 01       	movw	r30, r24
     880:	17 82       	std	Z+7, r1	; 0x07
     882:	16 82       	std	Z+6, r1	; 0x06
     884:	83 81       	ldd	r24, Z+3	; 0x03
     886:	81 fd       	sbrc	r24, 1
     888:	04 c0       	rjmp	.+8      	; 0x892 <vfprintf+0x24>
     88a:	52 c3       	rjmp	.+1700   	; 0xf30 <vfprintf+0x6c2>
     88c:	4c 85       	ldd	r20, Y+12	; 0x0c
     88e:	5d 85       	ldd	r21, Y+13	; 0x0d
     890:	04 c0       	rjmp	.+8      	; 0x89a <vfprintf+0x2c>
     892:	1e 01       	movw	r2, r28
     894:	08 94       	sec
     896:	21 1c       	adc	r2, r1
     898:	31 1c       	adc	r3, r1
     89a:	f6 01       	movw	r30, r12
     89c:	93 81       	ldd	r25, Z+3	; 0x03
     89e:	ee 85       	ldd	r30, Y+14	; 0x0e
     8a0:	ff 85       	ldd	r31, Y+15	; 0x0f
     8a2:	93 fd       	sbrc	r25, 3
     8a4:	85 91       	lpm	r24, Z+
     8a6:	93 ff       	sbrs	r25, 3
     8a8:	81 91       	ld	r24, Z+
     8aa:	ff 87       	std	Y+15, r31	; 0x0f
     8ac:	ee 87       	std	Y+14, r30	; 0x0e
     8ae:	88 23       	and	r24, r24
     8b0:	09 f4       	brne	.+2      	; 0x8b4 <vfprintf+0x46>
     8b2:	3a c3       	rjmp	.+1652   	; 0xf28 <vfprintf+0x6ba>
     8b4:	85 32       	cpi	r24, 0x25	; 37
     8b6:	41 f4       	brne	.+16     	; 0x8c8 <vfprintf+0x5a>
     8b8:	93 fd       	sbrc	r25, 3
     8ba:	85 91       	lpm	r24, Z+
     8bc:	93 ff       	sbrs	r25, 3
     8be:	81 91       	ld	r24, Z+
     8c0:	ff 87       	std	Y+15, r31	; 0x0f
     8c2:	ee 87       	std	Y+14, r30	; 0x0e
     8c4:	85 32       	cpi	r24, 0x25	; 37
     8c6:	51 f4       	brne	.+20     	; 0x8dc <vfprintf+0x6e>
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	b6 01       	movw	r22, r12
     8cc:	4a 8b       	std	Y+18, r20	; 0x12
     8ce:	5b 8b       	std	Y+19, r21	; 0x13
     8d0:	83 d6       	rcall	.+3334   	; 0x15d8 <fputc>
     8d2:	4a 89       	ldd	r20, Y+18	; 0x12
     8d4:	5b 89       	ldd	r21, Y+19	; 0x13
     8d6:	5d 87       	std	Y+13, r21	; 0x0d
     8d8:	4c 87       	std	Y+12, r20	; 0x0c
     8da:	d8 cf       	rjmp	.-80     	; 0x88c <vfprintf+0x1e>
     8dc:	10 e0       	ldi	r17, 0x00	; 0
     8de:	ff 24       	eor	r15, r15
     8e0:	00 e0       	ldi	r16, 0x00	; 0
     8e2:	00 32       	cpi	r16, 0x20	; 32
     8e4:	b0 f4       	brcc	.+44     	; 0x912 <vfprintf+0xa4>
     8e6:	8b 32       	cpi	r24, 0x2B	; 43
     8e8:	69 f0       	breq	.+26     	; 0x904 <vfprintf+0x96>
     8ea:	8c 32       	cpi	r24, 0x2C	; 44
     8ec:	28 f4       	brcc	.+10     	; 0x8f8 <vfprintf+0x8a>
     8ee:	80 32       	cpi	r24, 0x20	; 32
     8f0:	51 f0       	breq	.+20     	; 0x906 <vfprintf+0x98>
     8f2:	83 32       	cpi	r24, 0x23	; 35
     8f4:	71 f4       	brne	.+28     	; 0x912 <vfprintf+0xa4>
     8f6:	0b c0       	rjmp	.+22     	; 0x90e <vfprintf+0xa0>
     8f8:	8d 32       	cpi	r24, 0x2D	; 45
     8fa:	39 f0       	breq	.+14     	; 0x90a <vfprintf+0x9c>
     8fc:	80 33       	cpi	r24, 0x30	; 48
     8fe:	49 f4       	brne	.+18     	; 0x912 <vfprintf+0xa4>
     900:	01 60       	ori	r16, 0x01	; 1
     902:	2c c0       	rjmp	.+88     	; 0x95c <vfprintf+0xee>
     904:	02 60       	ori	r16, 0x02	; 2
     906:	04 60       	ori	r16, 0x04	; 4
     908:	29 c0       	rjmp	.+82     	; 0x95c <vfprintf+0xee>
     90a:	08 60       	ori	r16, 0x08	; 8
     90c:	27 c0       	rjmp	.+78     	; 0x95c <vfprintf+0xee>
     90e:	00 61       	ori	r16, 0x10	; 16
     910:	25 c0       	rjmp	.+74     	; 0x95c <vfprintf+0xee>
     912:	07 fd       	sbrc	r16, 7
     914:	2e c0       	rjmp	.+92     	; 0x972 <vfprintf+0x104>
     916:	28 2f       	mov	r18, r24
     918:	20 53       	subi	r18, 0x30	; 48
     91a:	2a 30       	cpi	r18, 0x0A	; 10
     91c:	98 f4       	brcc	.+38     	; 0x944 <vfprintf+0xd6>
     91e:	06 ff       	sbrs	r16, 6
     920:	08 c0       	rjmp	.+16     	; 0x932 <vfprintf+0xc4>
     922:	81 2f       	mov	r24, r17
     924:	88 0f       	add	r24, r24
     926:	18 2f       	mov	r17, r24
     928:	11 0f       	add	r17, r17
     92a:	11 0f       	add	r17, r17
     92c:	18 0f       	add	r17, r24
     92e:	12 0f       	add	r17, r18
     930:	15 c0       	rjmp	.+42     	; 0x95c <vfprintf+0xee>
     932:	8f 2d       	mov	r24, r15
     934:	88 0f       	add	r24, r24
     936:	f8 2e       	mov	r15, r24
     938:	ff 0c       	add	r15, r15
     93a:	ff 0c       	add	r15, r15
     93c:	f8 0e       	add	r15, r24
     93e:	f2 0e       	add	r15, r18
     940:	00 62       	ori	r16, 0x20	; 32
     942:	0c c0       	rjmp	.+24     	; 0x95c <vfprintf+0xee>
     944:	8e 32       	cpi	r24, 0x2E	; 46
     946:	21 f4       	brne	.+8      	; 0x950 <vfprintf+0xe2>
     948:	06 fd       	sbrc	r16, 6
     94a:	ee c2       	rjmp	.+1500   	; 0xf28 <vfprintf+0x6ba>
     94c:	00 64       	ori	r16, 0x40	; 64
     94e:	06 c0       	rjmp	.+12     	; 0x95c <vfprintf+0xee>
     950:	8c 36       	cpi	r24, 0x6C	; 108
     952:	11 f4       	brne	.+4      	; 0x958 <vfprintf+0xea>
     954:	00 68       	ori	r16, 0x80	; 128
     956:	02 c0       	rjmp	.+4      	; 0x95c <vfprintf+0xee>
     958:	88 36       	cpi	r24, 0x68	; 104
     95a:	59 f4       	brne	.+22     	; 0x972 <vfprintf+0x104>
     95c:	ee 85       	ldd	r30, Y+14	; 0x0e
     95e:	ff 85       	ldd	r31, Y+15	; 0x0f
     960:	93 fd       	sbrc	r25, 3
     962:	85 91       	lpm	r24, Z+
     964:	93 ff       	sbrs	r25, 3
     966:	81 91       	ld	r24, Z+
     968:	ff 87       	std	Y+15, r31	; 0x0f
     96a:	ee 87       	std	Y+14, r30	; 0x0e
     96c:	88 23       	and	r24, r24
     96e:	09 f0       	breq	.+2      	; 0x972 <vfprintf+0x104>
     970:	b8 cf       	rjmp	.-144    	; 0x8e2 <vfprintf+0x74>
     972:	98 2f       	mov	r25, r24
     974:	95 54       	subi	r25, 0x45	; 69
     976:	93 30       	cpi	r25, 0x03	; 3
     978:	18 f4       	brcc	.+6      	; 0x980 <vfprintf+0x112>
     97a:	00 61       	ori	r16, 0x10	; 16
     97c:	80 5e       	subi	r24, 0xE0	; 224
     97e:	06 c0       	rjmp	.+12     	; 0x98c <vfprintf+0x11e>
     980:	98 2f       	mov	r25, r24
     982:	95 56       	subi	r25, 0x65	; 101
     984:	93 30       	cpi	r25, 0x03	; 3
     986:	08 f0       	brcs	.+2      	; 0x98a <vfprintf+0x11c>
     988:	8b c1       	rjmp	.+790    	; 0xca0 <vfprintf+0x432>
     98a:	0f 7e       	andi	r16, 0xEF	; 239
     98c:	06 ff       	sbrs	r16, 6
     98e:	16 e0       	ldi	r17, 0x06	; 6
     990:	6f e3       	ldi	r22, 0x3F	; 63
     992:	e6 2e       	mov	r14, r22
     994:	e0 22       	and	r14, r16
     996:	85 36       	cpi	r24, 0x65	; 101
     998:	19 f4       	brne	.+6      	; 0x9a0 <vfprintf+0x132>
     99a:	f0 e4       	ldi	r31, 0x40	; 64
     99c:	ef 2a       	or	r14, r31
     99e:	07 c0       	rjmp	.+14     	; 0x9ae <vfprintf+0x140>
     9a0:	86 36       	cpi	r24, 0x66	; 102
     9a2:	19 f4       	brne	.+6      	; 0x9aa <vfprintf+0x13c>
     9a4:	20 e8       	ldi	r18, 0x80	; 128
     9a6:	e2 2a       	or	r14, r18
     9a8:	02 c0       	rjmp	.+4      	; 0x9ae <vfprintf+0x140>
     9aa:	11 11       	cpse	r17, r1
     9ac:	11 50       	subi	r17, 0x01	; 1
     9ae:	e7 fe       	sbrs	r14, 7
     9b0:	06 c0       	rjmp	.+12     	; 0x9be <vfprintf+0x150>
     9b2:	1c 33       	cpi	r17, 0x3C	; 60
     9b4:	40 f4       	brcc	.+16     	; 0x9c6 <vfprintf+0x158>
     9b6:	91 2e       	mov	r9, r17
     9b8:	93 94       	inc	r9
     9ba:	27 e0       	ldi	r18, 0x07	; 7
     9bc:	0b c0       	rjmp	.+22     	; 0x9d4 <vfprintf+0x166>
     9be:	18 30       	cpi	r17, 0x08	; 8
     9c0:	30 f4       	brcc	.+12     	; 0x9ce <vfprintf+0x160>
     9c2:	21 2f       	mov	r18, r17
     9c4:	06 c0       	rjmp	.+12     	; 0x9d2 <vfprintf+0x164>
     9c6:	27 e0       	ldi	r18, 0x07	; 7
     9c8:	3c e3       	ldi	r19, 0x3C	; 60
     9ca:	93 2e       	mov	r9, r19
     9cc:	03 c0       	rjmp	.+6      	; 0x9d4 <vfprintf+0x166>
     9ce:	27 e0       	ldi	r18, 0x07	; 7
     9d0:	17 e0       	ldi	r17, 0x07	; 7
     9d2:	99 24       	eor	r9, r9
     9d4:	ca 01       	movw	r24, r20
     9d6:	04 96       	adiw	r24, 0x04	; 4
     9d8:	9d 87       	std	Y+13, r25	; 0x0d
     9da:	8c 87       	std	Y+12, r24	; 0x0c
     9dc:	fa 01       	movw	r30, r20
     9de:	60 81       	ld	r22, Z
     9e0:	71 81       	ldd	r23, Z+1	; 0x01
     9e2:	82 81       	ldd	r24, Z+2	; 0x02
     9e4:	93 81       	ldd	r25, Z+3	; 0x03
     9e6:	a1 01       	movw	r20, r2
     9e8:	09 2d       	mov	r16, r9
     9ea:	08 d5       	rcall	.+2576   	; 0x13fc <__ftoa_engine>
     9ec:	5c 01       	movw	r10, r24
     9ee:	69 80       	ldd	r6, Y+1	; 0x01
     9f0:	26 2d       	mov	r18, r6
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	39 8b       	std	Y+17, r19	; 0x11
     9f6:	28 8b       	std	Y+16, r18	; 0x10
     9f8:	60 fe       	sbrs	r6, 0
     9fa:	03 c0       	rjmp	.+6      	; 0xa02 <vfprintf+0x194>
     9fc:	38 89       	ldd	r19, Y+16	; 0x10
     9fe:	33 ff       	sbrs	r19, 3
     a00:	06 c0       	rjmp	.+12     	; 0xa0e <vfprintf+0x1a0>
     a02:	e1 fc       	sbrc	r14, 1
     a04:	06 c0       	rjmp	.+12     	; 0xa12 <vfprintf+0x1a4>
     a06:	e2 fe       	sbrs	r14, 2
     a08:	06 c0       	rjmp	.+12     	; 0xa16 <vfprintf+0x1a8>
     a0a:	00 e2       	ldi	r16, 0x20	; 32
     a0c:	05 c0       	rjmp	.+10     	; 0xa18 <vfprintf+0x1aa>
     a0e:	0d e2       	ldi	r16, 0x2D	; 45
     a10:	03 c0       	rjmp	.+6      	; 0xa18 <vfprintf+0x1aa>
     a12:	0b e2       	ldi	r16, 0x2B	; 43
     a14:	01 c0       	rjmp	.+2      	; 0xa18 <vfprintf+0x1aa>
     a16:	00 e0       	ldi	r16, 0x00	; 0
     a18:	88 89       	ldd	r24, Y+16	; 0x10
     a1a:	99 89       	ldd	r25, Y+17	; 0x11
     a1c:	8c 70       	andi	r24, 0x0C	; 12
     a1e:	90 70       	andi	r25, 0x00	; 0
     a20:	00 97       	sbiw	r24, 0x00	; 0
     a22:	a9 f1       	breq	.+106    	; 0xa8e <vfprintf+0x220>
     a24:	00 23       	and	r16, r16
     a26:	11 f0       	breq	.+4      	; 0xa2c <vfprintf+0x1be>
     a28:	84 e0       	ldi	r24, 0x04	; 4
     a2a:	01 c0       	rjmp	.+2      	; 0xa2e <vfprintf+0x1c0>
     a2c:	83 e0       	ldi	r24, 0x03	; 3
     a2e:	8f 15       	cp	r24, r15
     a30:	50 f4       	brcc	.+20     	; 0xa46 <vfprintf+0x1d8>
     a32:	f8 1a       	sub	r15, r24
     a34:	e3 fc       	sbrc	r14, 3
     a36:	08 c0       	rjmp	.+16     	; 0xa48 <vfprintf+0x1da>
     a38:	80 e2       	ldi	r24, 0x20	; 32
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	b6 01       	movw	r22, r12
     a3e:	cc d5       	rcall	.+2968   	; 0x15d8 <fputc>
     a40:	fa 94       	dec	r15
     a42:	d1 f7       	brne	.-12     	; 0xa38 <vfprintf+0x1ca>
     a44:	01 c0       	rjmp	.+2      	; 0xa48 <vfprintf+0x1da>
     a46:	ff 24       	eor	r15, r15
     a48:	00 23       	and	r16, r16
     a4a:	21 f0       	breq	.+8      	; 0xa54 <vfprintf+0x1e6>
     a4c:	80 2f       	mov	r24, r16
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	b6 01       	movw	r22, r12
     a52:	c2 d5       	rcall	.+2948   	; 0x15d8 <fputc>
     a54:	88 89       	ldd	r24, Y+16	; 0x10
     a56:	83 fd       	sbrc	r24, 3
     a58:	03 c0       	rjmp	.+6      	; 0xa60 <vfprintf+0x1f2>
     a5a:	06 e6       	ldi	r16, 0x66	; 102
     a5c:	10 e0       	ldi	r17, 0x00	; 0
     a5e:	0d c0       	rjmp	.+26     	; 0xa7a <vfprintf+0x20c>
     a60:	02 e6       	ldi	r16, 0x62	; 98
     a62:	10 e0       	ldi	r17, 0x00	; 0
     a64:	0a c0       	rjmp	.+20     	; 0xa7a <vfprintf+0x20c>
     a66:	a1 14       	cp	r10, r1
     a68:	b1 04       	cpc	r11, r1
     a6a:	09 f0       	breq	.+2      	; 0xa6e <vfprintf+0x200>
     a6c:	80 52       	subi	r24, 0x20	; 32
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	b6 01       	movw	r22, r12
     a72:	b2 d5       	rcall	.+2916   	; 0x15d8 <fputc>
     a74:	0f 5f       	subi	r16, 0xFF	; 255
     a76:	1f 4f       	sbci	r17, 0xFF	; 255
     a78:	05 c0       	rjmp	.+10     	; 0xa84 <vfprintf+0x216>
     a7a:	ae 2c       	mov	r10, r14
     a7c:	bb 24       	eor	r11, r11
     a7e:	90 e1       	ldi	r25, 0x10	; 16
     a80:	a9 22       	and	r10, r25
     a82:	bb 24       	eor	r11, r11
     a84:	f8 01       	movw	r30, r16
     a86:	84 91       	lpm	r24, Z+
     a88:	88 23       	and	r24, r24
     a8a:	69 f7       	brne	.-38     	; 0xa66 <vfprintf+0x1f8>
     a8c:	4a c2       	rjmp	.+1172   	; 0xf22 <vfprintf+0x6b4>
     a8e:	e7 fe       	sbrs	r14, 7
     a90:	0e c0       	rjmp	.+28     	; 0xaae <vfprintf+0x240>
     a92:	9a 0c       	add	r9, r10
     a94:	f8 89       	ldd	r31, Y+16	; 0x10
     a96:	f4 ff       	sbrs	r31, 4
     a98:	04 c0       	rjmp	.+8      	; 0xaa2 <vfprintf+0x234>
     a9a:	8a 81       	ldd	r24, Y+2	; 0x02
     a9c:	81 33       	cpi	r24, 0x31	; 49
     a9e:	09 f4       	brne	.+2      	; 0xaa2 <vfprintf+0x234>
     aa0:	9a 94       	dec	r9
     aa2:	19 14       	cp	r1, r9
     aa4:	54 f5       	brge	.+84     	; 0xafa <vfprintf+0x28c>
     aa6:	29 2d       	mov	r18, r9
     aa8:	29 30       	cpi	r18, 0x09	; 9
     aaa:	50 f5       	brcc	.+84     	; 0xb00 <vfprintf+0x292>
     aac:	2d c0       	rjmp	.+90     	; 0xb08 <vfprintf+0x29a>
     aae:	e6 fc       	sbrc	r14, 6
     ab0:	2b c0       	rjmp	.+86     	; 0xb08 <vfprintf+0x29a>
     ab2:	81 2f       	mov	r24, r17
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	8a 15       	cp	r24, r10
     ab8:	9b 05       	cpc	r25, r11
     aba:	4c f0       	brlt	.+18     	; 0xace <vfprintf+0x260>
     abc:	3c ef       	ldi	r19, 0xFC	; 252
     abe:	a3 16       	cp	r10, r19
     ac0:	3f ef       	ldi	r19, 0xFF	; 255
     ac2:	b3 06       	cpc	r11, r19
     ac4:	24 f0       	brlt	.+8      	; 0xace <vfprintf+0x260>
     ac6:	80 e8       	ldi	r24, 0x80	; 128
     ac8:	e8 2a       	or	r14, r24
     aca:	01 c0       	rjmp	.+2      	; 0xace <vfprintf+0x260>
     acc:	11 50       	subi	r17, 0x01	; 1
     ace:	11 23       	and	r17, r17
     ad0:	49 f0       	breq	.+18     	; 0xae4 <vfprintf+0x276>
     ad2:	e2 e0       	ldi	r30, 0x02	; 2
     ad4:	f0 e0       	ldi	r31, 0x00	; 0
     ad6:	ec 0f       	add	r30, r28
     ad8:	fd 1f       	adc	r31, r29
     ada:	e1 0f       	add	r30, r17
     adc:	f1 1d       	adc	r31, r1
     ade:	80 81       	ld	r24, Z
     ae0:	80 33       	cpi	r24, 0x30	; 48
     ae2:	a1 f3       	breq	.-24     	; 0xacc <vfprintf+0x25e>
     ae4:	e7 fe       	sbrs	r14, 7
     ae6:	10 c0       	rjmp	.+32     	; 0xb08 <vfprintf+0x29a>
     ae8:	91 2e       	mov	r9, r17
     aea:	93 94       	inc	r9
     aec:	81 2f       	mov	r24, r17
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	a8 16       	cp	r10, r24
     af2:	b9 06       	cpc	r11, r25
     af4:	44 f4       	brge	.+16     	; 0xb06 <vfprintf+0x298>
     af6:	1a 19       	sub	r17, r10
     af8:	07 c0       	rjmp	.+14     	; 0xb08 <vfprintf+0x29a>
     afa:	99 24       	eor	r9, r9
     afc:	93 94       	inc	r9
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <vfprintf+0x29a>
     b00:	98 e0       	ldi	r25, 0x08	; 8
     b02:	99 2e       	mov	r9, r25
     b04:	01 c0       	rjmp	.+2      	; 0xb08 <vfprintf+0x29a>
     b06:	10 e0       	ldi	r17, 0x00	; 0
     b08:	e7 fe       	sbrs	r14, 7
     b0a:	07 c0       	rjmp	.+14     	; 0xb1a <vfprintf+0x2ac>
     b0c:	1a 14       	cp	r1, r10
     b0e:	1b 04       	cpc	r1, r11
     b10:	3c f4       	brge	.+14     	; 0xb20 <vfprintf+0x2b2>
     b12:	95 01       	movw	r18, r10
     b14:	2f 5f       	subi	r18, 0xFF	; 255
     b16:	3f 4f       	sbci	r19, 0xFF	; 255
     b18:	05 c0       	rjmp	.+10     	; 0xb24 <vfprintf+0x2b6>
     b1a:	25 e0       	ldi	r18, 0x05	; 5
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	02 c0       	rjmp	.+4      	; 0xb24 <vfprintf+0x2b6>
     b20:	21 e0       	ldi	r18, 0x01	; 1
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	00 23       	and	r16, r16
     b26:	11 f0       	breq	.+4      	; 0xb2c <vfprintf+0x2be>
     b28:	2f 5f       	subi	r18, 0xFF	; 255
     b2a:	3f 4f       	sbci	r19, 0xFF	; 255
     b2c:	11 23       	and	r17, r17
     b2e:	29 f0       	breq	.+10     	; 0xb3a <vfprintf+0x2cc>
     b30:	81 2f       	mov	r24, r17
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	01 96       	adiw	r24, 0x01	; 1
     b36:	28 0f       	add	r18, r24
     b38:	39 1f       	adc	r19, r25
     b3a:	8f 2d       	mov	r24, r15
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	28 17       	cp	r18, r24
     b40:	39 07       	cpc	r19, r25
     b42:	14 f4       	brge	.+4      	; 0xb48 <vfprintf+0x2da>
     b44:	f2 1a       	sub	r15, r18
     b46:	01 c0       	rjmp	.+2      	; 0xb4a <vfprintf+0x2dc>
     b48:	ff 24       	eor	r15, r15
     b4a:	4e 2c       	mov	r4, r14
     b4c:	55 24       	eor	r5, r5
     b4e:	c2 01       	movw	r24, r4
     b50:	89 70       	andi	r24, 0x09	; 9
     b52:	90 70       	andi	r25, 0x00	; 0
     b54:	00 97       	sbiw	r24, 0x00	; 0
     b56:	41 f4       	brne	.+16     	; 0xb68 <vfprintf+0x2fa>
     b58:	05 c0       	rjmp	.+10     	; 0xb64 <vfprintf+0x2f6>
     b5a:	80 e2       	ldi	r24, 0x20	; 32
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	b6 01       	movw	r22, r12
     b60:	3b d5       	rcall	.+2678   	; 0x15d8 <fputc>
     b62:	fa 94       	dec	r15
     b64:	ff 20       	and	r15, r15
     b66:	c9 f7       	brne	.-14     	; 0xb5a <vfprintf+0x2ec>
     b68:	00 23       	and	r16, r16
     b6a:	21 f0       	breq	.+8      	; 0xb74 <vfprintf+0x306>
     b6c:	80 2f       	mov	r24, r16
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	b6 01       	movw	r22, r12
     b72:	32 d5       	rcall	.+2660   	; 0x15d8 <fputc>
     b74:	43 fc       	sbrc	r4, 3
     b76:	08 c0       	rjmp	.+16     	; 0xb88 <vfprintf+0x31a>
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <vfprintf+0x316>
     b7a:	80 e3       	ldi	r24, 0x30	; 48
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	b6 01       	movw	r22, r12
     b80:	2b d5       	rcall	.+2646   	; 0x15d8 <fputc>
     b82:	fa 94       	dec	r15
     b84:	ff 20       	and	r15, r15
     b86:	c9 f7       	brne	.-14     	; 0xb7a <vfprintf+0x30c>
     b88:	e7 fe       	sbrs	r14, 7
     b8a:	44 c0       	rjmp	.+136    	; 0xc14 <vfprintf+0x3a6>
     b8c:	35 01       	movw	r6, r10
     b8e:	b7 fe       	sbrs	r11, 7
     b90:	02 c0       	rjmp	.+4      	; 0xb96 <vfprintf+0x328>
     b92:	66 24       	eor	r6, r6
     b94:	77 24       	eor	r7, r7
     b96:	25 01       	movw	r4, r10
     b98:	08 94       	sec
     b9a:	41 1c       	adc	r4, r1
     b9c:	51 1c       	adc	r5, r1
     b9e:	46 18       	sub	r4, r6
     ba0:	57 08       	sbc	r5, r7
     ba2:	42 0c       	add	r4, r2
     ba4:	53 1c       	adc	r5, r3
     ba6:	f5 01       	movw	r30, r10
     ba8:	e9 19       	sub	r30, r9
     baa:	f1 09       	sbc	r31, r1
     bac:	4f 01       	movw	r8, r30
     bae:	81 2f       	mov	r24, r17
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	00 27       	eor	r16, r16
     bb4:	11 27       	eor	r17, r17
     bb6:	08 1b       	sub	r16, r24
     bb8:	19 0b       	sbc	r17, r25
     bba:	ff ef       	ldi	r31, 0xFF	; 255
     bbc:	6f 16       	cp	r6, r31
     bbe:	ff ef       	ldi	r31, 0xFF	; 255
     bc0:	7f 06       	cpc	r7, r31
     bc2:	21 f4       	brne	.+8      	; 0xbcc <vfprintf+0x35e>
     bc4:	8e e2       	ldi	r24, 0x2E	; 46
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	b6 01       	movw	r22, r12
     bca:	06 d5       	rcall	.+2572   	; 0x15d8 <fputc>
     bcc:	a6 14       	cp	r10, r6
     bce:	b7 04       	cpc	r11, r7
     bd0:	34 f0       	brlt	.+12     	; 0xbde <vfprintf+0x370>
     bd2:	86 14       	cp	r8, r6
     bd4:	97 04       	cpc	r9, r7
     bd6:	1c f4       	brge	.+6      	; 0xbde <vfprintf+0x370>
     bd8:	f2 01       	movw	r30, r4
     bda:	80 81       	ld	r24, Z
     bdc:	01 c0       	rjmp	.+2      	; 0xbe0 <vfprintf+0x372>
     bde:	80 e3       	ldi	r24, 0x30	; 48
     be0:	08 94       	sec
     be2:	61 08       	sbc	r6, r1
     be4:	71 08       	sbc	r7, r1
     be6:	08 94       	sec
     be8:	41 1c       	adc	r4, r1
     bea:	51 1c       	adc	r5, r1
     bec:	60 16       	cp	r6, r16
     bee:	71 06       	cpc	r7, r17
     bf0:	24 f0       	brlt	.+8      	; 0xbfa <vfprintf+0x38c>
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	b6 01       	movw	r22, r12
     bf6:	f0 d4       	rcall	.+2528   	; 0x15d8 <fputc>
     bf8:	e0 cf       	rjmp	.-64     	; 0xbba <vfprintf+0x34c>
     bfa:	6a 14       	cp	r6, r10
     bfc:	7b 04       	cpc	r7, r11
     bfe:	41 f4       	brne	.+16     	; 0xc10 <vfprintf+0x3a2>
     c00:	9a 81       	ldd	r25, Y+2	; 0x02
     c02:	96 33       	cpi	r25, 0x36	; 54
     c04:	20 f4       	brcc	.+8      	; 0xc0e <vfprintf+0x3a0>
     c06:	95 33       	cpi	r25, 0x35	; 53
     c08:	19 f4       	brne	.+6      	; 0xc10 <vfprintf+0x3a2>
     c0a:	f8 89       	ldd	r31, Y+16	; 0x10
     c0c:	f4 ff       	sbrs	r31, 4
     c0e:	81 e3       	ldi	r24, 0x31	; 49
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	43 c0       	rjmp	.+134    	; 0xc9a <vfprintf+0x42c>
     c14:	8a 81       	ldd	r24, Y+2	; 0x02
     c16:	81 33       	cpi	r24, 0x31	; 49
     c18:	11 f0       	breq	.+4      	; 0xc1e <vfprintf+0x3b0>
     c1a:	2f ee       	ldi	r18, 0xEF	; 239
     c1c:	62 22       	and	r6, r18
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	b6 01       	movw	r22, r12
     c22:	da d4       	rcall	.+2484   	; 0x15d8 <fputc>
     c24:	11 23       	and	r17, r17
     c26:	79 f0       	breq	.+30     	; 0xc46 <vfprintf+0x3d8>
     c28:	8e e2       	ldi	r24, 0x2E	; 46
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	b6 01       	movw	r22, r12
     c2e:	d4 d4       	rcall	.+2472   	; 0x15d8 <fputc>
     c30:	02 e0       	ldi	r16, 0x02	; 2
     c32:	f1 01       	movw	r30, r2
     c34:	e0 0f       	add	r30, r16
     c36:	f1 1d       	adc	r31, r1
     c38:	0f 5f       	subi	r16, 0xFF	; 255
     c3a:	80 81       	ld	r24, Z
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	b6 01       	movw	r22, r12
     c40:	cb d4       	rcall	.+2454   	; 0x15d8 <fputc>
     c42:	11 50       	subi	r17, 0x01	; 1
     c44:	b1 f7       	brne	.-20     	; 0xc32 <vfprintf+0x3c4>
     c46:	44 fe       	sbrs	r4, 4
     c48:	03 c0       	rjmp	.+6      	; 0xc50 <vfprintf+0x3e2>
     c4a:	85 e4       	ldi	r24, 0x45	; 69
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	02 c0       	rjmp	.+4      	; 0xc54 <vfprintf+0x3e6>
     c50:	85 e6       	ldi	r24, 0x65	; 101
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	b6 01       	movw	r22, r12
     c56:	c0 d4       	rcall	.+2432   	; 0x15d8 <fputc>
     c58:	b7 fc       	sbrc	r11, 7
     c5a:	05 c0       	rjmp	.+10     	; 0xc66 <vfprintf+0x3f8>
     c5c:	a1 14       	cp	r10, r1
     c5e:	b1 04       	cpc	r11, r1
     c60:	41 f4       	brne	.+16     	; 0xc72 <vfprintf+0x404>
     c62:	64 fe       	sbrs	r6, 4
     c64:	06 c0       	rjmp	.+12     	; 0xc72 <vfprintf+0x404>
     c66:	b0 94       	com	r11
     c68:	a1 94       	neg	r10
     c6a:	b1 08       	sbc	r11, r1
     c6c:	b3 94       	inc	r11
     c6e:	8d e2       	ldi	r24, 0x2D	; 45
     c70:	01 c0       	rjmp	.+2      	; 0xc74 <vfprintf+0x406>
     c72:	8b e2       	ldi	r24, 0x2B	; 43
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	b6 01       	movw	r22, r12
     c78:	af d4       	rcall	.+2398   	; 0x15d8 <fputc>
     c7a:	80 e3       	ldi	r24, 0x30	; 48
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <vfprintf+0x41a>
     c7e:	8f 5f       	subi	r24, 0xFF	; 255
     c80:	e6 ef       	ldi	r30, 0xF6	; 246
     c82:	ff ef       	ldi	r31, 0xFF	; 255
     c84:	ae 0e       	add	r10, r30
     c86:	bf 1e       	adc	r11, r31
     c88:	fa e0       	ldi	r31, 0x0A	; 10
     c8a:	af 16       	cp	r10, r31
     c8c:	b1 04       	cpc	r11, r1
     c8e:	bc f7       	brge	.-18     	; 0xc7e <vfprintf+0x410>
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	b6 01       	movw	r22, r12
     c94:	a1 d4       	rcall	.+2370   	; 0x15d8 <fputc>
     c96:	c5 01       	movw	r24, r10
     c98:	c0 96       	adiw	r24, 0x30	; 48
     c9a:	b6 01       	movw	r22, r12
     c9c:	9d d4       	rcall	.+2362   	; 0x15d8 <fputc>
     c9e:	41 c1       	rjmp	.+642    	; 0xf22 <vfprintf+0x6b4>
     ca0:	83 36       	cpi	r24, 0x63	; 99
     ca2:	31 f0       	breq	.+12     	; 0xcb0 <vfprintf+0x442>
     ca4:	83 37       	cpi	r24, 0x73	; 115
     ca6:	89 f0       	breq	.+34     	; 0xcca <vfprintf+0x45c>
     ca8:	83 35       	cpi	r24, 0x53	; 83
     caa:	09 f0       	breq	.+2      	; 0xcae <vfprintf+0x440>
     cac:	55 c0       	rjmp	.+170    	; 0xd58 <vfprintf+0x4ea>
     cae:	21 c0       	rjmp	.+66     	; 0xcf2 <vfprintf+0x484>
     cb0:	9a 01       	movw	r18, r20
     cb2:	2e 5f       	subi	r18, 0xFE	; 254
     cb4:	3f 4f       	sbci	r19, 0xFF	; 255
     cb6:	3d 87       	std	Y+13, r19	; 0x0d
     cb8:	2c 87       	std	Y+12, r18	; 0x0c
     cba:	fa 01       	movw	r30, r20
     cbc:	80 81       	ld	r24, Z
     cbe:	89 83       	std	Y+1, r24	; 0x01
     cc0:	31 01       	movw	r6, r2
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	a8 2e       	mov	r10, r24
     cc6:	b1 2c       	mov	r11, r1
     cc8:	12 c0       	rjmp	.+36     	; 0xcee <vfprintf+0x480>
     cca:	9a 01       	movw	r18, r20
     ccc:	2e 5f       	subi	r18, 0xFE	; 254
     cce:	3f 4f       	sbci	r19, 0xFF	; 255
     cd0:	3d 87       	std	Y+13, r19	; 0x0d
     cd2:	2c 87       	std	Y+12, r18	; 0x0c
     cd4:	fa 01       	movw	r30, r20
     cd6:	60 80       	ld	r6, Z
     cd8:	71 80       	ldd	r7, Z+1	; 0x01
     cda:	06 ff       	sbrs	r16, 6
     cdc:	03 c0       	rjmp	.+6      	; 0xce4 <vfprintf+0x476>
     cde:	61 2f       	mov	r22, r17
     ce0:	70 e0       	ldi	r23, 0x00	; 0
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <vfprintf+0x47a>
     ce4:	6f ef       	ldi	r22, 0xFF	; 255
     ce6:	7f ef       	ldi	r23, 0xFF	; 255
     ce8:	c3 01       	movw	r24, r6
     cea:	6b d4       	rcall	.+2262   	; 0x15c2 <strnlen>
     cec:	5c 01       	movw	r10, r24
     cee:	0f 77       	andi	r16, 0x7F	; 127
     cf0:	13 c0       	rjmp	.+38     	; 0xd18 <vfprintf+0x4aa>
     cf2:	9a 01       	movw	r18, r20
     cf4:	2e 5f       	subi	r18, 0xFE	; 254
     cf6:	3f 4f       	sbci	r19, 0xFF	; 255
     cf8:	3d 87       	std	Y+13, r19	; 0x0d
     cfa:	2c 87       	std	Y+12, r18	; 0x0c
     cfc:	fa 01       	movw	r30, r20
     cfe:	60 80       	ld	r6, Z
     d00:	71 80       	ldd	r7, Z+1	; 0x01
     d02:	06 ff       	sbrs	r16, 6
     d04:	03 c0       	rjmp	.+6      	; 0xd0c <vfprintf+0x49e>
     d06:	61 2f       	mov	r22, r17
     d08:	70 e0       	ldi	r23, 0x00	; 0
     d0a:	02 c0       	rjmp	.+4      	; 0xd10 <vfprintf+0x4a2>
     d0c:	6f ef       	ldi	r22, 0xFF	; 255
     d0e:	7f ef       	ldi	r23, 0xFF	; 255
     d10:	c3 01       	movw	r24, r6
     d12:	4c d4       	rcall	.+2200   	; 0x15ac <strnlen_P>
     d14:	5c 01       	movw	r10, r24
     d16:	00 68       	ori	r16, 0x80	; 128
     d18:	03 fd       	sbrc	r16, 3
     d1a:	1a c0       	rjmp	.+52     	; 0xd50 <vfprintf+0x4e2>
     d1c:	05 c0       	rjmp	.+10     	; 0xd28 <vfprintf+0x4ba>
     d1e:	80 e2       	ldi	r24, 0x20	; 32
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	b6 01       	movw	r22, r12
     d24:	59 d4       	rcall	.+2226   	; 0x15d8 <fputc>
     d26:	fa 94       	dec	r15
     d28:	8f 2d       	mov	r24, r15
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	a8 16       	cp	r10, r24
     d2e:	b9 06       	cpc	r11, r25
     d30:	b0 f3       	brcs	.-20     	; 0xd1e <vfprintf+0x4b0>
     d32:	0e c0       	rjmp	.+28     	; 0xd50 <vfprintf+0x4e2>
     d34:	f3 01       	movw	r30, r6
     d36:	07 fd       	sbrc	r16, 7
     d38:	85 91       	lpm	r24, Z+
     d3a:	07 ff       	sbrs	r16, 7
     d3c:	81 91       	ld	r24, Z+
     d3e:	3f 01       	movw	r6, r30
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	b6 01       	movw	r22, r12
     d44:	49 d4       	rcall	.+2194   	; 0x15d8 <fputc>
     d46:	f1 10       	cpse	r15, r1
     d48:	fa 94       	dec	r15
     d4a:	08 94       	sec
     d4c:	a1 08       	sbc	r10, r1
     d4e:	b1 08       	sbc	r11, r1
     d50:	a1 14       	cp	r10, r1
     d52:	b1 04       	cpc	r11, r1
     d54:	79 f7       	brne	.-34     	; 0xd34 <vfprintf+0x4c6>
     d56:	e5 c0       	rjmp	.+458    	; 0xf22 <vfprintf+0x6b4>
     d58:	84 36       	cpi	r24, 0x64	; 100
     d5a:	11 f0       	breq	.+4      	; 0xd60 <vfprintf+0x4f2>
     d5c:	89 36       	cpi	r24, 0x69	; 105
     d5e:	59 f5       	brne	.+86     	; 0xdb6 <vfprintf+0x548>
     d60:	07 ff       	sbrs	r16, 7
     d62:	0b c0       	rjmp	.+22     	; 0xd7a <vfprintf+0x50c>
     d64:	9a 01       	movw	r18, r20
     d66:	2c 5f       	subi	r18, 0xFC	; 252
     d68:	3f 4f       	sbci	r19, 0xFF	; 255
     d6a:	3d 87       	std	Y+13, r19	; 0x0d
     d6c:	2c 87       	std	Y+12, r18	; 0x0c
     d6e:	fa 01       	movw	r30, r20
     d70:	60 81       	ld	r22, Z
     d72:	71 81       	ldd	r23, Z+1	; 0x01
     d74:	82 81       	ldd	r24, Z+2	; 0x02
     d76:	93 81       	ldd	r25, Z+3	; 0x03
     d78:	0c c0       	rjmp	.+24     	; 0xd92 <vfprintf+0x524>
     d7a:	9a 01       	movw	r18, r20
     d7c:	2e 5f       	subi	r18, 0xFE	; 254
     d7e:	3f 4f       	sbci	r19, 0xFF	; 255
     d80:	3d 87       	std	Y+13, r19	; 0x0d
     d82:	2c 87       	std	Y+12, r18	; 0x0c
     d84:	fa 01       	movw	r30, r20
     d86:	60 81       	ld	r22, Z
     d88:	71 81       	ldd	r23, Z+1	; 0x01
     d8a:	88 27       	eor	r24, r24
     d8c:	77 fd       	sbrc	r23, 7
     d8e:	80 95       	com	r24
     d90:	98 2f       	mov	r25, r24
     d92:	0f 76       	andi	r16, 0x6F	; 111
     d94:	97 ff       	sbrs	r25, 7
     d96:	08 c0       	rjmp	.+16     	; 0xda8 <vfprintf+0x53a>
     d98:	90 95       	com	r25
     d9a:	80 95       	com	r24
     d9c:	70 95       	com	r23
     d9e:	61 95       	neg	r22
     da0:	7f 4f       	sbci	r23, 0xFF	; 255
     da2:	8f 4f       	sbci	r24, 0xFF	; 255
     da4:	9f 4f       	sbci	r25, 0xFF	; 255
     da6:	00 68       	ori	r16, 0x80	; 128
     da8:	a1 01       	movw	r20, r2
     daa:	2a e0       	ldi	r18, 0x0A	; 10
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	52 d4       	rcall	.+2212   	; 0x1654 <__ultoa_invert>
     db0:	98 2e       	mov	r9, r24
     db2:	92 18       	sub	r9, r2
     db4:	40 c0       	rjmp	.+128    	; 0xe36 <vfprintf+0x5c8>
     db6:	85 37       	cpi	r24, 0x75	; 117
     db8:	21 f4       	brne	.+8      	; 0xdc2 <vfprintf+0x554>
     dba:	0f 7e       	andi	r16, 0xEF	; 239
     dbc:	2a e0       	ldi	r18, 0x0A	; 10
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	20 c0       	rjmp	.+64     	; 0xe02 <vfprintf+0x594>
     dc2:	09 7f       	andi	r16, 0xF9	; 249
     dc4:	8f 36       	cpi	r24, 0x6F	; 111
     dc6:	a9 f0       	breq	.+42     	; 0xdf2 <vfprintf+0x584>
     dc8:	80 37       	cpi	r24, 0x70	; 112
     dca:	20 f4       	brcc	.+8      	; 0xdd4 <vfprintf+0x566>
     dcc:	88 35       	cpi	r24, 0x58	; 88
     dce:	09 f0       	breq	.+2      	; 0xdd2 <vfprintf+0x564>
     dd0:	ab c0       	rjmp	.+342    	; 0xf28 <vfprintf+0x6ba>
     dd2:	0b c0       	rjmp	.+22     	; 0xdea <vfprintf+0x57c>
     dd4:	80 37       	cpi	r24, 0x70	; 112
     dd6:	21 f0       	breq	.+8      	; 0xde0 <vfprintf+0x572>
     dd8:	88 37       	cpi	r24, 0x78	; 120
     dda:	09 f0       	breq	.+2      	; 0xdde <vfprintf+0x570>
     ddc:	a5 c0       	rjmp	.+330    	; 0xf28 <vfprintf+0x6ba>
     dde:	01 c0       	rjmp	.+2      	; 0xde2 <vfprintf+0x574>
     de0:	00 61       	ori	r16, 0x10	; 16
     de2:	04 ff       	sbrs	r16, 4
     de4:	09 c0       	rjmp	.+18     	; 0xdf8 <vfprintf+0x58a>
     de6:	04 60       	ori	r16, 0x04	; 4
     de8:	07 c0       	rjmp	.+14     	; 0xdf8 <vfprintf+0x58a>
     dea:	04 ff       	sbrs	r16, 4
     dec:	08 c0       	rjmp	.+16     	; 0xdfe <vfprintf+0x590>
     dee:	06 60       	ori	r16, 0x06	; 6
     df0:	06 c0       	rjmp	.+12     	; 0xdfe <vfprintf+0x590>
     df2:	28 e0       	ldi	r18, 0x08	; 8
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	05 c0       	rjmp	.+10     	; 0xe02 <vfprintf+0x594>
     df8:	20 e1       	ldi	r18, 0x10	; 16
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <vfprintf+0x594>
     dfe:	20 e1       	ldi	r18, 0x10	; 16
     e00:	32 e0       	ldi	r19, 0x02	; 2
     e02:	07 ff       	sbrs	r16, 7
     e04:	0a c0       	rjmp	.+20     	; 0xe1a <vfprintf+0x5ac>
     e06:	ca 01       	movw	r24, r20
     e08:	04 96       	adiw	r24, 0x04	; 4
     e0a:	9d 87       	std	Y+13, r25	; 0x0d
     e0c:	8c 87       	std	Y+12, r24	; 0x0c
     e0e:	fa 01       	movw	r30, r20
     e10:	60 81       	ld	r22, Z
     e12:	71 81       	ldd	r23, Z+1	; 0x01
     e14:	82 81       	ldd	r24, Z+2	; 0x02
     e16:	93 81       	ldd	r25, Z+3	; 0x03
     e18:	09 c0       	rjmp	.+18     	; 0xe2c <vfprintf+0x5be>
     e1a:	ca 01       	movw	r24, r20
     e1c:	02 96       	adiw	r24, 0x02	; 2
     e1e:	9d 87       	std	Y+13, r25	; 0x0d
     e20:	8c 87       	std	Y+12, r24	; 0x0c
     e22:	fa 01       	movw	r30, r20
     e24:	60 81       	ld	r22, Z
     e26:	71 81       	ldd	r23, Z+1	; 0x01
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	a1 01       	movw	r20, r2
     e2e:	12 d4       	rcall	.+2084   	; 0x1654 <__ultoa_invert>
     e30:	98 2e       	mov	r9, r24
     e32:	92 18       	sub	r9, r2
     e34:	0f 77       	andi	r16, 0x7F	; 127
     e36:	06 ff       	sbrs	r16, 6
     e38:	09 c0       	rjmp	.+18     	; 0xe4c <vfprintf+0x5de>
     e3a:	0e 7f       	andi	r16, 0xFE	; 254
     e3c:	91 16       	cp	r9, r17
     e3e:	30 f4       	brcc	.+12     	; 0xe4c <vfprintf+0x5de>
     e40:	04 ff       	sbrs	r16, 4
     e42:	06 c0       	rjmp	.+12     	; 0xe50 <vfprintf+0x5e2>
     e44:	02 fd       	sbrc	r16, 2
     e46:	04 c0       	rjmp	.+8      	; 0xe50 <vfprintf+0x5e2>
     e48:	0f 7e       	andi	r16, 0xEF	; 239
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <vfprintf+0x5e2>
     e4c:	e9 2c       	mov	r14, r9
     e4e:	01 c0       	rjmp	.+2      	; 0xe52 <vfprintf+0x5e4>
     e50:	e1 2e       	mov	r14, r17
     e52:	80 2f       	mov	r24, r16
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	04 ff       	sbrs	r16, 4
     e58:	0c c0       	rjmp	.+24     	; 0xe72 <vfprintf+0x604>
     e5a:	fe 01       	movw	r30, r28
     e5c:	e9 0d       	add	r30, r9
     e5e:	f1 1d       	adc	r31, r1
     e60:	20 81       	ld	r18, Z
     e62:	20 33       	cpi	r18, 0x30	; 48
     e64:	11 f4       	brne	.+4      	; 0xe6a <vfprintf+0x5fc>
     e66:	09 7e       	andi	r16, 0xE9	; 233
     e68:	09 c0       	rjmp	.+18     	; 0xe7c <vfprintf+0x60e>
     e6a:	e3 94       	inc	r14
     e6c:	02 ff       	sbrs	r16, 2
     e6e:	06 c0       	rjmp	.+12     	; 0xe7c <vfprintf+0x60e>
     e70:	04 c0       	rjmp	.+8      	; 0xe7a <vfprintf+0x60c>
     e72:	86 78       	andi	r24, 0x86	; 134
     e74:	90 70       	andi	r25, 0x00	; 0
     e76:	00 97       	sbiw	r24, 0x00	; 0
     e78:	09 f0       	breq	.+2      	; 0xe7c <vfprintf+0x60e>
     e7a:	e3 94       	inc	r14
     e7c:	a0 2e       	mov	r10, r16
     e7e:	bb 24       	eor	r11, r11
     e80:	03 fd       	sbrc	r16, 3
     e82:	13 c0       	rjmp	.+38     	; 0xeaa <vfprintf+0x63c>
     e84:	00 ff       	sbrs	r16, 0
     e86:	0e c0       	rjmp	.+28     	; 0xea4 <vfprintf+0x636>
     e88:	ef 14       	cp	r14, r15
     e8a:	28 f4       	brcc	.+10     	; 0xe96 <vfprintf+0x628>
     e8c:	19 2d       	mov	r17, r9
     e8e:	1f 0d       	add	r17, r15
     e90:	1e 19       	sub	r17, r14
     e92:	ef 2c       	mov	r14, r15
     e94:	07 c0       	rjmp	.+14     	; 0xea4 <vfprintf+0x636>
     e96:	19 2d       	mov	r17, r9
     e98:	05 c0       	rjmp	.+10     	; 0xea4 <vfprintf+0x636>
     e9a:	80 e2       	ldi	r24, 0x20	; 32
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	b6 01       	movw	r22, r12
     ea0:	9b d3       	rcall	.+1846   	; 0x15d8 <fputc>
     ea2:	e3 94       	inc	r14
     ea4:	ef 14       	cp	r14, r15
     ea6:	c8 f3       	brcs	.-14     	; 0xe9a <vfprintf+0x62c>
     ea8:	04 c0       	rjmp	.+8      	; 0xeb2 <vfprintf+0x644>
     eaa:	ef 14       	cp	r14, r15
     eac:	10 f4       	brcc	.+4      	; 0xeb2 <vfprintf+0x644>
     eae:	fe 18       	sub	r15, r14
     eb0:	01 c0       	rjmp	.+2      	; 0xeb4 <vfprintf+0x646>
     eb2:	ff 24       	eor	r15, r15
     eb4:	a4 fe       	sbrs	r10, 4
     eb6:	0e c0       	rjmp	.+28     	; 0xed4 <vfprintf+0x666>
     eb8:	80 e3       	ldi	r24, 0x30	; 48
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	b6 01       	movw	r22, r12
     ebe:	8c d3       	rcall	.+1816   	; 0x15d8 <fputc>
     ec0:	a2 fe       	sbrs	r10, 2
     ec2:	1d c0       	rjmp	.+58     	; 0xefe <vfprintf+0x690>
     ec4:	a1 fe       	sbrs	r10, 1
     ec6:	03 c0       	rjmp	.+6      	; 0xece <vfprintf+0x660>
     ec8:	88 e5       	ldi	r24, 0x58	; 88
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	10 c0       	rjmp	.+32     	; 0xeee <vfprintf+0x680>
     ece:	88 e7       	ldi	r24, 0x78	; 120
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	0d c0       	rjmp	.+26     	; 0xeee <vfprintf+0x680>
     ed4:	c5 01       	movw	r24, r10
     ed6:	86 78       	andi	r24, 0x86	; 134
     ed8:	90 70       	andi	r25, 0x00	; 0
     eda:	00 97       	sbiw	r24, 0x00	; 0
     edc:	81 f0       	breq	.+32     	; 0xefe <vfprintf+0x690>
     ede:	a1 fc       	sbrc	r10, 1
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <vfprintf+0x678>
     ee2:	80 e2       	ldi	r24, 0x20	; 32
     ee4:	01 c0       	rjmp	.+2      	; 0xee8 <vfprintf+0x67a>
     ee6:	8b e2       	ldi	r24, 0x2B	; 43
     ee8:	07 fd       	sbrc	r16, 7
     eea:	8d e2       	ldi	r24, 0x2D	; 45
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	b6 01       	movw	r22, r12
     ef0:	73 d3       	rcall	.+1766   	; 0x15d8 <fputc>
     ef2:	05 c0       	rjmp	.+10     	; 0xefe <vfprintf+0x690>
     ef4:	80 e3       	ldi	r24, 0x30	; 48
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	b6 01       	movw	r22, r12
     efa:	6e d3       	rcall	.+1756   	; 0x15d8 <fputc>
     efc:	11 50       	subi	r17, 0x01	; 1
     efe:	91 16       	cp	r9, r17
     f00:	c8 f3       	brcs	.-14     	; 0xef4 <vfprintf+0x686>
     f02:	9a 94       	dec	r9
     f04:	f1 01       	movw	r30, r2
     f06:	e9 0d       	add	r30, r9
     f08:	f1 1d       	adc	r31, r1
     f0a:	80 81       	ld	r24, Z
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	b6 01       	movw	r22, r12
     f10:	63 d3       	rcall	.+1734   	; 0x15d8 <fputc>
     f12:	99 20       	and	r9, r9
     f14:	b1 f7       	brne	.-20     	; 0xf02 <vfprintf+0x694>
     f16:	05 c0       	rjmp	.+10     	; 0xf22 <vfprintf+0x6b4>
     f18:	80 e2       	ldi	r24, 0x20	; 32
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	b6 01       	movw	r22, r12
     f1e:	5c d3       	rcall	.+1720   	; 0x15d8 <fputc>
     f20:	fa 94       	dec	r15
     f22:	ff 20       	and	r15, r15
     f24:	c9 f7       	brne	.-14     	; 0xf18 <vfprintf+0x6aa>
     f26:	b2 cc       	rjmp	.-1692   	; 0x88c <vfprintf+0x1e>
     f28:	f6 01       	movw	r30, r12
     f2a:	26 81       	ldd	r18, Z+6	; 0x06
     f2c:	37 81       	ldd	r19, Z+7	; 0x07
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <vfprintf+0x6c6>
     f30:	2f ef       	ldi	r18, 0xFF	; 255
     f32:	3f ef       	ldi	r19, 0xFF	; 255
     f34:	c9 01       	movw	r24, r18
     f36:	63 96       	adiw	r28, 0x13	; 19
     f38:	e2 e1       	ldi	r30, 0x12	; 18
     f3a:	45 c2       	rjmp	.+1162   	; 0x13c6 <__epilogue_restores__>

00000f3c <asin>:
     f3c:	9f 93       	push	r25
     f3e:	9f 77       	andi	r25, 0x7F	; 127
     f40:	ee e3       	ldi	r30, 0x3E	; 62
     f42:	89 37       	cpi	r24, 0x79	; 121
     f44:	9e 07       	cpc	r25, r30
     f46:	20 f4       	brcc	.+8      	; 0xf50 <asin+0x14>
     f48:	e6 e2       	ldi	r30, 0x26	; 38
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	8b d0       	rcall	.+278    	; 0x1064 <__fp_powsodd>
     f4e:	09 c0       	rjmp	.+18     	; 0xf62 <asin+0x26>
     f50:	49 d0       	rcall	.+146    	; 0xfe4 <__fp_arccos>
     f52:	90 58       	subi	r25, 0x80	; 128
     f54:	a2 ea       	ldi	r26, 0xA2	; 162
     f56:	2a ed       	ldi	r18, 0xDA	; 218
     f58:	3f e0       	ldi	r19, 0x0F	; 15
     f5a:	49 ec       	ldi	r20, 0xC9	; 201
     f5c:	5f e3       	ldi	r21, 0x3F	; 63
     f5e:	5b d1       	rcall	.+694    	; 0x1216 <__addsf3x>
     f60:	92 d0       	rcall	.+292    	; 0x1086 <__fp_round>
     f62:	0f 90       	pop	r0
     f64:	07 fc       	sbrc	r0, 7
     f66:	90 58       	subi	r25, 0x80	; 128
     f68:	08 95       	ret

00000f6a <__floatunsisf>:
     f6a:	e8 94       	clt
     f6c:	09 c0       	rjmp	.+18     	; 0xf80 <__floatsisf+0x12>

00000f6e <__floatsisf>:
     f6e:	97 fb       	bst	r25, 7
     f70:	3e f4       	brtc	.+14     	; 0xf80 <__floatsisf+0x12>
     f72:	90 95       	com	r25
     f74:	80 95       	com	r24
     f76:	70 95       	com	r23
     f78:	61 95       	neg	r22
     f7a:	7f 4f       	sbci	r23, 0xFF	; 255
     f7c:	8f 4f       	sbci	r24, 0xFF	; 255
     f7e:	9f 4f       	sbci	r25, 0xFF	; 255
     f80:	99 23       	and	r25, r25
     f82:	a9 f0       	breq	.+42     	; 0xfae <__floatsisf+0x40>
     f84:	f9 2f       	mov	r31, r25
     f86:	96 e9       	ldi	r25, 0x96	; 150
     f88:	bb 27       	eor	r27, r27
     f8a:	93 95       	inc	r25
     f8c:	f6 95       	lsr	r31
     f8e:	87 95       	ror	r24
     f90:	77 95       	ror	r23
     f92:	67 95       	ror	r22
     f94:	b7 95       	ror	r27
     f96:	f1 11       	cpse	r31, r1
     f98:	f8 cf       	rjmp	.-16     	; 0xf8a <__floatsisf+0x1c>
     f9a:	fa f4       	brpl	.+62     	; 0xfda <__floatsisf+0x6c>
     f9c:	bb 0f       	add	r27, r27
     f9e:	11 f4       	brne	.+4      	; 0xfa4 <__floatsisf+0x36>
     fa0:	60 ff       	sbrs	r22, 0
     fa2:	1b c0       	rjmp	.+54     	; 0xfda <__floatsisf+0x6c>
     fa4:	6f 5f       	subi	r22, 0xFF	; 255
     fa6:	7f 4f       	sbci	r23, 0xFF	; 255
     fa8:	8f 4f       	sbci	r24, 0xFF	; 255
     faa:	9f 4f       	sbci	r25, 0xFF	; 255
     fac:	16 c0       	rjmp	.+44     	; 0xfda <__floatsisf+0x6c>
     fae:	88 23       	and	r24, r24
     fb0:	11 f0       	breq	.+4      	; 0xfb6 <__floatsisf+0x48>
     fb2:	96 e9       	ldi	r25, 0x96	; 150
     fb4:	11 c0       	rjmp	.+34     	; 0xfd8 <__floatsisf+0x6a>
     fb6:	77 23       	and	r23, r23
     fb8:	21 f0       	breq	.+8      	; 0xfc2 <__floatsisf+0x54>
     fba:	9e e8       	ldi	r25, 0x8E	; 142
     fbc:	87 2f       	mov	r24, r23
     fbe:	76 2f       	mov	r23, r22
     fc0:	05 c0       	rjmp	.+10     	; 0xfcc <__floatsisf+0x5e>
     fc2:	66 23       	and	r22, r22
     fc4:	71 f0       	breq	.+28     	; 0xfe2 <__floatsisf+0x74>
     fc6:	96 e8       	ldi	r25, 0x86	; 134
     fc8:	86 2f       	mov	r24, r22
     fca:	70 e0       	ldi	r23, 0x00	; 0
     fcc:	60 e0       	ldi	r22, 0x00	; 0
     fce:	2a f0       	brmi	.+10     	; 0xfda <__floatsisf+0x6c>
     fd0:	9a 95       	dec	r25
     fd2:	66 0f       	add	r22, r22
     fd4:	77 1f       	adc	r23, r23
     fd6:	88 1f       	adc	r24, r24
     fd8:	da f7       	brpl	.-10     	; 0xfd0 <__floatsisf+0x62>
     fda:	88 0f       	add	r24, r24
     fdc:	96 95       	lsr	r25
     fde:	87 95       	ror	r24
     fe0:	97 f9       	bld	r25, 7
     fe2:	08 95       	ret

00000fe4 <__fp_arccos>:
     fe4:	df 93       	push	r29
     fe6:	cf 93       	push	r28
     fe8:	1f 93       	push	r17
     fea:	0f 93       	push	r16
     fec:	8b 01       	movw	r16, r22
     fee:	ec 01       	movw	r28, r24
     ff0:	ea e3       	ldi	r30, 0x3A	; 58
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	12 d0       	rcall	.+36     	; 0x101a <__fp_powser>
     ff6:	47 d0       	rcall	.+142    	; 0x1086 <__fp_round>
     ff8:	98 01       	movw	r18, r16
     ffa:	ae 01       	movw	r20, r28
     ffc:	8b 01       	movw	r16, r22
     ffe:	ec 01       	movw	r28, r24
    1000:	60 e0       	ldi	r22, 0x00	; 0
    1002:	70 e0       	ldi	r23, 0x00	; 0
    1004:	80 e8       	ldi	r24, 0x80	; 128
    1006:	9f e3       	ldi	r25, 0x3F	; 63
    1008:	f4 d0       	rcall	.+488    	; 0x11f2 <__subsf3>
    100a:	b5 d0       	rcall	.+362    	; 0x1176 <sqrt>
    100c:	98 01       	movw	r18, r16
    100e:	ae 01       	movw	r20, r28
    1010:	0f 91       	pop	r16
    1012:	1f 91       	pop	r17
    1014:	cf 91       	pop	r28
    1016:	df 91       	pop	r29
    1018:	53 c0       	rjmp	.+166    	; 0x10c0 <__mulsf3x>

0000101a <__fp_powser>:
    101a:	df 93       	push	r29
    101c:	cf 93       	push	r28
    101e:	1f 93       	push	r17
    1020:	0f 93       	push	r16
    1022:	ff 92       	push	r15
    1024:	ef 92       	push	r14
    1026:	df 92       	push	r13
    1028:	7b 01       	movw	r14, r22
    102a:	8c 01       	movw	r16, r24
    102c:	68 94       	set
    102e:	05 c0       	rjmp	.+10     	; 0x103a <__fp_powser+0x20>
    1030:	da 2e       	mov	r13, r26
    1032:	ef 01       	movw	r28, r30
    1034:	45 d0       	rcall	.+138    	; 0x10c0 <__mulsf3x>
    1036:	fe 01       	movw	r30, r28
    1038:	e8 94       	clt
    103a:	a5 91       	lpm	r26, Z+
    103c:	25 91       	lpm	r18, Z+
    103e:	35 91       	lpm	r19, Z+
    1040:	45 91       	lpm	r20, Z+
    1042:	55 91       	lpm	r21, Z+
    1044:	ae f3       	brts	.-22     	; 0x1030 <__fp_powser+0x16>
    1046:	ef 01       	movw	r28, r30
    1048:	e6 d0       	rcall	.+460    	; 0x1216 <__addsf3x>
    104a:	fe 01       	movw	r30, r28
    104c:	97 01       	movw	r18, r14
    104e:	a8 01       	movw	r20, r16
    1050:	da 94       	dec	r13
    1052:	79 f7       	brne	.-34     	; 0x1032 <__fp_powser+0x18>
    1054:	df 90       	pop	r13
    1056:	ef 90       	pop	r14
    1058:	ff 90       	pop	r15
    105a:	0f 91       	pop	r16
    105c:	1f 91       	pop	r17
    105e:	cf 91       	pop	r28
    1060:	df 91       	pop	r29
    1062:	08 95       	ret

00001064 <__fp_powsodd>:
    1064:	9f 93       	push	r25
    1066:	8f 93       	push	r24
    1068:	7f 93       	push	r23
    106a:	6f 93       	push	r22
    106c:	ff 93       	push	r31
    106e:	ef 93       	push	r30
    1070:	9b 01       	movw	r18, r22
    1072:	ac 01       	movw	r20, r24
    1074:	19 d0       	rcall	.+50     	; 0x10a8 <__mulsf3>
    1076:	ef 91       	pop	r30
    1078:	ff 91       	pop	r31
    107a:	cf df       	rcall	.-98     	; 0x101a <__fp_powser>
    107c:	2f 91       	pop	r18
    107e:	3f 91       	pop	r19
    1080:	4f 91       	pop	r20
    1082:	5f 91       	pop	r21
    1084:	11 c0       	rjmp	.+34     	; 0x10a8 <__mulsf3>

00001086 <__fp_round>:
    1086:	09 2e       	mov	r0, r25
    1088:	03 94       	inc	r0
    108a:	00 0c       	add	r0, r0
    108c:	11 f4       	brne	.+4      	; 0x1092 <__fp_round+0xc>
    108e:	88 23       	and	r24, r24
    1090:	52 f0       	brmi	.+20     	; 0x10a6 <__fp_round+0x20>
    1092:	bb 0f       	add	r27, r27
    1094:	40 f4       	brcc	.+16     	; 0x10a6 <__fp_round+0x20>
    1096:	bf 2b       	or	r27, r31
    1098:	11 f4       	brne	.+4      	; 0x109e <__fp_round+0x18>
    109a:	60 ff       	sbrs	r22, 0
    109c:	04 c0       	rjmp	.+8      	; 0x10a6 <__fp_round+0x20>
    109e:	6f 5f       	subi	r22, 0xFF	; 255
    10a0:	7f 4f       	sbci	r23, 0xFF	; 255
    10a2:	8f 4f       	sbci	r24, 0xFF	; 255
    10a4:	9f 4f       	sbci	r25, 0xFF	; 255
    10a6:	08 95       	ret

000010a8 <__mulsf3>:
    10a8:	0b d0       	rcall	.+22     	; 0x10c0 <__mulsf3x>
    10aa:	ed cf       	rjmp	.-38     	; 0x1086 <__fp_round>
    10ac:	25 d1       	rcall	.+586    	; 0x12f8 <__fp_pscA>
    10ae:	28 f0       	brcs	.+10     	; 0x10ba <__mulsf3+0x12>
    10b0:	2a d1       	rcall	.+596    	; 0x1306 <__fp_pscB>
    10b2:	18 f0       	brcs	.+6      	; 0x10ba <__mulsf3+0x12>
    10b4:	95 23       	and	r25, r21
    10b6:	09 f0       	breq	.+2      	; 0x10ba <__mulsf3+0x12>
    10b8:	01 c1       	rjmp	.+514    	; 0x12bc <__fp_inf>
    10ba:	14 c1       	rjmp	.+552    	; 0x12e4 <__fp_nan>
    10bc:	11 24       	eor	r1, r1
    10be:	4d c1       	rjmp	.+666    	; 0x135a <__fp_szero>

000010c0 <__mulsf3x>:
    10c0:	29 d1       	rcall	.+594    	; 0x1314 <__fp_split3>
    10c2:	a0 f3       	brcs	.-24     	; 0x10ac <__mulsf3+0x4>

000010c4 <__mulsf3_pse>:
    10c4:	95 9f       	mul	r25, r21
    10c6:	d1 f3       	breq	.-12     	; 0x10bc <__mulsf3+0x14>
    10c8:	95 0f       	add	r25, r21
    10ca:	50 e0       	ldi	r21, 0x00	; 0
    10cc:	55 1f       	adc	r21, r21
    10ce:	62 9f       	mul	r22, r18
    10d0:	f0 01       	movw	r30, r0
    10d2:	72 9f       	mul	r23, r18
    10d4:	bb 27       	eor	r27, r27
    10d6:	f0 0d       	add	r31, r0
    10d8:	b1 1d       	adc	r27, r1
    10da:	63 9f       	mul	r22, r19
    10dc:	aa 27       	eor	r26, r26
    10de:	f0 0d       	add	r31, r0
    10e0:	b1 1d       	adc	r27, r1
    10e2:	aa 1f       	adc	r26, r26
    10e4:	64 9f       	mul	r22, r20
    10e6:	66 27       	eor	r22, r22
    10e8:	b0 0d       	add	r27, r0
    10ea:	a1 1d       	adc	r26, r1
    10ec:	66 1f       	adc	r22, r22
    10ee:	82 9f       	mul	r24, r18
    10f0:	22 27       	eor	r18, r18
    10f2:	b0 0d       	add	r27, r0
    10f4:	a1 1d       	adc	r26, r1
    10f6:	62 1f       	adc	r22, r18
    10f8:	73 9f       	mul	r23, r19
    10fa:	b0 0d       	add	r27, r0
    10fc:	a1 1d       	adc	r26, r1
    10fe:	62 1f       	adc	r22, r18
    1100:	83 9f       	mul	r24, r19
    1102:	a0 0d       	add	r26, r0
    1104:	61 1d       	adc	r22, r1
    1106:	22 1f       	adc	r18, r18
    1108:	74 9f       	mul	r23, r20
    110a:	33 27       	eor	r19, r19
    110c:	a0 0d       	add	r26, r0
    110e:	61 1d       	adc	r22, r1
    1110:	23 1f       	adc	r18, r19
    1112:	84 9f       	mul	r24, r20
    1114:	60 0d       	add	r22, r0
    1116:	21 1d       	adc	r18, r1
    1118:	82 2f       	mov	r24, r18
    111a:	76 2f       	mov	r23, r22
    111c:	6a 2f       	mov	r22, r26
    111e:	11 24       	eor	r1, r1
    1120:	9f 57       	subi	r25, 0x7F	; 127
    1122:	50 40       	sbci	r21, 0x00	; 0
    1124:	8a f0       	brmi	.+34     	; 0x1148 <__mulsf3_pse+0x84>
    1126:	e1 f0       	breq	.+56     	; 0x1160 <__mulsf3_pse+0x9c>
    1128:	88 23       	and	r24, r24
    112a:	4a f0       	brmi	.+18     	; 0x113e <__mulsf3_pse+0x7a>
    112c:	ee 0f       	add	r30, r30
    112e:	ff 1f       	adc	r31, r31
    1130:	bb 1f       	adc	r27, r27
    1132:	66 1f       	adc	r22, r22
    1134:	77 1f       	adc	r23, r23
    1136:	88 1f       	adc	r24, r24
    1138:	91 50       	subi	r25, 0x01	; 1
    113a:	50 40       	sbci	r21, 0x00	; 0
    113c:	a9 f7       	brne	.-22     	; 0x1128 <__mulsf3_pse+0x64>
    113e:	9e 3f       	cpi	r25, 0xFE	; 254
    1140:	51 05       	cpc	r21, r1
    1142:	70 f0       	brcs	.+28     	; 0x1160 <__mulsf3_pse+0x9c>
    1144:	bb c0       	rjmp	.+374    	; 0x12bc <__fp_inf>
    1146:	09 c1       	rjmp	.+530    	; 0x135a <__fp_szero>
    1148:	5f 3f       	cpi	r21, 0xFF	; 255
    114a:	ec f3       	brlt	.-6      	; 0x1146 <__mulsf3_pse+0x82>
    114c:	98 3e       	cpi	r25, 0xE8	; 232
    114e:	dc f3       	brlt	.-10     	; 0x1146 <__mulsf3_pse+0x82>
    1150:	86 95       	lsr	r24
    1152:	77 95       	ror	r23
    1154:	67 95       	ror	r22
    1156:	b7 95       	ror	r27
    1158:	f7 95       	ror	r31
    115a:	e7 95       	ror	r30
    115c:	9f 5f       	subi	r25, 0xFF	; 255
    115e:	c1 f7       	brne	.-16     	; 0x1150 <__mulsf3_pse+0x8c>
    1160:	fe 2b       	or	r31, r30
    1162:	88 0f       	add	r24, r24
    1164:	91 1d       	adc	r25, r1
    1166:	96 95       	lsr	r25
    1168:	87 95       	ror	r24
    116a:	97 f9       	bld	r25, 7
    116c:	08 95       	ret
    116e:	11 f4       	brne	.+4      	; 0x1174 <__mulsf3_pse+0xb0>
    1170:	0e f4       	brtc	.+2      	; 0x1174 <__mulsf3_pse+0xb0>
    1172:	b8 c0       	rjmp	.+368    	; 0x12e4 <__fp_nan>
    1174:	a9 c0       	rjmp	.+338    	; 0x12c8 <__fp_mpack>

00001176 <sqrt>:
    1176:	d6 d0       	rcall	.+428    	; 0x1324 <__fp_splitA>
    1178:	d0 f3       	brcs	.-12     	; 0x116e <__mulsf3_pse+0xaa>
    117a:	99 23       	and	r25, r25
    117c:	d9 f3       	breq	.-10     	; 0x1174 <__mulsf3_pse+0xb0>
    117e:	ce f3       	brts	.-14     	; 0x1172 <__mulsf3_pse+0xae>
    1180:	9f 57       	subi	r25, 0x7F	; 127
    1182:	55 0b       	sbc	r21, r21
    1184:	87 ff       	sbrs	r24, 7
    1186:	b1 d0       	rcall	.+354    	; 0x12ea <__fp_norm2>
    1188:	00 24       	eor	r0, r0
    118a:	a0 e6       	ldi	r26, 0x60	; 96
    118c:	40 ea       	ldi	r20, 0xA0	; 160
    118e:	90 01       	movw	r18, r0
    1190:	80 58       	subi	r24, 0x80	; 128
    1192:	56 95       	lsr	r21
    1194:	97 95       	ror	r25
    1196:	28 f4       	brcc	.+10     	; 0x11a2 <sqrt+0x2c>
    1198:	80 5c       	subi	r24, 0xC0	; 192
    119a:	66 0f       	add	r22, r22
    119c:	77 1f       	adc	r23, r23
    119e:	88 1f       	adc	r24, r24
    11a0:	20 f0       	brcs	.+8      	; 0x11aa <sqrt+0x34>
    11a2:	26 17       	cp	r18, r22
    11a4:	37 07       	cpc	r19, r23
    11a6:	48 07       	cpc	r20, r24
    11a8:	30 f4       	brcc	.+12     	; 0x11b6 <sqrt+0x40>
    11aa:	62 1b       	sub	r22, r18
    11ac:	73 0b       	sbc	r23, r19
    11ae:	84 0b       	sbc	r24, r20
    11b0:	20 29       	or	r18, r0
    11b2:	31 29       	or	r19, r1
    11b4:	4a 2b       	or	r20, r26
    11b6:	a6 95       	lsr	r26
    11b8:	17 94       	ror	r1
    11ba:	07 94       	ror	r0
    11bc:	20 25       	eor	r18, r0
    11be:	31 25       	eor	r19, r1
    11c0:	4a 27       	eor	r20, r26
    11c2:	58 f7       	brcc	.-42     	; 0x119a <sqrt+0x24>
    11c4:	66 0f       	add	r22, r22
    11c6:	77 1f       	adc	r23, r23
    11c8:	88 1f       	adc	r24, r24
    11ca:	20 f0       	brcs	.+8      	; 0x11d4 <sqrt+0x5e>
    11cc:	26 17       	cp	r18, r22
    11ce:	37 07       	cpc	r19, r23
    11d0:	48 07       	cpc	r20, r24
    11d2:	30 f4       	brcc	.+12     	; 0x11e0 <sqrt+0x6a>
    11d4:	62 0b       	sbc	r22, r18
    11d6:	73 0b       	sbc	r23, r19
    11d8:	84 0b       	sbc	r24, r20
    11da:	20 0d       	add	r18, r0
    11dc:	31 1d       	adc	r19, r1
    11de:	41 1d       	adc	r20, r1
    11e0:	a0 95       	com	r26
    11e2:	81 f7       	brne	.-32     	; 0x11c4 <sqrt+0x4e>
    11e4:	b9 01       	movw	r22, r18
    11e6:	84 2f       	mov	r24, r20
    11e8:	91 58       	subi	r25, 0x81	; 129
    11ea:	88 0f       	add	r24, r24
    11ec:	96 95       	lsr	r25
    11ee:	87 95       	ror	r24
    11f0:	08 95       	ret

000011f2 <__subsf3>:
    11f2:	50 58       	subi	r21, 0x80	; 128

000011f4 <__addsf3>:
    11f4:	bb 27       	eor	r27, r27
    11f6:	aa 27       	eor	r26, r26
    11f8:	0e d0       	rcall	.+28     	; 0x1216 <__addsf3x>
    11fa:	45 cf       	rjmp	.-374    	; 0x1086 <__fp_round>
    11fc:	7d d0       	rcall	.+250    	; 0x12f8 <__fp_pscA>
    11fe:	30 f0       	brcs	.+12     	; 0x120c <__addsf3+0x18>
    1200:	82 d0       	rcall	.+260    	; 0x1306 <__fp_pscB>
    1202:	20 f0       	brcs	.+8      	; 0x120c <__addsf3+0x18>
    1204:	31 f4       	brne	.+12     	; 0x1212 <__addsf3+0x1e>
    1206:	9f 3f       	cpi	r25, 0xFF	; 255
    1208:	11 f4       	brne	.+4      	; 0x120e <__addsf3+0x1a>
    120a:	1e f4       	brtc	.+6      	; 0x1212 <__addsf3+0x1e>
    120c:	6b c0       	rjmp	.+214    	; 0x12e4 <__fp_nan>
    120e:	0e f4       	brtc	.+2      	; 0x1212 <__addsf3+0x1e>
    1210:	e0 95       	com	r30
    1212:	e7 fb       	bst	r30, 7
    1214:	53 c0       	rjmp	.+166    	; 0x12bc <__fp_inf>

00001216 <__addsf3x>:
    1216:	e9 2f       	mov	r30, r25
    1218:	7d d0       	rcall	.+250    	; 0x1314 <__fp_split3>
    121a:	80 f3       	brcs	.-32     	; 0x11fc <__addsf3+0x8>
    121c:	ba 17       	cp	r27, r26
    121e:	62 07       	cpc	r22, r18
    1220:	73 07       	cpc	r23, r19
    1222:	84 07       	cpc	r24, r20
    1224:	95 07       	cpc	r25, r21
    1226:	18 f0       	brcs	.+6      	; 0x122e <__addsf3x+0x18>
    1228:	71 f4       	brne	.+28     	; 0x1246 <__addsf3x+0x30>
    122a:	9e f5       	brtc	.+102    	; 0x1292 <__addsf3x+0x7c>
    122c:	95 c0       	rjmp	.+298    	; 0x1358 <__fp_zero>
    122e:	0e f4       	brtc	.+2      	; 0x1232 <__addsf3x+0x1c>
    1230:	e0 95       	com	r30
    1232:	0b 2e       	mov	r0, r27
    1234:	ba 2f       	mov	r27, r26
    1236:	a0 2d       	mov	r26, r0
    1238:	0b 01       	movw	r0, r22
    123a:	b9 01       	movw	r22, r18
    123c:	90 01       	movw	r18, r0
    123e:	0c 01       	movw	r0, r24
    1240:	ca 01       	movw	r24, r20
    1242:	a0 01       	movw	r20, r0
    1244:	11 24       	eor	r1, r1
    1246:	ff 27       	eor	r31, r31
    1248:	59 1b       	sub	r21, r25
    124a:	99 f0       	breq	.+38     	; 0x1272 <__addsf3x+0x5c>
    124c:	59 3f       	cpi	r21, 0xF9	; 249
    124e:	50 f4       	brcc	.+20     	; 0x1264 <__addsf3x+0x4e>
    1250:	50 3e       	cpi	r21, 0xE0	; 224
    1252:	68 f1       	brcs	.+90     	; 0x12ae <__addsf3x+0x98>
    1254:	1a 16       	cp	r1, r26
    1256:	f0 40       	sbci	r31, 0x00	; 0
    1258:	a2 2f       	mov	r26, r18
    125a:	23 2f       	mov	r18, r19
    125c:	34 2f       	mov	r19, r20
    125e:	44 27       	eor	r20, r20
    1260:	58 5f       	subi	r21, 0xF8	; 248
    1262:	f3 cf       	rjmp	.-26     	; 0x124a <__addsf3x+0x34>
    1264:	46 95       	lsr	r20
    1266:	37 95       	ror	r19
    1268:	27 95       	ror	r18
    126a:	a7 95       	ror	r26
    126c:	f0 40       	sbci	r31, 0x00	; 0
    126e:	53 95       	inc	r21
    1270:	c9 f7       	brne	.-14     	; 0x1264 <__addsf3x+0x4e>
    1272:	7e f4       	brtc	.+30     	; 0x1292 <__addsf3x+0x7c>
    1274:	1f 16       	cp	r1, r31
    1276:	ba 0b       	sbc	r27, r26
    1278:	62 0b       	sbc	r22, r18
    127a:	73 0b       	sbc	r23, r19
    127c:	84 0b       	sbc	r24, r20
    127e:	ba f0       	brmi	.+46     	; 0x12ae <__addsf3x+0x98>
    1280:	91 50       	subi	r25, 0x01	; 1
    1282:	a1 f0       	breq	.+40     	; 0x12ac <__addsf3x+0x96>
    1284:	ff 0f       	add	r31, r31
    1286:	bb 1f       	adc	r27, r27
    1288:	66 1f       	adc	r22, r22
    128a:	77 1f       	adc	r23, r23
    128c:	88 1f       	adc	r24, r24
    128e:	c2 f7       	brpl	.-16     	; 0x1280 <__addsf3x+0x6a>
    1290:	0e c0       	rjmp	.+28     	; 0x12ae <__addsf3x+0x98>
    1292:	ba 0f       	add	r27, r26
    1294:	62 1f       	adc	r22, r18
    1296:	73 1f       	adc	r23, r19
    1298:	84 1f       	adc	r24, r20
    129a:	48 f4       	brcc	.+18     	; 0x12ae <__addsf3x+0x98>
    129c:	87 95       	ror	r24
    129e:	77 95       	ror	r23
    12a0:	67 95       	ror	r22
    12a2:	b7 95       	ror	r27
    12a4:	f7 95       	ror	r31
    12a6:	9e 3f       	cpi	r25, 0xFE	; 254
    12a8:	08 f0       	brcs	.+2      	; 0x12ac <__addsf3x+0x96>
    12aa:	b3 cf       	rjmp	.-154    	; 0x1212 <__addsf3+0x1e>
    12ac:	93 95       	inc	r25
    12ae:	88 0f       	add	r24, r24
    12b0:	08 f0       	brcs	.+2      	; 0x12b4 <__addsf3x+0x9e>
    12b2:	99 27       	eor	r25, r25
    12b4:	ee 0f       	add	r30, r30
    12b6:	97 95       	ror	r25
    12b8:	87 95       	ror	r24
    12ba:	08 95       	ret

000012bc <__fp_inf>:
    12bc:	97 f9       	bld	r25, 7
    12be:	9f 67       	ori	r25, 0x7F	; 127
    12c0:	80 e8       	ldi	r24, 0x80	; 128
    12c2:	70 e0       	ldi	r23, 0x00	; 0
    12c4:	60 e0       	ldi	r22, 0x00	; 0
    12c6:	08 95       	ret

000012c8 <__fp_mpack>:
    12c8:	9f 3f       	cpi	r25, 0xFF	; 255
    12ca:	31 f0       	breq	.+12     	; 0x12d8 <__fp_mpack_finite+0xc>

000012cc <__fp_mpack_finite>:
    12cc:	91 50       	subi	r25, 0x01	; 1
    12ce:	20 f4       	brcc	.+8      	; 0x12d8 <__fp_mpack_finite+0xc>
    12d0:	87 95       	ror	r24
    12d2:	77 95       	ror	r23
    12d4:	67 95       	ror	r22
    12d6:	b7 95       	ror	r27
    12d8:	88 0f       	add	r24, r24
    12da:	91 1d       	adc	r25, r1
    12dc:	96 95       	lsr	r25
    12de:	87 95       	ror	r24
    12e0:	97 f9       	bld	r25, 7
    12e2:	08 95       	ret

000012e4 <__fp_nan>:
    12e4:	9f ef       	ldi	r25, 0xFF	; 255
    12e6:	80 ec       	ldi	r24, 0xC0	; 192
    12e8:	08 95       	ret

000012ea <__fp_norm2>:
    12ea:	91 50       	subi	r25, 0x01	; 1
    12ec:	50 40       	sbci	r21, 0x00	; 0
    12ee:	66 0f       	add	r22, r22
    12f0:	77 1f       	adc	r23, r23
    12f2:	88 1f       	adc	r24, r24
    12f4:	d2 f7       	brpl	.-12     	; 0x12ea <__fp_norm2>
    12f6:	08 95       	ret

000012f8 <__fp_pscA>:
    12f8:	00 24       	eor	r0, r0
    12fa:	0a 94       	dec	r0
    12fc:	16 16       	cp	r1, r22
    12fe:	17 06       	cpc	r1, r23
    1300:	18 06       	cpc	r1, r24
    1302:	09 06       	cpc	r0, r25
    1304:	08 95       	ret

00001306 <__fp_pscB>:
    1306:	00 24       	eor	r0, r0
    1308:	0a 94       	dec	r0
    130a:	12 16       	cp	r1, r18
    130c:	13 06       	cpc	r1, r19
    130e:	14 06       	cpc	r1, r20
    1310:	05 06       	cpc	r0, r21
    1312:	08 95       	ret

00001314 <__fp_split3>:
    1314:	57 fd       	sbrc	r21, 7
    1316:	90 58       	subi	r25, 0x80	; 128
    1318:	44 0f       	add	r20, r20
    131a:	55 1f       	adc	r21, r21
    131c:	59 f0       	breq	.+22     	; 0x1334 <__fp_splitA+0x10>
    131e:	5f 3f       	cpi	r21, 0xFF	; 255
    1320:	71 f0       	breq	.+28     	; 0x133e <__fp_splitA+0x1a>
    1322:	47 95       	ror	r20

00001324 <__fp_splitA>:
    1324:	88 0f       	add	r24, r24
    1326:	97 fb       	bst	r25, 7
    1328:	99 1f       	adc	r25, r25
    132a:	61 f0       	breq	.+24     	; 0x1344 <__fp_splitA+0x20>
    132c:	9f 3f       	cpi	r25, 0xFF	; 255
    132e:	79 f0       	breq	.+30     	; 0x134e <__fp_splitA+0x2a>
    1330:	87 95       	ror	r24
    1332:	08 95       	ret
    1334:	12 16       	cp	r1, r18
    1336:	13 06       	cpc	r1, r19
    1338:	14 06       	cpc	r1, r20
    133a:	55 1f       	adc	r21, r21
    133c:	f2 cf       	rjmp	.-28     	; 0x1322 <__fp_split3+0xe>
    133e:	46 95       	lsr	r20
    1340:	f1 df       	rcall	.-30     	; 0x1324 <__fp_splitA>
    1342:	08 c0       	rjmp	.+16     	; 0x1354 <__fp_splitA+0x30>
    1344:	16 16       	cp	r1, r22
    1346:	17 06       	cpc	r1, r23
    1348:	18 06       	cpc	r1, r24
    134a:	99 1f       	adc	r25, r25
    134c:	f1 cf       	rjmp	.-30     	; 0x1330 <__fp_splitA+0xc>
    134e:	86 95       	lsr	r24
    1350:	71 05       	cpc	r23, r1
    1352:	61 05       	cpc	r22, r1
    1354:	08 94       	sec
    1356:	08 95       	ret

00001358 <__fp_zero>:
    1358:	e8 94       	clt

0000135a <__fp_szero>:
    135a:	bb 27       	eor	r27, r27
    135c:	66 27       	eor	r22, r22
    135e:	77 27       	eor	r23, r23
    1360:	cb 01       	movw	r24, r22
    1362:	97 f9       	bld	r25, 7
    1364:	08 95       	ret

00001366 <__udivmodhi4>:
    1366:	aa 1b       	sub	r26, r26
    1368:	bb 1b       	sub	r27, r27
    136a:	51 e1       	ldi	r21, 0x11	; 17
    136c:	07 c0       	rjmp	.+14     	; 0x137c <__udivmodhi4_ep>

0000136e <__udivmodhi4_loop>:
    136e:	aa 1f       	adc	r26, r26
    1370:	bb 1f       	adc	r27, r27
    1372:	a6 17       	cp	r26, r22
    1374:	b7 07       	cpc	r27, r23
    1376:	10 f0       	brcs	.+4      	; 0x137c <__udivmodhi4_ep>
    1378:	a6 1b       	sub	r26, r22
    137a:	b7 0b       	sbc	r27, r23

0000137c <__udivmodhi4_ep>:
    137c:	88 1f       	adc	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	5a 95       	dec	r21
    1382:	a9 f7       	brne	.-22     	; 0x136e <__udivmodhi4_loop>
    1384:	80 95       	com	r24
    1386:	90 95       	com	r25
    1388:	bc 01       	movw	r22, r24
    138a:	cd 01       	movw	r24, r26
    138c:	08 95       	ret

0000138e <__prologue_saves__>:
    138e:	2f 92       	push	r2
    1390:	3f 92       	push	r3
    1392:	4f 92       	push	r4
    1394:	5f 92       	push	r5
    1396:	6f 92       	push	r6
    1398:	7f 92       	push	r7
    139a:	8f 92       	push	r8
    139c:	9f 92       	push	r9
    139e:	af 92       	push	r10
    13a0:	bf 92       	push	r11
    13a2:	cf 92       	push	r12
    13a4:	df 92       	push	r13
    13a6:	ef 92       	push	r14
    13a8:	ff 92       	push	r15
    13aa:	0f 93       	push	r16
    13ac:	1f 93       	push	r17
    13ae:	cf 93       	push	r28
    13b0:	df 93       	push	r29
    13b2:	cd b7       	in	r28, 0x3d	; 61
    13b4:	de b7       	in	r29, 0x3e	; 62
    13b6:	ca 1b       	sub	r28, r26
    13b8:	db 0b       	sbc	r29, r27
    13ba:	0f b6       	in	r0, 0x3f	; 63
    13bc:	f8 94       	cli
    13be:	de bf       	out	0x3e, r29	; 62
    13c0:	0f be       	out	0x3f, r0	; 63
    13c2:	cd bf       	out	0x3d, r28	; 61
    13c4:	09 94       	ijmp

000013c6 <__epilogue_restores__>:
    13c6:	2a 88       	ldd	r2, Y+18	; 0x12
    13c8:	39 88       	ldd	r3, Y+17	; 0x11
    13ca:	48 88       	ldd	r4, Y+16	; 0x10
    13cc:	5f 84       	ldd	r5, Y+15	; 0x0f
    13ce:	6e 84       	ldd	r6, Y+14	; 0x0e
    13d0:	7d 84       	ldd	r7, Y+13	; 0x0d
    13d2:	8c 84       	ldd	r8, Y+12	; 0x0c
    13d4:	9b 84       	ldd	r9, Y+11	; 0x0b
    13d6:	aa 84       	ldd	r10, Y+10	; 0x0a
    13d8:	b9 84       	ldd	r11, Y+9	; 0x09
    13da:	c8 84       	ldd	r12, Y+8	; 0x08
    13dc:	df 80       	ldd	r13, Y+7	; 0x07
    13de:	ee 80       	ldd	r14, Y+6	; 0x06
    13e0:	fd 80       	ldd	r15, Y+5	; 0x05
    13e2:	0c 81       	ldd	r16, Y+4	; 0x04
    13e4:	1b 81       	ldd	r17, Y+3	; 0x03
    13e6:	aa 81       	ldd	r26, Y+2	; 0x02
    13e8:	b9 81       	ldd	r27, Y+1	; 0x01
    13ea:	ce 0f       	add	r28, r30
    13ec:	d1 1d       	adc	r29, r1
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	f8 94       	cli
    13f2:	de bf       	out	0x3e, r29	; 62
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	cd bf       	out	0x3d, r28	; 61
    13f8:	ed 01       	movw	r28, r26
    13fa:	08 95       	ret

000013fc <__ftoa_engine>:
    13fc:	28 30       	cpi	r18, 0x08	; 8
    13fe:	08 f0       	brcs	.+2      	; 0x1402 <__ftoa_engine+0x6>
    1400:	27 e0       	ldi	r18, 0x07	; 7
    1402:	33 27       	eor	r19, r19
    1404:	da 01       	movw	r26, r20
    1406:	99 0f       	add	r25, r25
    1408:	31 1d       	adc	r19, r1
    140a:	87 fd       	sbrc	r24, 7
    140c:	91 60       	ori	r25, 0x01	; 1
    140e:	00 96       	adiw	r24, 0x00	; 0
    1410:	61 05       	cpc	r22, r1
    1412:	71 05       	cpc	r23, r1
    1414:	39 f4       	brne	.+14     	; 0x1424 <__ftoa_engine+0x28>
    1416:	32 60       	ori	r19, 0x02	; 2
    1418:	2e 5f       	subi	r18, 0xFE	; 254
    141a:	3d 93       	st	X+, r19
    141c:	30 e3       	ldi	r19, 0x30	; 48
    141e:	2a 95       	dec	r18
    1420:	e1 f7       	brne	.-8      	; 0x141a <__ftoa_engine+0x1e>
    1422:	08 95       	ret
    1424:	9f 3f       	cpi	r25, 0xFF	; 255
    1426:	30 f0       	brcs	.+12     	; 0x1434 <__ftoa_engine+0x38>
    1428:	80 38       	cpi	r24, 0x80	; 128
    142a:	71 05       	cpc	r23, r1
    142c:	61 05       	cpc	r22, r1
    142e:	09 f0       	breq	.+2      	; 0x1432 <__ftoa_engine+0x36>
    1430:	3c 5f       	subi	r19, 0xFC	; 252
    1432:	3c 5f       	subi	r19, 0xFC	; 252
    1434:	3d 93       	st	X+, r19
    1436:	91 30       	cpi	r25, 0x01	; 1
    1438:	08 f0       	brcs	.+2      	; 0x143c <__ftoa_engine+0x40>
    143a:	80 68       	ori	r24, 0x80	; 128
    143c:	91 1d       	adc	r25, r1
    143e:	df 93       	push	r29
    1440:	cf 93       	push	r28
    1442:	1f 93       	push	r17
    1444:	0f 93       	push	r16
    1446:	ff 92       	push	r15
    1448:	ef 92       	push	r14
    144a:	19 2f       	mov	r17, r25
    144c:	98 7f       	andi	r25, 0xF8	; 248
    144e:	96 95       	lsr	r25
    1450:	e9 2f       	mov	r30, r25
    1452:	96 95       	lsr	r25
    1454:	96 95       	lsr	r25
    1456:	e9 0f       	add	r30, r25
    1458:	ff 27       	eor	r31, r31
    145a:	ec 53       	subi	r30, 0x3C	; 60
    145c:	ff 4f       	sbci	r31, 0xFF	; 255
    145e:	99 27       	eor	r25, r25
    1460:	33 27       	eor	r19, r19
    1462:	ee 24       	eor	r14, r14
    1464:	ff 24       	eor	r15, r15
    1466:	a7 01       	movw	r20, r14
    1468:	e7 01       	movw	r28, r14
    146a:	05 90       	lpm	r0, Z+
    146c:	08 94       	sec
    146e:	07 94       	ror	r0
    1470:	28 f4       	brcc	.+10     	; 0x147c <__ftoa_engine+0x80>
    1472:	36 0f       	add	r19, r22
    1474:	e7 1e       	adc	r14, r23
    1476:	f8 1e       	adc	r15, r24
    1478:	49 1f       	adc	r20, r25
    147a:	51 1d       	adc	r21, r1
    147c:	66 0f       	add	r22, r22
    147e:	77 1f       	adc	r23, r23
    1480:	88 1f       	adc	r24, r24
    1482:	99 1f       	adc	r25, r25
    1484:	06 94       	lsr	r0
    1486:	a1 f7       	brne	.-24     	; 0x1470 <__ftoa_engine+0x74>
    1488:	05 90       	lpm	r0, Z+
    148a:	07 94       	ror	r0
    148c:	28 f4       	brcc	.+10     	; 0x1498 <__ftoa_engine+0x9c>
    148e:	e7 0e       	add	r14, r23
    1490:	f8 1e       	adc	r15, r24
    1492:	49 1f       	adc	r20, r25
    1494:	56 1f       	adc	r21, r22
    1496:	c1 1d       	adc	r28, r1
    1498:	77 0f       	add	r23, r23
    149a:	88 1f       	adc	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	66 1f       	adc	r22, r22
    14a0:	06 94       	lsr	r0
    14a2:	a1 f7       	brne	.-24     	; 0x148c <__ftoa_engine+0x90>
    14a4:	05 90       	lpm	r0, Z+
    14a6:	07 94       	ror	r0
    14a8:	28 f4       	brcc	.+10     	; 0x14b4 <__ftoa_engine+0xb8>
    14aa:	f8 0e       	add	r15, r24
    14ac:	49 1f       	adc	r20, r25
    14ae:	56 1f       	adc	r21, r22
    14b0:	c7 1f       	adc	r28, r23
    14b2:	d1 1d       	adc	r29, r1
    14b4:	88 0f       	add	r24, r24
    14b6:	99 1f       	adc	r25, r25
    14b8:	66 1f       	adc	r22, r22
    14ba:	77 1f       	adc	r23, r23
    14bc:	06 94       	lsr	r0
    14be:	a1 f7       	brne	.-24     	; 0x14a8 <__ftoa_engine+0xac>
    14c0:	05 90       	lpm	r0, Z+
    14c2:	07 94       	ror	r0
    14c4:	20 f4       	brcc	.+8      	; 0x14ce <__ftoa_engine+0xd2>
    14c6:	49 0f       	add	r20, r25
    14c8:	56 1f       	adc	r21, r22
    14ca:	c7 1f       	adc	r28, r23
    14cc:	d8 1f       	adc	r29, r24
    14ce:	99 0f       	add	r25, r25
    14d0:	66 1f       	adc	r22, r22
    14d2:	77 1f       	adc	r23, r23
    14d4:	88 1f       	adc	r24, r24
    14d6:	06 94       	lsr	r0
    14d8:	a9 f7       	brne	.-22     	; 0x14c4 <__ftoa_engine+0xc8>
    14da:	84 91       	lpm	r24, Z+
    14dc:	10 95       	com	r17
    14de:	17 70       	andi	r17, 0x07	; 7
    14e0:	41 f0       	breq	.+16     	; 0x14f2 <__ftoa_engine+0xf6>
    14e2:	d6 95       	lsr	r29
    14e4:	c7 95       	ror	r28
    14e6:	57 95       	ror	r21
    14e8:	47 95       	ror	r20
    14ea:	f7 94       	ror	r15
    14ec:	e7 94       	ror	r14
    14ee:	1a 95       	dec	r17
    14f0:	c1 f7       	brne	.-16     	; 0x14e2 <__ftoa_engine+0xe6>
    14f2:	ea e6       	ldi	r30, 0x6A	; 106
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	68 94       	set
    14f8:	15 90       	lpm	r1, Z+
    14fa:	15 91       	lpm	r17, Z+
    14fc:	35 91       	lpm	r19, Z+
    14fe:	65 91       	lpm	r22, Z+
    1500:	95 91       	lpm	r25, Z+
    1502:	05 90       	lpm	r0, Z+
    1504:	7f e2       	ldi	r23, 0x2F	; 47
    1506:	73 95       	inc	r23
    1508:	e1 18       	sub	r14, r1
    150a:	f1 0a       	sbc	r15, r17
    150c:	43 0b       	sbc	r20, r19
    150e:	56 0b       	sbc	r21, r22
    1510:	c9 0b       	sbc	r28, r25
    1512:	d0 09       	sbc	r29, r0
    1514:	c0 f7       	brcc	.-16     	; 0x1506 <__ftoa_engine+0x10a>
    1516:	e1 0c       	add	r14, r1
    1518:	f1 1e       	adc	r15, r17
    151a:	43 1f       	adc	r20, r19
    151c:	56 1f       	adc	r21, r22
    151e:	c9 1f       	adc	r28, r25
    1520:	d0 1d       	adc	r29, r0
    1522:	7e f4       	brtc	.+30     	; 0x1542 <__ftoa_engine+0x146>
    1524:	70 33       	cpi	r23, 0x30	; 48
    1526:	11 f4       	brne	.+4      	; 0x152c <__ftoa_engine+0x130>
    1528:	8a 95       	dec	r24
    152a:	e6 cf       	rjmp	.-52     	; 0x14f8 <__ftoa_engine+0xfc>
    152c:	e8 94       	clt
    152e:	01 50       	subi	r16, 0x01	; 1
    1530:	30 f0       	brcs	.+12     	; 0x153e <__ftoa_engine+0x142>
    1532:	08 0f       	add	r16, r24
    1534:	0a f4       	brpl	.+2      	; 0x1538 <__ftoa_engine+0x13c>
    1536:	00 27       	eor	r16, r16
    1538:	02 17       	cp	r16, r18
    153a:	08 f4       	brcc	.+2      	; 0x153e <__ftoa_engine+0x142>
    153c:	20 2f       	mov	r18, r16
    153e:	23 95       	inc	r18
    1540:	02 2f       	mov	r16, r18
    1542:	7a 33       	cpi	r23, 0x3A	; 58
    1544:	28 f0       	brcs	.+10     	; 0x1550 <__ftoa_engine+0x154>
    1546:	79 e3       	ldi	r23, 0x39	; 57
    1548:	7d 93       	st	X+, r23
    154a:	2a 95       	dec	r18
    154c:	e9 f7       	brne	.-6      	; 0x1548 <__ftoa_engine+0x14c>
    154e:	10 c0       	rjmp	.+32     	; 0x1570 <__ftoa_engine+0x174>
    1550:	7d 93       	st	X+, r23
    1552:	2a 95       	dec	r18
    1554:	89 f6       	brne	.-94     	; 0x14f8 <__ftoa_engine+0xfc>
    1556:	06 94       	lsr	r0
    1558:	97 95       	ror	r25
    155a:	67 95       	ror	r22
    155c:	37 95       	ror	r19
    155e:	17 95       	ror	r17
    1560:	17 94       	ror	r1
    1562:	e1 18       	sub	r14, r1
    1564:	f1 0a       	sbc	r15, r17
    1566:	43 0b       	sbc	r20, r19
    1568:	56 0b       	sbc	r21, r22
    156a:	c9 0b       	sbc	r28, r25
    156c:	d0 09       	sbc	r29, r0
    156e:	98 f0       	brcs	.+38     	; 0x1596 <__ftoa_engine+0x19a>
    1570:	23 95       	inc	r18
    1572:	7e 91       	ld	r23, -X
    1574:	73 95       	inc	r23
    1576:	7a 33       	cpi	r23, 0x3A	; 58
    1578:	08 f0       	brcs	.+2      	; 0x157c <__ftoa_engine+0x180>
    157a:	70 e3       	ldi	r23, 0x30	; 48
    157c:	7c 93       	st	X, r23
    157e:	20 13       	cpse	r18, r16
    1580:	b8 f7       	brcc	.-18     	; 0x1570 <__ftoa_engine+0x174>
    1582:	7e 91       	ld	r23, -X
    1584:	70 61       	ori	r23, 0x10	; 16
    1586:	7d 93       	st	X+, r23
    1588:	30 f0       	brcs	.+12     	; 0x1596 <__ftoa_engine+0x19a>
    158a:	83 95       	inc	r24
    158c:	71 e3       	ldi	r23, 0x31	; 49
    158e:	7d 93       	st	X+, r23
    1590:	70 e3       	ldi	r23, 0x30	; 48
    1592:	2a 95       	dec	r18
    1594:	e1 f7       	brne	.-8      	; 0x158e <__ftoa_engine+0x192>
    1596:	11 24       	eor	r1, r1
    1598:	ef 90       	pop	r14
    159a:	ff 90       	pop	r15
    159c:	0f 91       	pop	r16
    159e:	1f 91       	pop	r17
    15a0:	cf 91       	pop	r28
    15a2:	df 91       	pop	r29
    15a4:	99 27       	eor	r25, r25
    15a6:	87 fd       	sbrc	r24, 7
    15a8:	90 95       	com	r25
    15aa:	08 95       	ret

000015ac <strnlen_P>:
    15ac:	fc 01       	movw	r30, r24
    15ae:	05 90       	lpm	r0, Z+
    15b0:	61 50       	subi	r22, 0x01	; 1
    15b2:	70 40       	sbci	r23, 0x00	; 0
    15b4:	01 10       	cpse	r0, r1
    15b6:	d8 f7       	brcc	.-10     	; 0x15ae <strnlen_P+0x2>
    15b8:	80 95       	com	r24
    15ba:	90 95       	com	r25
    15bc:	8e 0f       	add	r24, r30
    15be:	9f 1f       	adc	r25, r31
    15c0:	08 95       	ret

000015c2 <strnlen>:
    15c2:	fc 01       	movw	r30, r24
    15c4:	61 50       	subi	r22, 0x01	; 1
    15c6:	70 40       	sbci	r23, 0x00	; 0
    15c8:	01 90       	ld	r0, Z+
    15ca:	01 10       	cpse	r0, r1
    15cc:	d8 f7       	brcc	.-10     	; 0x15c4 <strnlen+0x2>
    15ce:	80 95       	com	r24
    15d0:	90 95       	com	r25
    15d2:	8e 0f       	add	r24, r30
    15d4:	9f 1f       	adc	r25, r31
    15d6:	08 95       	ret

000015d8 <fputc>:
    15d8:	0f 93       	push	r16
    15da:	1f 93       	push	r17
    15dc:	cf 93       	push	r28
    15de:	df 93       	push	r29
    15e0:	8c 01       	movw	r16, r24
    15e2:	eb 01       	movw	r28, r22
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	81 ff       	sbrs	r24, 1
    15e8:	1b c0       	rjmp	.+54     	; 0x1620 <fputc+0x48>
    15ea:	82 ff       	sbrs	r24, 2
    15ec:	0d c0       	rjmp	.+26     	; 0x1608 <fputc+0x30>
    15ee:	2e 81       	ldd	r18, Y+6	; 0x06
    15f0:	3f 81       	ldd	r19, Y+7	; 0x07
    15f2:	8c 81       	ldd	r24, Y+4	; 0x04
    15f4:	9d 81       	ldd	r25, Y+5	; 0x05
    15f6:	28 17       	cp	r18, r24
    15f8:	39 07       	cpc	r19, r25
    15fa:	64 f4       	brge	.+24     	; 0x1614 <fputc+0x3c>
    15fc:	e8 81       	ld	r30, Y
    15fe:	f9 81       	ldd	r31, Y+1	; 0x01
    1600:	01 93       	st	Z+, r16
    1602:	f9 83       	std	Y+1, r31	; 0x01
    1604:	e8 83       	st	Y, r30
    1606:	06 c0       	rjmp	.+12     	; 0x1614 <fputc+0x3c>
    1608:	e8 85       	ldd	r30, Y+8	; 0x08
    160a:	f9 85       	ldd	r31, Y+9	; 0x09
    160c:	80 2f       	mov	r24, r16
    160e:	09 95       	icall
    1610:	00 97       	sbiw	r24, 0x00	; 0
    1612:	31 f4       	brne	.+12     	; 0x1620 <fputc+0x48>
    1614:	8e 81       	ldd	r24, Y+6	; 0x06
    1616:	9f 81       	ldd	r25, Y+7	; 0x07
    1618:	01 96       	adiw	r24, 0x01	; 1
    161a:	9f 83       	std	Y+7, r25	; 0x07
    161c:	8e 83       	std	Y+6, r24	; 0x06
    161e:	02 c0       	rjmp	.+4      	; 0x1624 <fputc+0x4c>
    1620:	0f ef       	ldi	r16, 0xFF	; 255
    1622:	1f ef       	ldi	r17, 0xFF	; 255
    1624:	c8 01       	movw	r24, r16
    1626:	df 91       	pop	r29
    1628:	cf 91       	pop	r28
    162a:	1f 91       	pop	r17
    162c:	0f 91       	pop	r16
    162e:	08 95       	ret

00001630 <printf>:
    1630:	a0 e0       	ldi	r26, 0x00	; 0
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	ed e1       	ldi	r30, 0x1D	; 29
    1636:	fb e0       	ldi	r31, 0x0B	; 11
    1638:	ba ce       	rjmp	.-652    	; 0x13ae <__prologue_saves__+0x20>
    163a:	fe 01       	movw	r30, r28
    163c:	35 96       	adiw	r30, 0x05	; 5
    163e:	61 91       	ld	r22, Z+
    1640:	71 91       	ld	r23, Z+
    1642:	80 91 f2 00 	lds	r24, 0x00F2
    1646:	90 91 f3 00 	lds	r25, 0x00F3
    164a:	af 01       	movw	r20, r30
    164c:	10 d9       	rcall	.-3552   	; 0x86e <vfprintf>
    164e:	20 96       	adiw	r28, 0x00	; 0
    1650:	e2 e0       	ldi	r30, 0x02	; 2
    1652:	c9 ce       	rjmp	.-622    	; 0x13e6 <__epilogue_restores__+0x20>

00001654 <__ultoa_invert>:
    1654:	fa 01       	movw	r30, r20
    1656:	aa 27       	eor	r26, r26
    1658:	28 30       	cpi	r18, 0x08	; 8
    165a:	51 f1       	breq	.+84     	; 0x16b0 <__ultoa_invert+0x5c>
    165c:	20 31       	cpi	r18, 0x10	; 16
    165e:	81 f1       	breq	.+96     	; 0x16c0 <__ultoa_invert+0x6c>
    1660:	e8 94       	clt
    1662:	6f 93       	push	r22
    1664:	6e 7f       	andi	r22, 0xFE	; 254
    1666:	6e 5f       	subi	r22, 0xFE	; 254
    1668:	7f 4f       	sbci	r23, 0xFF	; 255
    166a:	8f 4f       	sbci	r24, 0xFF	; 255
    166c:	9f 4f       	sbci	r25, 0xFF	; 255
    166e:	af 4f       	sbci	r26, 0xFF	; 255
    1670:	b1 e0       	ldi	r27, 0x01	; 1
    1672:	3e d0       	rcall	.+124    	; 0x16f0 <__ultoa_invert+0x9c>
    1674:	b4 e0       	ldi	r27, 0x04	; 4
    1676:	3c d0       	rcall	.+120    	; 0x16f0 <__ultoa_invert+0x9c>
    1678:	67 0f       	add	r22, r23
    167a:	78 1f       	adc	r23, r24
    167c:	89 1f       	adc	r24, r25
    167e:	9a 1f       	adc	r25, r26
    1680:	a1 1d       	adc	r26, r1
    1682:	68 0f       	add	r22, r24
    1684:	79 1f       	adc	r23, r25
    1686:	8a 1f       	adc	r24, r26
    1688:	91 1d       	adc	r25, r1
    168a:	a1 1d       	adc	r26, r1
    168c:	6a 0f       	add	r22, r26
    168e:	71 1d       	adc	r23, r1
    1690:	81 1d       	adc	r24, r1
    1692:	91 1d       	adc	r25, r1
    1694:	a1 1d       	adc	r26, r1
    1696:	20 d0       	rcall	.+64     	; 0x16d8 <__ultoa_invert+0x84>
    1698:	09 f4       	brne	.+2      	; 0x169c <__ultoa_invert+0x48>
    169a:	68 94       	set
    169c:	3f 91       	pop	r19
    169e:	2a e0       	ldi	r18, 0x0A	; 10
    16a0:	26 9f       	mul	r18, r22
    16a2:	11 24       	eor	r1, r1
    16a4:	30 19       	sub	r19, r0
    16a6:	30 5d       	subi	r19, 0xD0	; 208
    16a8:	31 93       	st	Z+, r19
    16aa:	de f6       	brtc	.-74     	; 0x1662 <__ultoa_invert+0xe>
    16ac:	cf 01       	movw	r24, r30
    16ae:	08 95       	ret
    16b0:	46 2f       	mov	r20, r22
    16b2:	47 70       	andi	r20, 0x07	; 7
    16b4:	40 5d       	subi	r20, 0xD0	; 208
    16b6:	41 93       	st	Z+, r20
    16b8:	b3 e0       	ldi	r27, 0x03	; 3
    16ba:	0f d0       	rcall	.+30     	; 0x16da <__ultoa_invert+0x86>
    16bc:	c9 f7       	brne	.-14     	; 0x16b0 <__ultoa_invert+0x5c>
    16be:	f6 cf       	rjmp	.-20     	; 0x16ac <__ultoa_invert+0x58>
    16c0:	46 2f       	mov	r20, r22
    16c2:	4f 70       	andi	r20, 0x0F	; 15
    16c4:	40 5d       	subi	r20, 0xD0	; 208
    16c6:	4a 33       	cpi	r20, 0x3A	; 58
    16c8:	18 f0       	brcs	.+6      	; 0x16d0 <__ultoa_invert+0x7c>
    16ca:	49 5d       	subi	r20, 0xD9	; 217
    16cc:	31 fd       	sbrc	r19, 1
    16ce:	40 52       	subi	r20, 0x20	; 32
    16d0:	41 93       	st	Z+, r20
    16d2:	02 d0       	rcall	.+4      	; 0x16d8 <__ultoa_invert+0x84>
    16d4:	a9 f7       	brne	.-22     	; 0x16c0 <__ultoa_invert+0x6c>
    16d6:	ea cf       	rjmp	.-44     	; 0x16ac <__ultoa_invert+0x58>
    16d8:	b4 e0       	ldi	r27, 0x04	; 4
    16da:	a6 95       	lsr	r26
    16dc:	97 95       	ror	r25
    16de:	87 95       	ror	r24
    16e0:	77 95       	ror	r23
    16e2:	67 95       	ror	r22
    16e4:	ba 95       	dec	r27
    16e6:	c9 f7       	brne	.-14     	; 0x16da <__ultoa_invert+0x86>
    16e8:	00 97       	sbiw	r24, 0x00	; 0
    16ea:	61 05       	cpc	r22, r1
    16ec:	71 05       	cpc	r23, r1
    16ee:	08 95       	ret
    16f0:	9b 01       	movw	r18, r22
    16f2:	ac 01       	movw	r20, r24
    16f4:	0a 2e       	mov	r0, r26
    16f6:	06 94       	lsr	r0
    16f8:	57 95       	ror	r21
    16fa:	47 95       	ror	r20
    16fc:	37 95       	ror	r19
    16fe:	27 95       	ror	r18
    1700:	ba 95       	dec	r27
    1702:	c9 f7       	brne	.-14     	; 0x16f6 <__ultoa_invert+0xa2>
    1704:	62 0f       	add	r22, r18
    1706:	73 1f       	adc	r23, r19
    1708:	84 1f       	adc	r24, r20
    170a:	95 1f       	adc	r25, r21
    170c:	a0 1d       	adc	r26, r0
    170e:	08 95       	ret

00001710 <_exit>:
    1710:	f8 94       	cli

00001712 <__stop_program>:
    1712:	ff cf       	rjmp	.-2      	; 0x1712 <__stop_program>
