
RetroliteV20.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000030  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000031  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001e2  00000000  00000000  0000019d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000011d  00000000  00000000  0000037f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000219  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  000006b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000f4  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000e0  00000000  00000000  000007ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000100  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
																									
void init()
{
//	Timer0_Init();
//	adc_init();
}
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	11 d0       	rcall	.+34     	; 0x4e <main>
  2c:	5b c0       	rjmp	.+182    	; 0xe4 <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <PortInit>:

void PortInit(void) // initialize port B inputs and outputs
{
	set_input(DDRB, Switch1);
  30:	e7 e3       	ldi	r30, 0x37	; 55
  32:	f0 e0       	ldi	r31, 0x00	; 0
  34:	80 81       	ld	r24, Z
  36:	8e 7f       	andi	r24, 0xFE	; 254
  38:	80 83       	st	Z, r24
	set_input(DDRB, ReadADC2);
  3a:	80 81       	ld	r24, Z
  3c:	8f 7e       	andi	r24, 0xEF	; 239
  3e:	80 83       	st	Z, r24
	set_output(DDRB, RelayStatus);
  40:	80 81       	ld	r24, Z
  42:	82 60       	ori	r24, 0x02	; 2
  44:	80 83       	st	Z, r24
	set_output(DDRB, TransmissionEn);
  46:	80 81       	ld	r24, Z
  48:	84 60       	ori	r24, 0x04	; 4
  4a:	80 83       	st	Z, r24
}
  4c:	08 95       	ret

0000004e <main>:

int main(void)
{
  4e:	ff 92       	push	r15
  50:	0f 93       	push	r16
  52:	1f 93       	push	r17
  54:	cf 93       	push	r28
  56:	df 93       	push	r29
	init();
	PortInit(); // inputs and outputs initialize
  58:	eb df       	rcall	.-42     	; 0x30 <PortInit>
	output_low(PORTB, TransmissionEn);
  5a:	e8 e3       	ldi	r30, 0x38	; 56
  5c:	f0 e0       	ldi	r31, 0x00	; 0
  5e:	80 81       	ld	r24, Z
  60:	8b 7f       	andi	r24, 0xFB	; 251
  62:	80 83       	st	Z, r24
	output_high(PORTB, RelayStatus);
  64:	80 81       	ld	r24, Z
  66:	82 60       	ori	r24, 0x02	; 2
  68:	80 83       	st	Z, r24
  6a:	80 e2       	ldi	r24, 0x20	; 32
  6c:	9e e4       	ldi	r25, 0x4E	; 78
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  6e:	29 e1       	ldi	r18, 0x19	; 25
  70:	30 e0       	ldi	r19, 0x00	; 0
  72:	f9 01       	movw	r30, r18
  74:	31 97       	sbiw	r30, 0x01	; 1
  76:	f1 f7       	brne	.-4      	; 0x74 <main+0x26>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  78:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  7a:	d9 f7       	brne	.-10     	; 0x72 <main+0x24>
	_delay_ms(2000);
	output_high(PORTB, TransmissionEn);
  7c:	e8 e3       	ldi	r30, 0x38	; 56
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	80 81       	ld	r24, Z
  82:	84 60       	ori	r24, 0x04	; 4
  84:	80 83       	st	Z, r24
    while(1)
    {
		if(is_clear(PINB, Switch1))
  86:	a6 e3       	ldi	r26, 0x36	; 54
  88:	b0 e0       	ldi	r27, 0x00	; 0
  8a:	c4 e2       	ldi	r28, 0x24	; 36
  8c:	d4 ef       	ldi	r29, 0xF4	; 244
		{
			_delay_ms(250);
			if(is_set(PINB, Switch1))
			{
				output_low(PORTB, TransmissionEn);
				output_toggle(PORTB, RelayStatus);
  8e:	ff 24       	eor	r15, r15
  90:	68 94       	set
  92:	f1 f8       	bld	r15, 1
  94:	00 e1       	ldi	r16, 0x10	; 16
  96:	17 e2       	ldi	r17, 0x27	; 39
  98:	49 e1       	ldi	r20, 0x19	; 25
  9a:	50 e0       	ldi	r21, 0x00	; 0
	output_high(PORTB, RelayStatus);
	_delay_ms(2000);
	output_high(PORTB, TransmissionEn);
    while(1)
    {
		if(is_clear(PINB, Switch1))
  9c:	62 ee       	ldi	r22, 0xE2	; 226
  9e:	74 e0       	ldi	r23, 0x04	; 4
  a0:	8c 91       	ld	r24, X
  a2:	80 fd       	sbrc	r24, 0
  a4:	18 c0       	rjmp	.+48     	; 0xd6 <main+0x88>
  a6:	ce 01       	movw	r24, r28
  a8:	01 97       	sbiw	r24, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <main+0x5a>
		{
			_delay_ms(250);
			if(is_set(PINB, Switch1))
  ac:	8c 91       	ld	r24, X
  ae:	80 ff       	sbrs	r24, 0
  b0:	0e c0       	rjmp	.+28     	; 0xce <main+0x80>
			{
				output_low(PORTB, TransmissionEn);
  b2:	80 81       	ld	r24, Z
  b4:	8b 7f       	andi	r24, 0xFB	; 251
  b6:	80 83       	st	Z, r24
				output_toggle(PORTB, RelayStatus);
  b8:	80 81       	ld	r24, Z
  ba:	8f 25       	eor	r24, r15
  bc:	80 83       	st	Z, r24
  be:	98 01       	movw	r18, r16
  c0:	ca 01       	movw	r24, r20
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <main+0x74>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ca:	d1 f7       	brne	.-12     	; 0xc0 <main+0x72>
  cc:	07 c0       	rjmp	.+14     	; 0xdc <main+0x8e>
				_delay_ms(1000);
			}
			else
			{
				output_high(PORTB, TransmissionEn);
  ce:	80 81       	ld	r24, Z
  d0:	84 60       	ori	r24, 0x04	; 4
  d2:	80 83       	st	Z, r24
  d4:	03 c0       	rjmp	.+6      	; 0xdc <main+0x8e>
			}
		
		}
		else
		{
			output_high(PORTB, TransmissionEn);
  d6:	80 81       	ld	r24, Z
  d8:	84 60       	ori	r24, 0x04	; 4
  da:	80 83       	st	Z, r24
  dc:	cb 01       	movw	r24, r22
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <main+0x90>
  e2:	de cf       	rjmp	.-68     	; 0xa0 <main+0x52>

000000e4 <_exit>:
  e4:	f8 94       	cli

000000e6 <__stop_program>:
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <__stop_program>
