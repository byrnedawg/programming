
Attiny85_PSX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000080  00800060  000005bc  00000650  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002b  008000e0  008000e0  000006d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000700  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  0000073c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c1e  00000000  00000000  000007d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003e5  00000000  00000000  000013f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c3  00000000  00000000  000017d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  00001b9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000359  00000000  00000000  00001d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000051f  00000000  00000000  00002059  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002578  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	ec eb       	ldi	r30, 0xBC	; 188
  32:	f5 e0       	ldi	r31, 0x05	; 5
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a0 3e       	cpi	r26, 0xE0	; 224
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	a0 ee       	ldi	r26, 0xE0	; 224
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	ab 30       	cpi	r26, 0x0B	; 11
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	10 d0       	rcall	.+32     	; 0x72 <main>
  52:	b2 c2       	rjmp	.+1380   	; 0x5b8 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <LCD_String>:

#define is_set(portpin,pin) (portpin & (1<<pin)) == (1<<pin)          //(for input) checks if the ... if(is_set(PINB,PB0)) input is high (Logic 1)
#define is_clear(portpin,pin) (portpin & (1<<pin)) == (0<<pin)		//(for input) checks if the ... if(is_clear(PINB,PB0)) input is low (Logic 0)

void LCD_String (char *string)
{
  56:	cf 93       	push	r28
  58:	df 93       	push	r29
  5a:	ec 01       	movw	r28, r24
	while (*string)
  5c:	88 81       	ld	r24, Y
  5e:	88 23       	and	r24, r24
  60:	29 f0       	breq	.+10     	; 0x6c <LCD_String+0x16>
  62:	21 96       	adiw	r28, 0x01	; 1
	dbg_putchar(*string++);
  64:	8d d2       	rcall	.+1306   	; 0x580 <dbg_putchar>
#define is_set(portpin,pin) (portpin & (1<<pin)) == (1<<pin)          //(for input) checks if the ... if(is_set(PINB,PB0)) input is high (Logic 1)
#define is_clear(portpin,pin) (portpin & (1<<pin)) == (0<<pin)		//(for input) checks if the ... if(is_clear(PINB,PB0)) input is low (Logic 0)

void LCD_String (char *string)
{
	while (*string)
  66:	89 91       	ld	r24, Y+
  68:	81 11       	cpse	r24, r1
  6a:	fc cf       	rjmp	.-8      	; 0x64 <LCD_String+0xe>
	dbg_putchar(*string++);
}
  6c:	df 91       	pop	r29
  6e:	cf 91       	pop	r28
  70:	08 95       	ret

00000072 <main>:

int main(void)
{
	//char c = 'A';

	dbg_tx_init();
  72:	c0 9a       	sbi	0x18, 0	; 24
  74:	b8 9a       	sbi	0x17, 0	; 23
	
	psx_init(&PORTB, PB1, &PORTB, PB2, &PORTB, PB3, &PORTB, PB4);
  76:	68 94       	set
  78:	aa 24       	eor	r10, r10
  7a:	a2 f8       	bld	r10, 2
  7c:	0f 2e       	mov	r0, r31
  7e:	f8 e3       	ldi	r31, 0x38	; 56
  80:	cf 2e       	mov	r12, r31
  82:	d1 2c       	mov	r13, r1
  84:	f0 2d       	mov	r31, r0
  86:	0f 2e       	mov	r0, r31
  88:	f3 e0       	ldi	r31, 0x03	; 3
  8a:	ef 2e       	mov	r14, r31
  8c:	f0 2d       	mov	r31, r0
  8e:	08 e3       	ldi	r16, 0x38	; 56
  90:	10 e0       	ldi	r17, 0x00	; 0
  92:	22 e0       	ldi	r18, 0x02	; 2
  94:	48 e3       	ldi	r20, 0x38	; 56
  96:	50 e0       	ldi	r21, 0x00	; 0
  98:	61 e0       	ldi	r22, 0x01	; 1
  9a:	88 e3       	ldi	r24, 0x38	; 56
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	95 d1       	rcall	.+810    	; 0x3ca <psx_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	8f e1       	ldi	r24, 0x1F	; 31
  a2:	9e e4       	ldi	r25, 0x4E	; 78
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <main+0x32>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <main+0x38>
  aa:	00 00       	nop
	_delay_ms(10);
	
	sei();
  ac:	78 94       	sei
	
	LCD_String("Greg ");
  ae:	87 e7       	ldi	r24, 0x77	; 119
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	d1 df       	rcall	.-94     	; 0x56 <LCD_String>
	while (1)
	{
		psx_read_gamepad();
  b4:	77 d1       	rcall	.+750    	; 0x3a4 <psx_read_gamepad>
  b6:	8f e1       	ldi	r24, 0x1F	; 31
  b8:	9e e4       	ldi	r25, 0x4E	; 78
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <main+0x48>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x4e>
  c0:	00 00       	nop
	
		_delay_ms(10);
		//printInt(psx_buttons());
		if(psx_button(PSB_CROSS))
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	90 e4       	ldi	r25, 0x40	; 64
  c6:	4f d2       	rcall	.+1182   	; 0x566 <psx_button>
  c8:	88 23       	and	r24, r24
  ca:	19 f0       	breq	.+6      	; 0xd2 <main+0x60>
		{
			LCD_String("X Button ");
  cc:	8d e7       	ldi	r24, 0x7D	; 125
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	c2 df       	rcall	.-124    	; 0x56 <LCD_String>
		}
		if(psx_button(PSB_CIRCLE))
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	90 e2       	ldi	r25, 0x20	; 32
  d6:	47 d2       	rcall	.+1166   	; 0x566 <psx_button>
  d8:	88 23       	and	r24, r24
  da:	19 f0       	breq	.+6      	; 0xe2 <main+0x70>
		{
			LCD_String("Circle ");
  dc:	87 e8       	ldi	r24, 0x87	; 135
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	ba df       	rcall	.-140    	; 0x56 <LCD_String>
		}
		if(psx_button(PSB_SQUARE))
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	90 e8       	ldi	r25, 0x80	; 128
  e6:	3f d2       	rcall	.+1150   	; 0x566 <psx_button>
  e8:	88 23       	and	r24, r24
  ea:	19 f0       	breq	.+6      	; 0xf2 <main+0x80>
		{
			LCD_String("Square ");
  ec:	8f e8       	ldi	r24, 0x8F	; 143
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	b2 df       	rcall	.-156    	; 0x56 <LCD_String>
		}
		if(psx_button(PSB_TRIANGLE))
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	90 e1       	ldi	r25, 0x10	; 16
  f6:	37 d2       	rcall	.+1134   	; 0x566 <psx_button>
  f8:	88 23       	and	r24, r24
  fa:	19 f0       	breq	.+6      	; 0x102 <main+0x90>
		{
			LCD_String("Triangle ");
  fc:	87 e9       	ldi	r24, 0x97	; 151
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	aa df       	rcall	.-172    	; 0x56 <LCD_String>
		}
		if(psx_button(PSB_R1))
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	98 e0       	ldi	r25, 0x08	; 8
 106:	2f d2       	rcall	.+1118   	; 0x566 <psx_button>
 108:	88 23       	and	r24, r24
 10a:	19 f0       	breq	.+6      	; 0x112 <main+0xa0>
		{
			LCD_String("R1 ");
 10c:	81 ea       	ldi	r24, 0xA1	; 161
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	a2 df       	rcall	.-188    	; 0x56 <LCD_String>
		}
		if(psx_button(PSB_R2))
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	92 e0       	ldi	r25, 0x02	; 2
 116:	27 d2       	rcall	.+1102   	; 0x566 <psx_button>
 118:	88 23       	and	r24, r24
 11a:	19 f0       	breq	.+6      	; 0x122 <main+0xb0>
		{
			LCD_String("R2 ");
 11c:	85 ea       	ldi	r24, 0xA5	; 165
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	9a df       	rcall	.-204    	; 0x56 <LCD_String>
		}
		if(psx_button(PSB_L1))
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	94 e0       	ldi	r25, 0x04	; 4
 126:	1f d2       	rcall	.+1086   	; 0x566 <psx_button>
 128:	88 23       	and	r24, r24
 12a:	19 f0       	breq	.+6      	; 0x132 <main+0xc0>
		{
			LCD_String("L1 ");
 12c:	89 ea       	ldi	r24, 0xA9	; 169
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	92 df       	rcall	.-220    	; 0x56 <LCD_String>
		}
		if(psx_button(PSB_L2))
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	17 d2       	rcall	.+1070   	; 0x566 <psx_button>
 138:	88 23       	and	r24, r24
 13a:	19 f0       	breq	.+6      	; 0x142 <main+0xd0>
		{
			LCD_String("L2 ");
 13c:	8d ea       	ldi	r24, 0xAD	; 173
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	8a df       	rcall	.-236    	; 0x56 <LCD_String>
		}
		if(psx_button(PSB_START))
 142:	88 e0       	ldi	r24, 0x08	; 8
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0f d2       	rcall	.+1054   	; 0x566 <psx_button>
 148:	88 23       	and	r24, r24
 14a:	19 f0       	breq	.+6      	; 0x152 <main+0xe0>
		{
			LCD_String("Start ");
 14c:	81 eb       	ldi	r24, 0xB1	; 177
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	82 df       	rcall	.-252    	; 0x56 <LCD_String>
		}
		if(psx_button(PSB_SELECT))
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	07 d2       	rcall	.+1038   	; 0x566 <psx_button>
 158:	88 23       	and	r24, r24
 15a:	19 f0       	breq	.+6      	; 0x162 <main+0xf0>
		{
			LCD_String("Select ");
 15c:	88 eb       	ldi	r24, 0xB8	; 184
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	7a df       	rcall	.-268    	; 0x56 <LCD_String>
		}
		if(psx_button(PSB_PAD_UP))
 162:	80 e1       	ldi	r24, 0x10	; 16
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	ff d1       	rcall	.+1022   	; 0x566 <psx_button>
 168:	88 23       	and	r24, r24
 16a:	19 f0       	breq	.+6      	; 0x172 <main+0x100>
		{
			LCD_String("UP ");
 16c:	80 ec       	ldi	r24, 0xC0	; 192
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	72 df       	rcall	.-284    	; 0x56 <LCD_String>
		}
		if(psx_button(PSB_PAD_DOWN))
 172:	80 e4       	ldi	r24, 0x40	; 64
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	f7 d1       	rcall	.+1006   	; 0x566 <psx_button>
 178:	88 23       	and	r24, r24
 17a:	19 f0       	breq	.+6      	; 0x182 <main+0x110>
		{
			LCD_String("DOWN ");
 17c:	84 ec       	ldi	r24, 0xC4	; 196
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	6a df       	rcall	.-300    	; 0x56 <LCD_String>
		}
		if(psx_button(PSB_PAD_LEFT))
 182:	80 e8       	ldi	r24, 0x80	; 128
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	ef d1       	rcall	.+990    	; 0x566 <psx_button>
 188:	88 23       	and	r24, r24
 18a:	19 f0       	breq	.+6      	; 0x192 <main+0x120>
		{
			LCD_String("LEFT ");
 18c:	8a ec       	ldi	r24, 0xCA	; 202
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	62 df       	rcall	.-316    	; 0x56 <LCD_String>
		}
		if(psx_button(PSB_PAD_RIGHT))
 192:	80 e2       	ldi	r24, 0x20	; 32
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	e7 d1       	rcall	.+974    	; 0x566 <psx_button>
 198:	88 23       	and	r24, r24
 19a:	19 f0       	breq	.+6      	; 0x1a2 <main+0x130>
		{
			LCD_String("RIGHT ");
 19c:	80 ed       	ldi	r24, 0xD0	; 208
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	5a df       	rcall	.-332    	; 0x56 <LCD_String>
		}
		if(psx_button(PSB_L3))
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	df d1       	rcall	.+958    	; 0x566 <psx_button>
 1a8:	88 23       	and	r24, r24
 1aa:	19 f0       	breq	.+6      	; 0x1b2 <main+0x140>
		{
			LCD_String("L3 ");
 1ac:	87 ed       	ldi	r24, 0xD7	; 215
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	52 df       	rcall	.-348    	; 0x56 <LCD_String>
		}
		if(psx_button(PSB_R3))
 1b2:	84 e0       	ldi	r24, 0x04	; 4
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	d7 d1       	rcall	.+942    	; 0x566 <psx_button>
 1b8:	88 23       	and	r24, r24
 1ba:	19 f0       	breq	.+6      	; 0x1c2 <main+0x150>
		{
			LCD_String("R3 ");
 1bc:	8b ed       	ldi	r24, 0xDB	; 219
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	4a df       	rcall	.-364    	; 0x56 <LCD_String>
 1c2:	9f ef       	ldi	r25, 0xFF	; 255
 1c4:	21 ee       	ldi	r18, 0xE1	; 225
 1c6:	84 e0       	ldi	r24, 0x04	; 4
 1c8:	91 50       	subi	r25, 0x01	; 1
 1ca:	20 40       	sbci	r18, 0x00	; 0
 1cc:	80 40       	sbci	r24, 0x00	; 0
 1ce:	e1 f7       	brne	.-8      	; 0x1c8 <main+0x156>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <main+0x160>
 1d2:	00 00       	nop
 1d4:	6f cf       	rjmp	.-290    	; 0xb4 <main+0x42>

000001d6 <_psx_gamepad_shift>:


/* Private.  The actual serial transfer.  Handles clock.  The PSX controller is full 
 * duplex, so this will send a byte as well as receive one.
 */
uint8_t _psx_gamepad_shift(uint8_t transmit_byte) {
 1d6:	1f 93       	push	r17
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	40 e0       	ldi	r20, 0x00	; 0
 1de:	50 e0       	ldi	r21, 0x00	; 0
  uint8_t received_byte = 0;
 1e0:	10 e0       	ldi	r17, 0x00	; 0
  for(uint8_t i = 0; i < 8; i++) {
    //Drop the clock...
    *_clock_port &= ~_BV(_clock_pin);
 1e2:	e1 e0       	ldi	r30, 0x01	; 1
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
  
    //...set the command (outgoing) pin...
    if (transmit_byte & (_BV(i))) {
 1e6:	a8 2f       	mov	r26, r24
 1e8:	b0 e0       	ldi	r27, 0x00	; 0
 */
uint8_t _psx_gamepad_shift(uint8_t transmit_byte) {
  uint8_t received_byte = 0;
  for(uint8_t i = 0; i < 8; i++) {
    //Drop the clock...
    *_clock_port &= ~_BV(_clock_pin);
 1ea:	c0 91 07 01 	lds	r28, 0x0107
 1ee:	d0 91 08 01 	lds	r29, 0x0108
 1f2:	28 81       	ld	r18, Y
 1f4:	bf 01       	movw	r22, r30
 1f6:	00 90 f8 00 	lds	r0, 0x00F8
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <_psx_gamepad_shift+0x2a>
 1fc:	66 0f       	add	r22, r22
 1fe:	77 1f       	adc	r23, r23
 200:	0a 94       	dec	r0
 202:	e2 f7       	brpl	.-8      	; 0x1fc <_psx_gamepad_shift+0x26>
 204:	96 2f       	mov	r25, r22
 206:	90 95       	com	r25
 208:	92 23       	and	r25, r18
 20a:	98 83       	st	Y, r25
  
    //...set the command (outgoing) pin...
    if (transmit_byte & (_BV(i))) {
 20c:	64 2f       	mov	r22, r20
 20e:	cd 01       	movw	r24, r26
 210:	04 2e       	mov	r0, r20
 212:	02 c0       	rjmp	.+4      	; 0x218 <_psx_gamepad_shift+0x42>
 214:	95 95       	asr	r25
 216:	87 95       	ror	r24
 218:	0a 94       	dec	r0
 21a:	e2 f7       	brpl	.-8      	; 0x214 <_psx_gamepad_shift+0x3e>
 21c:	80 ff       	sbrs	r24, 0
 21e:	10 c0       	rjmp	.+32     	; 0x240 <_psx_gamepad_shift+0x6a>
      *_command_port |= _BV(_command_pin);
 220:	c0 91 05 01 	lds	r28, 0x0105
 224:	d0 91 06 01 	lds	r29, 0x0106
 228:	28 81       	ld	r18, Y
 22a:	cf 01       	movw	r24, r30
 22c:	00 90 f7 00 	lds	r0, 0x00F7
 230:	02 c0       	rjmp	.+4      	; 0x236 <_psx_gamepad_shift+0x60>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	0a 94       	dec	r0
 238:	e2 f7       	brpl	.-8      	; 0x232 <_psx_gamepad_shift+0x5c>
 23a:	82 2b       	or	r24, r18
 23c:	88 83       	st	Y, r24
 23e:	11 c0       	rjmp	.+34     	; 0x262 <__stack+0x3>
    }
    else {
      *_command_port &= ~_BV(_command_pin);
 240:	c0 91 05 01 	lds	r28, 0x0105
 244:	d0 91 06 01 	lds	r29, 0x0106
 248:	28 81       	ld	r18, Y
 24a:	cf 01       	movw	r24, r30
 24c:	00 90 f7 00 	lds	r0, 0x00F7
 250:	02 c0       	rjmp	.+4      	; 0x256 <_psx_gamepad_shift+0x80>
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	0a 94       	dec	r0
 258:	e2 f7       	brpl	.-8      	; 0x252 <_psx_gamepad_shift+0x7c>
 25a:	98 2f       	mov	r25, r24
 25c:	90 95       	com	r25
 25e:	92 23       	and	r25, r18
 260:	98 83       	st	Y, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 262:	8a e1       	ldi	r24, 0x1A	; 26
 264:	8a 95       	dec	r24
 266:	f1 f7       	brne	.-4      	; 0x264 <__stack+0x5>
 268:	00 c0       	rjmp	.+0      	; 0x26a <__stack+0xb>
    
    //...wait half the clock cycle...
    _delay_us(CTRL_CLK);
    
    //...raise the clock to HIGH...
    *_clock_port |= _BV(_clock_pin);
 26a:	c0 91 07 01 	lds	r28, 0x0107
 26e:	d0 91 08 01 	lds	r29, 0x0108
 272:	98 81       	ld	r25, Y
 274:	9f 01       	movw	r18, r30
 276:	00 90 f8 00 	lds	r0, 0x00F8
 27a:	02 c0       	rjmp	.+4      	; 0x280 <__stack+0x21>
 27c:	22 0f       	add	r18, r18
 27e:	33 1f       	adc	r19, r19
 280:	0a 94       	dec	r0
 282:	e2 f7       	brpl	.-8      	; 0x27c <__stack+0x1d>
 284:	29 2b       	or	r18, r25
 286:	28 83       	st	Y, r18
    
    //...at which point you read the data...
    if(*_data_in & _BV(_data_pin)) {
 288:	c0 91 01 01 	lds	r28, 0x0101
 28c:	d0 91 02 01 	lds	r29, 0x0102
 290:	28 81       	ld	r18, Y
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	00 90 f5 00 	lds	r0, 0x00F5
 298:	02 c0       	rjmp	.+4      	; 0x29e <__stack+0x3f>
 29a:	35 95       	asr	r19
 29c:	27 95       	ror	r18
 29e:	0a 94       	dec	r0
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <__stack+0x3b>
 2a2:	20 ff       	sbrs	r18, 0
 2a4:	07 c0       	rjmp	.+14     	; 0x2b4 <__stack+0x55>
      received_byte |= _BV(i);
 2a6:	cf 01       	movw	r24, r30
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <__stack+0x4f>
 2aa:	88 0f       	add	r24, r24
 2ac:	99 1f       	adc	r25, r25
 2ae:	6a 95       	dec	r22
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <__stack+0x4b>
 2b2:	18 2b       	or	r17, r24
 2b4:	8a e1       	ldi	r24, 0x1A	; 26
 2b6:	8a 95       	dec	r24
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <__stack+0x57>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <__stack+0x5d>
 2bc:	4f 5f       	subi	r20, 0xFF	; 255
 2be:	5f 4f       	sbci	r21, 0xFF	; 255
/* Private.  The actual serial transfer.  Handles clock.  The PSX controller is full 
 * duplex, so this will send a byte as well as receive one.
 */
uint8_t _psx_gamepad_shift(uint8_t transmit_byte) {
  uint8_t received_byte = 0;
  for(uint8_t i = 0; i < 8; i++) {
 2c0:	48 30       	cpi	r20, 0x08	; 8
 2c2:	51 05       	cpc	r21, r1
 2c4:	09 f0       	breq	.+2      	; 0x2c8 <__stack+0x69>
 2c6:	91 cf       	rjmp	.-222    	; 0x1ea <_psx_gamepad_shift+0x14>
    //...and wait the other half of the clock cycle
    _delay_us(CTRL_CLK);
  }

  //Clock should already be high at this point, but just to be sure...
  *_clock_port |= _BV(_clock_pin);
 2c8:	e0 91 07 01 	lds	r30, 0x0107
 2cc:	f0 91 08 01 	lds	r31, 0x0108
 2d0:	20 81       	ld	r18, Z
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	00 90 f8 00 	lds	r0, 0x00F8
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <__stack+0x81>
 2dc:	88 0f       	add	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	0a 94       	dec	r0
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <__stack+0x7d>
 2e4:	82 2b       	or	r24, r18
 2e6:	80 83       	st	Z, r24
  
  return received_byte;
}
 2e8:	81 2f       	mov	r24, r17
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	1f 91       	pop	r17
 2f0:	08 95       	ret

000002f2 <_psx_send_command>:

/* Private.  Sends a command using the shift method.
 */
void _psx_send_command(uint8_t send_data[], uint8_t size){
 2f2:	0f 93       	push	r16
 2f4:	1f 93       	push	r17
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
  //Before you submit each command packet, you must set attention low; once
  // you are done each packet, return it high.  You have to toggle the line before
  // you submit another command.
  *_attention_port &= ~(_BV(_attention_pin));
 2fa:	a0 91 03 01 	lds	r26, 0x0103
 2fe:	b0 91 04 01 	lds	r27, 0x0104
 302:	5c 91       	ld	r21, X
 304:	21 e0       	ldi	r18, 0x01	; 1
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	f9 01       	movw	r30, r18
 30a:	00 90 f6 00 	lds	r0, 0x00F6
 30e:	02 c0       	rjmp	.+4      	; 0x314 <_psx_send_command+0x22>
 310:	ee 0f       	add	r30, r30
 312:	ff 1f       	adc	r31, r31
 314:	0a 94       	dec	r0
 316:	e2 f7       	brpl	.-8      	; 0x310 <_psx_send_command+0x1e>
 318:	4e 2f       	mov	r20, r30
 31a:	40 95       	com	r20
 31c:	45 23       	and	r20, r21
 31e:	4c 93       	st	X, r20
  *_command_port |= _BV(_command_pin);
 320:	e0 91 05 01 	lds	r30, 0x0105
 324:	f0 91 06 01 	lds	r31, 0x0106
 328:	70 81       	ld	r23, Z
 32a:	a9 01       	movw	r20, r18
 32c:	00 90 f7 00 	lds	r0, 0x00F7
 330:	02 c0       	rjmp	.+4      	; 0x336 <_psx_send_command+0x44>
 332:	44 0f       	add	r20, r20
 334:	55 1f       	adc	r21, r21
 336:	0a 94       	dec	r0
 338:	e2 f7       	brpl	.-8      	; 0x332 <_psx_send_command+0x40>
 33a:	47 2b       	or	r20, r23
 33c:	40 83       	st	Z, r20

  //Clock should always be high; it is an active low line...
  *_clock_port |= _BV(_clock_pin);
 33e:	e0 91 07 01 	lds	r30, 0x0107
 342:	f0 91 08 01 	lds	r31, 0x0108
 346:	40 81       	ld	r20, Z
 348:	00 90 f8 00 	lds	r0, 0x00F8
 34c:	02 c0       	rjmp	.+4      	; 0x352 <_psx_send_command+0x60>
 34e:	22 0f       	add	r18, r18
 350:	33 1f       	adc	r19, r19
 352:	0a 94       	dec	r0
 354:	e2 f7       	brpl	.-8      	; 0x34e <_psx_send_command+0x5c>
 356:	24 2b       	or	r18, r20
 358:	20 83       	st	Z, r18
    
  for (uint8_t i = 0; i < size; i++){
 35a:	66 23       	and	r22, r22
 35c:	71 f0       	breq	.+28     	; 0x37a <_psx_send_command+0x88>
 35e:	ec 01       	movw	r28, r24
 360:	61 50       	subi	r22, 0x01	; 1
 362:	06 2f       	mov	r16, r22
 364:	10 e0       	ldi	r17, 0x00	; 0
 366:	0f 5f       	subi	r16, 0xFF	; 255
 368:	1f 4f       	sbci	r17, 0xFF	; 255
 36a:	08 0f       	add	r16, r24
 36c:	19 1f       	adc	r17, r25
    send_data[i] = _psx_gamepad_shift(send_data[i]);
 36e:	88 81       	ld	r24, Y
 370:	32 df       	rcall	.-412    	; 0x1d6 <_psx_gamepad_shift>
 372:	89 93       	st	Y+, r24
  *_command_port |= _BV(_command_pin);

  //Clock should always be high; it is an active low line...
  *_clock_port |= _BV(_clock_pin);
    
  for (uint8_t i = 0; i < size; i++){
 374:	c0 17       	cp	r28, r16
 376:	d1 07       	cpc	r29, r17
 378:	d1 f7       	brne	.-12     	; 0x36e <_psx_send_command+0x7c>
    send_data[i] = _psx_gamepad_shift(send_data[i]);
  }
  
  *_attention_port |= _BV(_attention_pin);
 37a:	e0 91 03 01 	lds	r30, 0x0103
 37e:	f0 91 04 01 	lds	r31, 0x0104
 382:	20 81       	ld	r18, Z
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	00 90 f6 00 	lds	r0, 0x00F6
 38c:	02 c0       	rjmp	.+4      	; 0x392 <_psx_send_command+0xa0>
 38e:	88 0f       	add	r24, r24
 390:	99 1f       	adc	r25, r25
 392:	0a 94       	dec	r0
 394:	e2 f7       	brpl	.-8      	; 0x38e <_psx_send_command+0x9c>
 396:	82 2b       	or	r24, r18
 398:	80 83       	st	Z, r24
}
 39a:	df 91       	pop	r29
 39c:	cf 91       	pop	r28
 39e:	1f 91       	pop	r17
 3a0:	0f 91       	pop	r16
 3a2:	08 95       	ret

000003a4 <psx_read_gamepad>:


/* Reads the gamepad.  You need to call this whenever you want updated state.
 */
void psx_read_gamepad() {
  _data[0] = 0x01;
 3a4:	e0 ee       	ldi	r30, 0xE0	; 224
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	80 83       	st	Z, r24
  _data[1] = 0x42;
 3ac:	82 e4       	ldi	r24, 0x42	; 66
 3ae:	81 83       	std	Z+1, r24	; 0x01
 3b0:	e2 ee       	ldi	r30, 0xE2	; 226
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	85 ef       	ldi	r24, 0xF5	; 245
 3b6:	90 e0       	ldi	r25, 0x00	; 0
  for (uint8_t i = 2; i < 21; i++){
    _data[i] = 0x00;
 3b8:	11 92       	st	Z+, r1
/* Reads the gamepad.  You need to call this whenever you want updated state.
 */
void psx_read_gamepad() {
  _data[0] = 0x01;
  _data[1] = 0x42;
  for (uint8_t i = 2; i < 21; i++){
 3ba:	e8 17       	cp	r30, r24
 3bc:	f9 07       	cpc	r31, r25
 3be:	e1 f7       	brne	.-8      	; 0x3b8 <psx_read_gamepad+0x14>
    _data[i] = 0x00;
  }
  _psx_send_command(_data, 21);
 3c0:	65 e1       	ldi	r22, 0x15	; 21
 3c2:	80 ee       	ldi	r24, 0xE0	; 224
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	95 df       	rcall	.-214    	; 0x2f2 <_psx_send_command>
 3c8:	08 95       	ret

000003ca <psx_init>:
 * highly recommended that you check any new chips which you want to use this library with.
 */
void psx_init(volatile uint8_t *data_port, uint8_t data_pin,
        volatile uint8_t *clock_port, uint8_t clock_pin,
        volatile uint8_t *command_port, uint8_t command_pin,
        volatile uint8_t *attention_port, uint8_t attention_pin){
 3ca:	2f 92       	push	r2
 3cc:	3f 92       	push	r3
 3ce:	4f 92       	push	r4
 3d0:	5f 92       	push	r5
 3d2:	6f 92       	push	r6
 3d4:	7f 92       	push	r7
 3d6:	8f 92       	push	r8
 3d8:	9f 92       	push	r9
 3da:	af 92       	push	r10
 3dc:	cf 92       	push	r12
 3de:	df 92       	push	r13
 3e0:	ef 92       	push	r14
 3e2:	0f 93       	push	r16
 3e4:	1f 93       	push	r17
 3e6:	cf 93       	push	r28
 3e8:	df 93       	push	r29
 3ea:	cd b7       	in	r28, 0x3d	; 61
 3ec:	de b7       	in	r29, 0x3e	; 62
 3ee:	67 97       	sbiw	r28, 0x17	; 23
 3f0:	0f b6       	in	r0, 0x3f	; 63
 3f2:	f8 94       	cli
 3f4:	de bf       	out	0x3e, r29	; 62
 3f6:	0f be       	out	0x3f, r0	; 63
 3f8:	cd bf       	out	0x3d, r28	; 61

  //Store the ports...
  _data_port = data_port;
 3fa:	90 93 0a 01 	sts	0x010A, r25
 3fe:	80 93 09 01 	sts	0x0109, r24
  _clock_port = clock_port;
 402:	50 93 08 01 	sts	0x0108, r21
 406:	40 93 07 01 	sts	0x0107, r20
  _command_port = command_port;
 40a:	10 93 06 01 	sts	0x0106, r17
 40e:	00 93 05 01 	sts	0x0105, r16
  _attention_port = attention_port;
 412:	d0 92 04 01 	sts	0x0104, r13
 416:	c0 92 03 01 	sts	0x0103, r12
  
  //... and data direction registers...
  _data_ddr = data_port - 0x1;
 41a:	4c 01       	movw	r8, r24
 41c:	31 e0       	ldi	r19, 0x01	; 1
 41e:	83 1a       	sub	r8, r19
 420:	91 08       	sbc	r9, r1
 422:	90 92 00 01 	sts	0x0100, r9
 426:	80 92 ff 00 	sts	0x00FF, r8
  _clock_ddr = clock_port - 0x1;
 42a:	2a 01       	movw	r4, r20
 42c:	a1 e0       	ldi	r26, 0x01	; 1
 42e:	4a 1a       	sub	r4, r26
 430:	51 08       	sbc	r5, r1
 432:	50 92 fe 00 	sts	0x00FE, r5
 436:	40 92 fd 00 	sts	0x00FD, r4
  _command_ddr = command_port - 0x1;
 43a:	38 01       	movw	r6, r16
 43c:	b1 e0       	ldi	r27, 0x01	; 1
 43e:	6b 1a       	sub	r6, r27
 440:	71 08       	sbc	r7, r1
 442:	70 92 fc 00 	sts	0x00FC, r7
 446:	60 92 fb 00 	sts	0x00FB, r6
  _attention_ddr = attention_port - 0x1;
 44a:	16 01       	movw	r2, r12
 44c:	e1 e0       	ldi	r30, 0x01	; 1
 44e:	2e 1a       	sub	r2, r30
 450:	31 08       	sbc	r3, r1
 452:	30 92 fa 00 	sts	0x00FA, r3
 456:	20 92 f9 00 	sts	0x00F9, r2

  //... and data input register...
  _data_in = data_port - 0x2;
 45a:	fc 01       	movw	r30, r24
 45c:	32 97       	sbiw	r30, 0x02	; 2
 45e:	f0 93 02 01 	sts	0x0102, r31
 462:	e0 93 01 01 	sts	0x0101, r30

  //... and pin numbers.
  _clock_pin = clock_pin;
 466:	20 93 f8 00 	sts	0x00F8, r18
  _command_pin = command_pin;
 46a:	e0 92 f7 00 	sts	0x00F7, r14
  _attention_pin = attention_pin;
 46e:	a0 92 f6 00 	sts	0x00F6, r10
  _data_pin = data_pin;
 472:	60 93 f5 00 	sts	0x00F5, r22
  
  
  //Set clock, attention, and command pins to output mode
  *_clock_ddr |= _BV(_clock_pin);
 476:	d2 01       	movw	r26, r4
 478:	3c 91       	ld	r19, X
 47a:	e1 e0       	ldi	r30, 0x01	; 1
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	6f 01       	movw	r12, r30
 480:	02 c0       	rjmp	.+4      	; 0x486 <psx_init+0xbc>
 482:	cc 0c       	add	r12, r12
 484:	dd 1c       	adc	r13, r13
 486:	2a 95       	dec	r18
 488:	e2 f7       	brpl	.-8      	; 0x482 <psx_init+0xb8>
 48a:	23 2f       	mov	r18, r19
 48c:	2c 29       	or	r18, r12
 48e:	2c 93       	st	X, r18
  *_attention_ddr |= _BV(_attention_pin);
 490:	d1 01       	movw	r26, r2
 492:	7c 91       	ld	r23, X
 494:	9f 01       	movw	r18, r30
 496:	02 c0       	rjmp	.+4      	; 0x49c <psx_init+0xd2>
 498:	22 0f       	add	r18, r18
 49a:	33 1f       	adc	r19, r19
 49c:	aa 94       	dec	r10
 49e:	e2 f7       	brpl	.-8      	; 0x498 <psx_init+0xce>
 4a0:	27 2b       	or	r18, r23
 4a2:	2c 93       	st	X, r18
  *_command_ddr |= _BV(_command_pin);
 4a4:	d3 01       	movw	r26, r6
 4a6:	7c 91       	ld	r23, X
 4a8:	9f 01       	movw	r18, r30
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <psx_init+0xe6>
 4ac:	22 0f       	add	r18, r18
 4ae:	33 1f       	adc	r19, r19
 4b0:	ea 94       	dec	r14
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <psx_init+0xe2>
 4b4:	37 2f       	mov	r19, r23
 4b6:	32 2b       	or	r19, r18
 4b8:	3c 93       	st	X, r19

  //Set data pin to input mode, and set pullup resistor
  *_data_ddr &= ~(_BV(_data_pin));
 4ba:	d4 01       	movw	r26, r8
 4bc:	7c 91       	ld	r23, X
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <psx_init+0xfa>
 4c0:	ee 0f       	add	r30, r30
 4c2:	ff 1f       	adc	r31, r31
 4c4:	6a 95       	dec	r22
 4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <psx_init+0xf6>
 4c8:	3e 2f       	mov	r19, r30
 4ca:	30 95       	com	r19
 4cc:	37 23       	and	r19, r23
 4ce:	3c 93       	st	X, r19
  *_data_port |= _BV(_data_pin);
 4d0:	dc 01       	movw	r26, r24
 4d2:	3c 91       	ld	r19, X
 4d4:	e3 2b       	or	r30, r19
 4d6:	ec 93       	st	X, r30

  //Initialize game pad
  *_clock_port |= _BV(_clock_pin);
 4d8:	fa 01       	movw	r30, r20
 4da:	80 81       	ld	r24, Z
 4dc:	c8 2a       	or	r12, r24
 4de:	c0 82       	st	Z, r12
  *_command_port |= _BV(_command_pin);
 4e0:	d8 01       	movw	r26, r16
 4e2:	8c 91       	ld	r24, X
 4e4:	28 2b       	or	r18, r24
 4e6:	2c 93       	st	X, r18
  
  
  //Init by polling once
  psx_read_gamepad();
 4e8:	5d df       	rcall	.-326    	; 0x3a4 <psx_read_gamepad>


  //Enter Config Mode
  uint8_t enter_config_command[] = {0x01, 0x43, 0x00, 0x01, 0x00};
 4ea:	85 e0       	ldi	r24, 0x05	; 5
 4ec:	e0 e6       	ldi	r30, 0x60	; 96
 4ee:	f0 e0       	ldi	r31, 0x00	; 0
 4f0:	de 01       	movw	r26, r28
 4f2:	11 96       	adiw	r26, 0x01	; 1
 4f4:	01 90       	ld	r0, Z+
 4f6:	0d 92       	st	X+, r0
 4f8:	8a 95       	dec	r24
 4fa:	e1 f7       	brne	.-8      	; 0x4f4 <psx_init+0x12a>
  _psx_send_command(enter_config_command, 5);
 4fc:	65 e0       	ldi	r22, 0x05	; 5
 4fe:	ce 01       	movw	r24, r28
 500:	01 96       	adiw	r24, 0x01	; 1
 502:	f7 de       	rcall	.-530    	; 0x2f2 <_psx_send_command>

  // Lock to Analog Mode on Stick
  uint8_t lock_analog_mode_command[] = {0x01, 0x44, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00};
 504:	89 e0       	ldi	r24, 0x09	; 9
 506:	e5 e6       	ldi	r30, 0x65	; 101
 508:	f0 e0       	ldi	r31, 0x00	; 0
 50a:	de 01       	movw	r26, r28
 50c:	16 96       	adiw	r26, 0x06	; 6
 50e:	01 90       	ld	r0, Z+
 510:	0d 92       	st	X+, r0
 512:	8a 95       	dec	r24
 514:	e1 f7       	brne	.-8      	; 0x50e <psx_init+0x144>
  _psx_send_command(lock_analog_mode_command, 9);
 516:	69 e0       	ldi	r22, 0x09	; 9
 518:	ce 01       	movw	r24, r28
 51a:	06 96       	adiw	r24, 0x06	; 6
 51c:	ea de       	rcall	.-556    	; 0x2f2 <_psx_send_command>

  //Exit config mode
  uint8_t exit_config_command[] = {0x01, 0x43, 0x00, 0x00, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A};
 51e:	89 e0       	ldi	r24, 0x09	; 9
 520:	ee e6       	ldi	r30, 0x6E	; 110
 522:	f0 e0       	ldi	r31, 0x00	; 0
 524:	de 01       	movw	r26, r28
 526:	1f 96       	adiw	r26, 0x0f	; 15
 528:	01 90       	ld	r0, Z+
 52a:	0d 92       	st	X+, r0
 52c:	8a 95       	dec	r24
 52e:	e1 f7       	brne	.-8      	; 0x528 <psx_init+0x15e>
  _psx_send_command(exit_config_command, 9);
 530:	69 e0       	ldi	r22, 0x09	; 9
 532:	ce 01       	movw	r24, r28
 534:	0f 96       	adiw	r24, 0x0f	; 15
 536:	dd de       	rcall	.-582    	; 0x2f2 <_psx_send_command>
}
 538:	67 96       	adiw	r28, 0x17	; 23
 53a:	0f b6       	in	r0, 0x3f	; 63
 53c:	f8 94       	cli
 53e:	de bf       	out	0x3e, r29	; 62
 540:	0f be       	out	0x3f, r0	; 63
 542:	cd bf       	out	0x3d, r28	; 61
 544:	df 91       	pop	r29
 546:	cf 91       	pop	r28
 548:	1f 91       	pop	r17
 54a:	0f 91       	pop	r16
 54c:	ef 90       	pop	r14
 54e:	df 90       	pop	r13
 550:	cf 90       	pop	r12
 552:	af 90       	pop	r10
 554:	9f 90       	pop	r9
 556:	8f 90       	pop	r8
 558:	7f 90       	pop	r7
 55a:	6f 90       	pop	r6
 55c:	5f 90       	pop	r5
 55e:	4f 90       	pop	r4
 560:	3f 90       	pop	r3
 562:	2f 90       	pop	r2
 564:	08 95       	ret

00000566 <psx_button>:


uint16_t psx_buttons() {
  uint16_t buttons = *(uint16_t*)(_data + 3); //Get 2 bytes, comprising data positions 3 and 4.
  return ~buttons;
 566:	20 91 e3 00 	lds	r18, 0x00E3
 56a:	30 91 e4 00 	lds	r19, 0x00E4
 56e:	20 95       	com	r18
 570:	30 95       	com	r19
}

uint8_t psx_button(uint16_t button) {
  uint16_t buttons = psx_buttons();
  return ((buttons & button) > 0);
 572:	28 23       	and	r18, r24
 574:	39 23       	and	r19, r25
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	23 2b       	or	r18, r19
 57a:	09 f4       	brne	.+2      	; 0x57e <psx_button+0x18>
 57c:	80 e0       	ldi	r24, 0x00	; 0
}
 57e:	08 95       	ret

00000580 <dbg_putchar>:
#define DBG_UART_TX_NUM_ADD_NOP		((F_CPU/DBG_UART_BAUDRATE-16)%4)
	uint8_t sreg;
	uint16_t tmp;
	uint8_t numiter = 10;

	sreg = SREG;
 580:	2f b7       	in	r18, 0x3f	; 63
	cli();
 582:	f8 94       	cli

	asm volatile (
 584:	9a e0       	ldi	r25, 0x0A	; 10
 586:	e8 b3       	in	r30, 0x18	; 24
 588:	ee 7f       	andi	r30, 0xFE	; 254
 58a:	e8 bb       	out	0x18, r30	; 24
	...
 594:	00 00       	nop
 596:	ed ec       	ldi	r30, 0xCD	; 205
 598:	f0 e0       	ldi	r31, 0x00	; 0
 59a:	31 97       	sbiw	r30, 0x01	; 1
 59c:	f1 f7       	brne	.-4      	; 0x59a <dbg_putchar+0x1a>
 59e:	00 00       	nop
 5a0:	e8 b3       	in	r30, 0x18	; 24
 5a2:	80 fd       	sbrc	r24, 0
 5a4:	e1 60       	ori	r30, 0x01	; 1
 5a6:	80 ff       	sbrs	r24, 0
 5a8:	ee 7f       	andi	r30, 0xFE	; 254
 5aa:	e8 bb       	out	0x18, r30	; 24
 5ac:	08 94       	sec
 5ae:	87 95       	ror	r24
 5b0:	9a 95       	dec	r25
 5b2:	89 f7       	brne	.-30     	; 0x596 <dbg_putchar+0x16>
		  "M" (1<<DBG_UART_TX_PIN),
		  "i" (DBG_UART_TX_NUM_DELAY_CYCLES),
		  "1" (c),			/* data */
		  "2" (numiter)
	);
	SREG = sreg;
 5b4:	2f bf       	out	0x3f, r18	; 63
 5b6:	08 95       	ret

000005b8 <_exit>:
 5b8:	f8 94       	cli

000005ba <__stop_program>:
 5ba:	ff cf       	rjmp	.-2      	; 0x5ba <__stop_program>
