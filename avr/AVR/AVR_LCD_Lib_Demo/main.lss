
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00001734  00000000  00000000  00000514  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000bf2  00000000  00000000  00001c48  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	4c c0       	rjmp	.+152    	; 0x9a <__ctors_end>
   2:	66 c0       	rjmp	.+204    	; 0xd0 <__bad_interrupt>
   4:	65 c0       	rjmp	.+202    	; 0xd0 <__bad_interrupt>
   6:	64 c0       	rjmp	.+200    	; 0xd0 <__bad_interrupt>
   8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>
   a:	62 c0       	rjmp	.+196    	; 0xd0 <__bad_interrupt>
   c:	61 c0       	rjmp	.+194    	; 0xd0 <__bad_interrupt>
   e:	60 c0       	rjmp	.+192    	; 0xd0 <__bad_interrupt>
  10:	5f c0       	rjmp	.+190    	; 0xd0 <__bad_interrupt>
  12:	5e c0       	rjmp	.+188    	; 0xd0 <__bad_interrupt>
  14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
  16:	5c c0       	rjmp	.+184    	; 0xd0 <__bad_interrupt>
  18:	5b c0       	rjmp	.+182    	; 0xd0 <__bad_interrupt>
  1a:	5a c0       	rjmp	.+180    	; 0xd0 <__bad_interrupt>
  1c:	59 c0       	rjmp	.+178    	; 0xd0 <__bad_interrupt>
  1e:	58 c0       	rjmp	.+176    	; 0xd0 <__bad_interrupt>
  20:	57 c0       	rjmp	.+174    	; 0xd0 <__bad_interrupt>
  22:	56 c0       	rjmp	.+172    	; 0xd0 <__bad_interrupt>
  24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>

00000026 <LCDwelcomeln1>:
  26:	41 56 52 20 4c 43 44 20 44 45 4d 4f 00 00           AVR LCD DEMO..

00000034 <LCDprogress>:
  34:	4c 6f 61 64 69 6e 67 2e 2e 2e 00 00                 Loading.....

00000040 <LCDanimation>:
  40:	20 4c 43 44 20 61 6e 69 6d 61 74 69 6f 6e 20 00      LCD animation .
	...

00000051 <backslash>:
  51:	00 10 08 04 02 01 00 00                             ........

00000059 <LcdCustomChar>:
  59:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  69:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  79:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  89:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................
	...

0000009a <__ctors_end>:
  9a:	11 24       	eor	r1, r1
  9c:	1f be       	out	0x3f, r1	; 63
  9e:	cf e5       	ldi	r28, 0x5F	; 95
  a0:	d4 e0       	ldi	r29, 0x04	; 4
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_copy_data>:
  a6:	10 e0       	ldi	r17, 0x00	; 0
  a8:	a0 e6       	ldi	r26, 0x60	; 96
  aa:	b0 e0       	ldi	r27, 0x00	; 0
  ac:	e0 ec       	ldi	r30, 0xC0	; 192
  ae:	f4 e0       	ldi	r31, 0x04	; 4
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <.do_copy_data_start>

000000b2 <.do_copy_data_loop>:
  b2:	05 90       	lpm	r0, Z+
  b4:	0d 92       	st	X+, r0

000000b6 <.do_copy_data_start>:
  b6:	a0 36       	cpi	r26, 0x60	; 96
  b8:	b1 07       	cpc	r27, r17
  ba:	d9 f7       	brne	.-10     	; 0xb2 <.do_copy_data_loop>

000000bc <__do_clear_bss>:
  bc:	10 e0       	ldi	r17, 0x00	; 0
  be:	a0 e6       	ldi	r26, 0x60	; 96
  c0:	b0 e0       	ldi	r27, 0x00	; 0
  c2:	01 c0       	rjmp	.+2      	; 0xc6 <.do_clear_bss_start>

000000c4 <.do_clear_bss_loop>:
  c4:	1d 92       	st	X+, r1

000000c6 <.do_clear_bss_start>:
  c6:	a0 36       	cpi	r26, 0x60	; 96
  c8:	b1 07       	cpc	r27, r17
  ca:	e1 f7       	brne	.-8      	; 0xc4 <.do_clear_bss_loop>
  cc:	70 d0       	rcall	.+224    	; 0x1ae <main>
  ce:	f7 c1       	rjmp	.+1006   	; 0x4be <_exit>

000000d0 <__bad_interrupt>:
  d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <delay1s>:
0b00000000
};
//delay 1s
void delay1s(void)
{
  d2:	20 e0       	ldi	r18, 0x00	; 0
  d4:	e0 e2       	ldi	r30, 0x20	; 32
  d6:	fe e4       	ldi	r31, 0x4E	; 78
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  d8:	cf 01       	movw	r24, r30
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <delay1s+0x8>
	uint8_t i;
	for(i=0;i<100;i++)
  de:	2f 5f       	subi	r18, 0xFF	; 255
  e0:	24 36       	cpi	r18, 0x64	; 100
  e2:	d1 f7       	brne	.-12     	; 0xd8 <delay1s+0x6>
  e4:	08 95       	ret

000000e6 <demoanimation>:
	{
		_delay_ms(10);
	}
}
//demonstration of progress bar
void progress(void)
{
	LCDclr();
	CopyStringtoLCD(LCDwelcomeln1, 3, 0);	
	delay1s();
	LCDclr();
	CopyStringtoLCD(LCDprogress, 3, 0);
	for(uint8_t i=0;i<255;i++)
		{
			_delay_ms(10);
			LCDGotoXY(0, 1);
			LCDprogressBar(i, 255, 16);
		}
}
//demonstration of animation
void demoanimation(void)
{
  e6:	1f 93       	push	r17
	LCDclr();
  e8:	9c d0       	rcall	.+312    	; 0x222 <LCDclr>
	LCDdefinechar(backslash,0);
  ea:	60 e0       	ldi	r22, 0x00	; 0
  ec:	81 e5       	ldi	r24, 0x51	; 81
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	db d0       	rcall	.+438    	; 0x2a8 <LCDdefinechar>
	CopyStringtoLCD(LCDanimation, 0, 0);
  f2:	40 e0       	ldi	r20, 0x00	; 0
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	80 e4       	ldi	r24, 0x40	; 64
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	be d0       	rcall	.+380    	; 0x278 <CopyStringtoLCD>
  fc:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<3;i++)
		{
			LCDGotoXY(8, 1);
  fe:	61 e0       	ldi	r22, 0x01	; 1
 100:	88 e0       	ldi	r24, 0x08	; 8
 102:	ac d0       	rcall	.+344    	; 0x25c <LCDGotoXY>
			LCDsendChar(0);
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	59 d0       	rcall	.+178    	; 0x1ba <LCDsendChar>
			delay1s();
 108:	e4 df       	rcall	.-56     	; 0xd2 <delay1s>
			LCDGotoXY(8, 1);
 10a:	61 e0       	ldi	r22, 0x01	; 1
 10c:	88 e0       	ldi	r24, 0x08	; 8
 10e:	a6 d0       	rcall	.+332    	; 0x25c <LCDGotoXY>
			LCDsendChar('-');
 110:	8d e2       	ldi	r24, 0x2D	; 45
 112:	53 d0       	rcall	.+166    	; 0x1ba <LCDsendChar>
			delay1s();
 114:	de df       	rcall	.-68     	; 0xd2 <delay1s>
			LCDGotoXY(8, 1);
 116:	61 e0       	ldi	r22, 0x01	; 1
 118:	88 e0       	ldi	r24, 0x08	; 8
 11a:	a0 d0       	rcall	.+320    	; 0x25c <LCDGotoXY>
			LCDsendChar('/');
 11c:	8f e2       	ldi	r24, 0x2F	; 47
 11e:	4d d0       	rcall	.+154    	; 0x1ba <LCDsendChar>
			delay1s();
 120:	d8 df       	rcall	.-80     	; 0xd2 <delay1s>
			LCDGotoXY(8, 1);
 122:	61 e0       	ldi	r22, 0x01	; 1
 124:	88 e0       	ldi	r24, 0x08	; 8
 126:	9a d0       	rcall	.+308    	; 0x25c <LCDGotoXY>
			LCDsendChar('|');
 128:	8c e7       	ldi	r24, 0x7C	; 124
 12a:	47 d0       	rcall	.+142    	; 0x1ba <LCDsendChar>
			delay1s();
 12c:	d2 df       	rcall	.-92     	; 0xd2 <delay1s>
			LCDGotoXY(8, 1);
 12e:	61 e0       	ldi	r22, 0x01	; 1
 130:	88 e0       	ldi	r24, 0x08	; 8
 132:	94 d0       	rcall	.+296    	; 0x25c <LCDGotoXY>
			LCDsendChar(8);//backslash
 134:	88 e0       	ldi	r24, 0x08	; 8
 136:	41 d0       	rcall	.+130    	; 0x1ba <LCDsendChar>
			delay1s();
 138:	cc df       	rcall	.-104    	; 0xd2 <delay1s>
			LCDGotoXY(8, 1);
 13a:	61 e0       	ldi	r22, 0x01	; 1
 13c:	88 e0       	ldi	r24, 0x08	; 8
 13e:	8e d0       	rcall	.+284    	; 0x25c <LCDGotoXY>
			LCDsendChar('-');
 140:	8d e2       	ldi	r24, 0x2D	; 45
 142:	3b d0       	rcall	.+118    	; 0x1ba <LCDsendChar>
			delay1s();
 144:	c6 df       	rcall	.-116    	; 0xd2 <delay1s>
			LCDGotoXY(8, 1);
 146:	61 e0       	ldi	r22, 0x01	; 1
 148:	88 e0       	ldi	r24, 0x08	; 8
 14a:	88 d0       	rcall	.+272    	; 0x25c <LCDGotoXY>
			LCDsendChar('/');
 14c:	8f e2       	ldi	r24, 0x2F	; 47
 14e:	35 d0       	rcall	.+106    	; 0x1ba <LCDsendChar>
			delay1s();
 150:	c0 df       	rcall	.-128    	; 0xd2 <delay1s>
			LCDGotoXY(8, 1);
 152:	61 e0       	ldi	r22, 0x01	; 1
 154:	88 e0       	ldi	r24, 0x08	; 8
 156:	82 d0       	rcall	.+260    	; 0x25c <LCDGotoXY>
			LCDsendChar('|');
 158:	8c e7       	ldi	r24, 0x7C	; 124
 15a:	2f d0       	rcall	.+94     	; 0x1ba <LCDsendChar>
			delay1s();
 15c:	ba df       	rcall	.-140    	; 0xd2 <delay1s>
 15e:	1f 5f       	subi	r17, 0xFF	; 255
 160:	13 30       	cpi	r17, 0x03	; 3
 162:	69 f6       	brne	.-102    	; 0xfe <demoanimation+0x18>
 164:	1f 91       	pop	r17
 166:	08 95       	ret

00000168 <progress>:
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	5a d0       	rcall	.+180    	; 0x222 <LCDclr>
 16e:	40 e0       	ldi	r20, 0x00	; 0
 170:	63 e0       	ldi	r22, 0x03	; 3
 172:	86 e2       	ldi	r24, 0x26	; 38
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	80 d0       	rcall	.+256    	; 0x278 <CopyStringtoLCD>
 178:	ac df       	rcall	.-168    	; 0xd2 <delay1s>
 17a:	53 d0       	rcall	.+166    	; 0x222 <LCDclr>
 17c:	40 e0       	ldi	r20, 0x00	; 0
 17e:	63 e0       	ldi	r22, 0x03	; 3
 180:	84 e3       	ldi	r24, 0x34	; 52
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	79 d0       	rcall	.+242    	; 0x278 <CopyStringtoLCD>
 186:	c0 e0       	ldi	r28, 0x00	; 0
 188:	d0 e0       	ldi	r29, 0x00	; 0
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 18a:	80 e2       	ldi	r24, 0x20	; 32
 18c:	9e e4       	ldi	r25, 0x4E	; 78
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <progress+0x26>
 192:	61 e0       	ldi	r22, 0x01	; 1
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	62 d0       	rcall	.+196    	; 0x25c <LCDGotoXY>
 198:	40 e1       	ldi	r20, 0x10	; 16
 19a:	6f ef       	ldi	r22, 0xFF	; 255
 19c:	8c 2f       	mov	r24, r28
 19e:	eb d0       	rcall	.+470    	; 0x376 <LCDprogressBar>
 1a0:	21 96       	adiw	r28, 0x01	; 1
 1a2:	cf 3f       	cpi	r28, 0xFF	; 255
 1a4:	d1 05       	cpc	r29, r1
 1a6:	89 f7       	brne	.-30     	; 0x18a <progress+0x22>
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <main>:
		}	
}

int main(void)
{
	LCDinit();//init LCD bit, dual line, cursor right
 1ae:	1c d1       	rcall	.+568    	; 0x3e8 <LCDinit>
	LCDclr();//clears LCD
 1b0:	38 d0       	rcall	.+112    	; 0x222 <LCDclr>
	while(1)//loop demos
	{
		progress();
 1b2:	da df       	rcall	.-76     	; 0x168 <progress>
		delay1s();
 1b4:	8e df       	rcall	.-228    	; 0xd2 <delay1s>
		demoanimation();
 1b6:	97 df       	rcall	.-210    	; 0xe6 <demoanimation>
 1b8:	fc cf       	rjmp	.-8      	; 0x1b2 <main+0x4>

000001ba <LCDsendChar>:
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
 1ba:	98 2f       	mov	r25, r24
 1bc:	90 7f       	andi	r25, 0xF0	; 240
 1be:	92 bb       	out	0x12, r25	; 18
	LCP|=1<<LCD_RS;
 1c0:	90 9a       	sbi	0x12, 0	; 18
	LCP|=1<<LCD_E;		
 1c2:	92 9a       	sbi	0x12, 2	; 18
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1c4:	e0 ed       	ldi	r30, 0xD0	; 208
 1c6:	f7 e0       	ldi	r31, 0x07	; 7
 1c8:	df 01       	movw	r26, r30
 1ca:	11 97       	sbiw	r26, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <LCDsendChar+0x10>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
 1ce:	92 98       	cbi	0x12, 2	; 18
	LCP&=~(1<<LCD_RS);
 1d0:	90 98       	cbi	0x12, 0	; 18
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1d2:	df 01       	movw	r26, r30
 1d4:	11 97       	sbiw	r26, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <LCDsendChar+0x1a>
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
 1d8:	82 95       	swap	r24
 1da:	80 7f       	andi	r24, 0xF0	; 240
 1dc:	82 bb       	out	0x12, r24	; 18
	LCP|=1<<LCD_RS;
 1de:	90 9a       	sbi	0x12, 0	; 18
	LCP|=1<<LCD_E;		
 1e0:	92 9a       	sbi	0x12, 2	; 18
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1e2:	cf 01       	movw	r24, r30
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <LCDsendChar+0x2a>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
 1e8:	92 98       	cbi	0x12, 2	; 18
	LCP&=~(1<<LCD_RS);
 1ea:	90 98       	cbi	0x12, 0	; 18
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1ec:	31 97       	sbiw	r30, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <LCDsendChar+0x32>
 1f0:	08 95       	ret

000001f2 <LCDsendCommand>:
	_delay_ms(1);
#else
	//8 bit part
	LDP=ch;
	LCP|=1<<LCD_RS;
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
 1f2:	98 2f       	mov	r25, r24
 1f4:	90 7f       	andi	r25, 0xF0	; 240
 1f6:	92 bb       	out	0x12, r25	; 18
	LCP|=1<<LCD_E;		
 1f8:	92 9a       	sbi	0x12, 2	; 18
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1fa:	e0 ed       	ldi	r30, 0xD0	; 208
 1fc:	f7 e0       	ldi	r31, 0x07	; 7
 1fe:	df 01       	movw	r26, r30
 200:	11 97       	sbiw	r26, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <LCDsendCommand+0xe>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 204:	92 98       	cbi	0x12, 2	; 18
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 206:	df 01       	movw	r26, r30
 208:	11 97       	sbiw	r26, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <LCDsendCommand+0x16>
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
 20c:	82 95       	swap	r24
 20e:	80 7f       	andi	r24, 0xF0	; 240
 210:	82 bb       	out	0x12, r24	; 18
	LCP|=1<<LCD_E;		
 212:	92 9a       	sbi	0x12, 2	; 18
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 214:	cf 01       	movw	r24, r30
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <LCDsendCommand+0x24>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 21a:	92 98       	cbi	0x12, 2	; 18
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 21c:	31 97       	sbiw	r30, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <LCDsendCommand+0x2a>
 220:	08 95       	ret

00000222 <LCDclr>:
	_delay_ms(1);
#else
	//8 bit part
	LDP=cmd;
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
	LCP=0x00;
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}


#else
	//8 bit part
	_delay_ms(15);
	LDP=0x00;
	LCP=0x00;
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4|1<<LCD_D3
			|1<<LCD_D2|1<<LCD_D1|1<<LCD_D0;
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4|0<<LCD_D3
			|0<<LCD_D2|0<<LCD_D1|0<<LCD_D0; //8 it mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4|0<<LCD_D3
			|0<<LCD_D2|0<<LCD_D1|0<<LCD_D0; //8 it mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4|0<<LCD_D3
			|0<<LCD_D2|0<<LCD_D1|0<<LCD_D0; //8 it mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);
	//--------8 bit dual line----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4|1<<LCD_D3
			|0<<LCD_D2|0<<LCD_D1|0<<LCD_D0; //8 it mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);
   //-----increment address, invisible cursor shift------
	LDP=0<<LCD_D7|0<<LCD_D6|0<<LCD_D5|0<<LCD_D4|1<<LCD_D3
			|1<<LCD_D2|0<<LCD_D1|0<<LCD_D0; //8 it mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(5);
		//init custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	e6 df       	rcall	.-52     	; 0x1f2 <LCDsendCommand>
 226:	08 95       	ret

00000228 <LCDhome>:
}
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
 228:	82 e0       	ldi	r24, 0x02	; 2
 22a:	e3 df       	rcall	.-58     	; 0x1f2 <LCDsendCommand>
 22c:	08 95       	ret

0000022e <LCDstring>:
}
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
 22e:	0f 93       	push	r16
 230:	1f 93       	push	r17
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	ec 01       	movw	r28, r24
 238:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
 23a:	89 2b       	or	r24, r25
 23c:	51 f0       	breq	.+20     	; 0x252 <LCDstring+0x24>
 23e:	10 e0       	ldi	r17, 0x00	; 0
 240:	06 c0       	rjmp	.+12     	; 0x24e <LCDstring+0x20>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
 242:	fe 01       	movw	r30, r28
 244:	e1 0f       	add	r30, r17
 246:	f1 1d       	adc	r31, r1
 248:	80 81       	ld	r24, Z
 24a:	b7 df       	rcall	.-146    	; 0x1ba <LCDsendChar>
 24c:	1f 5f       	subi	r17, 0xFF	; 255
 24e:	10 17       	cp	r17, r16
 250:	c1 f7       	brne	.-16     	; 0x242 <LCDstring+0x14>
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	1f 91       	pop	r17
 258:	0f 91       	pop	r16
 25a:	08 95       	ret

0000025c <LCDGotoXY>:
	}
}
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
 25c:	62 30       	cpi	r22, 0x02	; 2
 25e:	31 f0       	breq	.+12     	; 0x26c <LCDGotoXY+0x10>
 260:	63 30       	cpi	r22, 0x03	; 3
 262:	31 f0       	breq	.+12     	; 0x270 <LCDGotoXY+0x14>
 264:	61 30       	cpi	r22, 0x01	; 1
 266:	29 f4       	brne	.+10     	; 0x272 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
 268:	80 5c       	subi	r24, 0xC0	; 192
 26a:	03 c0       	rjmp	.+6      	; 0x272 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
 26c:	8c 5e       	subi	r24, 0xEC	; 236
 26e:	01 c0       	rjmp	.+2      	; 0x272 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
 270:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
 272:	80 68       	ori	r24, 0x80	; 128
 274:	be df       	rcall	.-132    	; 0x1f2 <LCDsendCommand>
 276:	08 95       	ret

00000278 <CopyStringtoLCD>:
	
}
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
 278:	0f 93       	push	r16
 27a:	1f 93       	push	r17
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	8c 01       	movw	r16, r24
 282:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
 284:	64 2f       	mov	r22, r20
 286:	ea df       	rcall	.-44     	; 0x25c <LCDGotoXY>
 288:	c0 e0       	ldi	r28, 0x00	; 0
 28a:	d0 e0       	ldi	r29, 0x00	; 0
 28c:	01 c0       	rjmp	.+2      	; 0x290 <CopyStringtoLCD+0x18>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
 28e:	95 df       	rcall	.-214    	; 0x1ba <LCDsendChar>
 290:	f8 01       	movw	r30, r16
 292:	ec 0f       	add	r30, r28
 294:	f1 1d       	adc	r31, r1
 296:	84 91       	lpm	r24, Z
 298:	21 96       	adiw	r28, 0x01	; 1
 29a:	88 23       	and	r24, r24
 29c:	c1 f7       	brne	.-16     	; 0x28e <CopyStringtoLCD+0x16>
 29e:	df 91       	pop	r29
 2a0:	cf 91       	pop	r28
 2a2:	1f 91       	pop	r17
 2a4:	0f 91       	pop	r16
 2a6:	08 95       	ret

000002a8 <LCDdefinechar>:
	}
}
//defines char symbol in CGRAM
/*
const uint8_t backslash[] PROGMEM= 
{
0b00000000,//back slash
0b00010000,
0b00001000,
0b00000100,
0b00000010,
0b00000001,
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
 2a8:	ef 92       	push	r14
 2aa:	ff 92       	push	r15
 2ac:	0f 93       	push	r16
 2ae:	1f 93       	push	r17
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	06 2f       	mov	r16, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 2b6:	00 0f       	add	r16, r16
 2b8:	00 0f       	add	r16, r16
 2ba:	00 0f       	add	r16, r16
 2bc:	00 64       	ori	r16, 0x40	; 64
 2be:	ee 24       	eor	r14, r14
 2c0:	ff 24       	eor	r15, r15
 2c2:	ec 01       	movw	r28, r24
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
 2c4:	fe 01       	movw	r30, r28
 2c6:	14 91       	lpm	r17, Z
		LCDsendCommand(a++);
 2c8:	80 2f       	mov	r24, r16
 2ca:	8e 0d       	add	r24, r14
 2cc:	92 df       	rcall	.-220    	; 0x1f2 <LCDsendCommand>
		LCDsendChar(pcc);
 2ce:	81 2f       	mov	r24, r17
 2d0:	74 df       	rcall	.-280    	; 0x1ba <LCDsendChar>
 2d2:	08 94       	sec
 2d4:	e1 1c       	adc	r14, r1
 2d6:	f1 1c       	adc	r15, r1
 2d8:	21 96       	adiw	r28, 0x01	; 1
 2da:	f8 e0       	ldi	r31, 0x08	; 8
 2dc:	ef 16       	cp	r14, r31
 2de:	f1 04       	cpc	r15, r1
 2e0:	89 f7       	brne	.-30     	; 0x2c4 <LCDdefinechar+0x1c>
 2e2:	df 91       	pop	r29
 2e4:	cf 91       	pop	r28
 2e6:	1f 91       	pop	r17
 2e8:	0f 91       	pop	r16
 2ea:	ff 90       	pop	r15
 2ec:	ef 90       	pop	r14
 2ee:	08 95       	ret

000002f0 <LCDshiftLeft>:
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
 2f0:	0f 93       	push	r16
 2f2:	1f 93       	push	r17
 2f4:	08 2f       	mov	r16, r24
 2f6:	10 e0       	ldi	r17, 0x00	; 0
 2f8:	03 c0       	rjmp	.+6      	; 0x300 <LCDshiftLeft+0x10>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
 2fa:	8e e1       	ldi	r24, 0x1E	; 30
 2fc:	7a df       	rcall	.-268    	; 0x1f2 <LCDsendCommand>
 2fe:	1f 5f       	subi	r17, 0xFF	; 255
 300:	10 17       	cp	r17, r16
 302:	d9 f7       	brne	.-10     	; 0x2fa <LCDshiftLeft+0xa>
 304:	1f 91       	pop	r17
 306:	0f 91       	pop	r16
 308:	08 95       	ret

0000030a <LCDshiftRight>:
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
 30a:	0f 93       	push	r16
 30c:	1f 93       	push	r17
 30e:	08 2f       	mov	r16, r24
 310:	10 e0       	ldi	r17, 0x00	; 0
 312:	03 c0       	rjmp	.+6      	; 0x31a <LCDshiftRight+0x10>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
 314:	88 e1       	ldi	r24, 0x18	; 24
 316:	6d df       	rcall	.-294    	; 0x1f2 <LCDsendCommand>
 318:	1f 5f       	subi	r17, 0xFF	; 255
 31a:	10 17       	cp	r17, r16
 31c:	d9 f7       	brne	.-10     	; 0x314 <LCDshiftRight+0xa>
 31e:	1f 91       	pop	r17
 320:	0f 91       	pop	r16
 322:	08 95       	ret

00000324 <LCDcursorOn>:
	}
}
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
 324:	8e e0       	ldi	r24, 0x0E	; 14
 326:	65 df       	rcall	.-310    	; 0x1f2 <LCDsendCommand>
 328:	08 95       	ret

0000032a <LCDcursorOnBlink>:
}
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
 32a:	8f e0       	ldi	r24, 0x0F	; 15
 32c:	62 df       	rcall	.-316    	; 0x1f2 <LCDsendCommand>
 32e:	08 95       	ret

00000330 <LCDcursorOFF>:
}
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
 330:	8c e0       	ldi	r24, 0x0C	; 12
 332:	5f df       	rcall	.-322    	; 0x1f2 <LCDsendCommand>
 334:	08 95       	ret

00000336 <LCDblank>:
}
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
 336:	88 e0       	ldi	r24, 0x08	; 8
 338:	5c df       	rcall	.-328    	; 0x1f2 <LCDsendCommand>
 33a:	08 95       	ret

0000033c <LCDvisible>:
}
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
 33c:	8c e0       	ldi	r24, 0x0C	; 12
 33e:	59 df       	rcall	.-334    	; 0x1f2 <LCDsendCommand>
 340:	08 95       	ret

00000342 <LCDcursorLeft>:
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
 342:	0f 93       	push	r16
 344:	1f 93       	push	r17
 346:	08 2f       	mov	r16, r24
 348:	10 e0       	ldi	r17, 0x00	; 0
 34a:	03 c0       	rjmp	.+6      	; 0x352 <LCDcursorLeft+0x10>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
 34c:	80 e1       	ldi	r24, 0x10	; 16
 34e:	51 df       	rcall	.-350    	; 0x1f2 <LCDsendCommand>
 350:	1f 5f       	subi	r17, 0xFF	; 255
 352:	10 17       	cp	r17, r16
 354:	d9 f7       	brne	.-10     	; 0x34c <LCDcursorLeft+0xa>
 356:	1f 91       	pop	r17
 358:	0f 91       	pop	r16
 35a:	08 95       	ret

0000035c <LCDcursorRight>:
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
 35c:	0f 93       	push	r16
 35e:	1f 93       	push	r17
 360:	08 2f       	mov	r16, r24
 362:	10 e0       	ldi	r17, 0x00	; 0
 364:	03 c0       	rjmp	.+6      	; 0x36c <LCDcursorRight+0x10>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
 366:	84 e1       	ldi	r24, 0x14	; 20
 368:	44 df       	rcall	.-376    	; 0x1f2 <LCDsendCommand>
 36a:	1f 5f       	subi	r17, 0xFF	; 255
 36c:	10 17       	cp	r17, r16
 36e:	d9 f7       	brne	.-10     	; 0x366 <LCDcursorRight+0xa>
 370:	1f 91       	pop	r17
 372:	0f 91       	pop	r16
 374:	08 95       	ret

00000376 <LCDprogressBar>:
	}
}
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
 376:	ff 92       	push	r15
 378:	0f 93       	push	r16
 37a:	1f 93       	push	r17
 37c:	cf 93       	push	r28
 37e:	df 93       	push	r29
 380:	f4 2e       	mov	r15, r20
	uint8_t i;
	uint16_t pixelprogress;
	uint8_t c;

	// draw a progress bar displaying (progress / maxprogress)
	// starting from the current cursor position
	// with a total length of "length" characters
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
 382:	24 2f       	mov	r18, r20
 384:	33 27       	eor	r19, r19
 386:	96 e0       	ldi	r25, 0x06	; 6
 388:	89 9f       	mul	r24, r25
 38a:	c0 01       	movw	r24, r0
 38c:	11 24       	eor	r1, r1
 38e:	77 27       	eor	r23, r23
 390:	ac 01       	movw	r20, r24
 392:	24 9f       	mul	r18, r20
 394:	c0 01       	movw	r24, r0
 396:	25 9f       	mul	r18, r21
 398:	90 0d       	add	r25, r0
 39a:	34 9f       	mul	r19, r20
 39c:	90 0d       	add	r25, r0
 39e:	11 24       	eor	r1, r1
 3a0:	7b d0       	rcall	.+246    	; 0x498 <__divmodhi4>
 3a2:	eb 01       	movw	r28, r22
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
			{
				// this is an empty block
				// use space character?
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
 3a4:	cb 01       	movw	r24, r22
 3a6:	66 e0       	ldi	r22, 0x06	; 6
 3a8:	70 e0       	ldi	r23, 0x00	; 0
 3aa:	62 d0       	rcall	.+196    	; 0x470 <__udivmodhi4>
 3ac:	08 2f       	mov	r16, r24
 3ae:	10 e0       	ldi	r17, 0x00	; 0
 3b0:	13 c0       	rjmp	.+38     	; 0x3d8 <LCDprogressBar+0x62>
 3b2:	86 e0       	ldi	r24, 0x06	; 6
 3b4:	18 9f       	mul	r17, r24
 3b6:	90 01       	movw	r18, r0
 3b8:	11 24       	eor	r1, r1
 3ba:	c9 01       	movw	r24, r18
 3bc:	05 96       	adiw	r24, 0x05	; 5
 3be:	c8 17       	cp	r28, r24
 3c0:	d9 07       	cpc	r29, r25
 3c2:	10 f0       	brcs	.+4      	; 0x3c8 <LCDprogressBar+0x52>
 3c4:	85 e0       	ldi	r24, 0x05	; 5
 3c6:	06 c0       	rjmp	.+12     	; 0x3d4 <LCDprogressBar+0x5e>
 3c8:	c2 17       	cp	r28, r18
 3ca:	d3 07       	cpc	r29, r19
 3cc:	10 f4       	brcc	.+4      	; 0x3d2 <LCDprogressBar+0x5c>
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	01 c0       	rjmp	.+2      	; 0x3d4 <LCDprogressBar+0x5e>
 3d2:	80 2f       	mov	r24, r16
			}
		}
		else
		{
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
 3d4:	f2 de       	rcall	.-540    	; 0x1ba <LCDsendChar>
 3d6:	1f 5f       	subi	r17, 0xFF	; 255
 3d8:	1f 15       	cp	r17, r15
 3da:	59 f7       	brne	.-42     	; 0x3b2 <LCDprogressBar+0x3c>
 3dc:	df 91       	pop	r29
 3de:	cf 91       	pop	r28
 3e0:	1f 91       	pop	r17
 3e2:	0f 91       	pop	r16
 3e4:	ff 90       	pop	r15
 3e6:	08 95       	ret

000003e8 <LCDinit>:
 3e8:	0f 93       	push	r16
 3ea:	1f 93       	push	r17
 3ec:	cf 93       	push	r28
 3ee:	df 93       	push	r29
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 3f0:	80 e3       	ldi	r24, 0x30	; 48
 3f2:	95 e7       	ldi	r25, 0x75	; 117
 3f4:	01 97       	sbiw	r24, 0x01	; 1
 3f6:	f1 f7       	brne	.-4      	; 0x3f4 <LCDinit+0xc>
 3f8:	12 ba       	out	0x12, r1	; 18
 3fa:	12 ba       	out	0x12, r1	; 18
 3fc:	81 b3       	in	r24, 0x11	; 17
 3fe:	80 6f       	ori	r24, 0xF0	; 240
 400:	81 bb       	out	0x11, r24	; 17
 402:	81 b3       	in	r24, 0x11	; 17
 404:	87 60       	ori	r24, 0x07	; 7
 406:	81 bb       	out	0x11, r24	; 17
 408:	20 e3       	ldi	r18, 0x30	; 48
 40a:	22 bb       	out	0x12, r18	; 18
 40c:	92 9a       	sbi	0x12, 2	; 18
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 40e:	80 ed       	ldi	r24, 0xD0	; 208
 410:	97 e0       	ldi	r25, 0x07	; 7
 412:	fc 01       	movw	r30, r24
 414:	31 97       	sbiw	r30, 0x01	; 1
 416:	f1 f7       	brne	.-4      	; 0x414 <LCDinit+0x2c>
 418:	92 98       	cbi	0x12, 2	; 18
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 41a:	fc 01       	movw	r30, r24
 41c:	31 97       	sbiw	r30, 0x01	; 1
 41e:	f1 f7       	brne	.-4      	; 0x41c <LCDinit+0x34>
 420:	22 bb       	out	0x12, r18	; 18
 422:	92 9a       	sbi	0x12, 2	; 18
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 424:	fc 01       	movw	r30, r24
 426:	31 97       	sbiw	r30, 0x01	; 1
 428:	f1 f7       	brne	.-4      	; 0x426 <LCDinit+0x3e>
 42a:	92 98       	cbi	0x12, 2	; 18
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 42c:	fc 01       	movw	r30, r24
 42e:	31 97       	sbiw	r30, 0x01	; 1
 430:	f1 f7       	brne	.-4      	; 0x42e <LCDinit+0x46>
 432:	20 e2       	ldi	r18, 0x20	; 32
 434:	22 bb       	out	0x12, r18	; 18
 436:	92 9a       	sbi	0x12, 2	; 18
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 438:	fc 01       	movw	r30, r24
 43a:	31 97       	sbiw	r30, 0x01	; 1
 43c:	f1 f7       	brne	.-4      	; 0x43a <LCDinit+0x52>
 43e:	92 98       	cbi	0x12, 2	; 18
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 440:	01 97       	sbiw	r24, 0x01	; 1
 442:	f1 f7       	brne	.-4      	; 0x440 <LCDinit+0x58>
 444:	88 e2       	ldi	r24, 0x28	; 40
 446:	d5 de       	rcall	.-598    	; 0x1f2 <LCDsendCommand>
 448:	8c e0       	ldi	r24, 0x0C	; 12
 44a:	d3 de       	rcall	.-602    	; 0x1f2 <LCDsendCommand>
 44c:	c0 e0       	ldi	r28, 0x00	; 0
 44e:	d0 e0       	ldi	r29, 0x00	; 0
 450:	09 e5       	ldi	r16, 0x59	; 89
 452:	10 e0       	ldi	r17, 0x00	; 0
 454:	6c 2f       	mov	r22, r28
 456:	c8 01       	movw	r24, r16
 458:	27 df       	rcall	.-434    	; 0x2a8 <LCDdefinechar>
 45a:	21 96       	adiw	r28, 0x01	; 1
 45c:	08 5f       	subi	r16, 0xF8	; 248
 45e:	1f 4f       	sbci	r17, 0xFF	; 255
 460:	c8 30       	cpi	r28, 0x08	; 8
 462:	d1 05       	cpc	r29, r1
 464:	b9 f7       	brne	.-18     	; 0x454 <LCDinit+0x6c>
 466:	df 91       	pop	r29
 468:	cf 91       	pop	r28
 46a:	1f 91       	pop	r17
 46c:	0f 91       	pop	r16
 46e:	08 95       	ret

00000470 <__udivmodhi4>:
 470:	aa 1b       	sub	r26, r26
 472:	bb 1b       	sub	r27, r27
 474:	51 e1       	ldi	r21, 0x11	; 17
 476:	07 c0       	rjmp	.+14     	; 0x486 <__udivmodhi4_ep>

00000478 <__udivmodhi4_loop>:
 478:	aa 1f       	adc	r26, r26
 47a:	bb 1f       	adc	r27, r27
 47c:	a6 17       	cp	r26, r22
 47e:	b7 07       	cpc	r27, r23
 480:	10 f0       	brcs	.+4      	; 0x486 <__udivmodhi4_ep>
 482:	a6 1b       	sub	r26, r22
 484:	b7 0b       	sbc	r27, r23

00000486 <__udivmodhi4_ep>:
 486:	88 1f       	adc	r24, r24
 488:	99 1f       	adc	r25, r25
 48a:	5a 95       	dec	r21
 48c:	a9 f7       	brne	.-22     	; 0x478 <__udivmodhi4_loop>
 48e:	80 95       	com	r24
 490:	90 95       	com	r25
 492:	bc 01       	movw	r22, r24
 494:	cd 01       	movw	r24, r26
 496:	08 95       	ret

00000498 <__divmodhi4>:
 498:	97 fb       	bst	r25, 7
 49a:	09 2e       	mov	r0, r25
 49c:	07 26       	eor	r0, r23
 49e:	0a d0       	rcall	.+20     	; 0x4b4 <__divmodhi4_neg1>
 4a0:	77 fd       	sbrc	r23, 7
 4a2:	04 d0       	rcall	.+8      	; 0x4ac <__divmodhi4_neg2>
 4a4:	e5 df       	rcall	.-54     	; 0x470 <__udivmodhi4>
 4a6:	06 d0       	rcall	.+12     	; 0x4b4 <__divmodhi4_neg1>
 4a8:	00 20       	and	r0, r0
 4aa:	1a f4       	brpl	.+6      	; 0x4b2 <__divmodhi4_exit>

000004ac <__divmodhi4_neg2>:
 4ac:	70 95       	com	r23
 4ae:	61 95       	neg	r22
 4b0:	7f 4f       	sbci	r23, 0xFF	; 255

000004b2 <__divmodhi4_exit>:
 4b2:	08 95       	ret

000004b4 <__divmodhi4_neg1>:
 4b4:	f6 f7       	brtc	.-4      	; 0x4b2 <__divmodhi4_exit>
 4b6:	90 95       	com	r25
 4b8:	81 95       	neg	r24
 4ba:	9f 4f       	sbci	r25, 0xFF	; 255
 4bc:	08 95       	ret

000004be <_exit>:
 4be:	ff cf       	rjmp	.-2      	; 0x4be <_exit>
