   1               		.file	"main.c"
   2               		.arch atmega8
   3               	__SREG__ = 0x3f
   4               	__SP_H__ = 0x3e
   5               	__SP_L__ = 0x3d
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
  84               	.global	delay1s
  86               	delay1s:
   1:main.c        **** //*****************************************************************************
   2:main.c        **** //
   3:main.c        **** // File Name	: 'main.c'
   4:main.c        **** // Title		: LCD demo
   5:main.c        **** // Author		: Scienceprog.com - Copyright (C) 2007
   6:main.c        **** // Created		: 2007-03-29
   7:main.c        **** // Revised		: 2007-08-28
   8:main.c        **** // Version		: 1.0
   9:main.c        **** // Target MCU	: Atmel AVR series
  10:main.c        **** //
  11:main.c        **** // This code is distributed under the GNU Public License
  12:main.c        **** //		which can be found at http://www.gnu.org/licenses/gpl.txt
  13:main.c        **** //
  14:main.c        **** //*****************************************************************************
  15:main.c        **** 
  16:main.c        **** #include <avr/io.h>
  17:main.c        **** #include <avr/pgmspace.h>
  18:main.c        **** #include <util/delay.h>
  19:main.c        **** #include "lcd_lib.h"
  20:main.c        **** 
  21:main.c        **** //Strings stored in AVR Flash memory
  22:main.c        **** const uint8_t LCDwelcomeln1[] PROGMEM="AVR LCD DEMO\0";
  23:main.c        **** const uint8_t LCDprogress[] PROGMEM="Loading...\0";
  24:main.c        **** const uint8_t LCDanimation[] PROGMEM=" LCD animation \0";
  25:main.c        **** 
  26:main.c        **** // additional custom LCD characters
  27:main.c        **** const uint8_t backslash[8] PROGMEM= 
  28:main.c        **** {
  29:main.c        **** 0b00000000,//back slash
  30:main.c        **** 0b00010000,
  31:main.c        **** 0b00001000,
  32:main.c        **** 0b00000100,
  33:main.c        **** 0b00000010,
  34:main.c        **** 0b00000001,
  35:main.c        **** 0b00000000,
  36:main.c        **** 0b00000000
  37:main.c        **** };
  38:main.c        **** //delay 1s
  39:main.c        **** void delay1s(void)
  40:main.c        **** {
  87               	0) */
  88               		ldi r18,lo8(0)
  89               		ldi r30,lo8(20000)
  90               		ldi r31,hi8(20000)
  91 0000 20E0      	.L2:
  92 0002 E0E2      	.LBB13:
  93 0004 FEE4      	.LBB14:
  94               	.LBB15:
  95               	.LBB16:
  97               	.Ltext1:
  99               	.LM1:
 100               		movw r24,r30
   1:c:/winavr/bin/../avr/include/util/delay_basic.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:/winavr/bin/../avr/include/util/delay_basic.h ****    Copyright (c) 2007 Joerg Wunsch
   3:c:/winavr/bin/../avr/include/util/delay_basic.h ****    All rights reserved.
   4:c:/winavr/bin/../avr/include/util/delay_basic.h **** 
   5:c:/winavr/bin/../avr/include/util/delay_basic.h ****    Redistribution and use in source and binary forms, with or without
   6:c:/winavr/bin/../avr/include/util/delay_basic.h ****    modification, are permitted provided that the following conditions are met:
   7:c:/winavr/bin/../avr/include/util/delay_basic.h **** 
   8:c:/winavr/bin/../avr/include/util/delay_basic.h ****    * Redistributions of source code must retain the above copyright
   9:c:/winavr/bin/../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer.
  10:c:/winavr/bin/../avr/include/util/delay_basic.h **** 
  11:c:/winavr/bin/../avr/include/util/delay_basic.h ****    * Redistributions in binary form must reproduce the above copyright
  12:c:/winavr/bin/../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer in
  13:c:/winavr/bin/../avr/include/util/delay_basic.h ****      the documentation and/or other materials provided with the
  14:c:/winavr/bin/../avr/include/util/delay_basic.h ****      distribution.
  15:c:/winavr/bin/../avr/include/util/delay_basic.h **** 
  16:c:/winavr/bin/../avr/include/util/delay_basic.h ****    * Neither the name of the copyright holders nor the names of
  17:c:/winavr/bin/../avr/include/util/delay_basic.h ****      contributors may be used to endorse or promote products derived
  18:c:/winavr/bin/../avr/include/util/delay_basic.h ****      from this software without specific prior written permission.
  19:c:/winavr/bin/../avr/include/util/delay_basic.h **** 
  20:c:/winavr/bin/../avr/include/util/delay_basic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:c:/winavr/bin/../avr/include/util/delay_basic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:c:/winavr/bin/../avr/include/util/delay_basic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:c:/winavr/bin/../avr/include/util/delay_basic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:c:/winavr/bin/../avr/include/util/delay_basic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:c:/winavr/bin/../avr/include/util/delay_basic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:c:/winavr/bin/../avr/include/util/delay_basic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:c:/winavr/bin/../avr/include/util/delay_basic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:c:/winavr/bin/../avr/include/util/delay_basic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:c:/winavr/bin/../avr/include/util/delay_basic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:c:/winavr/bin/../avr/include/util/delay_basic.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:c:/winavr/bin/../avr/include/util/delay_basic.h **** 
  32:c:/winavr/bin/../avr/include/util/delay_basic.h **** /* $Id: delay_basic.h,v 1.1.2.2 2007/05/13 21:26:06 joerg_wunsch Exp $ */
  33:c:/winavr/bin/../avr/include/util/delay_basic.h **** 
  34:c:/winavr/bin/../avr/include/util/delay_basic.h **** #ifndef _UTIL_DELAY_BASIC_H_
  35:c:/winavr/bin/../avr/include/util/delay_basic.h **** #define _UTIL_DELAY_BASIC_H_ 1
  36:c:/winavr/bin/../avr/include/util/delay_basic.h **** 
  37:c:/winavr/bin/../avr/include/util/delay_basic.h **** #include <inttypes.h>
  38:c:/winavr/bin/../avr/include/util/delay_basic.h **** 
  39:c:/winavr/bin/../avr/include/util/delay_basic.h **** /** \file */
  40:c:/winavr/bin/../avr/include/util/delay_basic.h **** /** \defgroup util_delay_basic <util/delay_basic.h>: Basic busy-wait delay loops
  41:c:/winavr/bin/../avr/include/util/delay_basic.h ****     \code
  42:c:/winavr/bin/../avr/include/util/delay_basic.h ****     #include <util/delay_basic.h>
  43:c:/winavr/bin/../avr/include/util/delay_basic.h ****     \endcode
  44:c:/winavr/bin/../avr/include/util/delay_basic.h **** 
  45:c:/winavr/bin/../avr/include/util/delay_basic.h ****     The functions in this header file implement simple delay loops
  46:c:/winavr/bin/../avr/include/util/delay_basic.h ****     that perform a busy-waiting.  They are typically used to
  47:c:/winavr/bin/../avr/include/util/delay_basic.h ****     facilitate short delays in the program execution.  They are
  48:c:/winavr/bin/../avr/include/util/delay_basic.h ****     implemented as count-down loops with a well-known CPU cycle
  49:c:/winavr/bin/../avr/include/util/delay_basic.h ****     count per loop iteration.  As such, no other processing can
  50:c:/winavr/bin/../avr/include/util/delay_basic.h ****     occur simultaneously.  It should be kept in mind that the
  51:c:/winavr/bin/../avr/include/util/delay_basic.h ****     functions described here do not disable interrupts.
  52:c:/winavr/bin/../avr/include/util/delay_basic.h **** 
  53:c:/winavr/bin/../avr/include/util/delay_basic.h ****     In general, for long delays, the use of hardware timers is
  54:c:/winavr/bin/../avr/include/util/delay_basic.h ****     much preferrable, as they free the CPU, and allow for
  55:c:/winavr/bin/../avr/include/util/delay_basic.h ****     concurrent processing of other events while the timer is
  56:c:/winavr/bin/../avr/include/util/delay_basic.h ****     running.  However, in particular for very short delays, the
  57:c:/winavr/bin/../avr/include/util/delay_basic.h ****     overhead of setting up a hardware timer is too much compared
  58:c:/winavr/bin/../avr/include/util/delay_basic.h ****     to the overall delay time.
  59:c:/winavr/bin/../avr/include/util/delay_basic.h **** 
  60:c:/winavr/bin/../avr/include/util/delay_basic.h ****     Two inline functions are provided for the actual delay algorithms.
  61:c:/winavr/bin/../avr/include/util/delay_basic.h **** 
  62:c:/winavr/bin/../avr/include/util/delay_basic.h **** */
  63:c:/winavr/bin/../avr/include/util/delay_basic.h **** 
  64:c:/winavr/bin/../avr/include/util/delay_basic.h **** #if !defined(__DOXYGEN__)
  65:c:/winavr/bin/../avr/include/util/delay_basic.h **** static inline void _delay_loop_1(uint8_t __count) __attribute__((always_inline));
  66:c:/winavr/bin/../avr/include/util/delay_basic.h **** static inline void _delay_loop_2(uint16_t __count) __attribute__((always_inline));
  67:c:/winavr/bin/../avr/include/util/delay_basic.h **** #endif
  68:c:/winavr/bin/../avr/include/util/delay_basic.h **** 
  69:c:/winavr/bin/../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  70:c:/winavr/bin/../avr/include/util/delay_basic.h **** 
  71:c:/winavr/bin/../avr/include/util/delay_basic.h ****     Delay loop using an 8-bit counter \c __count, so up to 256
  72:c:/winavr/bin/../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 256 would have to be passed
  73:c:/winavr/bin/../avr/include/util/delay_basic.h ****     as 0.)  The loop executes three CPU cycles per iteration, not
  74:c:/winavr/bin/../avr/include/util/delay_basic.h ****     including the overhead the compiler needs to setup the counter
  75:c:/winavr/bin/../avr/include/util/delay_basic.h ****     register.
  76:c:/winavr/bin/../avr/include/util/delay_basic.h **** 
  77:c:/winavr/bin/../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to 768 microseconds
  78:c:/winavr/bin/../avr/include/util/delay_basic.h ****     can be achieved.
  79:c:/winavr/bin/../avr/include/util/delay_basic.h **** */
  80:c:/winavr/bin/../avr/include/util/delay_basic.h **** void
  81:c:/winavr/bin/../avr/include/util/delay_basic.h **** _delay_loop_1(uint8_t __count)
  82:c:/winavr/bin/../avr/include/util/delay_basic.h **** {
  83:c:/winavr/bin/../avr/include/util/delay_basic.h **** 	__asm__ volatile (
  84:c:/winavr/bin/../avr/include/util/delay_basic.h **** 		"1: dec %0" "\n\t"
  85:c:/winavr/bin/../avr/include/util/delay_basic.h **** 		"brne 1b"
  86:c:/winavr/bin/../avr/include/util/delay_basic.h **** 		: "=r" (__count)
  87:c:/winavr/bin/../avr/include/util/delay_basic.h **** 		: "0" (__count)
  88:c:/winavr/bin/../avr/include/util/delay_basic.h **** 	);
  89:c:/winavr/bin/../avr/include/util/delay_basic.h **** }
  90:c:/winavr/bin/../avr/include/util/delay_basic.h **** 
  91:c:/winavr/bin/../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  92:c:/winavr/bin/../avr/include/util/delay_basic.h **** 
  93:c:/winavr/bin/../avr/include/util/delay_basic.h ****     Delay loop using a 16-bit counter \c __count, so up to 65536
  94:c:/winavr/bin/../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 65536 would have to be
  95:c:/winavr/bin/../avr/include/util/delay_basic.h ****     passed as 0.)  The loop executes four CPU cycles per iteration,
  96:c:/winavr/bin/../avr/include/util/delay_basic.h ****     not including the overhead the compiler requires to setup the
  97:c:/winavr/bin/../avr/include/util/delay_basic.h ****     counter register pair.
  98:c:/winavr/bin/../avr/include/util/delay_basic.h **** 
  99:c:/winavr/bin/../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to about 262.1
 100:c:/winavr/bin/../avr/include/util/delay_basic.h ****     milliseconds can be achieved.
 101:c:/winavr/bin/../avr/include/util/delay_basic.h ****  */
 102:c:/winavr/bin/../avr/include/util/delay_basic.h **** void
 103:c:/winavr/bin/../avr/include/util/delay_basic.h **** _delay_loop_2(uint16_t __count)
 104:c:/winavr/bin/../avr/include/util/delay_basic.h **** {
 105:c:/winavr/bin/../avr/include/util/delay_basic.h **** 	__asm__ volatile (
 101               	 sbiw r24,1
 102               		brne 1b
 103 0006 CF01      	/* #NOAPP */
 104               	.LBE16:
 105 0008 0197      	.LBE15:
 106 000a 01F4      	.LBE14:
 107               	.LBE13:
 109               	.Ltext2:
 111               	.LM2:
 112               		subi r18,lo8(-(1))
 113               		cpi r18,lo8(100)
  41:main.c        **** 	uint8_t i;
  42:main.c        **** 	for(i=0;i<100;i++)
 114               	epilogue: frame size=0 */
 115               		ret
 116 000c 2F5F      	/* epilogue end (size=1) */
 117 000e 2436      	/* function delay1s size 12 (11) */
 125               	.Lscope0:
 127               	.global	demoanimation
 129               	demoanimation:
 131               	.LM3:
 132               	/* prologue: frame size=0 */
 133               		push r17
 134               	/* prologue end (size=1) */
  43:main.c        **** 	{
  44:main.c        **** 		_delay_ms(10);
  45:main.c        **** 	}
  46:main.c        **** }
  47:main.c        **** //demonstration of progress bar
  48:main.c        **** void progress(void)
  49:main.c        **** {
  50:main.c        **** 	LCDclr();
  51:main.c        **** 	CopyStringtoLCD(LCDwelcomeln1, 3, 0);	
  52:main.c        **** 	delay1s();
  53:main.c        **** 	LCDclr();
  54:main.c        **** 	CopyStringtoLCD(LCDprogress, 3, 0);
  55:main.c        **** 	for(uint8_t i=0;i<255;i++)
  56:main.c        **** 		{
  57:main.c        **** 			_delay_ms(10);
  58:main.c        **** 			LCDGotoXY(0, 1);
  59:main.c        **** 			LCDprogressBar(i, 255, 16);
  60:main.c        **** 		}
  61:main.c        **** }
  62:main.c        **** //demonstration of animation
  63:main.c        **** void demoanimation(void)
  64:main.c        **** {
 135               	demoanimation
 136               	.LM4:
 137               		rcall LCDclr
 139               	.LM5:
  65:main.c        **** 	LCDclr();
 140               	r22,lo8(0)
 141               		ldi r24,lo8(backslash)
 142 0016 00D0      		ldi r25,hi8(backslash)
  66:main.c        **** 	LCDdefinechar(backslash,0);
 143               	all LCDdefinechar
 145 0018 60E0      	.LM6:
 146 001a 80E0      		ldi r20,lo8(0)
 147 001c 90E0      		ldi r22,lo8(0)
 148 001e 00D0      		ldi r24,lo8(LCDanimation)
  67:main.c        **** 	CopyStringtoLCD(LCDanimation, 0, 0);
 149               	25,hi8(LCDanimation)
 150               		rcall CopyStringtoLCD
 151 0020 40E0      		ldi r17,lo8(0)
 152 0022 60E0      	.L8:
 153 0024 80E0      	.LBB17:
 155 0028 00D0      	.LM7:
 156 002a 10E0      		ldi r22,lo8(1)
 157               		ldi r24,lo8(8)
 158               		rcall LCDGotoXY
  68:main.c        **** 	for(uint8_t i=0;i<3;i++)
  69:main.c        **** 		{
  70:main.c        **** 			LCDGotoXY(8, 1);
 159               	,0,71,.LM8-demoanimation
 160               	.LM8:
 161 002c 61E0      		ldi r24,lo8(0)
 162 002e 88E0      		rcall LCDsendChar
  71:main.c        **** 			LCDsendChar(0);
 164               	
 165               		rcall delay1s
 167 0034 00D0      	.LM10:
  72:main.c        **** 			delay1s();
 168               	i r22,lo8(1)
 169               		ldi r24,lo8(8)
 170 0036 00D0      		rcall LCDGotoXY
  73:main.c        **** 			LCDGotoXY(8, 1);
 171               	tabn	68,0,74,.LM11-demoanimation
 172               	.LM11:
 173 0038 61E0      		ldi r24,lo8(45)
 174 003a 88E0      		rcall LCDsendChar
  74:main.c        **** 			LCDsendChar('-');
 176               	:
 177               		rcall delay1s
 179 0040 00D0      	.LM13:
  75:main.c        **** 			delay1s();
 180               	 r22,lo8(1)
 181               		ldi r24,lo8(8)
 182 0042 00D0      		rcall LCDGotoXY
  76:main.c        **** 			LCDGotoXY(8, 1);
 183               	tabn	68,0,77,.LM14-demoanimation
 184               	.LM14:
 185 0044 61E0      		ldi r24,lo8(47)
 186 0046 88E0      		rcall LCDsendChar
  77:main.c        **** 			LCDsendChar('/');
 188               	:
 189               		rcall delay1s
 191 004c 00D0      	.LM16:
  78:main.c        **** 			delay1s();
 192               	 r22,lo8(1)
 193               		ldi r24,lo8(8)
 194 004e 00D0      		rcall LCDGotoXY
  79:main.c        **** 			LCDGotoXY(8, 1);
 195               	tabn	68,0,80,.LM17-demoanimation
 196               	.LM17:
 197 0050 61E0      		ldi r24,lo8(124)
 198 0052 88E0      		rcall LCDsendChar
  80:main.c        **** 			LCDsendChar('|');
 200               	:
 201               		rcall delay1s
 203 0058 00D0      	.LM19:
  81:main.c        **** 			delay1s();
 204               	 r22,lo8(1)
 205               		ldi r24,lo8(8)
 206 005a 00D0      		rcall LCDGotoXY
  82:main.c        **** 			LCDGotoXY(8, 1);
 207               	tabn	68,0,83,.LM20-demoanimation
 208               	.LM20:
 209 005c 61E0      		ldi r24,lo8(8)
 210 005e 88E0      		rcall LCDsendChar
  83:main.c        **** 			LCDsendChar(8);//backslash
 212               	:
 213               		rcall delay1s
 215 0064 00D0      	.LM22:
  84:main.c        **** 			delay1s();
 216               	 r22,lo8(1)
 217               		ldi r24,lo8(8)
 218 0066 00D0      		rcall LCDGotoXY
  85:main.c        **** 			LCDGotoXY(8, 1);
 219               	oanimation
 220               	.LM20:
 221 0068 61E0      		ldi r24,lo8(8)
 222 006a 88E0      		rcall LCDsendChar
  86:main.c        **** 			LCDsendChar('-');
 224               	:
 225               		rcall delay1s
 227 0070 00D0      	.LM22:
  87:main.c        **** 			delay1s();
 228               	 r22,lo8(1)
 229               		ldi r24,lo8(8)
 230 0072 00D0      		rcall LCDGotoXY
  88:main.c        **** 			LCDGotoXY(8, 1);
 231               	oanimation
 232               	.LM20:
 233 0074 61E0      		ldi r24,lo8(8)
 234 0076 88E0      		rcall LCDsendChar
  89:main.c        **** 			LCDsendChar('/');
 236               	:
 237               		rcall delay1s
 239 007c 00D0      	.LM22:
  90:main.c        **** 			delay1s();
 240               	 r22,lo8(1)
 241               		ldi r24,lo8(8)
 242 007e 00D0      		rcall LCDGotoXY
  91:main.c        **** 			LCDGotoXY(8, 1);
 243               	oanimation
 244               	.LM20:
 245 0080 61E0      		ldi r24,lo8(8)
 246 0082 88E0      		rcall LCDsendChar
  92:main.c        **** 			LCDsendChar('|');
 248               	:
 249               		rcall delay1s
 251 0088 00D0      	.LM22:
  93:main.c        **** 			delay1s();
 252               	 r22,lo8(1)
 253               		ldi r24,lo8(8)
 254 008a 00D0      		rcall LCDGotoXY
 256               	.LM23:
 257 008c 1F5F      		ldi r24,lo8(45)
 258 008e 1330      		rcall LCDsendChar
 260               	.LM24:
 261               		rcall delay1s
 263 0094 0895      	.LM25:
 264               		ldi r22,lo8(1)
 265               		ldi r24,lo8(8)
 266               		rcall LCDGotoXY
 268               	.LM26:
 269               		ldi r24,lo8(47)
 270               		rcall LCDsendChar
 272               	.LM27:
 273               		rcall delay1s
 275               	.LM28:
 276               		ldi r22,lo8(1)
 277               		ldi r24,lo8(8)
 278 0096 CF93      		rcall LCDGotoXY
 280               	.LM29:
 281               		ldi r24,lo8(124)
 282               		rcall LCDsendChar
 284               	.LM30:
 285               		rcall delay1s
 287 009e 63E0      	.LM31:
 288 00a0 80E0      		subi r17,lo8(-(1))
 289 00a2 90E0      		cpi r17,lo8(3)
 290 00a4 00D0      		brne .L8
 291               	.LBE17:
 292               	/* epilogue: frame size=0 */
 293 00a6 00D0      		pop r17
 294               		ret
 295               	/* epilogue end (size=2) */
 296 00a8 00D0      	/* function demoanimation size 65 (62) */
 301 00ae 80E0      	.Lscope1:
 303 00b2 00D0      	.global	progress
 305 00b6 D0E0      	progress:
 307               	.LM32:
 308               	/* prologue: frame size=0 */
 309               		push r28
 310               		push r29
 311               	/* prologue end (size=2) */
 313               	.LM33:
 314               		rcall LCDclr
 316 00b8 80E2      	.LM34:
 317 00ba 9EE4      		ldi r20,lo8(0)
 318               		ldi r22,lo8(3)
 319 00bc 0197      		ldi r24,lo8(LCDwelcomeln1)
 320 00be 01F4      		ldi r25,hi8(LCDwelcomeln1)
 321               		rcall CopyStringtoLCD
 323               	.LM35:
 324               		rcall delay1s
 326               	.LM36:
 327               		rcall LCDclr
 329               	.LM37:
 330 00c0 61E0      		ldi r20,lo8(0)
 331 00c2 80E0      		ldi r22,lo8(3)
 332 00c4 00D0      		ldi r24,lo8(LCDprogress)
 333               		ldi r25,hi8(LCDprogress)
 334               		rcall CopyStringtoLCD
 335 00c6 40E1      		ldi r28,lo8(0)
 336 00c8 6FEF      		ldi r29,hi8(0)
 337 00ca 8C2F      	.L14:
 338 00cc 00D0      	.LBB18:
 339 00ce 2196      	.LBB19:
 340               	.LBB20:
 341               	.LBB21:
 342 00d0 CF3F      	.LBB22:
 344 00d4 01F4      	.Ltext3:
 346               	.LM38:
 347 00d6 DF91      		ldi r24,lo8(20000)
 348 00d8 CF91      		ldi r25,hi8(20000)
 349 00da 0895      	/* #APP */
 350               		1: sbiw r24,1
 351               		brne 1b
 352               	/* #NOAPP */
 353               	.LBE22:
 354               	.LBE21:
 355               	.LBE20:
 356               	.LBE19:
 358               	.Ltext4:
 360               	.LM39:
  94:main.c        **** 		}	
  95:main.c        **** }
  96:main.c        **** 
  97:main.c        **** int main(void)
  98:main.c        **** {
 361               	
 362               	.LBE20:
 363               	.LBE19:
  99:main.c        **** 	LCDinit();//init LCD bit, dual line, cursor right
 365               	: sbiw r24,1
 366               		brne 1b
 367 00dc 00D0      	/* #NOAPP */
 100:main.c        **** 	LCDclr();//clears LCD
 368               	-progress
 369               	.LM38:
 370 00de 00D0      		ldi r24,lo8(20000)
 371               		ldi r25,hi8(20000)
 101:main.c        **** 	while(1)//loop demos
 102:main.c        **** 	{
 103:main.c        **** 		progress();
 372               	c.h",132,0,0,.Ltext3
 373               	.Ltext3:
 104:main.c        **** 		delay1s();
 375               	tabs	"c:/winavr/bin/../avr/include/util/delay_basic.h",132,0,0,.Ltext3
 376               	.Ltext3:
 105:main.c        **** 		demoanimation();
 378               	tabs	"c:/winavr/bin/../avr/include/util/delay_basic.h",132,0,0,.Ltext3
 379               	.Ltext3:
 381 00e6 00C0      	.LM38:
 382               		ldi r24,lo8(20000)
 383               		ldi r25,hi8(20000)
 384               	/* #APP */
 385               		1: sbiw r24,1
 386               		brne 1b
 387               	/* #NOAPP */
 388               	.LBE22:
 389               	.LBE21:
 390               	.LBE20:
 391               	.LBE19:
 393 0000 4156 5220 	.Ltext4:
 393      4C43 4420 
 393      4445 4D4F 
 393      00
 395               	.LM39:
 396               		ldi r22,lo8(1)
 397               		ldi r24,lo8(0)
 398               		rcall LCDGotoXY
 400 0019 00        	.LM40:
 401               		ldi r20,lo8(16)
 402               		ldi r22,lo8(-1)
 403               		mov r24,r28
 404               		rcall LCDprogressBar
 405 001a 204C 4344 		adiw r28,1
 405      2061 6E69 
 405      6D61 7469 
 405      6F6E 2000 
 407               	.LM41:
 408               		cpi r28,255
 409               		cpc r29,__zero_reg__
 410               		brne .L14
 411 002b 00        	.LBE18:
 412 002c 10        	/* epilogue: frame size=0 */
 413 002d 08        		pop r29
 414 002e 04        		pop r28
 415 002f 02        		ret
 416 0030 01        	/* epilogue end (size=3) */
 417 0031 00        	/* function progress size 37 (32) */
 422               	.Lscope2:
 424               	.global	main
 426               	main:
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\DOCUME~1\MINDAU~1.OFF\LOCALS~1\Temp/ccbXRhxj.s:3      *ABS*:0000003f __SREG__
C:\DOCUME~1\MINDAU~1.OFF\LOCALS~1\Temp/ccbXRhxj.s:4      *ABS*:0000003e __SP_H__
C:\DOCUME~1\MINDAU~1.OFF\LOCALS~1\Temp/ccbXRhxj.s:5      *ABS*:0000003d __SP_L__
C:\DOCUME~1\MINDAU~1.OFF\LOCALS~1\Temp/ccbXRhxj.s:6      *ABS*:00000000 __tmp_reg__
C:\DOCUME~1\MINDAU~1.OFF\LOCALS~1\Temp/ccbXRhxj.s:7      *ABS*:00000001 __zero_reg__
C:\DOCUME~1\MINDAU~1.OFF\LOCALS~1\Temp/ccbXRhxj.s:86     .text:00000000 delay1s
C:\DOCUME~1\MINDAU~1.OFF\LOCALS~1\Temp/ccbXRhxj.s:134    .text:00000014 demoanimation
C:\DOCUME~1\MINDAU~1.OFF\LOCALS~1\Temp/ccbXRhxj.s:410    .progmem.data:0000002b backslash
C:\DOCUME~1\MINDAU~1.OFF\LOCALS~1\Temp/ccbXRhxj.s:404    .progmem.data:0000001a LCDanimation
C:\DOCUME~1\MINDAU~1.OFF\LOCALS~1\Temp/ccbXRhxj.s:274    .text:00000096 progress
C:\DOCUME~1\MINDAU~1.OFF\LOCALS~1\Temp/ccbXRhxj.s:392    .progmem.data:00000000 LCDwelcomeln1
C:\DOCUME~1\MINDAU~1.OFF\LOCALS~1\Temp/ccbXRhxj.s:398    .progmem.data:0000000e LCDprogress
C:\DOCUME~1\MINDAU~1.OFF\LOCALS~1\Temp/ccbXRhxj.s:360    .text:000000dc main

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
LCDclr
LCDdefinechar
CopyStringtoLCD
LCDGotoXY
LCDsendChar
LCDprogressBar
LCDinit
