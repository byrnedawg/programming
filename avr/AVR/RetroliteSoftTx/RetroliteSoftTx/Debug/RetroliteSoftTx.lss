
RetroliteSoftTx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000027a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000027a  0000030e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002d  00800060  00800060  0000030e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000030e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  0000033e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e4  00000000  00000000  000003be  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000300  00000000  00000000  00000aa2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002dd  00000000  00000000  00000da2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000015c  00000000  00000000  00001080  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ac  00000000  00000000  000011dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000438  00000000  00000000  00001588  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  000019c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	20 c0       	rjmp	.+64     	; 0x56 <__vector_10>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	ea e7       	ldi	r30, 0x7A	; 122
  32:	f2 e0       	ldi	r31, 0x02	; 2
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a0 36       	cpi	r26, 0x60	; 96
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	a0 e6       	ldi	r26, 0x60	; 96
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	ad 38       	cpi	r26, 0x8D	; 141
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	c9 d0       	rcall	.+402    	; 0x1e4 <main>
  52:	11 c1       	rjmp	.+546    	; 0x276 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <__vector_10>:
		i = -i;
	}

	// fill buffer with digits (in reverse order)
	do {
		buf[len++] = 48 + i % 10;	// ASCII digits start at 48
  56:	1f 92       	push	r1
  58:	0f 92       	push	r0
  5a:	0f b6       	in	r0, 0x3f	; 63
  5c:	0f 92       	push	r0
  5e:	11 24       	eor	r1, r1
  60:	8f 93       	push	r24
  62:	9f 93       	push	r25
  64:	ef 93       	push	r30
  66:	ff 93       	push	r31
  68:	80 91 69 00 	lds	r24, 0x0069
	} while ((i /= 10) > 0 && len < PRINT_INT_BUFSIZE);
  6c:	81 30       	cpi	r24, 0x01	; 1
  6e:	29 f5       	brne	.+74     	; 0xba <__vector_10+0x64>
  70:	80 91 68 00 	lds	r24, 0x0068
  74:	81 50       	subi	r24, 0x01	; 1
  76:	f9 f4       	brne	.+62     	; 0xb6 <__vector_10+0x60>
  78:	80 91 65 00 	lds	r24, 0x0065
  7c:	90 91 66 00 	lds	r25, 0x0066
  80:	80 ff       	sbrs	r24, 0
  82:	02 c0       	rjmp	.+4      	; 0x88 <__vector_10+0x32>
		i = -i;
	}

	// fill buffer with digits (in reverse order)
	do {
		buf[len++] = 48 + i % 10;	// ASCII digits start at 48
  84:	c1 9a       	sbi	0x18, 1	; 24
  86:	01 c0       	rjmp	.+2      	; 0x8a <__vector_10+0x34>
  88:	c1 98       	cbi	0x18, 1	; 24
  8a:	80 91 65 00 	lds	r24, 0x0065
	} while ((i /= 10) > 0 && len < PRINT_INT_BUFSIZE);

	if (sign < 0) {	// don't forget to add the sign
  8e:	90 91 66 00 	lds	r25, 0x0066
		buf[len] = '-';
  92:	96 95       	lsr	r25
  94:	87 95       	ror	r24
  96:	90 93 66 00 	sts	0x0066, r25
  9a:	80 93 65 00 	sts	0x0065, r24
  9e:	80 91 67 00 	lds	r24, 0x0067
		len--;
	}

	// reverse output of the buffer
	do {
		softuart_putchar(buf[len--]);
  a2:	81 50       	subi	r24, 0x01	; 1
  a4:	80 93 67 00 	sts	0x0067, r24
  a8:	81 11       	cpse	r24, r1
  aa:	04 c0       	rjmp	.+8      	; 0xb4 <__vector_10+0x5e>
  ac:	10 92 69 00 	sts	0x0069, r1
  b0:	83 e0       	ldi	r24, 0x03	; 3
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <__vector_10+0x60>
  b4:	83 e0       	ldi	r24, 0x03	; 3
  b6:	80 93 68 00 	sts	0x0068, r24
	} while (len >= 0);
  ba:	80 91 6b 00 	lds	r24, 0x006B
		len--;
	}

	// reverse output of the buffer
	do {
		softuart_putchar(buf[len--]);
  be:	81 11       	cpse	r24, r1
  c0:	56 c0       	rjmp	.+172    	; 0x16e <__vector_10+0x118>
	} while (len >= 0);
}
  c2:	80 91 64 00 	lds	r24, 0x0064
  c6:	88 23       	and	r24, r24
  c8:	e9 f0       	breq	.+58     	; 0x104 <__vector_10+0xae>
  ca:	80 91 63 00 	lds	r24, 0x0063
  ce:	81 50       	subi	r24, 0x01	; 1
  d0:	80 93 63 00 	sts	0x0063, r24
  d4:	81 11       	cpse	r24, r1
  d6:	4b c0       	rjmp	.+150    	; 0x16e <__vector_10+0x118>
  d8:	10 92 64 00 	sts	0x0064, r1
  dc:	10 92 6a 00 	sts	0x006A, r1
  e0:	e0 91 6c 00 	lds	r30, 0x006C
  e4:	f0 e0       	ldi	r31, 0x00	; 0
	if ( flag_rx_off == SU_FALSE ) {
		if ( flag_rx_waiting_for_stop_bit ) {
			if ( --timer_rx_ctr == 0 ) {
				flag_rx_waiting_for_stop_bit = SU_FALSE;
				flag_rx_ready = SU_FALSE;
				inbuf[qin] = internal_rx_buffer;
  e6:	80 91 62 00 	lds	r24, 0x0062
  ea:	e3 59       	subi	r30, 0x93	; 147
  ec:	ff 4f       	sbci	r31, 0xFF	; 255
  ee:	80 83       	st	Z, r24
				if ( ++qin >= SOFTUART_IN_BUF_SIZE ) {
  f0:	80 91 6c 00 	lds	r24, 0x006C
  f4:	8f 5f       	subi	r24, 0xFF	; 255
  f6:	80 93 6c 00 	sts	0x006C, r24
  fa:	80 32       	cpi	r24, 0x20	; 32
  fc:	c0 f1       	brcs	.+112    	; 0x16e <__vector_10+0x118>
					// overflow - reset inbuf-index
					qin = 0;
  fe:	10 92 6c 00 	sts	0x006C, r1
 102:	35 c0       	rjmp	.+106    	; 0x16e <__vector_10+0x118>
				}
			}
		}
		else {  // rx_test_busy
			if ( flag_rx_ready == SU_FALSE ) {
 104:	80 91 6a 00 	lds	r24, 0x006A
 108:	81 11       	cpse	r24, r1
 10a:	10 c0       	rjmp	.+32     	; 0x12c <__vector_10+0xd6>
				start_bit = get_rx_pin_status();
				// test for start bit
				if ( start_bit == 0 ) {
 10c:	b0 99       	sbic	0x16, 0	; 22
 10e:	2f c0       	rjmp	.+94     	; 0x16e <__vector_10+0x118>
					flag_rx_ready      = SU_TRUE;
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	80 93 6a 00 	sts	0x006A, r24
					internal_rx_buffer = 0;
 116:	10 92 62 00 	sts	0x0062, r1
					timer_rx_ctr       = 4;
 11a:	94 e0       	ldi	r25, 0x04	; 4
 11c:	90 93 63 00 	sts	0x0063, r25
					bits_left_in_rx    = RX_NUM_OF_BITS;
 120:	98 e0       	ldi	r25, 0x08	; 8
 122:	90 93 61 00 	sts	0x0061, r25
					rx_mask            = 1;
 126:	80 93 60 00 	sts	0x0060, r24
 12a:	21 c0       	rjmp	.+66     	; 0x16e <__vector_10+0x118>
				}
			}
			else {  // rx_busy
				tmp = timer_rx_ctr;
 12c:	80 91 63 00 	lds	r24, 0x0063
				if ( --tmp == 0 ) { // if ( --timer_rx_ctr == 0 ) {
 130:	81 50       	subi	r24, 0x01	; 1
 132:	d9 f4       	brne	.+54     	; 0x16a <__vector_10+0x114>
					// rcv
					tmp = 3;
					flag_in = get_rx_pin_status();
					if ( flag_in ) {
 134:	b0 9b       	sbis	0x16, 0	; 22
 136:	07 c0       	rjmp	.+14     	; 0x146 <__vector_10+0xf0>
						internal_rx_buffer |= rx_mask;
 138:	90 91 62 00 	lds	r25, 0x0062
 13c:	80 91 60 00 	lds	r24, 0x0060
 140:	89 2b       	or	r24, r25
 142:	80 93 62 00 	sts	0x0062, r24
					}
					rx_mask <<= 1;
 146:	80 91 60 00 	lds	r24, 0x0060
 14a:	88 0f       	add	r24, r24
 14c:	80 93 60 00 	sts	0x0060, r24
					if ( --bits_left_in_rx == 0 ) {
 150:	80 91 61 00 	lds	r24, 0x0061
 154:	81 50       	subi	r24, 0x01	; 1
 156:	80 93 61 00 	sts	0x0061, r24
 15a:	81 11       	cpse	r24, r1
 15c:	05 c0       	rjmp	.+10     	; 0x168 <__vector_10+0x112>
						flag_rx_waiting_for_stop_bit = SU_TRUE;
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	80 93 64 00 	sts	0x0064, r24
			}
			else {  // rx_busy
				tmp = timer_rx_ctr;
				if ( --tmp == 0 ) { // if ( --timer_rx_ctr == 0 ) {
					// rcv
					tmp = 3;
 164:	83 e0       	ldi	r24, 0x03	; 3
 166:	01 c0       	rjmp	.+2      	; 0x16a <__vector_10+0x114>
 168:	83 e0       	ldi	r24, 0x03	; 3
					rx_mask <<= 1;
					if ( --bits_left_in_rx == 0 ) {
						flag_rx_waiting_for_stop_bit = SU_TRUE;
					}
				}
				timer_rx_ctr = tmp;
 16a:	80 93 63 00 	sts	0x0063, r24
			}
		}
	}
}
 16e:	ff 91       	pop	r31
 170:	ef 91       	pop	r30
 172:	9f 91       	pop	r25
 174:	8f 91       	pop	r24
 176:	0f 90       	pop	r0
 178:	0f be       	out	0x3f, r0	; 63
 17a:	0f 90       	pop	r0
 17c:	1f 90       	pop	r1
 17e:	18 95       	reti

00000180 <softuart_init>:
	SREG = sreg_tmp;
}

void softuart_init( void )
{
	flag_tx_busy  = SU_FALSE;
 180:	10 92 69 00 	sts	0x0069, r1
	flag_rx_ready = SU_FALSE;
 184:	10 92 6a 00 	sts	0x006A, r1
	flag_rx_off   = SU_FALSE;
 188:	10 92 6b 00 	sts	0x006B, r1
	
	set_tx_pin_high(); /* mt: set to high to avoid garbage on init */
 18c:	c1 9a       	sbi	0x18, 1	; 24
}

static void io_init(void)
{
	// TX-Pin as output
	SOFTUART_TXDDR |=  ( 1 << SOFTUART_TXBIT );
 18e:	b9 9a       	sbi	0x17, 1	; 23
	// RX-Pin as input
	SOFTUART_RXDDR &= ~( 1 << SOFTUART_RXBIT );
 190:	b8 98       	cbi	0x17, 0	; 23

static void timer_init(void)
{
	unsigned char sreg_tmp;
	
	sreg_tmp = SREG;
 192:	9f b7       	in	r25, 0x3f	; 63
	cli();
 194:	f8 94       	cli
	
	SOFTUART_T_COMP_REG = SOFTUART_TIMERTOP;     /* set top */
 196:	80 e1       	ldi	r24, 0x10	; 16
 198:	89 bd       	out	0x29, r24	; 41

	SOFTUART_T_CONTR_REGA = SOFTUART_CTC_MASKA | SOFTUART_PRESC_MASKA;
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	8a bd       	out	0x2a, r24	; 42
	SOFTUART_T_CONTR_REGB = SOFTUART_CTC_MASKB | SOFTUART_PRESC_MASKB;
 19e:	83 bf       	out	0x33, r24	; 51

	SOFTUART_T_INTCTL_REG |= SOFTUART_CMPINT_EN_MASK;
 1a0:	89 b7       	in	r24, 0x39	; 57
 1a2:	80 61       	ori	r24, 0x10	; 16
 1a4:	89 bf       	out	0x39, r24	; 57

	SOFTUART_T_CNT_REG = 0; /* reset counter */
 1a6:	12 be       	out	0x32, r1	; 50
	
	SREG = sreg_tmp;
 1a8:	9f bf       	out	0x3f, r25	; 63
 1aa:	08 95       	ret

000001ac <softuart_putchar>:
	return ( flag_tx_busy == SU_TRUE ) ? 1 : 0;
}

void softuart_putchar( const char ch )
{
	while ( flag_tx_busy == SU_TRUE ) {
 1ac:	90 91 69 00 	lds	r25, 0x0069
 1b0:	91 30       	cpi	r25, 0x01	; 1
 1b2:	e1 f3       	breq	.-8      	; 0x1ac <softuart_putchar>
		; // wait for transmitter ready
		  // add watchdog-reset here if needed;
	}

	// invoke_UART_transmit
	timer_tx_ctr       = 3;
 1b4:	93 e0       	ldi	r25, 0x03	; 3
 1b6:	90 93 68 00 	sts	0x0068, r25
	bits_left_in_tx    = TX_NUM_OF_BITS;
 1ba:	9a e0       	ldi	r25, 0x0A	; 10
 1bc:	90 93 67 00 	sts	0x0067, r25
	internal_tx_buffer = ( ch << 1 ) | 0x200;
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	92 60       	ori	r25, 0x02	; 2
 1c8:	90 93 66 00 	sts	0x0066, r25
 1cc:	80 93 65 00 	sts	0x0065, r24
	flag_tx_busy       = SU_TRUE;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	80 93 69 00 	sts	0x0069, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d6:	87 ee       	ldi	r24, 0xE7	; 231
 1d8:	93 e0       	ldi	r25, 0x03	; 3
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <softuart_putchar+0x2e>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <softuart_putchar+0x34>
 1e0:	00 00       	nop
 1e2:	08 95       	ret

000001e4 <main>:
// program entry point
int main(void) {
	// DDRB for the UART TX will be set in the softuart_init() function!
	
	 // we set both LED pins to "output"
	 DDRB |= (1 << PIN_LED1) | (1 << PIN_LED2);
 1e4:	87 b3       	in	r24, 0x17	; 23
 1e6:	88 61       	ori	r24, 0x18	; 24
 1e8:	87 bb       	out	0x17, r24	; 23
	 
	 // initially set the pins to "low"
	 Set_Pin_Low(PORTB, PIN_LED1);
 1ea:	c3 98       	cbi	0x18, 3	; 24
	 Set_Pin_Low(PORTB, PIN_LED2);
 1ec:	c4 98       	cbi	0x18, 4	; 24
	
	// we neet to init softuart
	softuart_init();
 1ee:	c8 df       	rcall	.-112    	; 0x180 <softuart_init>
	flag_rx_off = SU_FALSE;
}

void softuart_turn_rx_off( void )
{
	flag_rx_off = SU_TRUE;
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	80 93 6b 00 	sts	0x006B, r24
	softuart_turn_rx_off();    // we don't receive serial data

	sei(); // this enables interupts, which are needed for softuart
 1f6:	78 94       	sei
	
	softuart_putchar(CMD);
 1f8:	8e ef       	ldi	r24, 0xFE	; 254
 1fa:	d8 df       	rcall	.-80     	; 0x1ac <softuart_putchar>
	softuart_putchar(Clear_Screen);
 1fc:	88 e5       	ldi	r24, 0x58	; 88
 1fe:	d6 df       	rcall	.-84     	; 0x1ac <softuart_putchar>
	// main loop
	uint8_t toggle = 0;
	int8_t address = 213;
	int8_t checksum = 170;
	int8_t sum = 0;
 200:	d0 e0       	ldi	r29, 0x00	; 0
	sei(); // this enables interupts, which are needed for softuart
	
	softuart_putchar(CMD);
	softuart_putchar(Clear_Screen);
	// main loop
	uint8_t toggle = 0;
 202:	c0 e0       	ldi	r28, 0x00	; 0
	int8_t command = 85;
	
	while(1)
	{
		Set_Pin_Low(PORTB, (toggle == 0 ? PIN_LED1 : PIN_LED2));
		Set_Pin_High(PORTB, (toggle == 0 ? PIN_LED2 : PIN_LED1));
 204:	68 94       	set
 206:	ee 24       	eor	r14, r14
 208:	e3 f8       	bld	r14, 3
 20a:	68 94       	set
 20c:	ff 24       	eor	r15, r15
 20e:	f4 f8       	bld	r15, 4
		toggle = !toggle;
 210:	11 e0       	ldi	r17, 0x01	; 1
 212:	00 e0       	ldi	r16, 0x00	; 0
	int8_t sum = 0;
	int8_t command = 85;
	
	while(1)
	{
		Set_Pin_Low(PORTB, (toggle == 0 ? PIN_LED1 : PIN_LED2));
 214:	88 b3       	in	r24, 0x18	; 24
 216:	cc 23       	and	r28, r28
 218:	21 f1       	breq	.+72     	; 0x262 <__stack+0x3>
 21a:	28 c0       	rjmp	.+80     	; 0x26c <__stack+0xd>
		Set_Pin_High(PORTB, (toggle == 0 ? PIN_LED2 : PIN_LED1));
 21c:	89 2b       	or	r24, r25
 21e:	88 bb       	out	0x18, r24	; 24
		toggle = !toggle;
 220:	81 2f       	mov	r24, r17
 222:	c1 11       	cpse	r28, r1
 224:	80 2f       	mov	r24, r16
 226:	c8 2f       	mov	r28, r24
		
		softuart_putchar(CMD);
 228:	8e ef       	ldi	r24, 0xFE	; 254
 22a:	c0 df       	rcall	.-128    	; 0x1ac <softuart_putchar>
		softuart_putchar(Go_Home);
 22c:	88 e4       	ldi	r24, 0x48	; 72
 22e:	be df       	rcall	.-132    	; 0x1ac <softuart_putchar>
		//sum = address+checksum+command;
		//softuart_puts(FName);
		//PRINT_NL;
		//softuart_puts(LName);
		//PRINT_Space;
		softuart_putchar(address);
 230:	85 ed       	ldi	r24, 0xD5	; 213
 232:	bc df       	rcall	.-136    	; 0x1ac <softuart_putchar>
		PRINT_Space;
 234:	80 e2       	ldi	r24, 0x20	; 32
 236:	ba df       	rcall	.-140    	; 0x1ac <softuart_putchar>
		softuart_putchar(checksum);
 238:	8a ea       	ldi	r24, 0xAA	; 170
 23a:	b8 df       	rcall	.-144    	; 0x1ac <softuart_putchar>
		PRINT_Space;
 23c:	80 e2       	ldi	r24, 0x20	; 32
 23e:	b6 df       	rcall	.-148    	; 0x1ac <softuart_putchar>
		softuart_putchar(command);
 240:	85 e5       	ldi	r24, 0x55	; 85
 242:	b4 df       	rcall	.-152    	; 0x1ac <softuart_putchar>
		PRINT_Space;
 244:	80 e2       	ldi	r24, 0x20	; 32
 246:	b2 df       	rcall	.-156    	; 0x1ac <softuart_putchar>
		sum++;
 248:	df 5f       	subi	r29, 0xFF	; 255
		softuart_putchar(sum);
 24a:	8d 2f       	mov	r24, r29
 24c:	af df       	rcall	.-162    	; 0x1ac <softuart_putchar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24e:	2f ef       	ldi	r18, 0xFF	; 255
 250:	84 e3       	ldi	r24, 0x34	; 52
 252:	9c e0       	ldi	r25, 0x0C	; 12
 254:	21 50       	subi	r18, 0x01	; 1
 256:	80 40       	sbci	r24, 0x00	; 0
 258:	90 40       	sbci	r25, 0x00	; 0
 25a:	e1 f7       	brne	.-8      	; 0x254 <main+0x70>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <main+0x7a>
 25e:	00 00       	nop
 260:	d9 cf       	rjmp	.-78     	; 0x214 <main+0x30>
	int8_t sum = 0;
	int8_t command = 85;
	
	while(1)
	{
		Set_Pin_Low(PORTB, (toggle == 0 ? PIN_LED1 : PIN_LED2));
 262:	87 7f       	andi	r24, 0xF7	; 247
 264:	88 bb       	out	0x18, r24	; 24
		Set_Pin_High(PORTB, (toggle == 0 ? PIN_LED2 : PIN_LED1));
 266:	98 b3       	in	r25, 0x18	; 24
 268:	8f 2d       	mov	r24, r15
 26a:	d8 cf       	rjmp	.-80     	; 0x21c <main+0x38>
	int8_t sum = 0;
	int8_t command = 85;
	
	while(1)
	{
		Set_Pin_Low(PORTB, (toggle == 0 ? PIN_LED1 : PIN_LED2));
 26c:	8f 7e       	andi	r24, 0xEF	; 239
 26e:	88 bb       	out	0x18, r24	; 24
		Set_Pin_High(PORTB, (toggle == 0 ? PIN_LED2 : PIN_LED1));
 270:	98 b3       	in	r25, 0x18	; 24
 272:	8e 2d       	mov	r24, r14
 274:	d3 cf       	rjmp	.-90     	; 0x21c <main+0x38>

00000276 <_exit>:
 276:	f8 94       	cli

00000278 <__stop_program>:
 278:	ff cf       	rjmp	.-2      	; 0x278 <__stop_program>
