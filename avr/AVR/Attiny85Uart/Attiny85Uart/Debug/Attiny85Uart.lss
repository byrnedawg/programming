
Attiny85Uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000096  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000096  0000010a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000021d  00000000  00000000  0000017a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000019c  00000000  00000000  00000397  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001e6  00000000  00000000  00000533  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000048  00000000  00000000  0000071c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001a5  00000000  00000000  00000764  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000054  00000000  00000000  00000909  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  0000095d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	02 d0       	rcall	.+4      	; 0x30 <main>
  2c:	32 c0       	rjmp	.+100    	; 0x92 <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <main>:

int main(void)
{
	char c = 'A';

	dbg_tx_init();
  30:	c0 9a       	sbi	0x18, 0	; 24
  32:	b8 9a       	sbi	0x17, 0	; 23

	while(1) {
		dbg_putchar(c);
  34:	81 e4       	ldi	r24, 0x41	; 65
  36:	12 d0       	rcall	.+36     	; 0x5c <dbg_putchar>
		if(++c > 'Z') c = 'A';
  38:	c2 e4       	ldi	r28, 0x42	; 66
  3a:	01 c0       	rjmp	.+2      	; 0x3e <__SP_H__>
  3c:	c1 e4       	ldi	r28, 0x41	; 65
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  3e:	2f ef       	ldi	r18, 0xFF	; 255
  40:	84 e3       	ldi	r24, 0x34	; 52
  42:	9c e0       	ldi	r25, 0x0C	; 12
  44:	21 50       	subi	r18, 0x01	; 1
  46:	80 40       	sbci	r24, 0x00	; 0
  48:	90 40       	sbci	r25, 0x00	; 0
  4a:	e1 f7       	brne	.-8      	; 0x44 <__SREG__+0x5>
  4c:	00 c0       	rjmp	.+0      	; 0x4e <__SREG__+0xf>
  4e:	00 00       	nop
	char c = 'A';

	dbg_tx_init();

	while(1) {
		dbg_putchar(c);
  50:	8c 2f       	mov	r24, r28
  52:	04 d0       	rcall	.+8      	; 0x5c <dbg_putchar>
		if(++c > 'Z') c = 'A';
  54:	cf 5f       	subi	r28, 0xFF	; 255
  56:	cb 35       	cpi	r28, 0x5B	; 91
  58:	88 f7       	brcc	.-30     	; 0x3c <main+0xc>
  5a:	f1 cf       	rjmp	.-30     	; 0x3e <__SP_H__>

0000005c <dbg_putchar>:
#define DBG_UART_TX_NUM_ADD_NOP		((F_CPU/DBG_UART_BAUDRATE-16)%4)
	uint8_t sreg;
	uint16_t tmp;
	uint8_t numiter = 10;

	sreg = SREG;
  5c:	2f b7       	in	r18, 0x3f	; 63
	cli();
  5e:	f8 94       	cli

	asm volatile (
  60:	9a e0       	ldi	r25, 0x0A	; 10
  62:	e8 b3       	in	r30, 0x18	; 24
  64:	ee 7f       	andi	r30, 0xFE	; 254
  66:	e8 bb       	out	0x18, r30	; 24
	...
  70:	00 00       	nop
  72:	e5 e6       	ldi	r30, 0x65	; 101
  74:	f0 e0       	ldi	r31, 0x00	; 0
  76:	31 97       	sbiw	r30, 0x01	; 1
  78:	f1 f7       	brne	.-4      	; 0x76 <dbg_putchar+0x1a>
  7a:	e8 b3       	in	r30, 0x18	; 24
  7c:	80 fd       	sbrc	r24, 0
  7e:	e1 60       	ori	r30, 0x01	; 1
  80:	80 ff       	sbrs	r24, 0
  82:	ee 7f       	andi	r30, 0xFE	; 254
  84:	e8 bb       	out	0x18, r30	; 24
  86:	08 94       	sec
  88:	87 95       	ror	r24
  8a:	9a 95       	dec	r25
  8c:	91 f7       	brne	.-28     	; 0x72 <dbg_putchar+0x16>
		  "M" (1<<DBG_UART_TX_PIN),
		  "i" (DBG_UART_TX_NUM_DELAY_CYCLES),
		  "1" (c),			/* data */
		  "2" (numiter)
	);
	SREG = sreg;
  8e:	2f bf       	out	0x3f, r18	; 63
  90:	08 95       	ret

00000092 <_exit>:
  92:	f8 94       	cli

00000094 <__stop_program>:
  94:	ff cf       	rjmp	.-2      	; 0x94 <__stop_program>
