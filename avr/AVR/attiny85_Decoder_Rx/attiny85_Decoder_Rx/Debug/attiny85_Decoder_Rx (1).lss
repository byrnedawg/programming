
attiny85_Decoder_Rx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000023e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000023e  000002d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800062  00800062  000002d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000028b  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000a8  00000000  00000000  0000062f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001ec  00000000  00000000  000006d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b8  00000000  00000000  000008c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000024c  00000000  00000000  00000a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000020f  00000000  00000000  00000cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00000ed7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	bf c0       	rjmp	.+382    	; 0x184 <__vector_2>
   6:	aa c0       	rjmp	.+340    	; 0x15c <__vector_3>
   8:	9f c0       	rjmp	.+318    	; 0x148 <__vector_4>
   a:	39 c0       	rjmp	.+114    	; 0x7e <__vector_5>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	23 c0       	rjmp	.+70     	; 0x56 <__vector_7>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__vector_8>
  12:	ae c0       	rjmp	.+348    	; 0x170 <__vector_9>
  14:	3e c0       	rjmp	.+124    	; 0x92 <__vector_10>
  16:	8e c0       	rjmp	.+284    	; 0x134 <__vector_11>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	ee e3       	ldi	r30, 0x3E	; 62
  32:	f2 e0       	ldi	r31, 0x02	; 2
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a2 36       	cpi	r26, 0x62	; 98
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	a2 e6       	ldi	r26, 0x62	; 98
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a7 36       	cpi	r26, 0x67	; 103
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	d8 d0       	rcall	.+432    	; 0x202 <main>
  52:	f3 c0       	rjmp	.+486    	; 0x23a <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <__vector_7>:
volatile bool Light_on = true; // true if LDR_Value > Light_On_Threshold
volatile bool BTN_Down = false; // true if the push button is being help down
volatile uint8_t Auto_Off_Timer = 0;

ISR(ANA_COMP_vect)
{
  56:	1f 92       	push	r1
  58:	0f 92       	push	r0
  5a:	0f b6       	in	r0, 0x3f	; 63
  5c:	0f 92       	push	r0
  5e:	11 24       	eor	r1, r1

}
  60:	0f 90       	pop	r0
  62:	0f be       	out	0x3f, r0	; 63
  64:	0f 90       	pop	r0
  66:	1f 90       	pop	r1
  68:	18 95       	reti

0000006a <__vector_8>:

ISR(ADC_vect) // Interrupt for ADC Converter
{
  6a:	1f 92       	push	r1
  6c:	0f 92       	push	r0
  6e:	0f b6       	in	r0, 0x3f	; 63
  70:	0f 92       	push	r0
  72:	11 24       	eor	r1, r1
	
}
  74:	0f 90       	pop	r0
  76:	0f be       	out	0x3f, r0	; 63
  78:	0f 90       	pop	r0
  7a:	1f 90       	pop	r1
  7c:	18 95       	reti

0000007e <__vector_5>:

ISR(TIMER0_OVF_vect) // timer 0 overflow interrupt
{
  7e:	1f 92       	push	r1
  80:	0f 92       	push	r0
  82:	0f b6       	in	r0, 0x3f	; 63
  84:	0f 92       	push	r0
  86:	11 24       	eor	r1, r1

}
  88:	0f 90       	pop	r0
  8a:	0f be       	out	0x3f, r0	; 63
  8c:	0f 90       	pop	r0
  8e:	1f 90       	pop	r1
  90:	18 95       	reti

00000092 <__vector_10>:
ISR(TIMER0_COMPA_vect) // timer 0 compare A interrupt
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	5f 93       	push	r21
  9e:	6f 93       	push	r22
  a0:	7f 93       	push	r23
  a2:	8f 93       	push	r24
  a4:	9f 93       	push	r25
  a6:	af 93       	push	r26
  a8:	bf 93       	push	r27
	//TCNT0 = 0x83;
	timer0Overflows++;	// 225 1 min // 1125 5 min // 2250 10min // 15 4seconds // keep track of timer 0 overflows for timer interrupt polling
  aa:	80 91 65 00 	lds	r24, 0x0065
  ae:	90 91 66 00 	lds	r25, 0x0066
  b2:	01 96       	adiw	r24, 0x01	; 1
  b4:	90 93 66 00 	sts	0x0066, r25
  b8:	80 93 65 00 	sts	0x0065, r24
	
	if(timer0Overflows % 50 == 0)
  bc:	80 91 65 00 	lds	r24, 0x0065
  c0:	90 91 66 00 	lds	r25, 0x0066
  c4:	62 e3       	ldi	r22, 0x32	; 50
  c6:	70 e0       	ldi	r23, 0x00	; 0
  c8:	a4 d0       	rcall	.+328    	; 0x212 <__udivmodhi4>
  ca:	89 2b       	or	r24, r25
  cc:	39 f4       	brne	.+14     	; 0xdc <__vector_10+0x4a>
	{
		if(Light_on == true)
  ce:	80 91 60 00 	lds	r24, 0x0060
  d2:	88 23       	and	r24, r24
  d4:	11 f0       	breq	.+4      	; 0xda <__vector_10+0x48>
		{
			output_high(PORTB, Light_Output);
  d6:	c4 9a       	sbi	0x18, 4	; 24
  d8:	01 c0       	rjmp	.+2      	; 0xdc <__vector_10+0x4a>
		}
		else
		{
			output_low(PORTB, Light_Output);
  da:	c4 98       	cbi	0x18, 4	; 24
		}
	}
	if(timer0Overflows % 100 == 0)
  dc:	80 91 65 00 	lds	r24, 0x0065
  e0:	90 91 66 00 	lds	r25, 0x0066
  e4:	64 e6       	ldi	r22, 0x64	; 100
  e6:	70 e0       	ldi	r23, 0x00	; 0
  e8:	94 d0       	rcall	.+296    	; 0x212 <__udivmodhi4>
  ea:	89 2b       	or	r24, r25
  ec:	b9 f4       	brne	.+46     	; 0x11c <__vector_10+0x8a>
	{
		if(is_set(PINB, RxInput)) // if the push button is held down connecting pin B2 to ground
  ee:	b0 9b       	sbis	0x16, 0	; 22
  f0:	06 c0       	rjmp	.+12     	; 0xfe <__vector_10+0x6c>
		{
			//BTN_Down = true; // button down is true
			Auto_Off_Timer = 0;
  f2:	10 92 62 00 	sts	0x0062, r1
			//output_high(PORTB, Light_Output);
			Light_on = true;
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	80 93 60 00 	sts	0x0060, r24
  fc:	0f c0       	rjmp	.+30     	; 0x11c <__vector_10+0x8a>
		}
		else
		{
			if(Auto_Off_Timer > 10)
  fe:	80 91 62 00 	lds	r24, 0x0062
 102:	8b 30       	cpi	r24, 0x0B	; 11
 104:	18 f0       	brcs	.+6      	; 0x10c <__vector_10+0x7a>
			{
				//output_low(PORTB, Light_Output);
				Light_on = false;
 106:	10 92 60 00 	sts	0x0060, r1
 10a:	08 c0       	rjmp	.+16     	; 0x11c <__vector_10+0x8a>
			}
			else
			{
				//output_high(PORTB, Light_Output);
				Auto_Off_Timer++;
 10c:	80 91 62 00 	lds	r24, 0x0062
 110:	8f 5f       	subi	r24, 0xFF	; 255
 112:	80 93 62 00 	sts	0x0062, r24
				Light_on = true;
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	80 93 60 00 	sts	0x0060, r24
			}
		}
	}
}
 11c:	bf 91       	pop	r27
 11e:	af 91       	pop	r26
 120:	9f 91       	pop	r25
 122:	8f 91       	pop	r24
 124:	7f 91       	pop	r23
 126:	6f 91       	pop	r22
 128:	5f 91       	pop	r21
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <__vector_11>:

ISR(TIMER0_COMPB_vect) // timer 0 compare B interrupt
{
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1

}
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <__vector_4>:

ISR(TIMER1_OVF_vect) // timer 1 overflow interrupt
{
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
	
}
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <__vector_3>:

ISR(TIMER1_COMPA_vect) // timer 1 compare A interrupt
{
 15c:	1f 92       	push	r1
 15e:	0f 92       	push	r0
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	0f 92       	push	r0
 164:	11 24       	eor	r1, r1

}
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <__vector_9>:

ISR(TIMER1_COMPB_vect) // timer 1 compare B interrupt
{
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1

}
 17a:	0f 90       	pop	r0
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	0f 90       	pop	r0
 180:	1f 90       	pop	r1
 182:	18 95       	reti

00000184 <__vector_2>:

ISR(PCINT0_vect) // Pin Change interrupt service routine
{
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
 18e:	8f 93       	push	r24
	sleep_disable(); // If pins change state wake up
 190:	85 b7       	in	r24, 0x35	; 53
 192:	8f 7d       	andi	r24, 0xDF	; 223
 194:	85 bf       	out	0x35, r24	; 53
	//TCNT0 = 0x00; // reset timer 0
	//TCNT1 = 0x00; // reset timer 1
	timer0Overflows = 0; // reset timer o overflows
 196:	10 92 66 00 	sts	0x0066, r1
 19a:	10 92 65 00 	sts	0x0065, r1
	timer1Overflows = 0; // 
 19e:	10 92 64 00 	sts	0x0064, r1
 1a2:	10 92 63 00 	sts	0x0063, r1
}
 1a6:	8f 91       	pop	r24
 1a8:	0f 90       	pop	r0
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	0f 90       	pop	r0
 1ae:	1f 90       	pop	r1
 1b0:	18 95       	reti

000001b2 <PinChangeInit>:

void PinChangeInit(void)
{
	PCMSK |= (1<<PCINT0); // pin change mask: listen to portb bit 2 PB2
 1b2:	a8 9a       	sbi	0x15, 0	; 21
	GIMSK |= (1<<PCIE); // enable PCINT interrupt
 1b4:	8b b7       	in	r24, 0x3b	; 59
 1b6:	80 62       	ori	r24, 0x20	; 32
 1b8:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1<<BODS)|(0<<PUD)|(1<<SE)|(0<<SM1)|(1<<SM0)|(0<<BODSE)|(1<<ISC01)|(0<<ISC00); // disable BOD during sleep, Sleep Enable, ADC Noise Reduction, The falling edge of INT0 generates an interrupt request
 1ba:	85 b7       	in	r24, 0x35	; 53
 1bc:	8a 6a       	ori	r24, 0xAA	; 170
 1be:	85 bf       	out	0x35, r24	; 53
 1c0:	08 95       	ret

000001c2 <PortInit>:
	//	(PCINT3/XTAL1/CLKI/~OC1B/ADC3)	LDR		--PB3 |		 |PB2--	Switch	(SCK/USCK/SCL/ADC1/T0/INT0/PCINT2)
	//	(PCINT4/XTAL2/CLKO/OC1B/ADC2)	BLU LED	--PB4 |		 |PB1--	RED LED	(MISO/DO/AIN1/OC0B/OC1A/PCINT1)
	//											--GND |______|PB0--	GRN LED	(MOSI/DI/SDA/AIN0/OC0A/~OC1A/AREF/PCINT0)
	//

	set_input(DDRB, RxInput);
 1c2:	b8 98       	cbi	0x17, 0	; 23
	set_output(DDRB, Light_Output);
 1c4:	bc 9a       	sbi	0x17, 4	; 23
 1c6:	08 95       	ret

000001c8 <SystemInit>:
}

void SystemInit(void) // Power on variable initialization
{
	sei(); // enable all interrupts
 1c8:	78 94       	sei
	timer0Overflows = 0; // time0roverflows set to 0
 1ca:	10 92 66 00 	sts	0x0066, r1
 1ce:	10 92 65 00 	sts	0x0065, r1
	timer1Overflows = 0; // time1roverflows set to 0
 1d2:	10 92 64 00 	sts	0x0064, r1
 1d6:	10 92 63 00 	sts	0x0063, r1
 1da:	08 95       	ret

000001dc <timer0_init>:
	// NOTE: Assumes DIV8 fuse set for 1 MHz operation
	// 8-bit counter means overflow interrupt every 61 Hz to turn on the LED
	// Variable Compare_A interrupt in between OVF to turn off the LED
	// 1000 0010
	// 1000 0011
	GTCCR |= (0<<TSM)|(0<<PSR0);
 1dc:	8c b5       	in	r24, 0x2c	; 44
 1de:	8c bd       	out	0x2c, r24	; 44
	TCCR0A |= (0<<COM0A1)|(0<<COM0A0)|(0<<COM0B1)|(0<<COM0B0)|(1<<WGM01)|(0<<WGM00); // Set OC0A/OC0B on Compare Match, clear OC0A/OC0B at BOTTOM (inverting mode) ,Fast PWM Mode
 1e0:	8a b5       	in	r24, 0x2a	; 42
 1e2:	82 60       	ori	r24, 0x02	; 2
 1e4:	8a bd       	out	0x2a, r24	; 42
	TCCR0B |= (0<<FOC0A)|(0<<FOC0B)|(0<<WGM02)|(0<<CS02)|(1<<CS01)|(1<<CS00); //0x02;	pre-scale= CK/8
 1e6:	83 b7       	in	r24, 0x33	; 51
 1e8:	83 60       	ori	r24, 0x03	; 3
 1ea:	83 bf       	out	0x33, r24	; 51
	OCR0A = 0x7C; // Governs Duty Cycle (192 ~75% of 256) for inverting mode OCR0A = (255-duty-cycle)
 1ec:	8c e7       	ldi	r24, 0x7C	; 124
 1ee:	89 bd       	out	0x29, r24	; 41
	//OCR0B = 0x00; // Governs Duty Cycle (192 ~75% of 256) for inverting mode OCR0B = (255-duty-cycle)
//	TCNT0 = 0x83; // Start Timer
	TIMSK |= (0<<OCIE1A)|(0<<OCIE1B)|(1<<OCIE0A)|(1<<OCIE0B)|(0<<TOIE1)|(1<<TOIE0);	// Compare A and OVF Interrupt enabled
 1f0:	89 b7       	in	r24, 0x39	; 57
 1f2:	8a 61       	ori	r24, 0x1A	; 26
 1f4:	89 bf       	out	0x39, r24	; 57
	
	TCNT0 = 0x00; // Start Timer
 1f6:	12 be       	out	0x32, r1	; 50
	timer0Overflows = 0; // Start timer overflows at 0
 1f8:	10 92 66 00 	sts	0x0066, r1
 1fc:	10 92 65 00 	sts	0x0065, r1
 200:	08 95       	ret

00000202 <main>:
	DIDR0 |= (0<<ADC0D)|(0<<ADC2D)|(0<<ADC3D)|(0<<ADC1D)|(0<<AIN1D)|(0<<AIN0D); // Digital input Disable Register
}

int main(void)
{
	PortInit(); // inputs and outputs initialize
 202:	df df       	rcall	.-66     	; 0x1c2 <PortInit>
	timer0_init(); // timer 0 initialize
 204:	eb df       	rcall	.-42     	; 0x1dc <timer0_init>
	//timer1_init(); // timer 1 initialize
	//ADC_init(); // analog to digital converter initialize
	PinChangeInit();
 206:	d5 df       	rcall	.-86     	; 0x1b2 <PinChangeInit>
	SystemInit(); // system variables and state initialize
 208:	df df       	rcall	.-66     	; 0x1c8 <SystemInit>
	//output_low(PORTB, Light_Output );
	//_delay_ms(1000);

	while(1)
	{
		sleep_enable(); // sleep until pin interrupt
 20a:	85 b7       	in	r24, 0x35	; 53
 20c:	80 62       	ori	r24, 0x20	; 32
 20e:	85 bf       	out	0x35, r24	; 53
 210:	fc cf       	rjmp	.-8      	; 0x20a <main+0x8>

00000212 <__udivmodhi4>:
 212:	aa 1b       	sub	r26, r26
 214:	bb 1b       	sub	r27, r27
 216:	51 e1       	ldi	r21, 0x11	; 17
 218:	07 c0       	rjmp	.+14     	; 0x228 <__udivmodhi4_ep>

0000021a <__udivmodhi4_loop>:
 21a:	aa 1f       	adc	r26, r26
 21c:	bb 1f       	adc	r27, r27
 21e:	a6 17       	cp	r26, r22
 220:	b7 07       	cpc	r27, r23
 222:	10 f0       	brcs	.+4      	; 0x228 <__udivmodhi4_ep>
 224:	a6 1b       	sub	r26, r22
 226:	b7 0b       	sbc	r27, r23

00000228 <__udivmodhi4_ep>:
 228:	88 1f       	adc	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	5a 95       	dec	r21
 22e:	a9 f7       	brne	.-22     	; 0x21a <__udivmodhi4_loop>
 230:	80 95       	com	r24
 232:	90 95       	com	r25
 234:	bc 01       	movw	r22, r24
 236:	cd 01       	movw	r24, r26
 238:	08 95       	ret

0000023a <_exit>:
 23a:	f8 94       	cli

0000023c <__stop_program>:
 23c:	ff cf       	rjmp	.-2      	; 0x23c <__stop_program>
