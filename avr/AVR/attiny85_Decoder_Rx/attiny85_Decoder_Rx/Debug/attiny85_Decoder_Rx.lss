
attiny85_Decoder_Rx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000282  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000282  00000316  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800062  00800062  00000318  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003d4  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000013c  00000000  00000000  000007bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029b  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000019c  00000000  00000000  00000b94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000029e  00000000  00000000  00000d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000216  00000000  00000000  00000fce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  000011e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	85 c0       	rjmp	.+266    	; 0x110 <__vector_2>
   6:	70 c0       	rjmp	.+224    	; 0xe8 <__vector_3>
   8:	65 c0       	rjmp	.+202    	; 0xd4 <__vector_4>
   a:	39 c0       	rjmp	.+114    	; 0x7e <__vector_5>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	23 c0       	rjmp	.+70     	; 0x56 <__vector_7>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__vector_8>
  12:	74 c0       	rjmp	.+232    	; 0xfc <__vector_9>
  14:	4b c0       	rjmp	.+150    	; 0xac <__vector_10>
  16:	54 c0       	rjmp	.+168    	; 0xc0 <__vector_11>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e2 e8       	ldi	r30, 0x82	; 130
  32:	f2 e0       	ldi	r31, 0x02	; 2
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a2 36       	cpi	r26, 0x62	; 98
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	a2 e6       	ldi	r26, 0x62	; 98
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a7 36       	cpi	r26, 0x67	; 103
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	b7 d0       	rcall	.+366    	; 0x1c0 <main>
  52:	15 c1       	rjmp	.+554    	; 0x27e <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <__vector_7>:
volatile bool Light_on = true; // true if LDR_Value > Light_On_Threshold
volatile bool BTN_Down = false; // true if the push button is being help down
volatile uint8_t Auto_Off_Timer = 0;

ISR(ANA_COMP_vect)
{
  56:	1f 92       	push	r1
  58:	0f 92       	push	r0
  5a:	0f b6       	in	r0, 0x3f	; 63
  5c:	0f 92       	push	r0
  5e:	11 24       	eor	r1, r1

}
  60:	0f 90       	pop	r0
  62:	0f be       	out	0x3f, r0	; 63
  64:	0f 90       	pop	r0
  66:	1f 90       	pop	r1
  68:	18 95       	reti

0000006a <__vector_8>:

ISR(ADC_vect) // Interrupt for ADC Converter
{
  6a:	1f 92       	push	r1
  6c:	0f 92       	push	r0
  6e:	0f b6       	in	r0, 0x3f	; 63
  70:	0f 92       	push	r0
  72:	11 24       	eor	r1, r1
	
}
  74:	0f 90       	pop	r0
  76:	0f be       	out	0x3f, r0	; 63
  78:	0f 90       	pop	r0
  7a:	1f 90       	pop	r1
  7c:	18 95       	reti

0000007e <__vector_5>:

ISR(TIMER0_OVF_vect) // timer 0 overflow interrupt
{
  7e:	1f 92       	push	r1
  80:	0f 92       	push	r0
  82:	0f b6       	in	r0, 0x3f	; 63
  84:	0f 92       	push	r0
  86:	11 24       	eor	r1, r1
  88:	8f 93       	push	r24
  8a:	9f 93       	push	r25
	timer0Overflows++;	// 225 1 min // 1125 5 min // 2250 10min // 15 4seconds // keep track of timer 0 overflows for timer interrupt polling
  8c:	80 91 65 00 	lds	r24, 0x0065
  90:	90 91 66 00 	lds	r25, 0x0066
  94:	01 96       	adiw	r24, 0x01	; 1
  96:	90 93 66 00 	sts	0x0066, r25
  9a:	80 93 65 00 	sts	0x0065, r24

	
}
  9e:	9f 91       	pop	r25
  a0:	8f 91       	pop	r24
  a2:	0f 90       	pop	r0
  a4:	0f be       	out	0x3f, r0	; 63
  a6:	0f 90       	pop	r0
  a8:	1f 90       	pop	r1
  aa:	18 95       	reti

000000ac <__vector_10>:
ISR(TIMER0_COMPA_vect) // timer 0 compare A interrupt
{
  ac:	1f 92       	push	r1
  ae:	0f 92       	push	r0
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	0f 92       	push	r0
  b4:	11 24       	eor	r1, r1
	
}
  b6:	0f 90       	pop	r0
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	0f 90       	pop	r0
  bc:	1f 90       	pop	r1
  be:	18 95       	reti

000000c0 <__vector_11>:

ISR(TIMER0_COMPB_vect) // timer 0 compare B interrupt
{
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1

}
  ca:	0f 90       	pop	r0
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	0f 90       	pop	r0
  d0:	1f 90       	pop	r1
  d2:	18 95       	reti

000000d4 <__vector_4>:

ISR(TIMER1_OVF_vect) // timer 1 overflow interrupt
{
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
				output_high(PORTB, Light_Output);
			}
		}
	}
	*/
}
  de:	0f 90       	pop	r0
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	0f 90       	pop	r0
  e4:	1f 90       	pop	r1
  e6:	18 95       	reti

000000e8 <__vector_3>:



ISR(TIMER1_COMPA_vect) // timer 1 compare A interrupt
{
  e8:	1f 92       	push	r1
  ea:	0f 92       	push	r0
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	0f 92       	push	r0
  f0:	11 24       	eor	r1, r1

}
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <__vector_9>:

ISR(TIMER1_COMPB_vect) // timer 1 compare B interrupt
{
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1

}
 106:	0f 90       	pop	r0
 108:	0f be       	out	0x3f, r0	; 63
 10a:	0f 90       	pop	r0
 10c:	1f 90       	pop	r1
 10e:	18 95       	reti

00000110 <__vector_2>:

ISR(PCINT0_vect) // Pin Change interrupt service routine
{
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
	sleep_disable(); // If pins change state wake up
 11c:	85 b7       	in	r24, 0x35	; 53
 11e:	8f 7d       	andi	r24, 0xDF	; 223
 120:	85 bf       	out	0x35, r24	; 53
	TCNT0 = 0x00; // reset timer 0
 122:	12 be       	out	0x32, r1	; 50
	TCNT1 = 0x00; // reset timer 1
 124:	1f bc       	out	0x2f, r1	; 47
	timer0Overflows = 0; // reset timer o overflows
 126:	10 92 66 00 	sts	0x0066, r1
 12a:	10 92 65 00 	sts	0x0065, r1
	timer1Overflows = 0; // 
 12e:	10 92 64 00 	sts	0x0064, r1
 132:	10 92 63 00 	sts	0x0063, r1
}
 136:	8f 91       	pop	r24
 138:	0f 90       	pop	r0
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	0f 90       	pop	r0
 13e:	1f 90       	pop	r1
 140:	18 95       	reti

00000142 <PinChangeInit>:

void PinChangeInit(void)
{
	PCMSK |= (1<<PCINT0); // pin change mask: listen to portb bit 2 PB2
 142:	a8 9a       	sbi	0x15, 0	; 21
	GIMSK |= (1<<PCIE); // enable PCINT interrupt
 144:	8b b7       	in	r24, 0x3b	; 59
 146:	80 62       	ori	r24, 0x20	; 32
 148:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1<<BODS)|(0<<PUD)|(1<<SE)|(0<<SM1)|(1<<SM0)|(0<<BODSE)|(1<<ISC01)|(0<<ISC00); // disable BOD during sleep, Sleep Enable, ADC Noise Reduction, The falling edge of INT0 generates an interrupt request
 14a:	85 b7       	in	r24, 0x35	; 53
 14c:	8a 6a       	ori	r24, 0xAA	; 170
 14e:	85 bf       	out	0x35, r24	; 53
 150:	08 95       	ret

00000152 <PortInit>:
	//	(PCINT3/XTAL1/CLKI/~OC1B/ADC3)	LDR		--PB3 |		 |PB2--	Switch	(SCK/USCK/SCL/ADC1/T0/INT0/PCINT2)
	//	(PCINT4/XTAL2/CLKO/OC1B/ADC2)	BLU LED	--PB4 |		 |PB1--	RED LED	(MISO/DO/AIN1/OC0B/OC1A/PCINT1)
	//											--GND |______|PB0--	GRN LED	(MOSI/DI/SDA/AIN0/OC0A/~OC1A/AREF/PCINT0)
	//

	set_input(DDRB, RxInput);
 152:	b8 98       	cbi	0x17, 0	; 23
	set_output(DDRB, Light_Output);
 154:	bc 9a       	sbi	0x17, 4	; 23
	
	output_low(PORTB, Light_Output);
 156:	c4 98       	cbi	0x18, 4	; 24
 158:	08 95       	ret

0000015a <SystemInit>:
}

void SystemInit(void) // Power on variable initialization
{
	sei(); // enable all interrupts
 15a:	78 94       	sei
	timer0Overflows = 0; // time0roverflows set to 0
 15c:	10 92 66 00 	sts	0x0066, r1
 160:	10 92 65 00 	sts	0x0065, r1
	timer1Overflows = 0; // time1roverflows set to 0
 164:	10 92 64 00 	sts	0x0064, r1
 168:	10 92 63 00 	sts	0x0063, r1
 16c:	08 95       	ret

0000016e <timer0_init>:
	// NOTE: Assumes DIV8 fuse set for 1 MHz operation
	// 8-bit counter means overflow interrupt every 61 Hz to turn on the LED
	// Variable Compare_A interrupt in between OVF to turn off the LED
	// 1000 0010
	// 1000 0011
	TCCR0A |= (0<<COM0A1)|(0<<COM0A0)|(0<<COM0B1)|(0<<COM0B0)|(0<<WGM01)|(0<<WGM00); // Set OC0A/OC0B on Compare Match, clear OC0A/OC0B at BOTTOM (inverting mode) ,Fast PWM Mode
 16e:	8a b5       	in	r24, 0x2a	; 42
 170:	8a bd       	out	0x2a, r24	; 42
	TCCR0B |= (1<<FOC0A)|(0<<FOC0B)|(0<<WGM02)|(0<<CS02)|(1<<CS01)|(1<<CS00); //0x02;	pre-scale= CK/8
 172:	83 b7       	in	r24, 0x33	; 51
 174:	83 68       	ori	r24, 0x83	; 131
 176:	83 bf       	out	0x33, r24	; 51
	OCR0A = 0x7D; // Governs Duty Cycle (192 ~75% of 256) for inverting mode OCR0A = (255-duty-cycle)
 178:	8d e7       	ldi	r24, 0x7D	; 125
 17a:	89 bd       	out	0x29, r24	; 41
	OCR0B = 0x00; // Governs Duty Cycle (192 ~75% of 256) for inverting mode OCR0B = (255-duty-cycle)
 17c:	18 bc       	out	0x28, r1	; 40
	TCNT0 = 0x00; // Start Timer
 17e:	12 be       	out	0x32, r1	; 50
	timer0Overflows = 0; // Start timer overflows at 0
 180:	10 92 66 00 	sts	0x0066, r1
 184:	10 92 65 00 	sts	0x0065, r1
 188:	08 95       	ret

0000018a <timer1_init>:

void timer1_init(void) // Initialize timer 1
{
	// 1000 0110
	
	TCCR1 |= (1<<CTC1)|(0<<PWM1A)|(0<<COM1A1)|(0<<COM1A0)|(0<<CS13)|(1<<CS12)|(1<<CS11)|(0<<CS10); // PWM1A Disabled, Timer/Counter Comparator A disconnected from output pin OC1A, prescale= CK/128 right now was CK/8 1000b ~ 1100b
 18a:	80 b7       	in	r24, 0x30	; 48
 18c:	86 68       	ori	r24, 0x86	; 134
 18e:	80 bf       	out	0x30, r24	; 48
	GTCCR |= (0<<TSM)|(0<<PWM1B)|(0<<COM1B1)|(0<<COM1B0)|(0<<FOC1B)|(0<<FOC1A)|(0<<PSR1)|(0<<PSR0); //PWM1B Enabled, OC1B cleared on compare match. Set when TCNT1 = $00
 190:	8c b5       	in	r24, 0x2c	; 44
 192:	8c bd       	out	0x2c, r24	; 44
	OCR1A = 0xFA; // Disabled Governs Duty Cycle (128 ~50% of 256)
 194:	8a ef       	ldi	r24, 0xFA	; 250
 196:	8e bd       	out	0x2e, r24	; 46
	//OCR1B = 0x00; // Governs Duty Cycle (192 ~75% of 256)
	//OCR1C = PWM_200Hz;	// OCR1C = Governs PWM Frequency :: (1Mhz/prescaler)/(OCR1C+1)= PWM Frequency :: 1M/128/39+1 = 200Hz	0x27 1M/128/252+1 = 33Hz	0xFC
	TIMSK |= (1<<OCIE1A)|(0<<OCIE1B)|(1<<OCIE0A)|(0<<OCIE0B)|(1<<TOIE1)|(1<<TOIE0);	// Compare A and OVF Interrupt enabled
 198:	89 b7       	in	r24, 0x39	; 57
 19a:	86 65       	ori	r24, 0x56	; 86
 19c:	89 bf       	out	0x39, r24	; 57
	TCNT1 = 0x00; // Start Timer
 19e:	1f bc       	out	0x2f, r1	; 47
	timer1Overflows = 0; // Start timer overflows at 0
 1a0:	10 92 64 00 	sts	0x0064, r1
 1a4:	10 92 63 00 	sts	0x0063, r1
 1a8:	08 95       	ret

000001aa <ADC_init>:
	DIDR0 |= (0<<ADC0D)|(0<<ADC2D)|(0<<ADC3D)|(0<<ADC1D)|(0<<AIN1D)|(0<<AIN0D); // Digital input Disable Register
}

void ADC_init(void) // Initialize Analog to Digital Converter
{
	ADMUX |= (0<<REFS1)|(0<<REFS0)|(1<<ADLAR)|(0<<REFS2)|(0<<MUX3)|(0<<MUX2)|(1<<MUX1)|(1<<MUX0); //ADC Multiplexer Selection Register... (ADC3(PB3) Selected ADC Input)
 1aa:	87 b1       	in	r24, 0x07	; 7
 1ac:	83 62       	ori	r24, 0x23	; 35
 1ae:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADEN)|(1<<ADSC)|(0<<ADATE)|(0<<ADIF)|(1<<ADIE)|(0<<ADPS2)|(0<<ADPS1)|(0<<ADPS0); // ADC Control Register A
 1b0:	86 b1       	in	r24, 0x06	; 6
 1b2:	88 6c       	ori	r24, 0xC8	; 200
 1b4:	86 b9       	out	0x06, r24	; 6
	ADCSRB |= (0<<BIN)|(0<<ACME)|(0<<IPR)|(0<<ADTS2)|(0<<ADTS1)|(0<<ADTS0); // ADC Control Register B
 1b6:	83 b1       	in	r24, 0x03	; 3
 1b8:	83 b9       	out	0x03, r24	; 3
	DIDR0 |= (0<<ADC0D)|(0<<ADC2D)|(0<<ADC3D)|(0<<ADC1D)|(0<<AIN1D)|(0<<AIN0D); // Digital input Disable Register
 1ba:	84 b3       	in	r24, 0x14	; 20
 1bc:	84 bb       	out	0x14, r24	; 20
 1be:	08 95       	ret

000001c0 <main>:
}

int main(void)
{
	timer0_init(); // timer 0 initialize
 1c0:	d6 df       	rcall	.-84     	; 0x16e <timer0_init>
	timer1_init(); // timer 1 initialize
 1c2:	e3 df       	rcall	.-58     	; 0x18a <timer1_init>
	ADC_init(); // analog to digital converter initialize
 1c4:	f2 df       	rcall	.-28     	; 0x1aa <ADC_init>
	PortInit(); // inputs and outputs initialize
 1c6:	c5 df       	rcall	.-118    	; 0x152 <PortInit>
	PinChangeInit();
 1c8:	bc df       	rcall	.-136    	; 0x142 <PinChangeInit>
	SystemInit(); // system variables and state initialize
 1ca:	c7 df       	rcall	.-114    	; 0x15a <SystemInit>
	output_high(PORTB,Light_Output);
 1cc:	c4 9a       	sbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ce:	2f ef       	ldi	r18, 0xFF	; 255
 1d0:	39 e6       	ldi	r19, 0x69	; 105
 1d2:	88 e1       	ldi	r24, 0x18	; 24
 1d4:	21 50       	subi	r18, 0x01	; 1
 1d6:	30 40       	sbci	r19, 0x00	; 0
 1d8:	80 40       	sbci	r24, 0x00	; 0
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <main+0x14>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <main+0x1e>
 1de:	00 00       	nop
	_delay_ms(1000);
	output_low(PORTB, Light_Output );
 1e0:	c4 98       	cbi	0x18, 4	; 24
 1e2:	9f ef       	ldi	r25, 0xFF	; 255
 1e4:	29 e6       	ldi	r18, 0x69	; 105
 1e6:	38 e1       	ldi	r19, 0x18	; 24
 1e8:	91 50       	subi	r25, 0x01	; 1
 1ea:	20 40       	sbci	r18, 0x00	; 0
 1ec:	30 40       	sbci	r19, 0x00	; 0
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <main+0x28>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <main+0x32>
 1f2:	00 00       	nop
				Light_on = false;
			}
			else
			{
				output_high(PORTB, Light_Output);
				Light_on = true;
 1f4:	91 e0       	ldi	r25, 0x01	; 1
	output_low(PORTB, Light_Output );
	_delay_ms(1000);

	while(1)
	{
		if(is_set(PINB, RxInput) && Light_on == true) // if the push button is held down connecting pin B2 to ground
 1f6:	b0 9b       	sbis	0x16, 0	; 22
 1f8:	09 c0       	rjmp	.+18     	; 0x20c <main+0x4c>
 1fa:	80 91 60 00 	lds	r24, 0x0060
 1fe:	88 23       	and	r24, r24
 200:	29 f0       	breq	.+10     	; 0x20c <main+0x4c>
		{
			//BTN_Down = true; // button down is true
			Auto_Off_Timer = 0;
 202:	10 92 62 00 	sts	0x0062, r1
			//output_high(PORTB, Light_Output);
			Light_on = true;
 206:	90 93 60 00 	sts	0x0060, r25
 20a:	28 c0       	rjmp	.+80     	; 0x25c <main+0x9c>
		}
		else if(is_set(PINB, RxInput) && Light_on == false)
 20c:	b0 9b       	sbis	0x16, 0	; 22
 20e:	17 c0       	rjmp	.+46     	; 0x23e <main+0x7e>
 210:	80 91 60 00 	lds	r24, 0x0060
 214:	81 11       	cpse	r24, r1
 216:	13 c0       	rjmp	.+38     	; 0x23e <main+0x7e>
 218:	8f ef       	ldi	r24, 0xFF	; 255
 21a:	20 e7       	ldi	r18, 0x70	; 112
 21c:	32 e0       	ldi	r19, 0x02	; 2
 21e:	81 50       	subi	r24, 0x01	; 1
 220:	20 40       	sbci	r18, 0x00	; 0
 222:	30 40       	sbci	r19, 0x00	; 0
 224:	e1 f7       	brne	.-8      	; 0x21e <main+0x5e>
 226:	00 c0       	rjmp	.+0      	; 0x228 <main+0x68>
 228:	00 00       	nop
		{
			_delay_ms(100);
			if(is_set(PINB, RxInput))
 22a:	b0 9b       	sbis	0x16, 0	; 22
 22c:	05 c0       	rjmp	.+10     	; 0x238 <main+0x78>
			{
				Auto_Off_Timer = 0;
 22e:	10 92 62 00 	sts	0x0062, r1
				//output_high(PORTB, Light_Output);
				Light_on = true;
 232:	90 93 60 00 	sts	0x0060, r25
 236:	12 c0       	rjmp	.+36     	; 0x25c <main+0x9c>
			}
			else
			{
				Light_on = false;
 238:	10 92 60 00 	sts	0x0060, r1
 23c:	0f c0       	rjmp	.+30     	; 0x25c <main+0x9c>
			}
		}
		else
		{
			Auto_Off_Timer++;
 23e:	80 91 62 00 	lds	r24, 0x0062
 242:	8f 5f       	subi	r24, 0xFF	; 255
 244:	80 93 62 00 	sts	0x0062, r24
			if(Auto_Off_Timer > 5)
 248:	80 91 62 00 	lds	r24, 0x0062
 24c:	86 30       	cpi	r24, 0x06	; 6
 24e:	18 f0       	brcs	.+6      	; 0x256 <main+0x96>
			{
				//output_low(PORTB, Light_Output);
				Light_on = false;
 250:	10 92 60 00 	sts	0x0060, r1
 254:	03 c0       	rjmp	.+6      	; 0x25c <main+0x9c>
			}
			else
			{
				output_high(PORTB, Light_Output);
 256:	c4 9a       	sbi	0x18, 4	; 24
				Light_on = true;
 258:	90 93 60 00 	sts	0x0060, r25
			}
		}
		if(Light_on == true)
 25c:	80 91 60 00 	lds	r24, 0x0060
 260:	88 23       	and	r24, r24
 262:	11 f0       	breq	.+4      	; 0x268 <__stack+0x9>
		{
			output_high(PORTB, Light_Output);
 264:	c4 9a       	sbi	0x18, 4	; 24
 266:	01 c0       	rjmp	.+2      	; 0x26a <__stack+0xb>
		}
		else
		{
			output_low(PORTB, Light_Output);
 268:	c4 98       	cbi	0x18, 4	; 24
 26a:	8f ef       	ldi	r24, 0xFF	; 255
 26c:	20 e7       	ldi	r18, 0x70	; 112
 26e:	32 e0       	ldi	r19, 0x02	; 2
 270:	81 50       	subi	r24, 0x01	; 1
 272:	20 40       	sbci	r18, 0x00	; 0
 274:	30 40       	sbci	r19, 0x00	; 0
 276:	e1 f7       	brne	.-8      	; 0x270 <__stack+0x11>
 278:	00 c0       	rjmp	.+0      	; 0x27a <__stack+0x1b>
 27a:	00 00       	nop
 27c:	bc cf       	rjmp	.-136    	; 0x1f6 <main+0x36>

0000027e <_exit>:
 27e:	f8 94       	cli

00000280 <__stop_program>:
 280:	ff cf       	rjmp	.-2      	; 0x280 <__stop_program>
