
Retrolite_Rx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000004f4  00000588  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800062  00800062  0000058a  2**0
                  ALLOC
  3 .debug_aranges 00000078  00000000  00000000  0000058a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000010e  00000000  00000000  00000602  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000038c  00000000  00000000  00000710  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001b4  00000000  00000000  00000a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000045d  00000000  00000000  00000c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  000010b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001ba  00000000  00000000  00001180  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000246  00000000  00000000  0000133a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00001580  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
    
    /* Delete last item */
    queue->data[--queue->size] = 0;
    
    return item;
}
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	f0 c1       	rjmp	.+992    	; 0x3e6 <__vector_2>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	c2 c1       	rjmp	.+900    	; 0x38e <__vector_4>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	f6 c1       	rjmp	.+1004   	; 0x402 <__vector_10>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e4 ef       	ldi	r30, 0xF4	; 244
  32:	f4 e0       	ldi	r31, 0x04	; 4
  34:	02 c0       	rjmp	.+4      	; 0x3a <.do_copy_data_start>

00000036 <.do_copy_data_loop>:
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0

0000003a <.do_copy_data_start>:
  3a:	a2 36       	cpi	r26, 0x62	; 98
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <.do_copy_data_loop>

00000040 <__do_clear_bss>:
  40:	10 e0       	ldi	r17, 0x00	; 0
  42:	a2 e6       	ldi	r26, 0x62	; 98
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	aa 36       	cpi	r26, 0x6A	; 106
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	40 d1       	rcall	.+640    	; 0x2d2 <main>
  52:	4e c2       	rjmp	.+1180   	; 0x4f0 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <pushQ>:

void pushQ(struct Queue* queue, const uint8_t c)
{
    if (queue->size < BUFFER_SIZE)
  56:	fc 01       	movw	r30, r24
  58:	e0 58       	subi	r30, 0x80	; 128
  5a:	ff 4f       	sbci	r31, 0xFF	; 255
  5c:	20 81       	ld	r18, Z
  5e:	22 23       	and	r18, r18
  60:	54 f0       	brlt	.+20     	; 0x76 <pushQ+0x20>
    { queue->data[queue->size++] = c; }
  62:	fc 01       	movw	r30, r24
  64:	e2 0f       	add	r30, r18
  66:	f1 1d       	adc	r31, r1
  68:	60 83       	st	Z, r22
  6a:	fc 01       	movw	r30, r24
  6c:	e0 58       	subi	r30, 0x80	; 128
  6e:	ff 4f       	sbci	r31, 0xFF	; 255
  70:	82 2f       	mov	r24, r18
  72:	8f 5f       	subi	r24, 0xFF	; 255
  74:	80 83       	st	Z, r24
  76:	08 95       	ret

00000078 <computeChecksum>:
}

uint16_t computeChecksum(const uint8_t* data, uint16_t bytes)
{
  78:	ef 92       	push	r14
  7a:	ff 92       	push	r15
  7c:	0f 93       	push	r16
  7e:	1f 93       	push	r17
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	8c 01       	movw	r16, r24
  86:	eb 01       	movw	r28, r22
    uint16_t sum1 = 0xFF;
    uint16_t sum2 = 0xFF;
    
    uint16_t wordLen;
    
    while (bytes)
  88:	61 15       	cp	r22, r1
  8a:	71 05       	cpc	r23, r1
  8c:	29 f4       	brne	.+10     	; 0x98 <computeChecksum+0x20>
  8e:	4f ef       	ldi	r20, 0xFF	; 255
  90:	50 e0       	ldi	r21, 0x00	; 0
  92:	ef ef       	ldi	r30, 0xFF	; 255
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	2a c0       	rjmp	.+84     	; 0xec <computeChecksum+0x74>
  98:	4f ef       	ldi	r20, 0xFF	; 255
  9a:	50 e0       	ldi	r21, 0x00	; 0
  9c:	ef ef       	ldi	r30, 0xFF	; 255
  9e:	f0 e0       	ldi	r31, 0x00	; 0
    {
        /* maximum word size before overflow would occur */
        wordLen = (bytes > 20) ? 20 : bytes;
  a0:	0f 2e       	mov	r0, r31
  a2:	f4 e1       	ldi	r31, 0x14	; 20
  a4:	ef 2e       	mov	r14, r31
  a6:	ff 24       	eor	r15, r15
  a8:	f0 2d       	mov	r31, r0
  aa:	be 01       	movw	r22, r28
  ac:	c5 31       	cpi	r28, 0x15	; 21
  ae:	d1 05       	cpc	r29, r1
  b0:	08 f0       	brcs	.+2      	; 0xb4 <computeChecksum+0x3c>
  b2:	b7 01       	movw	r22, r14
        
        bytes -= wordLen;
  b4:	c6 1b       	sub	r28, r22
  b6:	d7 0b       	sbc	r29, r23
  b8:	d8 01       	movw	r26, r16
  ba:	9b 01       	movw	r18, r22
        
        do
        {
            sum1 += *(data++);
  bc:	8d 91       	ld	r24, X+
  be:	48 0f       	add	r20, r24
  c0:	51 1d       	adc	r21, r1
            sum2 += sum1;
  c2:	e4 0f       	add	r30, r20
  c4:	f5 1f       	adc	r31, r21
        }
        
        while (--wordLen);
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	30 40       	sbci	r19, 0x00	; 0
  ca:	c1 f7       	brne	.-16     	; 0xbc <computeChecksum+0x44>
  cc:	06 0f       	add	r16, r22
  ce:	17 1f       	adc	r17, r23
         * Do first modular reduction: mask off
         * lower byte and add right shifted upper
         * byte to it
         * * * * * * * * * * * * * * * * * * * * * */
        
        sum1 = (sum1 & 0xFF) + (sum1 >> 8);
  d0:	85 2f       	mov	r24, r21
  d2:	99 27       	eor	r25, r25
  d4:	9c 01       	movw	r18, r24
  d6:	24 0f       	add	r18, r20
  d8:	31 1d       	adc	r19, r1
  da:	a9 01       	movw	r20, r18
        sum2 = (sum2 & 0xFF) + (sum2 >> 8);
  dc:	8f 2f       	mov	r24, r31
  de:	99 27       	eor	r25, r25
  e0:	9c 01       	movw	r18, r24
  e2:	2e 0f       	add	r18, r30
  e4:	31 1d       	adc	r19, r1
  e6:	f9 01       	movw	r30, r18
    uint16_t sum1 = 0xFF;
    uint16_t sum2 = 0xFF;
    
    uint16_t wordLen;
    
    while (bytes)
  e8:	20 97       	sbiw	r28, 0x00	; 0
  ea:	f9 f6       	brne	.-66     	; 0xaa <computeChecksum+0x32>
        sum1 = (sum1 & 0xFF) + (sum1 >> 8);
        sum2 = (sum2 & 0xFF) + (sum2 >> 8);
    }
    
    /* Safety reduction */
    sum1 = (sum1 & 0xFF) + (sum1 >> 8);
  ec:	85 2f       	mov	r24, r21
  ee:	99 27       	eor	r25, r25
    sum2 = (sum2 & 0xFF) + (sum2 >> 8);
  f0:	2f 2f       	mov	r18, r31
  f2:	33 27       	eor	r19, r19
  f4:	2e 0f       	add	r18, r30
  f6:	31 1d       	adc	r19, r1
  f8:	32 2f       	mov	r19, r18
  fa:	22 27       	eor	r18, r18
  fc:	84 0f       	add	r24, r20
  fe:	91 1d       	adc	r25, r1
 100:	28 2b       	or	r18, r24
 102:	39 2b       	or	r19, r25
    
    /* Return both sums in a 16 bit value */
    return sum2 << 8 | sum1;
}
 104:	82 2f       	mov	r24, r18
 106:	93 2f       	mov	r25, r19
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	1f 91       	pop	r17
 10e:	0f 91       	pop	r16
 110:	ff 90       	pop	r15
 112:	ef 90       	pop	r14
 114:	08 95       	ret

00000116 <getSamples>:

uint32_t getSamples(void)
{
    /* Reset flag */
    samplesReady = 0;
 116:	10 92 66 00 	sts	0x0066, r1
    
    return samples;
 11a:	20 91 62 00 	lds	r18, 0x0062
 11e:	30 91 63 00 	lds	r19, 0x0063
 122:	40 91 64 00 	lds	r20, 0x0064
 126:	50 91 65 00 	lds	r21, 0x0065
}
 12a:	62 2f       	mov	r22, r18
 12c:	73 2f       	mov	r23, r19
 12e:	84 2f       	mov	r24, r20
 130:	95 2f       	mov	r25, r21
 132:	08 95       	ret

00000134 <initRX>:

void initRX(void)
{
    /* Set the RX pin as input */
    CLEAR_BIT(DDRB,DDB3);
 134:	e7 e3       	ldi	r30, 0x37	; 55
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	87 7f       	andi	r24, 0xF7	; 247
 13c:	80 83       	st	Z, r24
    
    /* Set LED as output */
    SET_BIT(DDRB,DDB4);
 13e:	80 81       	ld	r24, Z
 140:	80 61       	ori	r24, 0x10	; 16
 142:	80 83       	st	Z, r24
    
    /* Enable pin change interrupt */
    SET_BIT(GIMSK,PCIE);
 144:	eb e5       	ldi	r30, 0x5B	; 91
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	80 62       	ori	r24, 0x20	; 32
 14c:	80 83       	st	Z, r24
    
    /* Watch pin change on pin 3 */
    SET_BIT(PCMSK,PCINT3);
 14e:	e5 e3       	ldi	r30, 0x35	; 53
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	88 60       	ori	r24, 0x08	; 8
 156:	80 83       	st	Z, r24
    
    /* Enable Timer1 with clk/4096 prescaling. Timer1 is used for timing
     out the connection pipeline. */
    TCCR1 |= 0x0D;
 158:	e0 e5       	ldi	r30, 0x50	; 80
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	8d 60       	ori	r24, 0x0D	; 13
 160:	80 83       	st	Z, r24
    
    /* Enable the overflow interrupt for Timer1 */
    SET_BIT(TIMSK,TOIE1);
 162:	e9 e5       	ldi	r30, 0x59	; 89
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	84 60       	ori	r24, 0x04	; 4
 16a:	80 83       	st	Z, r24
    
    /* Sample every 100 µs */
    OCR0A = SAMPLE_TIME;
 16c:	84 e6       	ldi	r24, 0x64	; 100
 16e:	89 bd       	out	0x29, r24	; 41
	
    /* Enable the output compare interrupt for Timer0 */
    SET_BIT(TIMSK,OCIE0A);
 170:	80 81       	ld	r24, Z
 172:	80 61       	ori	r24, 0x10	; 16
 174:	80 83       	st	Z, r24
     but the sampling, therefore we clear the timer after the sample and don't
     let the timer be cleared automatically. */
    
    /* Turn on Timer0 with clk/8 prescaling, gives 1µs per cycle @8Mhz.
     Timer0 is used for sampling */
    SET_BIT(TCCR0B,CS01);
 176:	e3 e5       	ldi	r30, 0x53	; 83
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	82 60       	ori	r24, 0x02	; 2
 17e:	80 83       	st	Z, r24
}
 180:	08 95       	ret

00000182 <startRX>:

void startRX(void)
{
 182:	df 92       	push	r13
 184:	ef 92       	push	r14
 186:	ff 92       	push	r15
 188:	0f 93       	push	r16
 18a:	1f 93       	push	r17
    uint8_t preambleBit, lows = 0, highs = 0;
    
    //SET_BIT(PORTB,LED);
    
    /* Enable global interrupts */
	asm("sei");
 18c:	78 94       	sei
    
    /* Reset */
    TCNT0 = TCNT1 = 0;
 18e:	ef e4       	ldi	r30, 0x4F	; 79
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	10 82       	st	Z, r1
 194:	80 81       	ld	r24, Z
 196:	82 bf       	out	0x32, r24	; 50
    
    /* Enable while waiting for the preamble. Is turned false when the connection
     times out. */
    receiving = 1;
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	80 93 67 00 	sts	0x0067, r24
    
    /* Going to record individual bits now */
    sampleCount = 3;
 19e:	83 e0       	ldi	r24, 0x03	; 3
 1a0:	80 93 60 00 	sts	0x0060, r24
    
    /* Reset this. Otherwise all RX attempts will fail after the first one. Not sure why. */
    samples = 0;
 1a4:	10 92 62 00 	sts	0x0062, r1
 1a8:	10 92 63 00 	sts	0x0063, r1
 1ac:	10 92 64 00 	sts	0x0064, r1
 1b0:	10 92 65 00 	sts	0x0065, r1
 1b4:	00 e0       	ldi	r16, 0x00	; 0
 1b6:	10 e0       	ldi	r17, 0x00	; 0
        if (samplesReady)
        {
            /* Grab bit */
            preambleBit = getSamples();
            
            sampleCount = 3;
 1b8:	0f 2e       	mov	r0, r31
 1ba:	f3 e0       	ldi	r31, 0x03	; 3
 1bc:	ef 2e       	mov	r14, r31
 1be:	f0 2d       	mov	r31, r0
                 * change interrupt makes sure that any pin changes occur exactly between two
                 * samples, therefore there can only be sample errors and not timing errors
                 * (I think).
                 */
                
                sampleCount = 2;
 1c0:	ff 24       	eor	r15, r15
 1c2:	dd 24       	eor	r13, r13
 1c4:	68 94       	set
 1c6:	d1 f8       	bld	r13, 1
 1c8:	1c c0       	rjmp	.+56     	; 0x202 <startRX+0x80>
    samples = 0;
    
    /* receiving becomes false if the connection times out, so this will not go on forever */
    while (receiving)
    {
        if (samplesReady)
 1ca:	80 91 66 00 	lds	r24, 0x0066
 1ce:	88 23       	and	r24, r24
 1d0:	e1 f3       	breq	.-8      	; 0x1ca <startRX+0x48>
        {
            /* Grab bit */
            preambleBit = getSamples();
 1d2:	a1 df       	rcall	.-190    	; 0x116 <getSamples>
            
            sampleCount = 3;
 1d4:	e0 92 60 00 	sts	0x0060, r14
            
            /* The preamble consists of 6 low bits (10) and 2 high bits (01), everything
             else or any other order than that resets the counter values to 0 */
            
            if (preambleBit == LOW)
 1d8:	6c 30       	cpi	r22, 0x0C	; 12
 1da:	21 f4       	brne	.+8      	; 0x1e4 <startRX+0x62>
            {
                if (!highs) ++lows;
 1dc:	11 23       	and	r17, r17
 1de:	79 f4       	brne	.+30     	; 0x1fe <startRX+0x7c>
 1e0:	0f 5f       	subi	r16, 0xFF	; 255
 1e2:	0f c0       	rjmp	.+30     	; 0x202 <startRX+0x80>
                
                else lows = highs = 0;
            }
            
            else if (preambleBit == HIGH)
 1e4:	63 30       	cpi	r22, 0x03	; 3
 1e6:	31 f4       	brne	.+12     	; 0x1f4 <startRX+0x72>
            {
                if (lows >= 6)
 1e8:	06 30       	cpi	r16, 0x06	; 6
 1ea:	48 f0       	brcs	.+18     	; 0x1fe <startRX+0x7c>
                {
                    if (++highs >= 2) break;
 1ec:	1f 5f       	subi	r17, 0xFF	; 255
 1ee:	12 30       	cpi	r17, 0x02	; 2
 1f0:	40 f0       	brcs	.+16     	; 0x202 <startRX+0x80>
 1f2:	0b c0       	rjmp	.+22     	; 0x20a <startRX+0x88>
                 * change interrupt makes sure that any pin changes occur exactly between two
                 * samples, therefore there can only be sample errors and not timing errors
                 * (I think).
                 */
                
                sampleCount = 2;
 1f4:	d0 92 60 00 	sts	0x0060, r13
 1f8:	0f 2d       	mov	r16, r15
 1fa:	1f 2d       	mov	r17, r15
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <startRX+0x80>
 1fe:	0f 2d       	mov	r16, r15
 200:	1f 2d       	mov	r17, r15
    
    /* Reset this. Otherwise all RX attempts will fail after the first one. Not sure why. */
    samples = 0;
    
    /* receiving becomes false if the connection times out, so this will not go on forever */
    while (receiving)
 202:	80 91 67 00 	lds	r24, 0x0067
 206:	88 23       	and	r24, r24
 208:	01 f7       	brne	.-64     	; 0x1ca <startRX+0x48>
            }
        }
    }
    
    /* Normal sampling now */
    sampleCount = DATA_SAMPLES - 1;
 20a:	8f e1       	ldi	r24, 0x1F	; 31
 20c:	80 93 60 00 	sts	0x0060, r24
}
 210:	1f 91       	pop	r17
 212:	0f 91       	pop	r16
 214:	ff 90       	pop	r15
 216:	ef 90       	pop	r14
 218:	df 90       	pop	r13
 21a:	08 95       	ret

0000021c <stopRX>:

void stopRX(void)
{
    /* Stop the wait for the preamble if it's still running,
     else stop waiting for samples in main */
    receiving = 0;
 21c:	10 92 67 00 	sts	0x0067, r1
    
    /* Disable sampling Timer/Counter */
    CLEAR_BIT(TIMSK,OCIE0A);
 220:	e9 e5       	ldi	r30, 0x59	; 89
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	8f 7e       	andi	r24, 0xEF	; 239
 228:	80 83       	st	Z, r24
    
    //CLEAR_BIT(PORTB,LED);
}
 22a:	08 95       	ret

0000022c <interpretSamples>:

uint8_t interpretSamples(const uint32_t samps)
{
 22c:	af 92       	push	r10
 22e:	bf 92       	push	r11
 230:	cf 92       	push	r12
 232:	df 92       	push	r13
 234:	ef 92       	push	r14
 236:	ff 92       	push	r15
 238:	0f 93       	push	r16
 23a:	1f 93       	push	r17
 23c:	7b 01       	movw	r14, r22
 23e:	8c 01       	movw	r16, r24
 240:	60 91 68 00 	lds	r22, 0x0068
 244:	4c e1       	ldi	r20, 0x1C	; 28
 246:	50 e0       	ldi	r21, 0x00	; 0
 248:	27 e0       	ldi	r18, 0x07	; 7
 24a:	30 e0       	ldi	r19, 0x00	; 0
        /* Grab the current bit */
        bit = (samps >> (i*4)) & 0x0F;
        
        if (bit == HIGH) SET_BIT(data,i);
        
        else if (bit == LOW) CLEAR_BIT(data,i);
 24c:	aa 24       	eor	r10, r10
 24e:	bb 24       	eor	r11, r11
 250:	65 01       	movw	r12, r10
 252:	a3 94       	inc	r10
    uint8_t bit;
    
    for (; i >= 0; --i)
    {
        /* Grab the current bit */
        bit = (samps >> (i*4)) & 0x0F;
 254:	d8 01       	movw	r26, r16
 256:	c7 01       	movw	r24, r14
 258:	04 2e       	mov	r0, r20
 25a:	04 c0       	rjmp	.+8      	; 0x264 <__stack+0x5>
 25c:	b6 95       	lsr	r27
 25e:	a7 95       	ror	r26
 260:	97 95       	ror	r25
 262:	87 95       	ror	r24
 264:	0a 94       	dec	r0
 266:	d2 f7       	brpl	.-12     	; 0x25c <interpretSamples+0x30>
 268:	8f 70       	andi	r24, 0x0F	; 15
        
        if (bit == HIGH) SET_BIT(data,i);
 26a:	83 30       	cpi	r24, 0x03	; 3
 26c:	61 f4       	brne	.+24     	; 0x286 <__stack+0x27>
 26e:	d6 01       	movw	r26, r12
 270:	c5 01       	movw	r24, r10
 272:	02 2e       	mov	r0, r18
 274:	04 c0       	rjmp	.+8      	; 0x27e <__stack+0x1f>
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	aa 1f       	adc	r26, r26
 27c:	bb 1f       	adc	r27, r27
 27e:	0a 94       	dec	r0
 280:	d2 f7       	brpl	.-12     	; 0x276 <__stack+0x17>
 282:	68 2b       	or	r22, r24
 284:	0e c0       	rjmp	.+28     	; 0x2a2 <__stack+0x43>
        
        else if (bit == LOW) CLEAR_BIT(data,i);
 286:	8c 30       	cpi	r24, 0x0C	; 12
 288:	c1 f4       	brne	.+48     	; 0x2ba <__stack+0x5b>
 28a:	d6 01       	movw	r26, r12
 28c:	c5 01       	movw	r24, r10
 28e:	02 2e       	mov	r0, r18
 290:	04 c0       	rjmp	.+8      	; 0x29a <__stack+0x3b>
 292:	88 0f       	add	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	aa 1f       	adc	r26, r26
 298:	bb 1f       	adc	r27, r27
 29a:	0a 94       	dec	r0
 29c:	d2 f7       	brpl	.-12     	; 0x292 <__stack+0x33>
 29e:	80 95       	com	r24
 2a0:	68 23       	and	r22, r24
 2a2:	44 50       	subi	r20, 0x04	; 4
 2a4:	50 40       	sbci	r21, 0x00	; 0
 2a6:	21 50       	subi	r18, 0x01	; 1
 2a8:	30 40       	sbci	r19, 0x00	; 0
{
    int8_t i = 7;
    
    uint8_t bit;
    
    for (; i >= 0; --i)
 2aa:	8f ef       	ldi	r24, 0xFF	; 255
 2ac:	2f 3f       	cpi	r18, 0xFF	; 255
 2ae:	38 07       	cpc	r19, r24
 2b0:	89 f6       	brne	.-94     	; 0x254 <interpretSamples+0x28>
 2b2:	60 93 68 00 	sts	0x0068, r22
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	03 c0       	rjmp	.+6      	; 0x2c0 <__stack+0x61>
 2ba:	60 93 68 00 	sts	0x0068, r22
 2be:	80 e0       	ldi	r24, 0x00	; 0
        
        else return 0;
    }
    
    return 1;
}
 2c0:	1f 91       	pop	r17
 2c2:	0f 91       	pop	r16
 2c4:	ff 90       	pop	r15
 2c6:	ef 90       	pop	r14
 2c8:	df 90       	pop	r13
 2ca:	cf 90       	pop	r12
 2cc:	bf 90       	pop	r11
 2ce:	af 90       	pop	r10
 2d0:	08 95       	ret

000002d2 <main>:
volatile int8_t sampleCount = DATA_SAMPLES - 1;

uint8_t receiving = 0, data = 0, connectionCount = 0;

int main(void)
{
 2d2:	ef 92       	push	r14
 2d4:	ff 92       	push	r15
 2d6:	0f 93       	push	r16
 2d8:	1f 93       	push	r17
 2da:	df 93       	push	r29
 2dc:	cf 93       	push	r28
 2de:	cd b7       	in	r28, 0x3d	; 61
 2e0:	de b7       	in	r29, 0x3e	; 62
 2e2:	c1 58       	subi	r28, 0x81	; 129
 2e4:	d0 40       	sbci	r29, 0x00	; 0
 2e6:	0f b6       	in	r0, 0x3f	; 63
 2e8:	f8 94       	cli
 2ea:	de bf       	out	0x3e, r29	; 62
 2ec:	0f be       	out	0x3f, r0	; 63
 2ee:	cd bf       	out	0x3d, r28	; 61
    struct Queue q = {.size = 0};
 2f0:	fe 01       	movw	r30, r28
 2f2:	31 96       	adiw	r30, 0x01	; 1
 2f4:	81 e8       	ldi	r24, 0x81	; 129
 2f6:	df 01       	movw	r26, r30
 2f8:	1d 92       	st	X+, r1
 2fa:	8a 95       	dec	r24
 2fc:	e9 f7       	brne	.-6      	; 0x2f8 <main+0x26>
    
    uint16_t chksm;
    
    initRX();
 2fe:	1a df       	rcall	.-460    	; 0x134 <initRX>
    
    startRX();
 300:	40 df       	rcall	.-384    	; 0x182 <startRX>
     
     for (;;)
     {
         if (receiving && samplesReady && interpretSamples(getSamples()))
         {
                pushQ(&q,data);
 302:	8e 01       	movw	r16, r28
 304:	0f 5f       	subi	r16, 0xFF	; 255
 306:	1f 4f       	sbci	r17, 0xFF	; 255
     
                if (q.size == 14) break;
 308:	0f 2e       	mov	r0, r31
 30a:	f1 e8       	ldi	r31, 0x81	; 129
 30c:	ef 2e       	mov	r14, r31
 30e:	ff 24       	eor	r15, r15
 310:	f0 2d       	mov	r31, r0
 312:	ec 0e       	add	r14, r28
 314:	fd 1e       	adc	r15, r29
    
    startRX();
     
     for (;;)
     {
         if (receiving && samplesReady && interpretSamples(getSamples()))
 316:	90 91 67 00 	lds	r25, 0x0067
 31a:	99 23       	and	r25, r25
 31c:	b9 f1       	breq	.+110    	; 0x38c <main+0xba>
 31e:	80 91 66 00 	lds	r24, 0x0066
 322:	88 23       	and	r24, r24
 324:	d1 f3       	breq	.-12     	; 0x31a <main+0x48>
 326:	f7 de       	rcall	.-530    	; 0x116 <getSamples>
 328:	81 df       	rcall	.-254    	; 0x22c <interpretSamples>
 32a:	88 23       	and	r24, r24
 32c:	a1 f3       	breq	.-24     	; 0x316 <main+0x44>
         {
                pushQ(&q,data);
 32e:	c8 01       	movw	r24, r16
 330:	60 91 68 00 	lds	r22, 0x0068
 334:	90 de       	rcall	.-736    	; 0x56 <pushQ>
     
                if (q.size == 14) break;
 336:	f7 01       	movw	r30, r14
 338:	80 81       	ld	r24, Z
 33a:	8e 30       	cpi	r24, 0x0E	; 14
 33c:	61 f7       	brne	.-40     	; 0x316 <main+0x44>
         }
     }
     
     stopRX();
 33e:	6e df       	rcall	.-292    	; 0x21c <stopRX>
     
     chksm = computeChecksum(q.data,12);
 340:	ce 01       	movw	r24, r28
 342:	01 96       	adiw	r24, 0x01	; 1
 344:	6c e0       	ldi	r22, 0x0C	; 12
 346:	70 e0       	ldi	r23, 0x00	; 0
 348:	97 de       	rcall	.-722    	; 0x78 <computeChecksum>
     
     CLEAR_BIT(PORTB,LED);
 34a:	e8 e3       	ldi	r30, 0x38	; 56
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	20 81       	ld	r18, Z
 350:	2f 7e       	andi	r18, 0xEF	; 239
 352:	20 83       	st	Z, r18
     
     if (chksm == ((q.data[12] << 8) | q.data[13])) SET_BIT(PORTB,LED);
 354:	3d 85       	ldd	r19, Y+13	; 0x0d
 356:	20 e0       	ldi	r18, 0x00	; 0
 358:	4e 85       	ldd	r20, Y+14	; 0x0e
 35a:	50 e0       	ldi	r21, 0x00	; 0
 35c:	24 2b       	or	r18, r20
 35e:	35 2b       	or	r19, r21
 360:	82 17       	cp	r24, r18
 362:	93 07       	cpc	r25, r19
 364:	19 f4       	brne	.+6      	; 0x36c <main+0x9a>
 366:	80 81       	ld	r24, Z
 368:	80 61       	ori	r24, 0x10	; 16
 36a:	80 83       	st	Z, r24
     
     return 0;
    
}
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	cf 57       	subi	r28, 0x7F	; 127
 372:	df 4f       	sbci	r29, 0xFF	; 255
 374:	0f b6       	in	r0, 0x3f	; 63
 376:	f8 94       	cli
 378:	de bf       	out	0x3e, r29	; 62
 37a:	0f be       	out	0x3f, r0	; 63
 37c:	cd bf       	out	0x3d, r28	; 61
 37e:	cf 91       	pop	r28
 380:	df 91       	pop	r29
 382:	1f 91       	pop	r17
 384:	0f 91       	pop	r16
 386:	ff 90       	pop	r15
 388:	ef 90       	pop	r14
 38a:	08 95       	ret
 38c:	ff cf       	rjmp	.-2      	; 0x38c <main+0xba>

0000038e <__vector_4>:
    
    return 1;
}

ISR(TIMER1_OVF_vect)
{
 38e:	1f 92       	push	r1
 390:	0f 92       	push	r0
 392:	0f b6       	in	r0, 0x3f	; 63
 394:	0f 92       	push	r0
 396:	11 24       	eor	r1, r1
 398:	2f 93       	push	r18
 39a:	3f 93       	push	r19
 39c:	4f 93       	push	r20
 39e:	5f 93       	push	r21
 3a0:	6f 93       	push	r22
 3a2:	7f 93       	push	r23
 3a4:	8f 93       	push	r24
 3a6:	9f 93       	push	r25
 3a8:	af 93       	push	r26
 3aa:	bf 93       	push	r27
 3ac:	ef 93       	push	r30
 3ae:	ff 93       	push	r31
    if (++connectionCount >= CONNECTION_TIME)
 3b0:	80 91 69 00 	lds	r24, 0x0069
 3b4:	8f 5f       	subi	r24, 0xFF	; 255
 3b6:	80 93 69 00 	sts	0x0069, r24
 3ba:	8d 34       	cpi	r24, 0x4D	; 77
 3bc:	18 f0       	brcs	.+6      	; 0x3c4 <__vector_4+0x36>
    {
        connectionCount = 0;
 3be:	10 92 69 00 	sts	0x0069, r1
        
        stopRX();
 3c2:	2c df       	rcall	.-424    	; 0x21c <stopRX>
    }
}
 3c4:	ff 91       	pop	r31
 3c6:	ef 91       	pop	r30
 3c8:	bf 91       	pop	r27
 3ca:	af 91       	pop	r26
 3cc:	9f 91       	pop	r25
 3ce:	8f 91       	pop	r24
 3d0:	7f 91       	pop	r23
 3d2:	6f 91       	pop	r22
 3d4:	5f 91       	pop	r21
 3d6:	4f 91       	pop	r20
 3d8:	3f 91       	pop	r19
 3da:	2f 91       	pop	r18
 3dc:	0f 90       	pop	r0
 3de:	0f be       	out	0x3f, r0	; 63
 3e0:	0f 90       	pop	r0
 3e2:	1f 90       	pop	r1
 3e4:	18 95       	reti

000003e6 <__vector_2>:

ISR(PCINT0_vect)
{
 3e6:	1f 92       	push	r1
 3e8:	0f 92       	push	r0
 3ea:	0f b6       	in	r0, 0x3f	; 63
 3ec:	0f 92       	push	r0
 3ee:	11 24       	eor	r1, r1
 3f0:	8f 93       	push	r24
    /* Set the timer to what it should be at the pin change. 52 instead
     of 50 because of ISR-call overhead. */
	TCNT0 = 52;
 3f2:	84 e3       	ldi	r24, 0x34	; 52
 3f4:	82 bf       	out	0x32, r24	; 50
}
 3f6:	8f 91       	pop	r24
 3f8:	0f 90       	pop	r0
 3fa:	0f be       	out	0x3f, r0	; 63
 3fc:	0f 90       	pop	r0
 3fe:	1f 90       	pop	r1
 400:	18 95       	reti

00000402 <__vector_10>:

ISR(TIMER0_COMPA_vect)
{
 402:	1f 92       	push	r1
 404:	0f 92       	push	r0
 406:	0f b6       	in	r0, 0x3f	; 63
 408:	0f 92       	push	r0
 40a:	11 24       	eor	r1, r1
 40c:	2f 93       	push	r18
 40e:	3f 93       	push	r19
 410:	4f 93       	push	r20
 412:	5f 93       	push	r21
 414:	6f 93       	push	r22
 416:	8f 93       	push	r24
 418:	9f 93       	push	r25
 41a:	af 93       	push	r26
 41c:	bf 93       	push	r27
    /* If the current sample reads high, set the current bit in the samples */
    if (IS_SET(RX_PORT,RX_PIN))
 41e:	b3 9b       	sbis	0x16, 3	; 22
 420:	24 c0       	rjmp	.+72     	; 0x46a <__vector_10+0x68>
    {
        /* Reset timer now, after sampling */
        TCNT0 = 1;
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	82 bf       	out	0x32, r24	; 50
        
        SET_BIT(samples,sampleCount);
 426:	60 91 60 00 	lds	r22, 0x0060
 42a:	20 91 62 00 	lds	r18, 0x0062
 42e:	30 91 63 00 	lds	r19, 0x0063
 432:	40 91 64 00 	lds	r20, 0x0064
 436:	50 91 65 00 	lds	r21, 0x0065
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	a0 e0       	ldi	r26, 0x00	; 0
 440:	b0 e0       	ldi	r27, 0x00	; 0
 442:	04 c0       	rjmp	.+8      	; 0x44c <__vector_10+0x4a>
 444:	88 0f       	add	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	aa 1f       	adc	r26, r26
 44a:	bb 1f       	adc	r27, r27
 44c:	6a 95       	dec	r22
 44e:	d2 f7       	brpl	.-12     	; 0x444 <__vector_10+0x42>
 450:	82 2b       	or	r24, r18
 452:	93 2b       	or	r25, r19
 454:	a4 2b       	or	r26, r20
 456:	b5 2b       	or	r27, r21
 458:	80 93 62 00 	sts	0x0062, r24
 45c:	90 93 63 00 	sts	0x0063, r25
 460:	a0 93 64 00 	sts	0x0064, r26
 464:	b0 93 65 00 	sts	0x0065, r27
 468:	27 c0       	rjmp	.+78     	; 0x4b8 <__vector_10+0xb6>
    
    /* Else clear the current bit */
    else
    {
        /* Reset timer now, after sampling */
        TCNT0 = 1;
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	82 bf       	out	0x32, r24	; 50
        
        CLEAR_BIT(samples,sampleCount);
 46e:	60 91 60 00 	lds	r22, 0x0060
 472:	20 91 62 00 	lds	r18, 0x0062
 476:	30 91 63 00 	lds	r19, 0x0063
 47a:	40 91 64 00 	lds	r20, 0x0064
 47e:	50 91 65 00 	lds	r21, 0x0065
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	a0 e0       	ldi	r26, 0x00	; 0
 488:	b0 e0       	ldi	r27, 0x00	; 0
 48a:	04 c0       	rjmp	.+8      	; 0x494 <__vector_10+0x92>
 48c:	88 0f       	add	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	aa 1f       	adc	r26, r26
 492:	bb 1f       	adc	r27, r27
 494:	6a 95       	dec	r22
 496:	d2 f7       	brpl	.-12     	; 0x48c <__vector_10+0x8a>
 498:	80 95       	com	r24
 49a:	90 95       	com	r25
 49c:	a0 95       	com	r26
 49e:	b0 95       	com	r27
 4a0:	82 23       	and	r24, r18
 4a2:	93 23       	and	r25, r19
 4a4:	a4 23       	and	r26, r20
 4a6:	b5 23       	and	r27, r21
 4a8:	80 93 62 00 	sts	0x0062, r24
 4ac:	90 93 63 00 	sts	0x0063, r25
 4b0:	a0 93 64 00 	sts	0x0064, r26
 4b4:	b0 93 65 00 	sts	0x0065, r27
    }
    
    /* If the bit is finished, set the samplesReady flag */
    if (! sampleCount--)
 4b8:	90 91 60 00 	lds	r25, 0x0060
 4bc:	89 2f       	mov	r24, r25
 4be:	81 50       	subi	r24, 0x01	; 1
 4c0:	80 93 60 00 	sts	0x0060, r24
 4c4:	99 23       	and	r25, r25
 4c6:	31 f4       	brne	.+12     	; 0x4d4 <__vector_10+0xd2>
	{
		samplesReady = 1;
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	80 93 66 00 	sts	0x0066, r24
		sampleCount = DATA_SAMPLES - 1;
 4ce:	8f e1       	ldi	r24, 0x1F	; 31
 4d0:	80 93 60 00 	sts	0x0060, r24
	}
}
 4d4:	bf 91       	pop	r27
 4d6:	af 91       	pop	r26
 4d8:	9f 91       	pop	r25
 4da:	8f 91       	pop	r24
 4dc:	6f 91       	pop	r22
 4de:	5f 91       	pop	r21
 4e0:	4f 91       	pop	r20
 4e2:	3f 91       	pop	r19
 4e4:	2f 91       	pop	r18
 4e6:	0f 90       	pop	r0
 4e8:	0f be       	out	0x3f, r0	; 63
 4ea:	0f 90       	pop	r0
 4ec:	1f 90       	pop	r1
 4ee:	18 95       	reti

000004f0 <_exit>:
 4f0:	f8 94       	cli

000004f2 <__stop_program>:
 4f2:	ff cf       	rjmp	.-2      	; 0x4f2 <__stop_program>
