
Atmega8_PS2_Bit_Bang.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008a  00800060  00000a08  00000a9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000130  008000ea  008000ea  00000b26  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b26  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001807  00000000  00000000  00000c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000057b  00000000  00000000  0000248b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000595  00000000  00000000  00002a06  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002bc  00000000  00000000  00002f9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c2  00000000  00000000  00003258  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b41  00000000  00000000  0000371a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  0000425b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	35 c4       	rjmp	.+2154   	; 0x882 <__vector_11>
  18:	67 c4       	rjmp	.+2254   	; 0x8e8 <__vector_12>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 e0       	ldi	r30, 0x08	; 8
  3a:	fa e0       	ldi	r31, 0x0A	; 10
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	aa 3e       	cpi	r26, 0xEA	; 234
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	22 e0       	ldi	r18, 0x02	; 2
  4a:	aa ee       	ldi	r26, 0xEA	; 234
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	aa 31       	cpi	r26, 0x1A	; 26
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	72 d0       	rcall	.+228    	; 0x13e <main>
  5a:	d4 c4       	rjmp	.+2472   	; 0xa04 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <printInt>:
	//uart_putc(CMD);
	uart_putc(i);
}

void printInt(int32_t i)
{
  5e:	8f 92       	push	r8
  60:	9f 92       	push	r9
  62:	af 92       	push	r10
  64:	bf 92       	push	r11
  66:	cf 92       	push	r12
  68:	df 92       	push	r13
  6a:	ef 92       	push	r14
  6c:	ff 92       	push	r15
  6e:	1f 93       	push	r17
  70:	cf 93       	push	r28
  72:	df 93       	push	r29
  74:	99 23       	and	r25, r25
  76:	3c f4       	brge	.+14     	; 0x86 <printInt+0x28>
  78:	90 95       	com	r25
  7a:	80 95       	com	r24
  7c:	70 95       	com	r23
  7e:	61 95       	neg	r22
  80:	7f 4f       	sbci	r23, 0xFF	; 255
  82:	8f 4f       	sbci	r24, 0xFF	; 255
  84:	9f 4f       	sbci	r25, 0xFF	; 255
  86:	6b 01       	movw	r12, r22
  88:	7c 01       	movw	r14, r24
	}
	
	buf[3] = i / 1000 + 48;
	buf[2] = (i / 100)%10 +48 ;
	buf[1] = (i / 10)%10 +48 ;
	buf[0] =  i % 10 +48 ;
  8a:	2a e0       	ldi	r18, 0x0A	; 10
  8c:	30 e0       	ldi	r19, 0x00	; 0
  8e:	40 e0       	ldi	r20, 0x00	; 0
  90:	50 e0       	ldi	r21, 0x00	; 0
  92:	7a d4       	rcall	.+2292   	; 0x988 <__divmodsi4>
  94:	c0 e3       	ldi	r28, 0x30	; 48
  96:	c6 0f       	add	r28, r22
	
	if(i < 1000)
	{
		buf[3] = ' ';
	}
	if(i < 100)
  98:	84 e6       	ldi	r24, 0x64	; 100
  9a:	c8 16       	cp	r12, r24
  9c:	d1 04       	cpc	r13, r1
  9e:	e1 04       	cpc	r14, r1
  a0:	f1 04       	cpc	r15, r1
  a2:	8c f0       	brlt	.+34     	; 0xc6 <printInt+0x68>
		sign = -1;
		i = -i;
	}
	
	buf[3] = i / 1000 + 48;
	buf[2] = (i / 100)%10 +48 ;
  a4:	c7 01       	movw	r24, r14
  a6:	b6 01       	movw	r22, r12
  a8:	24 e6       	ldi	r18, 0x64	; 100
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	40 e0       	ldi	r20, 0x00	; 0
  ae:	50 e0       	ldi	r21, 0x00	; 0
  b0:	6b d4       	rcall	.+2262   	; 0x988 <__divmodsi4>
  b2:	ca 01       	movw	r24, r20
  b4:	b9 01       	movw	r22, r18
  b6:	2a e0       	ldi	r18, 0x0A	; 10
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	40 e0       	ldi	r20, 0x00	; 0
  bc:	50 e0       	ldi	r21, 0x00	; 0
  be:	64 d4       	rcall	.+2248   	; 0x988 <__divmodsi4>
  c0:	10 e3       	ldi	r17, 0x30	; 48
  c2:	16 0f       	add	r17, r22
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <printInt+0x6a>
	{
		buf[3] = ' ';
	}
	if(i < 100)
	{
		buf[2] = ' ';
  c6:	10 e2       	ldi	r17, 0x20	; 32
	}
	if(i < 10)
  c8:	8a e0       	ldi	r24, 0x0A	; 10
  ca:	c8 16       	cp	r12, r24
  cc:	d1 04       	cpc	r13, r1
  ce:	e1 04       	cpc	r14, r1
  d0:	f1 04       	cpc	r15, r1
  d2:	a4 f0       	brlt	.+40     	; 0xfc <printInt+0x9e>
		i = -i;
	}
	
	buf[3] = i / 1000 + 48;
	buf[2] = (i / 100)%10 +48 ;
	buf[1] = (i / 10)%10 +48 ;
  d4:	0f 2e       	mov	r0, r31
  d6:	fa e0       	ldi	r31, 0x0A	; 10
  d8:	8f 2e       	mov	r8, r31
  da:	91 2c       	mov	r9, r1
  dc:	a1 2c       	mov	r10, r1
  de:	b1 2c       	mov	r11, r1
  e0:	f0 2d       	mov	r31, r0
  e2:	c7 01       	movw	r24, r14
  e4:	b6 01       	movw	r22, r12
  e6:	a5 01       	movw	r20, r10
  e8:	94 01       	movw	r18, r8
  ea:	4e d4       	rcall	.+2204   	; 0x988 <__divmodsi4>
  ec:	ca 01       	movw	r24, r20
  ee:	b9 01       	movw	r22, r18
  f0:	a5 01       	movw	r20, r10
  f2:	94 01       	movw	r18, r8
  f4:	49 d4       	rcall	.+2194   	; 0x988 <__divmodsi4>
  f6:	d0 e3       	ldi	r29, 0x30	; 48
  f8:	d6 0f       	add	r29, r22
  fa:	01 c0       	rjmp	.+2      	; 0xfe <printInt+0xa0>
	{
		buf[2] = ' ';
	}
	if(i < 10)
	{
		buf[1] = ' ';
  fc:	d0 e2       	ldi	r29, 0x20	; 32
	}
	//uart_putc(buf[4]);
	//uart_putc(buf[3]);
	uart_putc(buf[2]);
  fe:	81 2f       	mov	r24, r17
 100:	2e d4       	rcall	.+2140   	; 0x95e <uart0_putc>
	uart_putc(buf[1]);
 102:	8d 2f       	mov	r24, r29
 104:	2c d4       	rcall	.+2136   	; 0x95e <uart0_putc>
	uart_putc(buf[0]);
 106:	8c 2f       	mov	r24, r28
 108:	2a d4       	rcall	.+2132   	; 0x95e <uart0_putc>
}
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	1f 91       	pop	r17
 110:	ff 90       	pop	r15
 112:	ef 90       	pop	r14
 114:	df 90       	pop	r13
 116:	cf 90       	pop	r12
 118:	bf 90       	pop	r11
 11a:	af 90       	pop	r10
 11c:	9f 90       	pop	r9
 11e:	8f 90       	pop	r8
 120:	08 95       	ret

00000122 <LCD_String>:

void LCD_String (unsigned char *string)
{
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	ec 01       	movw	r28, r24
	while (*string)
 128:	88 81       	ld	r24, Y
 12a:	88 23       	and	r24, r24
 12c:	29 f0       	breq	.+10     	; 0x138 <LCD_String+0x16>
 12e:	21 96       	adiw	r28, 0x01	; 1
	uart_putc(*string++);
 130:	16 d4       	rcall	.+2092   	; 0x95e <uart0_putc>
	uart_putc(buf[0]);
}

void LCD_String (unsigned char *string)
{
	while (*string)
 132:	89 91       	ld	r24, Y+
 134:	81 11       	cpse	r24, r1
 136:	fc cf       	rjmp	.-8      	; 0x130 <LCD_String+0xe>
	uart_putc(*string++);
}
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	08 95       	ret

0000013e <main>:

int main(void)
{
		
	uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) );
 13e:	89 e1       	ldi	r24, 0x19	; 25
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	f9 d3       	rcall	.+2034   	; 0x936 <uart0_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 144:	8f e1       	ldi	r24, 0x1F	; 31
 146:	9e e4       	ldi	r25, 0x4E	; 78
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <main+0xa>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <main+0x10>
 14e:	00 00       	nop
	//psx_init(PINB0, PB0, PINB1, PB1, PINB2, PB2, PINB3, PB3);
	//for(int i=0; i<5; i++)
	//{
		//psx_init(PORTB, PB0, PORTB, PB1, PORTB, PB2, PORTB, PB3);
		//psx_init(&PORTB, PORTB0, &PORTB, PORTB1, &PORTB, PORTB2, &PORTB, PORTB3); // works!!!
		psx_init(&PORTB, PB0, &PORTB, PB1, &PORTB, PB2, &PORTB, PB3);
 150:	0f 2e       	mov	r0, r31
 152:	f3 e0       	ldi	r31, 0x03	; 3
 154:	af 2e       	mov	r10, r31
 156:	f0 2d       	mov	r31, r0
 158:	0f 2e       	mov	r0, r31
 15a:	f8 e3       	ldi	r31, 0x38	; 56
 15c:	cf 2e       	mov	r12, r31
 15e:	d1 2c       	mov	r13, r1
 160:	f0 2d       	mov	r31, r0
 162:	68 94       	set
 164:	ee 24       	eor	r14, r14
 166:	e1 f8       	bld	r14, 1
 168:	08 e3       	ldi	r16, 0x38	; 56
 16a:	10 e0       	ldi	r17, 0x00	; 0
 16c:	21 e0       	ldi	r18, 0x01	; 1
 16e:	48 e3       	ldi	r20, 0x38	; 56
 170:	50 e0       	ldi	r21, 0x00	; 0
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	88 e3       	ldi	r24, 0x38	; 56
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	98 d2       	rcall	.+1328   	; 0x6aa <psx_init>
 17a:	8f e1       	ldi	r24, 0x1F	; 31
 17c:	9e e4       	ldi	r25, 0x4E	; 78
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <main+0x40>
 182:	00 c0       	rjmp	.+0      	; 0x184 <main+0x46>
 184:	00 00       	nop
		_delay_ms(10);
	//}
		
	//timer0_init();

	sei();
 186:	78 94       	sei
// needs Attention pin to have gone low before called to activate controller.

void commandDisplay(uint8_t i)
{
	//uart_putc(CMD);
	uart_putc(i);
 188:	8c e0       	ldi	r24, 0x0C	; 12
 18a:	e9 d3       	rcall	.+2002   	; 0x95e <uart0_putc>
 18c:	8f e1       	ldi	r24, 0x1F	; 31
 18e:	9e e4       	ldi	r25, 0x4E	; 78
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <main+0x52>
 194:	00 c0       	rjmp	.+0      	; 0x196 <main+0x58>
 196:	00 00       	nop
	_delay_ms(10);
	//uart_putc('G');
	//uart_putc('R');
	//uart_putc('E');
	//uart_putc('G');
	LCD_String("Greg ");
 198:	87 e7       	ldi	r24, 0x77	; 119
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	c2 df       	rcall	.-124    	; 0x122 <LCD_String>
 19e:	9f e7       	ldi	r25, 0x7F	; 127
 1a0:	2a e1       	ldi	r18, 0x1A	; 26
 1a2:	86 e0       	ldi	r24, 0x06	; 6
 1a4:	91 50       	subi	r25, 0x01	; 1
 1a6:	20 40       	sbci	r18, 0x00	; 0
 1a8:	80 40       	sbci	r24, 0x00	; 0
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <main+0x66>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <main+0x70>
 1ae:	00 00       	nop
 1b0:	9f e7       	ldi	r25, 0x7F	; 127
 1b2:	2a e1       	ldi	r18, 0x1A	; 26
 1b4:	86 e0       	ldi	r24, 0x06	; 6
 1b6:	91 50       	subi	r25, 0x01	; 1
 1b8:	20 40       	sbci	r18, 0x00	; 0
 1ba:	80 40       	sbci	r24, 0x00	; 0
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <main+0x78>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <main+0x82>
 1c0:	00 00       	nop
 1c2:	9f e7       	ldi	r25, 0x7F	; 127
 1c4:	2a e1       	ldi	r18, 0x1A	; 26
 1c6:	86 e0       	ldi	r24, 0x06	; 6
 1c8:	91 50       	subi	r25, 0x01	; 1
 1ca:	20 40       	sbci	r18, 0x00	; 0
 1cc:	80 40       	sbci	r24, 0x00	; 0
 1ce:	e1 f7       	brne	.-8      	; 0x1c8 <main+0x8a>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <main+0x94>
 1d2:	00 00       	nop
 1d4:	9f e7       	ldi	r25, 0x7F	; 127
 1d6:	2a e1       	ldi	r18, 0x1A	; 26
 1d8:	86 e0       	ldi	r24, 0x06	; 6
 1da:	91 50       	subi	r25, 0x01	; 1
 1dc:	20 40       	sbci	r18, 0x00	; 0
 1de:	80 40       	sbci	r24, 0x00	; 0
 1e0:	e1 f7       	brne	.-8      	; 0x1da <main+0x9c>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <main+0xa6>
 1e4:	00 00       	nop
 1e6:	9f e7       	ldi	r25, 0x7F	; 127
 1e8:	2a e1       	ldi	r18, 0x1A	; 26
 1ea:	86 e0       	ldi	r24, 0x06	; 6
 1ec:	91 50       	subi	r25, 0x01	; 1
 1ee:	20 40       	sbci	r18, 0x00	; 0
 1f0:	80 40       	sbci	r24, 0x00	; 0
 1f2:	e1 f7       	brne	.-8      	; 0x1ec <main+0xae>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <main+0xb8>
 1f6:	00 00       	nop
 1f8:	9f e7       	ldi	r25, 0x7F	; 127
 1fa:	2a e1       	ldi	r18, 0x1A	; 26
 1fc:	86 e0       	ldi	r24, 0x06	; 6
 1fe:	91 50       	subi	r25, 0x01	; 1
 200:	20 40       	sbci	r18, 0x00	; 0
 202:	80 40       	sbci	r24, 0x00	; 0
 204:	e1 f7       	brne	.-8      	; 0x1fe <main+0xc0>
 206:	00 c0       	rjmp	.+0      	; 0x208 <main+0xca>
 208:	00 00       	nop
		
	
	//uart_putc('R');
	//uart_putc('E');
	//uart_putc('D');
	LCD_String("RED ");
 20a:	8d e7       	ldi	r24, 0x7D	; 125
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	89 df       	rcall	.-238    	; 0x122 <LCD_String>
 210:	9f e7       	ldi	r25, 0x7F	; 127
 212:	2a e1       	ldi	r18, 0x1A	; 26
 214:	86 e0       	ldi	r24, 0x06	; 6
 216:	91 50       	subi	r25, 0x01	; 1
 218:	20 40       	sbci	r18, 0x00	; 0
 21a:	80 40       	sbci	r24, 0x00	; 0
 21c:	e1 f7       	brne	.-8      	; 0x216 <main+0xd8>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <main+0xe2>
 220:	00 00       	nop
 222:	9f e7       	ldi	r25, 0x7F	; 127
 224:	2a e1       	ldi	r18, 0x1A	; 26
 226:	86 e0       	ldi	r24, 0x06	; 6
 228:	91 50       	subi	r25, 0x01	; 1
 22a:	20 40       	sbci	r18, 0x00	; 0
 22c:	80 40       	sbci	r24, 0x00	; 0
 22e:	e1 f7       	brne	.-8      	; 0x228 <main+0xea>
 230:	00 c0       	rjmp	.+0      	; 0x232 <main+0xf4>
 232:	00 00       	nop
 234:	9f e7       	ldi	r25, 0x7F	; 127
 236:	2a e1       	ldi	r18, 0x1A	; 26
 238:	86 e0       	ldi	r24, 0x06	; 6
 23a:	91 50       	subi	r25, 0x01	; 1
 23c:	20 40       	sbci	r18, 0x00	; 0
 23e:	80 40       	sbci	r24, 0x00	; 0
 240:	e1 f7       	brne	.-8      	; 0x23a <main+0xfc>
 242:	00 c0       	rjmp	.+0      	; 0x244 <main+0x106>
 244:	00 00       	nop
 246:	9f e7       	ldi	r25, 0x7F	; 127
 248:	2a e1       	ldi	r18, 0x1A	; 26
 24a:	86 e0       	ldi	r24, 0x06	; 6
 24c:	91 50       	subi	r25, 0x01	; 1
 24e:	20 40       	sbci	r18, 0x00	; 0
 250:	80 40       	sbci	r24, 0x00	; 0
 252:	e1 f7       	brne	.-8      	; 0x24c <main+0x10e>
 254:	00 c0       	rjmp	.+0      	; 0x256 <main+0x118>
 256:	00 00       	nop
	_delay_ms(250);
	_delay_ms(250);
	_delay_ms(250);
	_delay_ms(250);
	
	psx_read_gamepad();
 258:	15 d2       	rcall	.+1066   	; 0x684 <psx_read_gamepad>
	psx_buttons();
 25a:	fa d2       	rcall	.+1524   	; 0x850 <psx_buttons>
 25c:	9f e7       	ldi	r25, 0x7F	; 127
 25e:	2a e1       	ldi	r18, 0x1A	; 26
 260:	86 e0       	ldi	r24, 0x06	; 6
 262:	91 50       	subi	r25, 0x01	; 1
 264:	20 40       	sbci	r18, 0x00	; 0
 266:	80 40       	sbci	r24, 0x00	; 0
 268:	e1 f7       	brne	.-8      	; 0x262 <main+0x124>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <main+0x12e>
 26c:	00 00       	nop
 26e:	9f e7       	ldi	r25, 0x7F	; 127
 270:	2a e1       	ldi	r18, 0x1A	; 26
 272:	86 e0       	ldi	r24, 0x06	; 6
 274:	91 50       	subi	r25, 0x01	; 1
 276:	20 40       	sbci	r18, 0x00	; 0
 278:	80 40       	sbci	r24, 0x00	; 0
 27a:	e1 f7       	brne	.-8      	; 0x274 <main+0x136>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <main+0x140>
 27e:	00 00       	nop
 280:	9f e7       	ldi	r25, 0x7F	; 127
 282:	2a e1       	ldi	r18, 0x1A	; 26
 284:	86 e0       	ldi	r24, 0x06	; 6
 286:	91 50       	subi	r25, 0x01	; 1
 288:	20 40       	sbci	r18, 0x00	; 0
 28a:	80 40       	sbci	r24, 0x00	; 0
 28c:	e1 f7       	brne	.-8      	; 0x286 <main+0x148>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <main+0x152>
 290:	00 00       	nop
 292:	9f e7       	ldi	r25, 0x7F	; 127
 294:	2a e1       	ldi	r18, 0x1A	; 26
 296:	86 e0       	ldi	r24, 0x06	; 6
 298:	91 50       	subi	r25, 0x01	; 1
 29a:	20 40       	sbci	r18, 0x00	; 0
 29c:	80 40       	sbci	r24, 0x00	; 0
 29e:	e1 f7       	brne	.-8      	; 0x298 <main+0x15a>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <main+0x164>
 2a2:	00 00       	nop
// needs Attention pin to have gone low before called to activate controller.

void commandDisplay(uint8_t i)
{
	//uart_putc(CMD);
	uart_putc(i);
 2a4:	8c e0       	ldi	r24, 0x0C	; 12
 2a6:	5b d3       	rcall	.+1718   	; 0x95e <uart0_putc>
 2a8:	8f e1       	ldi	r24, 0x1F	; 31
 2aa:	9e e4       	ldi	r25, 0x4E	; 78
 2ac:	01 97       	sbiw	r24, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <main+0x16e>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <main+0x174>
 2b2:	00 00       	nop
		_delay_ms(250);
	
	//wrdata(cnt);
	commandDisplay(Go_Home);
	_delay_ms(10);
	LCD_String("start");
 2b4:	82 e8       	ldi	r24, 0x82	; 130
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	34 df       	rcall	.-408    	; 0x122 <LCD_String>
 2ba:	9f e7       	ldi	r25, 0x7F	; 127
 2bc:	2a e1       	ldi	r18, 0x1A	; 26
 2be:	86 e0       	ldi	r24, 0x06	; 6
 2c0:	91 50       	subi	r25, 0x01	; 1
 2c2:	20 40       	sbci	r18, 0x00	; 0
 2c4:	80 40       	sbci	r24, 0x00	; 0
 2c6:	e1 f7       	brne	.-8      	; 0x2c0 <main+0x182>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <main+0x18c>
 2ca:	00 00       	nop
 2cc:	9f e7       	ldi	r25, 0x7F	; 127
 2ce:	2a e1       	ldi	r18, 0x1A	; 26
 2d0:	86 e0       	ldi	r24, 0x06	; 6
 2d2:	91 50       	subi	r25, 0x01	; 1
 2d4:	20 40       	sbci	r18, 0x00	; 0
 2d6:	80 40       	sbci	r24, 0x00	; 0
 2d8:	e1 f7       	brne	.-8      	; 0x2d2 <main+0x194>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <main+0x19e>
 2dc:	00 00       	nop
 2de:	9f e7       	ldi	r25, 0x7F	; 127
 2e0:	2a e1       	ldi	r18, 0x1A	; 26
 2e2:	86 e0       	ldi	r24, 0x06	; 6
 2e4:	91 50       	subi	r25, 0x01	; 1
 2e6:	20 40       	sbci	r18, 0x00	; 0
 2e8:	80 40       	sbci	r24, 0x00	; 0
 2ea:	e1 f7       	brne	.-8      	; 0x2e4 <main+0x1a6>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <main+0x1b0>
 2ee:	00 00       	nop
 2f0:	9f e7       	ldi	r25, 0x7F	; 127
 2f2:	2a e1       	ldi	r18, 0x1A	; 26
 2f4:	86 e0       	ldi	r24, 0x06	; 6
 2f6:	91 50       	subi	r25, 0x01	; 1
 2f8:	20 40       	sbci	r18, 0x00	; 0
 2fa:	80 40       	sbci	r24, 0x00	; 0
 2fc:	e1 f7       	brne	.-8      	; 0x2f6 <main+0x1b8>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <main+0x1c2>
 300:	00 00       	nop
	_delay_ms(250);
	_delay_ms(250);

	// main program loop:
while (1){
	psx_read_gamepad();
 302:	c0 d1       	rcall	.+896    	; 0x684 <psx_read_gamepad>
// needs Attention pin to have gone low before called to activate controller.

void commandDisplay(uint8_t i)
{
	//uart_putc(CMD);
	uart_putc(i);
 304:	8c e0       	ldi	r24, 0x0C	; 12
 306:	2b d3       	rcall	.+1622   	; 0x95e <uart0_putc>
 308:	8f e1       	ldi	r24, 0x1F	; 31
 30a:	9e e4       	ldi	r25, 0x4E	; 78
 30c:	01 97       	sbiw	r24, 0x01	; 1
 30e:	f1 f7       	brne	.-4      	; 0x30c <main+0x1ce>
 310:	00 c0       	rjmp	.+0      	; 0x312 <main+0x1d4>
 312:	00 00       	nop
while (1){
	psx_read_gamepad();
	commandDisplay(Go_Home);
	_delay_ms(10);
	//printInt(psx_buttons());
	if(psx_button(PSB_CROSS))
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	90 e4       	ldi	r25, 0x40	; 64
 318:	a2 d2       	rcall	.+1348   	; 0x85e <psx_button>
 31a:	88 23       	and	r24, r24
 31c:	19 f0       	breq	.+6      	; 0x324 <main+0x1e6>
	{
		LCD_String("X Button ");
 31e:	88 e8       	ldi	r24, 0x88	; 136
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	ff de       	rcall	.-514    	; 0x122 <LCD_String>
	}
	if(psx_button(PSB_CIRCLE))
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	90 e2       	ldi	r25, 0x20	; 32
 328:	9a d2       	rcall	.+1332   	; 0x85e <psx_button>
 32a:	88 23       	and	r24, r24
 32c:	19 f0       	breq	.+6      	; 0x334 <main+0x1f6>
	{
		LCD_String("Circle ");
 32e:	82 e9       	ldi	r24, 0x92	; 146
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	f7 de       	rcall	.-530    	; 0x122 <LCD_String>
	}
	if(psx_button(PSB_SQUARE))
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	90 e8       	ldi	r25, 0x80	; 128
 338:	92 d2       	rcall	.+1316   	; 0x85e <psx_button>
 33a:	88 23       	and	r24, r24
 33c:	19 f0       	breq	.+6      	; 0x344 <main+0x206>
	{
		LCD_String("Square ");
 33e:	8a e9       	ldi	r24, 0x9A	; 154
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	ef de       	rcall	.-546    	; 0x122 <LCD_String>
	}
	if(psx_button(PSB_TRIANGLE))
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	90 e1       	ldi	r25, 0x10	; 16
 348:	8a d2       	rcall	.+1300   	; 0x85e <psx_button>
 34a:	88 23       	and	r24, r24
 34c:	19 f0       	breq	.+6      	; 0x354 <main+0x216>
	{
		LCD_String("Triangle ");
 34e:	82 ea       	ldi	r24, 0xA2	; 162
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	e7 de       	rcall	.-562    	; 0x122 <LCD_String>
	}
	if(psx_button(PSB_R1))
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	98 e0       	ldi	r25, 0x08	; 8
 358:	82 d2       	rcall	.+1284   	; 0x85e <psx_button>
 35a:	88 23       	and	r24, r24
 35c:	19 f0       	breq	.+6      	; 0x364 <main+0x226>
	{
		LCD_String("R1 ");
 35e:	8c ea       	ldi	r24, 0xAC	; 172
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	df de       	rcall	.-578    	; 0x122 <LCD_String>
	}
	if(psx_button(PSB_R2))
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	92 e0       	ldi	r25, 0x02	; 2
 368:	7a d2       	rcall	.+1268   	; 0x85e <psx_button>
 36a:	88 23       	and	r24, r24
 36c:	19 f0       	breq	.+6      	; 0x374 <main+0x236>
	{
		LCD_String("R2 ");
 36e:	80 eb       	ldi	r24, 0xB0	; 176
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	d7 de       	rcall	.-594    	; 0x122 <LCD_String>
	}
	if(psx_button(PSB_L1))
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	94 e0       	ldi	r25, 0x04	; 4
 378:	72 d2       	rcall	.+1252   	; 0x85e <psx_button>
 37a:	88 23       	and	r24, r24
 37c:	19 f0       	breq	.+6      	; 0x384 <main+0x246>
	{
		LCD_String("L1 ");
 37e:	84 eb       	ldi	r24, 0xB4	; 180
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	cf de       	rcall	.-610    	; 0x122 <LCD_String>
	}
	if(psx_button(PSB_L2))
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	91 e0       	ldi	r25, 0x01	; 1
 388:	6a d2       	rcall	.+1236   	; 0x85e <psx_button>
 38a:	88 23       	and	r24, r24
 38c:	19 f0       	breq	.+6      	; 0x394 <main+0x256>
	{
		LCD_String("L2 ");
 38e:	88 eb       	ldi	r24, 0xB8	; 184
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	c7 de       	rcall	.-626    	; 0x122 <LCD_String>
	}
	if(psx_button(PSB_START))
 394:	88 e0       	ldi	r24, 0x08	; 8
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	62 d2       	rcall	.+1220   	; 0x85e <psx_button>
 39a:	88 23       	and	r24, r24
 39c:	19 f0       	breq	.+6      	; 0x3a4 <main+0x266>
	{
		LCD_String("Start ");
 39e:	8c eb       	ldi	r24, 0xBC	; 188
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	bf de       	rcall	.-642    	; 0x122 <LCD_String>
	}
	if(psx_button(PSB_SELECT))
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	5a d2       	rcall	.+1204   	; 0x85e <psx_button>
 3aa:	88 23       	and	r24, r24
 3ac:	19 f0       	breq	.+6      	; 0x3b4 <main+0x276>
	{
		LCD_String("Select ");
 3ae:	83 ec       	ldi	r24, 0xC3	; 195
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	b7 de       	rcall	.-658    	; 0x122 <LCD_String>
	}
	if(psx_button(PSB_PAD_UP))
 3b4:	80 e1       	ldi	r24, 0x10	; 16
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	52 d2       	rcall	.+1188   	; 0x85e <psx_button>
 3ba:	88 23       	and	r24, r24
 3bc:	19 f0       	breq	.+6      	; 0x3c4 <main+0x286>
	{
		LCD_String("UP ");
 3be:	8b ec       	ldi	r24, 0xCB	; 203
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	af de       	rcall	.-674    	; 0x122 <LCD_String>
	}
	if(psx_button(PSB_PAD_DOWN))
 3c4:	80 e4       	ldi	r24, 0x40	; 64
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	4a d2       	rcall	.+1172   	; 0x85e <psx_button>
 3ca:	88 23       	and	r24, r24
 3cc:	19 f0       	breq	.+6      	; 0x3d4 <main+0x296>
	{
		LCD_String("DOWN ");
 3ce:	8f ec       	ldi	r24, 0xCF	; 207
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	a7 de       	rcall	.-690    	; 0x122 <LCD_String>
	}
	if(psx_button(PSB_PAD_LEFT))
 3d4:	80 e8       	ldi	r24, 0x80	; 128
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	42 d2       	rcall	.+1156   	; 0x85e <psx_button>
 3da:	88 23       	and	r24, r24
 3dc:	19 f0       	breq	.+6      	; 0x3e4 <main+0x2a6>
	{
		LCD_String("LEFT ");
 3de:	85 ed       	ldi	r24, 0xD5	; 213
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	9f de       	rcall	.-706    	; 0x122 <LCD_String>
	}
	if(psx_button(PSB_PAD_RIGHT))
 3e4:	80 e2       	ldi	r24, 0x20	; 32
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	3a d2       	rcall	.+1140   	; 0x85e <psx_button>
 3ea:	88 23       	and	r24, r24
 3ec:	19 f0       	breq	.+6      	; 0x3f4 <main+0x2b6>
	{
		LCD_String("RIGHT ");
 3ee:	8b ed       	ldi	r24, 0xDB	; 219
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	97 de       	rcall	.-722    	; 0x122 <LCD_String>
	}
	if(psx_button(PSB_L3))
 3f4:	82 e0       	ldi	r24, 0x02	; 2
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	32 d2       	rcall	.+1124   	; 0x85e <psx_button>
 3fa:	88 23       	and	r24, r24
 3fc:	19 f0       	breq	.+6      	; 0x404 <main+0x2c6>
	{
		LCD_String("L3 ");
 3fe:	82 ee       	ldi	r24, 0xE2	; 226
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	8f de       	rcall	.-738    	; 0x122 <LCD_String>
	}
	if(psx_button(PSB_R3))
 404:	84 e0       	ldi	r24, 0x04	; 4
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	2a d2       	rcall	.+1108   	; 0x85e <psx_button>
 40a:	88 23       	and	r24, r24
 40c:	19 f0       	breq	.+6      	; 0x414 <main+0x2d6>
	{
		LCD_String("R3 ");
 40e:	86 ee       	ldi	r24, 0xE6	; 230
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	87 de       	rcall	.-754    	; 0x122 <LCD_String>
	}
	if(psx_button(PSB_L2)&&psx_button(PSB_R2))
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	91 e0       	ldi	r25, 0x01	; 1
 418:	22 d2       	rcall	.+1092   	; 0x85e <psx_button>
 41a:	88 23       	and	r24, r24
 41c:	41 f1       	breq	.+80     	; 0x46e <__stack+0xf>
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	92 e0       	ldi	r25, 0x02	; 2
 422:	1d d2       	rcall	.+1082   	; 0x85e <psx_button>
 424:	88 23       	and	r24, r24
 426:	19 f1       	breq	.+70     	; 0x46e <__stack+0xf>
// needs Attention pin to have gone low before called to activate controller.

void commandDisplay(uint8_t i)
{
	//uart_putc(CMD);
	uart_putc(i);
 428:	8d e0       	ldi	r24, 0x0D	; 13
 42a:	99 d2       	rcall	.+1330   	; 0x95e <uart0_putc>
		LCD_String("R3 ");
	}
	if(psx_button(PSB_L2)&&psx_button(PSB_R2))
	{
		commandDisplay(Cariage_Return);
		uart_putc('R');
 42c:	82 e5       	ldi	r24, 0x52	; 82
 42e:	97 d2       	rcall	.+1326   	; 0x95e <uart0_putc>
		uart_putc('X');
 430:	88 e5       	ldi	r24, 0x58	; 88
 432:	95 d2       	rcall	.+1322   	; 0x95e <uart0_putc>
		uart_putc(':');
 434:	8a e3       	ldi	r24, 0x3A	; 58
 436:	93 d2       	rcall	.+1318   	; 0x95e <uart0_putc>
		printInt(psx_stick(PSS_RX));
 438:	85 e0       	ldi	r24, 0x05	; 5
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	1d d2       	rcall	.+1082   	; 0x878 <psx_stick>
 43e:	68 2f       	mov	r22, r24
 440:	70 e0       	ldi	r23, 0x00	; 0
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	0b de       	rcall	.-1002   	; 0x5e <printInt>
		uart_putc(' ');
 448:	80 e2       	ldi	r24, 0x20	; 32
 44a:	89 d2       	rcall	.+1298   	; 0x95e <uart0_putc>
		uart_putc('R');
 44c:	82 e5       	ldi	r24, 0x52	; 82
 44e:	87 d2       	rcall	.+1294   	; 0x95e <uart0_putc>
		uart_putc('Y');
 450:	89 e5       	ldi	r24, 0x59	; 89
 452:	85 d2       	rcall	.+1290   	; 0x95e <uart0_putc>
		uart_putc(':');
 454:	8a e3       	ldi	r24, 0x3A	; 58
 456:	83 d2       	rcall	.+1286   	; 0x95e <uart0_putc>
		printInt(psx_stick(PSS_RY));
 458:	86 e0       	ldi	r24, 0x06	; 6
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	0d d2       	rcall	.+1050   	; 0x878 <psx_stick>
 45e:	68 2f       	mov	r22, r24
 460:	70 e0       	ldi	r23, 0x00	; 0
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	fb dd       	rcall	.-1034   	; 0x5e <printInt>
		uart_putc(' ');
 468:	80 e2       	ldi	r24, 0x20	; 32
 46a:	79 d2       	rcall	.+1266   	; 0x95e <uart0_putc>
 46c:	22 c0       	rjmp	.+68     	; 0x4b2 <__stack+0x53>
// needs Attention pin to have gone low before called to activate controller.

void commandDisplay(uint8_t i)
{
	//uart_putc(CMD);
	uart_putc(i);
 46e:	8d e0       	ldi	r24, 0x0D	; 13
 470:	76 d2       	rcall	.+1260   	; 0x95e <uart0_putc>
	}
	else
	{
		//printInt(psx_buttons());
		commandDisplay(Cariage_Return);
		uart_putc('L');
 472:	8c e4       	ldi	r24, 0x4C	; 76
 474:	74 d2       	rcall	.+1256   	; 0x95e <uart0_putc>
		uart_putc('X');
 476:	88 e5       	ldi	r24, 0x58	; 88
 478:	72 d2       	rcall	.+1252   	; 0x95e <uart0_putc>
		uart_putc(':');
 47a:	8a e3       	ldi	r24, 0x3A	; 58
 47c:	70 d2       	rcall	.+1248   	; 0x95e <uart0_putc>
		printInt(psx_stick(PSS_LX));
 47e:	87 e0       	ldi	r24, 0x07	; 7
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	fa d1       	rcall	.+1012   	; 0x878 <psx_stick>
 484:	68 2f       	mov	r22, r24
 486:	70 e0       	ldi	r23, 0x00	; 0
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	e8 dd       	rcall	.-1072   	; 0x5e <printInt>
		uart_putc(' ');
 48e:	80 e2       	ldi	r24, 0x20	; 32
 490:	66 d2       	rcall	.+1228   	; 0x95e <uart0_putc>
		uart_putc('L');
 492:	8c e4       	ldi	r24, 0x4C	; 76
 494:	64 d2       	rcall	.+1224   	; 0x95e <uart0_putc>
		uart_putc('Y');
 496:	89 e5       	ldi	r24, 0x59	; 89
 498:	62 d2       	rcall	.+1220   	; 0x95e <uart0_putc>
		uart_putc(':');
 49a:	8a e3       	ldi	r24, 0x3A	; 58
 49c:	60 d2       	rcall	.+1216   	; 0x95e <uart0_putc>
		printInt(psx_stick(PSS_LY));
 49e:	88 e0       	ldi	r24, 0x08	; 8
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	ea d1       	rcall	.+980    	; 0x878 <psx_stick>
 4a4:	68 2f       	mov	r22, r24
 4a6:	70 e0       	ldi	r23, 0x00	; 0
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	d8 dd       	rcall	.-1104   	; 0x5e <printInt>
		uart_putc(' ');	
 4ae:	80 e2       	ldi	r24, 0x20	; 32
 4b0:	56 d2       	rcall	.+1196   	; 0x95e <uart0_putc>
 4b2:	9f ef       	ldi	r25, 0xFF	; 255
 4b4:	21 ee       	ldi	r18, 0xE1	; 225
 4b6:	84 e0       	ldi	r24, 0x04	; 4
 4b8:	91 50       	subi	r25, 0x01	; 1
 4ba:	20 40       	sbci	r18, 0x00	; 0
 4bc:	80 40       	sbci	r24, 0x00	; 0
 4be:	e1 f7       	brne	.-8      	; 0x4b8 <__stack+0x59>
 4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <__stack+0x63>
 4c2:	00 00       	nop
 4c4:	1e cf       	rjmp	.-452    	; 0x302 <main+0x1c4>

000004c6 <_psx_gamepad_shift>:


/* Private.  The actual serial transfer.  Handles clock.  The PSX controller is full 
 * duplex, so this will send a byte as well as receive one.
 */
uint8_t _psx_gamepad_shift(uint8_t transmit_byte) {
 4c6:	cf 93       	push	r28
 4c8:	df 93       	push	r29
 4ca:	a8 2f       	mov	r26, r24
 4cc:	20 e0       	ldi	r18, 0x00	; 0
 4ce:	30 e0       	ldi	r19, 0x00	; 0
  uint8_t received_byte = 0;
 4d0:	80 e0       	ldi	r24, 0x00	; 0
  for(uint8_t i = 0; i < 8; i++) {
    //Drop the clock...
    *_clock_port &= ~_BV(_clock_pin);
 4d2:	41 e0       	ldi	r20, 0x01	; 1
 4d4:	50 e0       	ldi	r21, 0x00	; 0
  
    //...set the command (outgoing) pin...
    if (transmit_byte & (_BV(i))) {
 4d6:	b0 e0       	ldi	r27, 0x00	; 0
 */
uint8_t _psx_gamepad_shift(uint8_t transmit_byte) {
  uint8_t received_byte = 0;
  for(uint8_t i = 0; i < 8; i++) {
    //Drop the clock...
    *_clock_port &= ~_BV(_clock_pin);
 4d8:	e0 91 11 01 	lds	r30, 0x0111
 4dc:	f0 91 12 01 	lds	r31, 0x0112
 4e0:	90 81       	ld	r25, Z
 4e2:	ba 01       	movw	r22, r20
 4e4:	00 90 02 01 	lds	r0, 0x0102
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <_psx_gamepad_shift+0x28>
 4ea:	66 0f       	add	r22, r22
 4ec:	77 1f       	adc	r23, r23
 4ee:	0a 94       	dec	r0
 4f0:	e2 f7       	brpl	.-8      	; 0x4ea <_psx_gamepad_shift+0x24>
 4f2:	60 95       	com	r22
 4f4:	69 23       	and	r22, r25
 4f6:	60 83       	st	Z, r22
  
    //...set the command (outgoing) pin...
    if (transmit_byte & (_BV(i))) {
 4f8:	92 2f       	mov	r25, r18
 4fa:	bd 01       	movw	r22, r26
 4fc:	02 2e       	mov	r0, r18
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <_psx_gamepad_shift+0x3e>
 500:	75 95       	asr	r23
 502:	67 95       	ror	r22
 504:	0a 94       	dec	r0
 506:	e2 f7       	brpl	.-8      	; 0x500 <_psx_gamepad_shift+0x3a>
 508:	60 ff       	sbrs	r22, 0
 50a:	10 c0       	rjmp	.+32     	; 0x52c <_psx_gamepad_shift+0x66>
      *_command_port |= _BV(_command_pin);
 50c:	e0 91 0f 01 	lds	r30, 0x010F
 510:	f0 91 10 01 	lds	r31, 0x0110
 514:	60 81       	ld	r22, Z
 516:	ea 01       	movw	r28, r20
 518:	00 90 01 01 	lds	r0, 0x0101
 51c:	02 c0       	rjmp	.+4      	; 0x522 <_psx_gamepad_shift+0x5c>
 51e:	cc 0f       	add	r28, r28
 520:	dd 1f       	adc	r29, r29
 522:	0a 94       	dec	r0
 524:	e2 f7       	brpl	.-8      	; 0x51e <_psx_gamepad_shift+0x58>
 526:	c6 2b       	or	r28, r22
 528:	c0 83       	st	Z, r28
 52a:	10 c0       	rjmp	.+32     	; 0x54c <_psx_gamepad_shift+0x86>
    }
    else {
      *_command_port &= ~_BV(_command_pin);
 52c:	e0 91 0f 01 	lds	r30, 0x010F
 530:	f0 91 10 01 	lds	r31, 0x0110
 534:	60 81       	ld	r22, Z
 536:	ea 01       	movw	r28, r20
 538:	00 90 01 01 	lds	r0, 0x0101
 53c:	02 c0       	rjmp	.+4      	; 0x542 <_psx_gamepad_shift+0x7c>
 53e:	cc 0f       	add	r28, r28
 540:	dd 1f       	adc	r29, r29
 542:	0a 94       	dec	r0
 544:	e2 f7       	brpl	.-8      	; 0x53e <_psx_gamepad_shift+0x78>
 546:	c0 95       	com	r28
 548:	c6 23       	and	r28, r22
 54a:	c0 83       	st	Z, r28
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 54c:	63 e0       	ldi	r22, 0x03	; 3
 54e:	6a 95       	dec	r22
 550:	f1 f7       	brne	.-4      	; 0x54e <_psx_gamepad_shift+0x88>
 552:	00 00       	nop
    
    //...wait half the clock cycle...
    _delay_us(CTRL_CLK);
    
    //...raise the clock to HIGH...
    *_clock_port |= _BV(_clock_pin);
 554:	e0 91 11 01 	lds	r30, 0x0111
 558:	f0 91 12 01 	lds	r31, 0x0112
 55c:	c0 81       	ld	r28, Z
 55e:	ba 01       	movw	r22, r20
 560:	00 90 02 01 	lds	r0, 0x0102
 564:	02 c0       	rjmp	.+4      	; 0x56a <_psx_gamepad_shift+0xa4>
 566:	66 0f       	add	r22, r22
 568:	77 1f       	adc	r23, r23
 56a:	0a 94       	dec	r0
 56c:	e2 f7       	brpl	.-8      	; 0x566 <_psx_gamepad_shift+0xa0>
 56e:	6c 2b       	or	r22, r28
 570:	60 83       	st	Z, r22
    
    //...at which point you read the data...
    if(*_data_in & _BV(_data_pin)) {
 572:	e0 91 0b 01 	lds	r30, 0x010B
 576:	f0 91 0c 01 	lds	r31, 0x010C
 57a:	60 81       	ld	r22, Z
 57c:	70 e0       	ldi	r23, 0x00	; 0
 57e:	00 90 ff 00 	lds	r0, 0x00FF
 582:	02 c0       	rjmp	.+4      	; 0x588 <_psx_gamepad_shift+0xc2>
 584:	75 95       	asr	r23
 586:	67 95       	ror	r22
 588:	0a 94       	dec	r0
 58a:	e2 f7       	brpl	.-8      	; 0x584 <_psx_gamepad_shift+0xbe>
 58c:	60 ff       	sbrs	r22, 0
 58e:	07 c0       	rjmp	.+14     	; 0x59e <_psx_gamepad_shift+0xd8>
      received_byte |= _BV(i);
 590:	ba 01       	movw	r22, r20
 592:	02 c0       	rjmp	.+4      	; 0x598 <_psx_gamepad_shift+0xd2>
 594:	66 0f       	add	r22, r22
 596:	77 1f       	adc	r23, r23
 598:	9a 95       	dec	r25
 59a:	e2 f7       	brpl	.-8      	; 0x594 <_psx_gamepad_shift+0xce>
 59c:	86 2b       	or	r24, r22
 59e:	93 e0       	ldi	r25, 0x03	; 3
 5a0:	9a 95       	dec	r25
 5a2:	f1 f7       	brne	.-4      	; 0x5a0 <_psx_gamepad_shift+0xda>
 5a4:	00 00       	nop
 5a6:	2f 5f       	subi	r18, 0xFF	; 255
 5a8:	3f 4f       	sbci	r19, 0xFF	; 255
/* Private.  The actual serial transfer.  Handles clock.  The PSX controller is full 
 * duplex, so this will send a byte as well as receive one.
 */
uint8_t _psx_gamepad_shift(uint8_t transmit_byte) {
  uint8_t received_byte = 0;
  for(uint8_t i = 0; i < 8; i++) {
 5aa:	28 30       	cpi	r18, 0x08	; 8
 5ac:	31 05       	cpc	r19, r1
 5ae:	09 f0       	breq	.+2      	; 0x5b2 <_psx_gamepad_shift+0xec>
 5b0:	93 cf       	rjmp	.-218    	; 0x4d8 <_psx_gamepad_shift+0x12>
    //...and wait the other half of the clock cycle
    _delay_us(CTRL_CLK);
  }

  //Clock should already be high at this point, but just to be sure...
  *_clock_port |= _BV(_clock_pin);
 5b2:	e0 91 11 01 	lds	r30, 0x0111
 5b6:	f0 91 12 01 	lds	r31, 0x0112
 5ba:	90 81       	ld	r25, Z
 5bc:	41 e0       	ldi	r20, 0x01	; 1
 5be:	50 e0       	ldi	r21, 0x00	; 0
 5c0:	9a 01       	movw	r18, r20
 5c2:	00 90 02 01 	lds	r0, 0x0102
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <_psx_gamepad_shift+0x106>
 5c8:	22 0f       	add	r18, r18
 5ca:	33 1f       	adc	r19, r19
 5cc:	0a 94       	dec	r0
 5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <_psx_gamepad_shift+0x102>
 5d0:	29 2b       	or	r18, r25
 5d2:	20 83       	st	Z, r18
  
  return received_byte;
}
 5d4:	df 91       	pop	r29
 5d6:	cf 91       	pop	r28
 5d8:	08 95       	ret

000005da <_psx_send_command>:

/* Private.  Sends a command using the shift method.
 */
void _psx_send_command(uint8_t send_data[], uint8_t size){
 5da:	0f 93       	push	r16
 5dc:	1f 93       	push	r17
 5de:	cf 93       	push	r28
 5e0:	df 93       	push	r29
 5e2:	06 2f       	mov	r16, r22
  //Before you submit each command packet, you must set attention low; once
  // you are done each packet, return it high.  You have to toggle the line before
  // you submit another command.
  *_attention_port &= ~(_BV(_attention_pin));
 5e4:	e0 91 0d 01 	lds	r30, 0x010D
 5e8:	f0 91 0e 01 	lds	r31, 0x010E
 5ec:	60 81       	ld	r22, Z
 5ee:	21 e0       	ldi	r18, 0x01	; 1
 5f0:	30 e0       	ldi	r19, 0x00	; 0
 5f2:	a9 01       	movw	r20, r18
 5f4:	00 90 00 01 	lds	r0, 0x0100
 5f8:	02 c0       	rjmp	.+4      	; 0x5fe <_psx_send_command+0x24>
 5fa:	44 0f       	add	r20, r20
 5fc:	55 1f       	adc	r21, r21
 5fe:	0a 94       	dec	r0
 600:	e2 f7       	brpl	.-8      	; 0x5fa <_psx_send_command+0x20>
 602:	40 95       	com	r20
 604:	46 23       	and	r20, r22
 606:	40 83       	st	Z, r20
  *_command_port |= _BV(_command_pin);
 608:	e0 91 0f 01 	lds	r30, 0x010F
 60c:	f0 91 10 01 	lds	r31, 0x0110
 610:	60 81       	ld	r22, Z
 612:	a9 01       	movw	r20, r18
 614:	00 90 01 01 	lds	r0, 0x0101
 618:	02 c0       	rjmp	.+4      	; 0x61e <_psx_send_command+0x44>
 61a:	44 0f       	add	r20, r20
 61c:	55 1f       	adc	r21, r21
 61e:	0a 94       	dec	r0
 620:	e2 f7       	brpl	.-8      	; 0x61a <_psx_send_command+0x40>
 622:	46 2b       	or	r20, r22
 624:	40 83       	st	Z, r20

  //Clock should always be high; it is an active low line...
  *_clock_port |= _BV(_clock_pin);
 626:	e0 91 11 01 	lds	r30, 0x0111
 62a:	f0 91 12 01 	lds	r31, 0x0112
 62e:	40 81       	ld	r20, Z
 630:	00 90 02 01 	lds	r0, 0x0102
 634:	02 c0       	rjmp	.+4      	; 0x63a <_psx_send_command+0x60>
 636:	22 0f       	add	r18, r18
 638:	33 1f       	adc	r19, r19
 63a:	0a 94       	dec	r0
 63c:	e2 f7       	brpl	.-8      	; 0x636 <_psx_send_command+0x5c>
 63e:	24 2b       	or	r18, r20
 640:	20 83       	st	Z, r18
    
  for (uint8_t i = 0; i < size; i++){
 642:	00 23       	and	r16, r16
 644:	49 f0       	breq	.+18     	; 0x658 <_psx_send_command+0x7e>
 646:	c8 2f       	mov	r28, r24
 648:	d9 2f       	mov	r29, r25
 64a:	10 e0       	ldi	r17, 0x00	; 0
    send_data[i] = _psx_gamepad_shift(send_data[i]);
 64c:	88 81       	ld	r24, Y
 64e:	3b df       	rcall	.-394    	; 0x4c6 <_psx_gamepad_shift>
 650:	89 93       	st	Y+, r24
  *_command_port |= _BV(_command_pin);

  //Clock should always be high; it is an active low line...
  *_clock_port |= _BV(_clock_pin);
    
  for (uint8_t i = 0; i < size; i++){
 652:	1f 5f       	subi	r17, 0xFF	; 255
 654:	10 13       	cpse	r17, r16
 656:	fa cf       	rjmp	.-12     	; 0x64c <_psx_send_command+0x72>
    send_data[i] = _psx_gamepad_shift(send_data[i]);
  }
  
  *_attention_port |= _BV(_attention_pin);
 658:	e0 91 0d 01 	lds	r30, 0x010D
 65c:	f0 91 0e 01 	lds	r31, 0x010E
 660:	40 81       	ld	r20, Z
 662:	21 e0       	ldi	r18, 0x01	; 1
 664:	30 e0       	ldi	r19, 0x00	; 0
 666:	c9 01       	movw	r24, r18
 668:	00 90 00 01 	lds	r0, 0x0100
 66c:	02 c0       	rjmp	.+4      	; 0x672 <_psx_send_command+0x98>
 66e:	88 0f       	add	r24, r24
 670:	99 1f       	adc	r25, r25
 672:	0a 94       	dec	r0
 674:	e2 f7       	brpl	.-8      	; 0x66e <_psx_send_command+0x94>
 676:	84 2b       	or	r24, r20
 678:	80 83       	st	Z, r24
}
 67a:	df 91       	pop	r29
 67c:	cf 91       	pop	r28
 67e:	1f 91       	pop	r17
 680:	0f 91       	pop	r16
 682:	08 95       	ret

00000684 <psx_read_gamepad>:


/* Reads the gamepad.  You need to call this whenever you want updated state.
 */
void psx_read_gamepad() {
  _data[0] = 0x01;
 684:	81 e0       	ldi	r24, 0x01	; 1
 686:	80 93 ea 00 	sts	0x00EA, r24
  _data[1] = 0x42;
 68a:	82 e4       	ldi	r24, 0x42	; 66
 68c:	80 93 eb 00 	sts	0x00EB, r24
 690:	ec ee       	ldi	r30, 0xEC	; 236
 692:	f0 e0       	ldi	r31, 0x00	; 0
 694:	8f ef       	ldi	r24, 0xFF	; 255
 696:	90 e0       	ldi	r25, 0x00	; 0
  for (uint8_t i = 2; i < 21; i++){
    _data[i] = 0x00;
 698:	11 92       	st	Z+, r1
/* Reads the gamepad.  You need to call this whenever you want updated state.
 */
void psx_read_gamepad() {
  _data[0] = 0x01;
  _data[1] = 0x42;
  for (uint8_t i = 2; i < 21; i++){
 69a:	e8 17       	cp	r30, r24
 69c:	f9 07       	cpc	r31, r25
 69e:	e1 f7       	brne	.-8      	; 0x698 <psx_read_gamepad+0x14>
    _data[i] = 0x00;
  }
  _psx_send_command(_data, 21);
 6a0:	65 e1       	ldi	r22, 0x15	; 21
 6a2:	8a ee       	ldi	r24, 0xEA	; 234
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	99 df       	rcall	.-206    	; 0x5da <_psx_send_command>
 6a8:	08 95       	ret

000006aa <psx_init>:
 * highly recommended that you check any new chips which you want to use this library with.
 */
void psx_init(volatile uint8_t *data_port, uint8_t data_pin,
        volatile uint8_t *clock_port, uint8_t clock_pin,
        volatile uint8_t *command_port, uint8_t command_pin,
        volatile uint8_t *attention_port, uint8_t attention_pin){
 6aa:	2f 92       	push	r2
 6ac:	3f 92       	push	r3
 6ae:	4f 92       	push	r4
 6b0:	5f 92       	push	r5
 6b2:	6f 92       	push	r6
 6b4:	7f 92       	push	r7
 6b6:	8f 92       	push	r8
 6b8:	9f 92       	push	r9
 6ba:	af 92       	push	r10
 6bc:	bf 92       	push	r11
 6be:	cf 92       	push	r12
 6c0:	df 92       	push	r13
 6c2:	ef 92       	push	r14
 6c4:	ff 92       	push	r15
 6c6:	0f 93       	push	r16
 6c8:	1f 93       	push	r17
 6ca:	cf 93       	push	r28
 6cc:	df 93       	push	r29
 6ce:	cd b7       	in	r28, 0x3d	; 61
 6d0:	de b7       	in	r29, 0x3e	; 62
 6d2:	67 97       	sbiw	r28, 0x17	; 23
 6d4:	0f b6       	in	r0, 0x3f	; 63
 6d6:	f8 94       	cli
 6d8:	de bf       	out	0x3e, r29	; 62
 6da:	0f be       	out	0x3f, r0	; 63
 6dc:	cd bf       	out	0x3d, r28	; 61
 6de:	18 01       	movw	r2, r16

  //Store the ports...
  _data_port = data_port;
 6e0:	90 93 14 01 	sts	0x0114, r25
 6e4:	80 93 13 01 	sts	0x0113, r24
  _clock_port = clock_port;
 6e8:	50 93 12 01 	sts	0x0112, r21
 6ec:	40 93 11 01 	sts	0x0111, r20
  _command_port = command_port;
 6f0:	10 93 10 01 	sts	0x0110, r17
 6f4:	00 93 0f 01 	sts	0x010F, r16
  _attention_port = attention_port;
 6f8:	d0 92 0e 01 	sts	0x010E, r13
 6fc:	c0 92 0d 01 	sts	0x010D, r12
  
  //... and data direction registers...
  _data_ddr = data_port - 0x1;
 700:	8c 01       	movw	r16, r24
 702:	01 50       	subi	r16, 0x01	; 1
 704:	11 09       	sbc	r17, r1
 706:	10 93 0a 01 	sts	0x010A, r17
 70a:	00 93 09 01 	sts	0x0109, r16
  _clock_ddr = clock_port - 0x1;
 70e:	3a 01       	movw	r6, r20
 710:	31 e0       	ldi	r19, 0x01	; 1
 712:	63 1a       	sub	r6, r19
 714:	71 08       	sbc	r7, r1
 716:	70 92 08 01 	sts	0x0108, r7
 71a:	60 92 07 01 	sts	0x0107, r6
  _command_ddr = command_port - 0x1;
 71e:	41 01       	movw	r8, r2
 720:	a1 e0       	ldi	r26, 0x01	; 1
 722:	8a 1a       	sub	r8, r26
 724:	91 08       	sbc	r9, r1
 726:	90 92 06 01 	sts	0x0106, r9
 72a:	80 92 05 01 	sts	0x0105, r8
  _attention_ddr = attention_port - 0x1;
 72e:	b1 e0       	ldi	r27, 0x01	; 1
 730:	cb 1a       	sub	r12, r27
 732:	d1 08       	sbc	r13, r1
 734:	d0 92 04 01 	sts	0x0104, r13
 738:	c0 92 03 01 	sts	0x0103, r12

  //... and data input register...
  _data_in = data_port - 0x2;
 73c:	dc 01       	movw	r26, r24
 73e:	12 97       	sbiw	r26, 0x02	; 2
 740:	b0 93 0c 01 	sts	0x010C, r27
 744:	a0 93 0b 01 	sts	0x010B, r26

  //... and pin numbers.
  _clock_pin = clock_pin;
 748:	20 93 02 01 	sts	0x0102, r18
  _command_pin = command_pin;
 74c:	e0 92 01 01 	sts	0x0101, r14
  _attention_pin = attention_pin;
 750:	a0 92 00 01 	sts	0x0100, r10
  _data_pin = data_pin;
 754:	60 93 ff 00 	sts	0x00FF, r22
  
  
  //Set clock, attention, and command pins to output mode
  *_clock_ddr |= _BV(_clock_pin);
 758:	f3 01       	movw	r30, r6
 75a:	70 81       	ld	r23, Z
 75c:	a1 e0       	ldi	r26, 0x01	; 1
 75e:	b0 e0       	ldi	r27, 0x00	; 0
 760:	2d 01       	movw	r4, r26
 762:	02 c0       	rjmp	.+4      	; 0x768 <psx_init+0xbe>
 764:	44 0c       	add	r4, r4
 766:	55 1c       	adc	r5, r5
 768:	2a 95       	dec	r18
 76a:	e2 f7       	brpl	.-8      	; 0x764 <psx_init+0xba>
 76c:	92 01       	movw	r18, r4
 76e:	37 2f       	mov	r19, r23
 770:	32 2b       	or	r19, r18
 772:	30 83       	st	Z, r19
  *_attention_ddr |= _BV(_attention_pin);
 774:	f6 01       	movw	r30, r12
 776:	30 81       	ld	r19, Z
 778:	2d 01       	movw	r4, r26
 77a:	02 c0       	rjmp	.+4      	; 0x780 <psx_init+0xd6>
 77c:	44 0c       	add	r4, r4
 77e:	55 1c       	adc	r5, r5
 780:	aa 94       	dec	r10
 782:	e2 f7       	brpl	.-8      	; 0x77c <psx_init+0xd2>
 784:	52 01       	movw	r10, r4
 786:	a3 2a       	or	r10, r19
 788:	a0 82       	st	Z, r10
  *_command_ddr |= _BV(_command_pin);
 78a:	f4 01       	movw	r30, r8
 78c:	30 81       	ld	r19, Z
 78e:	2d 01       	movw	r4, r26
 790:	02 c0       	rjmp	.+4      	; 0x796 <psx_init+0xec>
 792:	44 0c       	add	r4, r4
 794:	55 1c       	adc	r5, r5
 796:	ea 94       	dec	r14
 798:	e2 f7       	brpl	.-8      	; 0x792 <psx_init+0xe8>
 79a:	72 01       	movw	r14, r4
 79c:	34 29       	or	r19, r4
 79e:	30 83       	st	Z, r19

  //Set data pin to input mode, and set pullup resistor
  *_data_ddr &= ~(_BV(_data_pin));
 7a0:	f8 01       	movw	r30, r16
 7a2:	70 81       	ld	r23, Z
 7a4:	02 c0       	rjmp	.+4      	; 0x7aa <psx_init+0x100>
 7a6:	aa 0f       	add	r26, r26
 7a8:	bb 1f       	adc	r27, r27
 7aa:	6a 95       	dec	r22
 7ac:	e2 f7       	brpl	.-8      	; 0x7a6 <psx_init+0xfc>
 7ae:	3a 2f       	mov	r19, r26
 7b0:	30 95       	com	r19
 7b2:	37 23       	and	r19, r23
 7b4:	30 83       	st	Z, r19
  *_data_port |= _BV(_data_pin);
 7b6:	fc 01       	movw	r30, r24
 7b8:	60 81       	ld	r22, Z
 7ba:	a6 2b       	or	r26, r22
 7bc:	a0 83       	st	Z, r26

  //Initialize game pad
  *_clock_port |= _BV(_clock_pin);
 7be:	da 01       	movw	r26, r20
 7c0:	8c 91       	ld	r24, X
 7c2:	28 2b       	or	r18, r24
 7c4:	2c 93       	st	X, r18
  *_command_port |= _BV(_command_pin);
 7c6:	f1 01       	movw	r30, r2
 7c8:	80 81       	ld	r24, Z
 7ca:	e8 2a       	or	r14, r24
 7cc:	e0 82       	st	Z, r14
  
  
  //Init by polling once
  psx_read_gamepad();
 7ce:	5a df       	rcall	.-332    	; 0x684 <psx_read_gamepad>


  //Enter Config Mode
  uint8_t enter_config_command[] = {0x01, 0x43, 0x00, 0x01, 0x00};
 7d0:	85 e0       	ldi	r24, 0x05	; 5
 7d2:	e0 e6       	ldi	r30, 0x60	; 96
 7d4:	f0 e0       	ldi	r31, 0x00	; 0
 7d6:	de 01       	movw	r26, r28
 7d8:	11 96       	adiw	r26, 0x01	; 1
 7da:	01 90       	ld	r0, Z+
 7dc:	0d 92       	st	X+, r0
 7de:	8a 95       	dec	r24
 7e0:	e1 f7       	brne	.-8      	; 0x7da <psx_init+0x130>
  _psx_send_command(enter_config_command, 5);
 7e2:	65 e0       	ldi	r22, 0x05	; 5
 7e4:	ce 01       	movw	r24, r28
 7e6:	01 96       	adiw	r24, 0x01	; 1
 7e8:	f8 de       	rcall	.-528    	; 0x5da <_psx_send_command>

  // Lock to Analog Mode on Stick
  uint8_t lock_analog_mode_command[] = {0x01, 0x44, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00};
 7ea:	89 e0       	ldi	r24, 0x09	; 9
 7ec:	e5 e6       	ldi	r30, 0x65	; 101
 7ee:	f0 e0       	ldi	r31, 0x00	; 0
 7f0:	de 01       	movw	r26, r28
 7f2:	16 96       	adiw	r26, 0x06	; 6
 7f4:	01 90       	ld	r0, Z+
 7f6:	0d 92       	st	X+, r0
 7f8:	8a 95       	dec	r24
 7fa:	e1 f7       	brne	.-8      	; 0x7f4 <psx_init+0x14a>
  _psx_send_command(lock_analog_mode_command, 9);
 7fc:	69 e0       	ldi	r22, 0x09	; 9
 7fe:	ce 01       	movw	r24, r28
 800:	06 96       	adiw	r24, 0x06	; 6
 802:	eb de       	rcall	.-554    	; 0x5da <_psx_send_command>

  //Exit config mode
  uint8_t exit_config_command[] = {0x01, 0x43, 0x00, 0x00, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A};
 804:	89 e0       	ldi	r24, 0x09	; 9
 806:	ee e6       	ldi	r30, 0x6E	; 110
 808:	f0 e0       	ldi	r31, 0x00	; 0
 80a:	de 01       	movw	r26, r28
 80c:	1f 96       	adiw	r26, 0x0f	; 15
 80e:	01 90       	ld	r0, Z+
 810:	0d 92       	st	X+, r0
 812:	8a 95       	dec	r24
 814:	e1 f7       	brne	.-8      	; 0x80e <psx_init+0x164>
  _psx_send_command(exit_config_command, 9);
 816:	69 e0       	ldi	r22, 0x09	; 9
 818:	ce 01       	movw	r24, r28
 81a:	0f 96       	adiw	r24, 0x0f	; 15
 81c:	de de       	rcall	.-580    	; 0x5da <_psx_send_command>
}
 81e:	67 96       	adiw	r28, 0x17	; 23
 820:	0f b6       	in	r0, 0x3f	; 63
 822:	f8 94       	cli
 824:	de bf       	out	0x3e, r29	; 62
 826:	0f be       	out	0x3f, r0	; 63
 828:	cd bf       	out	0x3d, r28	; 61
 82a:	df 91       	pop	r29
 82c:	cf 91       	pop	r28
 82e:	1f 91       	pop	r17
 830:	0f 91       	pop	r16
 832:	ff 90       	pop	r15
 834:	ef 90       	pop	r14
 836:	df 90       	pop	r13
 838:	cf 90       	pop	r12
 83a:	bf 90       	pop	r11
 83c:	af 90       	pop	r10
 83e:	9f 90       	pop	r9
 840:	8f 90       	pop	r8
 842:	7f 90       	pop	r7
 844:	6f 90       	pop	r6
 846:	5f 90       	pop	r5
 848:	4f 90       	pop	r4
 84a:	3f 90       	pop	r3
 84c:	2f 90       	pop	r2
 84e:	08 95       	ret

00000850 <psx_buttons>:


uint16_t psx_buttons() {
  uint16_t buttons = *(uint16_t*)(_data + 3); //Get 2 bytes, comprising data positions 3 and 4.
  return ~buttons;
 850:	80 91 ed 00 	lds	r24, 0x00ED
 854:	90 91 ee 00 	lds	r25, 0x00EE
}
 858:	80 95       	com	r24
 85a:	90 95       	com	r25
 85c:	08 95       	ret

0000085e <psx_button>:
}


uint16_t psx_buttons() {
  uint16_t buttons = *(uint16_t*)(_data + 3); //Get 2 bytes, comprising data positions 3 and 4.
  return ~buttons;
 85e:	20 91 ed 00 	lds	r18, 0x00ED
 862:	30 91 ee 00 	lds	r19, 0x00EE
 866:	20 95       	com	r18
 868:	30 95       	com	r19
}

uint8_t psx_button(uint16_t button) {
  uint16_t buttons = psx_buttons();
  return ((buttons & button) > 0);
 86a:	28 23       	and	r18, r24
 86c:	39 23       	and	r19, r25
 86e:	81 e0       	ldi	r24, 0x01	; 1
 870:	23 2b       	or	r18, r19
 872:	09 f4       	brne	.+2      	; 0x876 <psx_button+0x18>
 874:	80 e0       	ldi	r24, 0x00	; 0
}
 876:	08 95       	ret

00000878 <psx_stick>:

uint8_t psx_stick(unsigned int stick) {
  return _data[stick];
 878:	86 51       	subi	r24, 0x16	; 22
 87a:	9f 4f       	sbci	r25, 0xFF	; 255
 87c:	fc 01       	movw	r30, r24
 87e:	80 81       	ld	r24, Z
 880:	08 95       	ret

00000882 <__vector_11>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
 882:	1f 92       	push	r1
 884:	0f 92       	push	r0
 886:	0f b6       	in	r0, 0x3f	; 63
 888:	0f 92       	push	r0
 88a:	11 24       	eor	r1, r1
 88c:	2f 93       	push	r18
 88e:	3f 93       	push	r19
 890:	4f 93       	push	r20
 892:	5f 93       	push	r21
 894:	8f 93       	push	r24
 896:	9f 93       	push	r25
 898:	ef 93       	push	r30
 89a:	ff 93       	push	r31
    uint8_t data;
    uint8_t usr;
    uint8_t lastRxError;
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
 89c:	4b b1       	in	r20, 0x0b	; 11
    data = UART0_DATA;
 89e:	5c b1       	in	r21, 0x0c	; 12
    
    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
 8a0:	48 71       	andi	r20, 0x18	; 24
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX0_BUFFER_MASK;
 8a2:	80 91 17 01 	lds	r24, 0x0117
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	01 96       	adiw	r24, 0x01	; 1
 8aa:	8f 77       	andi	r24, 0x7F	; 127
 8ac:	99 27       	eor	r25, r25
    
    if ( tmphead == UART_RxTail ) {
 8ae:	20 91 16 01 	lds	r18, 0x0116
 8b2:	30 e0       	ldi	r19, 0x00	; 0
 8b4:	28 17       	cp	r18, r24
 8b6:	39 07       	cpc	r19, r25
 8b8:	39 f0       	breq	.+14     	; 0x8c8 <__vector_11+0x46>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    } else {
        /* store new index */
        UART_RxHead = tmphead;
 8ba:	80 93 17 01 	sts	0x0117, r24
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 8be:	fc 01       	movw	r30, r24
 8c0:	e6 5e       	subi	r30, 0xE6	; 230
 8c2:	fe 4f       	sbci	r31, 0xFE	; 254
 8c4:	50 83       	st	Z, r21
 8c6:	01 c0       	rjmp	.+2      	; 0x8ca <__vector_11+0x48>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX0_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 8c8:	42 e0       	ldi	r20, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError = lastRxError;   
 8ca:	40 93 15 01 	sts	0x0115, r20
}
 8ce:	ff 91       	pop	r31
 8d0:	ef 91       	pop	r30
 8d2:	9f 91       	pop	r25
 8d4:	8f 91       	pop	r24
 8d6:	5f 91       	pop	r21
 8d8:	4f 91       	pop	r20
 8da:	3f 91       	pop	r19
 8dc:	2f 91       	pop	r18
 8de:	0f 90       	pop	r0
 8e0:	0f be       	out	0x3f, r0	; 63
 8e2:	0f 90       	pop	r0
 8e4:	1f 90       	pop	r1
 8e6:	18 95       	reti

000008e8 <__vector_12>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 8e8:	1f 92       	push	r1
 8ea:	0f 92       	push	r0
 8ec:	0f b6       	in	r0, 0x3f	; 63
 8ee:	0f 92       	push	r0
 8f0:	11 24       	eor	r1, r1
 8f2:	8f 93       	push	r24
 8f4:	9f 93       	push	r25
 8f6:	ef 93       	push	r30
 8f8:	ff 93       	push	r31
    uint16_t tmptail;

    if ( UART_TxHead != UART_TxTail) {
 8fa:	90 91 19 01 	lds	r25, 0x0119
 8fe:	80 91 18 01 	lds	r24, 0x0118
 902:	98 17       	cp	r25, r24
 904:	71 f0       	breq	.+28     	; 0x922 <__vector_12+0x3a>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX0_BUFFER_MASK;
 906:	80 91 18 01 	lds	r24, 0x0118
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	01 96       	adiw	r24, 0x01	; 1
 90e:	8f 77       	andi	r24, 0x7F	; 127
 910:	99 27       	eor	r25, r25
        UART_TxTail = tmptail;
 912:	80 93 18 01 	sts	0x0118, r24
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 916:	fc 01       	movw	r30, r24
 918:	e6 56       	subi	r30, 0x66	; 102
 91a:	fe 4f       	sbci	r31, 0xFE	; 254
 91c:	80 81       	ld	r24, Z
 91e:	8c b9       	out	0x0c, r24	; 12
 920:	01 c0       	rjmp	.+2      	; 0x924 <__vector_12+0x3c>
    } else {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 922:	55 98       	cbi	0x0a, 5	; 10
    }
}
 924:	ff 91       	pop	r31
 926:	ef 91       	pop	r30
 928:	9f 91       	pop	r25
 92a:	8f 91       	pop	r24
 92c:	0f 90       	pop	r0
 92e:	0f be       	out	0x3f, r0	; 63
 930:	0f 90       	pop	r0
 932:	1f 90       	pop	r1
 934:	18 95       	reti

00000936 <uart0_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart0_init(uint16_t baudrate)
{
	UART_TxHead = 0;
 936:	10 92 19 01 	sts	0x0119, r1
	UART_TxTail = 0;
 93a:	10 92 18 01 	sts	0x0118, r1
	UART_RxHead = 0;
 93e:	10 92 17 01 	sts	0x0117, r1
	UART_RxTail = 0;
 942:	10 92 16 01 	sts	0x0116, r1
	/* enable UART receiver and transmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
	/* Set baud rate */
	if ( baudrate & 0x8000 ) {
 946:	99 23       	and	r25, r25
 948:	1c f4       	brge	.+6      	; 0x950 <uart0_init+0x1a>
		UART0_STATUS = (1<<U2X);  //Enable 2x speed
 94a:	22 e0       	ldi	r18, 0x02	; 2
 94c:	2b b9       	out	0x0b, r18	; 11
		baudrate &= ~0x8000;
 94e:	9f 77       	andi	r25, 0x7F	; 127
	}
	UBRRH = (uint8_t)(baudrate>>8);
 950:	90 bd       	out	0x20, r25	; 32
	UBRRL = (uint8_t) baudrate;
 952:	89 b9       	out	0x09, r24	; 9

	/* Enable USART receiver and transmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
 954:	88 e9       	ldi	r24, 0x98	; 152
 956:	8a b9       	out	0x0a, r24	; 10

	/* Set frame format: asynchronous, 8data, no parity, 1stop bit */
#ifdef URSEL
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
 958:	86 e8       	ldi	r24, 0x86	; 134
 95a:	80 bd       	out	0x20, r24	; 32
 95c:	08 95       	ret

0000095e <uart0_putc>:
**************************************************************************/
void uart0_putc(uint8_t data)
{
	uint16_t tmphead;

	tmphead  = (UART_TxHead + 1) & UART_TX0_BUFFER_MASK;
 95e:	40 91 19 01 	lds	r20, 0x0119
 962:	50 e0       	ldi	r21, 0x00	; 0
 964:	4f 5f       	subi	r20, 0xFF	; 255
 966:	5f 4f       	sbci	r21, 0xFF	; 255
 968:	4f 77       	andi	r20, 0x7F	; 127
 96a:	55 27       	eor	r21, r21

	while ( tmphead == UART_TxTail ) {
 96c:	20 91 18 01 	lds	r18, 0x0118
 970:	30 e0       	ldi	r19, 0x00	; 0
 972:	24 17       	cp	r18, r20
 974:	35 07       	cpc	r19, r21
 976:	d1 f3       	breq	.-12     	; 0x96c <uart0_putc+0xe>
		;/* wait for free space in buffer */
	}

	UART_TxBuf[tmphead] = data;
 978:	fa 01       	movw	r30, r20
 97a:	e6 56       	subi	r30, 0x66	; 102
 97c:	fe 4f       	sbci	r31, 0xFE	; 254
 97e:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
 980:	40 93 19 01 	sts	0x0119, r20

	/* enable UDRE interrupt */
	UART0_CONTROL    |= _BV(UART0_UDRIE);
 984:	55 9a       	sbi	0x0a, 5	; 10
 986:	08 95       	ret

00000988 <__divmodsi4>:
 988:	05 2e       	mov	r0, r21
 98a:	97 fb       	bst	r25, 7
 98c:	16 f4       	brtc	.+4      	; 0x992 <__divmodsi4+0xa>
 98e:	00 94       	com	r0
 990:	0f d0       	rcall	.+30     	; 0x9b0 <__negsi2>
 992:	57 fd       	sbrc	r21, 7
 994:	05 d0       	rcall	.+10     	; 0x9a0 <__divmodsi4_neg2>
 996:	14 d0       	rcall	.+40     	; 0x9c0 <__udivmodsi4>
 998:	07 fc       	sbrc	r0, 7
 99a:	02 d0       	rcall	.+4      	; 0x9a0 <__divmodsi4_neg2>
 99c:	46 f4       	brtc	.+16     	; 0x9ae <__divmodsi4_exit>
 99e:	08 c0       	rjmp	.+16     	; 0x9b0 <__negsi2>

000009a0 <__divmodsi4_neg2>:
 9a0:	50 95       	com	r21
 9a2:	40 95       	com	r20
 9a4:	30 95       	com	r19
 9a6:	21 95       	neg	r18
 9a8:	3f 4f       	sbci	r19, 0xFF	; 255
 9aa:	4f 4f       	sbci	r20, 0xFF	; 255
 9ac:	5f 4f       	sbci	r21, 0xFF	; 255

000009ae <__divmodsi4_exit>:
 9ae:	08 95       	ret

000009b0 <__negsi2>:
 9b0:	90 95       	com	r25
 9b2:	80 95       	com	r24
 9b4:	70 95       	com	r23
 9b6:	61 95       	neg	r22
 9b8:	7f 4f       	sbci	r23, 0xFF	; 255
 9ba:	8f 4f       	sbci	r24, 0xFF	; 255
 9bc:	9f 4f       	sbci	r25, 0xFF	; 255
 9be:	08 95       	ret

000009c0 <__udivmodsi4>:
 9c0:	a1 e2       	ldi	r26, 0x21	; 33
 9c2:	1a 2e       	mov	r1, r26
 9c4:	aa 1b       	sub	r26, r26
 9c6:	bb 1b       	sub	r27, r27
 9c8:	fd 01       	movw	r30, r26
 9ca:	0d c0       	rjmp	.+26     	; 0x9e6 <__udivmodsi4_ep>

000009cc <__udivmodsi4_loop>:
 9cc:	aa 1f       	adc	r26, r26
 9ce:	bb 1f       	adc	r27, r27
 9d0:	ee 1f       	adc	r30, r30
 9d2:	ff 1f       	adc	r31, r31
 9d4:	a2 17       	cp	r26, r18
 9d6:	b3 07       	cpc	r27, r19
 9d8:	e4 07       	cpc	r30, r20
 9da:	f5 07       	cpc	r31, r21
 9dc:	20 f0       	brcs	.+8      	; 0x9e6 <__udivmodsi4_ep>
 9de:	a2 1b       	sub	r26, r18
 9e0:	b3 0b       	sbc	r27, r19
 9e2:	e4 0b       	sbc	r30, r20
 9e4:	f5 0b       	sbc	r31, r21

000009e6 <__udivmodsi4_ep>:
 9e6:	66 1f       	adc	r22, r22
 9e8:	77 1f       	adc	r23, r23
 9ea:	88 1f       	adc	r24, r24
 9ec:	99 1f       	adc	r25, r25
 9ee:	1a 94       	dec	r1
 9f0:	69 f7       	brne	.-38     	; 0x9cc <__udivmodsi4_loop>
 9f2:	60 95       	com	r22
 9f4:	70 95       	com	r23
 9f6:	80 95       	com	r24
 9f8:	90 95       	com	r25
 9fa:	9b 01       	movw	r18, r22
 9fc:	ac 01       	movw	r20, r24
 9fe:	bd 01       	movw	r22, r26
 a00:	cf 01       	movw	r24, r30
 a02:	08 95       	ret

00000a04 <_exit>:
 a04:	f8 94       	cli

00000a06 <__stop_program>:
 a06:	ff cf       	rjmp	.-2      	; 0xa06 <__stop_program>
