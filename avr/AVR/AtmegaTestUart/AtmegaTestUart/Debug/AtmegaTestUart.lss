
AtmegaTestUart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000598  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  00000598  0000062c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000108  008000a2  008000a2  0000066e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000066e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  0000069e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008fb  00000000  00000000  0000074e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002f5  00000000  00000000  00001049  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000306  00000000  00000000  0000133e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000224  00000000  00000000  00001644  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002d1  00000000  00000000  00001868  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000619  00000000  00000000  00001b39  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00002152  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	69 c1       	rjmp	.+722    	; 0x2e6 <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	ef c1       	rjmp	.+990    	; 0x3f6 <__vector_11>
  18:	21 c2       	rjmp	.+1090   	; 0x45c <__vector_12>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 e9       	ldi	r30, 0x98	; 152
  3a:	f5 e0       	ldi	r31, 0x05	; 5
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 3a       	cpi	r26, 0xA2	; 162
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	21 e0       	ldi	r18, 0x01	; 1
  4a:	a2 ea       	ldi	r26, 0xA2	; 162
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	aa 3a       	cpi	r26, 0xAA	; 170
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	c3 d1       	rcall	.+902    	; 0x3e0 <main>
  5a:	9c c2       	rjmp	.+1336   	; 0x594 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <commandDisplay>:
volatile int8_t i = -128;
volatile int8_t d = 1;
volatile uint8_t BTN_Down = 0;

void commandDisplay(uint8_t i)
{
  5e:	cf 93       	push	r28
  60:	c8 2f       	mov	r28, r24
	uart_putc(CMD);
  62:	8e ef       	ldi	r24, 0xFE	; 254
  64:	36 d2       	rcall	.+1132   	; 0x4d2 <uart0_putc>
	uart_putc(i);
  66:	8c 2f       	mov	r24, r28
  68:	34 d2       	rcall	.+1128   	; 0x4d2 <uart0_putc>
}
  6a:	cf 91       	pop	r28
  6c:	08 95       	ret

0000006e <printInt>:


void printInt(int32_t i)
{
  6e:	9f 92       	push	r9
  70:	af 92       	push	r10
  72:	bf 92       	push	r11
  74:	cf 92       	push	r12
  76:	df 92       	push	r13
  78:	ef 92       	push	r14
  7a:	ff 92       	push	r15
  7c:	0f 93       	push	r16
  7e:	1f 93       	push	r17
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
  88:	60 97       	sbiw	r28, 0x10	; 16
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	f8 94       	cli
  8e:	de bf       	out	0x3e, r29	; 62
  90:	0f be       	out	0x3f, r0	; 63
  92:	cd bf       	out	0x3d, r28	; 61
	char buf[PRINT_INT_BUFSIZE];
	int8_t sign = 1;
	int8_t len = 0;

	if (i < 0) { // look for the sign
  94:	99 23       	and	r25, r25
  96:	54 f4       	brge	.+20     	; 0xac <printInt+0x3e>
		sign = -1;
		i = -i;
  98:	90 95       	com	r25
  9a:	80 95       	com	r24
  9c:	70 95       	com	r23
  9e:	61 95       	neg	r22
  a0:	7f 4f       	sbci	r23, 0xFF	; 255
  a2:	8f 4f       	sbci	r24, 0xFF	; 255
  a4:	9f 4f       	sbci	r25, 0xFF	; 255
	char buf[PRINT_INT_BUFSIZE];
	int8_t sign = 1;
	int8_t len = 0;

	if (i < 0) { // look for the sign
		sign = -1;
  a6:	99 24       	eor	r9, r9
  a8:	9a 94       	dec	r9
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <printInt+0x42>


void printInt(int32_t i)
{
	char buf[PRINT_INT_BUFSIZE];
	int8_t sign = 1;
  ac:	99 24       	eor	r9, r9
  ae:	93 94       	inc	r9
  b0:	8e 01       	movw	r16, r28
  b2:	0f 5f       	subi	r16, 0xFF	; 255
  b4:	1f 4f       	sbci	r17, 0xFF	; 255
	int8_t len = 0;

	if (i < 0) { // look for the sign
		sign = -1;
  b6:	b1 2c       	mov	r11, r1
		i = -i;
	}

	// fill buffer with digits (in reverse order)
	do {
		buf[len++] = 48 + i % 10;	// ASCII digits start at 48
  b8:	0f 2e       	mov	r0, r31
  ba:	fa e0       	ldi	r31, 0x0A	; 10
  bc:	cf 2e       	mov	r12, r31
  be:	d1 2c       	mov	r13, r1
  c0:	e1 2c       	mov	r14, r1
  c2:	f1 2c       	mov	r15, r1
  c4:	f0 2d       	mov	r31, r0
  c6:	aa 24       	eor	r10, r10
  c8:	a3 94       	inc	r10
  ca:	ab 0c       	add	r10, r11
  cc:	a7 01       	movw	r20, r14
  ce:	96 01       	movw	r18, r12
  d0:	23 d2       	rcall	.+1094   	; 0x518 <__divmodsi4>
  d2:	60 5d       	subi	r22, 0xD0	; 208
  d4:	f8 01       	movw	r30, r16
  d6:	61 93       	st	Z+, r22
  d8:	8f 01       	movw	r16, r30
	} while ((i /= 10) > 0 && len < PRINT_INT_BUFSIZE);
  da:	62 2f       	mov	r22, r18
  dc:	73 2f       	mov	r23, r19
  de:	84 2f       	mov	r24, r20
  e0:	95 2f       	mov	r25, r21
  e2:	16 16       	cp	r1, r22
  e4:	17 06       	cpc	r1, r23
  e6:	18 06       	cpc	r1, r24
  e8:	19 06       	cpc	r1, r25
  ea:	2c f4       	brge	.+10     	; 0xf6 <printInt+0x88>
  ec:	f0 e1       	ldi	r31, 0x10	; 16
  ee:	af 16       	cp	r10, r31
  f0:	21 f0       	breq	.+8      	; 0xfa <printInt+0x8c>
		i = -i;
	}

	// fill buffer with digits (in reverse order)
	do {
		buf[len++] = 48 + i % 10;	// ASCII digits start at 48
  f2:	ba 2c       	mov	r11, r10
  f4:	e8 cf       	rjmp	.-48     	; 0xc6 <printInt+0x58>
  f6:	8a 2d       	mov	r24, r10
  f8:	01 c0       	rjmp	.+2      	; 0xfc <printInt+0x8e>
  fa:	8a 2d       	mov	r24, r10
	} while ((i /= 10) > 0 && len < PRINT_INT_BUFSIZE);

	if (sign < 0) {	// don't forget to add the sign
  fc:	99 20       	and	r9, r9
  fe:	44 f4       	brge	.+16     	; 0x110 <printInt+0xa2>
		buf[len] = '-';
 100:	fe 01       	movw	r30, r28
 102:	e8 0f       	add	r30, r24
 104:	f1 1d       	adc	r31, r1
 106:	87 fd       	sbrc	r24, 7
 108:	fa 95       	dec	r31
 10a:	8d e2       	ldi	r24, 0x2D	; 45
 10c:	81 83       	std	Z+1, r24	; 0x01
 10e:	ba 2c       	mov	r11, r10
		len--;
	}

	// reverse output of the buffer
	do {
		uart_putc(buf[len--]);
 110:	1f ef       	ldi	r17, 0xFF	; 255
 112:	1b 0d       	add	r17, r11
 114:	e1 e0       	ldi	r30, 0x01	; 1
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	ec 0f       	add	r30, r28
 11a:	fd 1f       	adc	r31, r29
 11c:	eb 0d       	add	r30, r11
 11e:	f1 1d       	adc	r31, r1
 120:	b7 fc       	sbrc	r11, 7
 122:	fa 95       	dec	r31
 124:	80 81       	ld	r24, Z
 126:	d5 d1       	rcall	.+938    	; 0x4d2 <uart0_putc>
	} while (len >= 0);
 128:	11 23       	and	r17, r17
 12a:	14 f0       	brlt	.+4      	; 0x130 <printInt+0xc2>
		len--;
	}

	// reverse output of the buffer
	do {
		uart_putc(buf[len--]);
 12c:	b1 2e       	mov	r11, r17
 12e:	f0 cf       	rjmp	.-32     	; 0x110 <printInt+0xa2>
	} while (len >= 0);
}
 130:	60 96       	adiw	r28, 0x10	; 16
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	f8 94       	cli
 136:	de bf       	out	0x3e, r29	; 62
 138:	0f be       	out	0x3f, r0	; 63
 13a:	cd bf       	out	0x3d, r28	; 61
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	1f 91       	pop	r17
 142:	0f 91       	pop	r16
 144:	ff 90       	pop	r15
 146:	ef 90       	pop	r14
 148:	df 90       	pop	r13
 14a:	cf 90       	pop	r12
 14c:	bf 90       	pop	r11
 14e:	af 90       	pop	r10
 150:	9f 90       	pop	r9
 152:	08 95       	ret

00000154 <timer0_init>:
	timer0Overflows++;	
}

void timer0_init(void) // Initialize timer 0
{
	TIMSK |= (1<<TOIE0);
 154:	89 b7       	in	r24, 0x39	; 57
 156:	81 60       	ori	r24, 0x01	; 1
 158:	89 bf       	out	0x39, r24	; 57
	TCCR0 |= (1<<CS02)|(0<<CS01)|(1<<CS00); //
 15a:	83 b7       	in	r24, 0x33	; 51
 15c:	85 60       	ori	r24, 0x05	; 5
 15e:	83 bf       	out	0x33, r24	; 51

	timer0Overflows = 0; // Start timer overflows at 0
 160:	10 92 a4 00 	sts	0x00A4, r1
 164:	10 92 a3 00 	sts	0x00A3, r1
 168:	08 95       	ret

0000016a <update_Display>:
}

void update_Display(void) // 
{
	commandDisplay(Clear_Screen);
 16a:	88 e5       	ldi	r24, 0x58	; 88
 16c:	78 df       	rcall	.-272    	; 0x5e <commandDisplay>
	if(switch_state == 0 ) //
 16e:	80 91 62 00 	lds	r24, 0x0062
 172:	81 11       	cpse	r24, r1
 174:	0f c0       	rjmp	.+30     	; 0x194 <update_Display+0x2a>
	{
		commandDisplay(Go_Home);
 176:	88 e4       	ldi	r24, 0x48	; 72
 178:	72 df       	rcall	.-284    	; 0x5e <commandDisplay>
		uart_puts("State=0");
 17a:	83 e6       	ldi	r24, 0x63	; 99
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	be d1       	rcall	.+892    	; 0x4fc <uart0_puts>
		PRINT_NL;
 180:	8a e0       	ldi	r24, 0x0A	; 10
 182:	a7 d1       	rcall	.+846    	; 0x4d2 <uart0_putc>
		printInt(i);
 184:	60 91 61 00 	lds	r22, 0x0061
 188:	77 27       	eor	r23, r23
 18a:	67 fd       	sbrc	r22, 7
 18c:	70 95       	com	r23
 18e:	87 2f       	mov	r24, r23
 190:	97 2f       	mov	r25, r23
 192:	6d df       	rcall	.-294    	; 0x6e <printInt>
	}
	if(switch_state == 1)	//Red
 194:	80 91 62 00 	lds	r24, 0x0062
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	81 f4       	brne	.+32     	; 0x1bc <update_Display+0x52>
	{
		commandDisplay(Go_Home);
 19c:	88 e4       	ldi	r24, 0x48	; 72
 19e:	5f df       	rcall	.-322    	; 0x5e <commandDisplay>
		uart_puts("State=1");
 1a0:	8b e6       	ldi	r24, 0x6B	; 107
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	ab d1       	rcall	.+854    	; 0x4fc <uart0_puts>
		PRINT_NL;
 1a6:	8a e0       	ldi	r24, 0x0A	; 10
 1a8:	94 d1       	rcall	.+808    	; 0x4d2 <uart0_putc>
		printInt(i);
 1aa:	60 91 61 00 	lds	r22, 0x0061
 1ae:	77 27       	eor	r23, r23
 1b0:	67 fd       	sbrc	r22, 7
 1b2:	70 95       	com	r23
 1b4:	87 2f       	mov	r24, r23
 1b6:	97 2f       	mov	r25, r23
 1b8:	5a df       	rcall	.-332    	; 0x6e <printInt>
 1ba:	08 95       	ret
	}
	else if(switch_state == 2)	//Orange
 1bc:	80 91 62 00 	lds	r24, 0x0062
 1c0:	82 30       	cpi	r24, 0x02	; 2
 1c2:	81 f4       	brne	.+32     	; 0x1e4 <update_Display+0x7a>
	{
		commandDisplay(Go_Home);
 1c4:	88 e4       	ldi	r24, 0x48	; 72
 1c6:	4b df       	rcall	.-362    	; 0x5e <commandDisplay>
		uart_puts("State=2");
 1c8:	83 e7       	ldi	r24, 0x73	; 115
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	97 d1       	rcall	.+814    	; 0x4fc <uart0_puts>
		PRINT_NL;
 1ce:	8a e0       	ldi	r24, 0x0A	; 10
 1d0:	80 d1       	rcall	.+768    	; 0x4d2 <uart0_putc>
		printInt(i);
 1d2:	60 91 61 00 	lds	r22, 0x0061
 1d6:	77 27       	eor	r23, r23
 1d8:	67 fd       	sbrc	r22, 7
 1da:	70 95       	com	r23
 1dc:	87 2f       	mov	r24, r23
 1de:	97 2f       	mov	r25, r23
 1e0:	46 df       	rcall	.-372    	; 0x6e <printInt>
 1e2:	08 95       	ret
	}
	else if(switch_state == 3)	//Yellow
 1e4:	80 91 62 00 	lds	r24, 0x0062
 1e8:	83 30       	cpi	r24, 0x03	; 3
 1ea:	81 f4       	brne	.+32     	; 0x20c <update_Display+0xa2>
	{
		commandDisplay(Go_Home);
 1ec:	88 e4       	ldi	r24, 0x48	; 72
 1ee:	37 df       	rcall	.-402    	; 0x5e <commandDisplay>
		uart_puts("State=3");
 1f0:	8b e7       	ldi	r24, 0x7B	; 123
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	83 d1       	rcall	.+774    	; 0x4fc <uart0_puts>
		PRINT_NL;
 1f6:	8a e0       	ldi	r24, 0x0A	; 10
 1f8:	6c d1       	rcall	.+728    	; 0x4d2 <uart0_putc>
		printInt(i);
 1fa:	60 91 61 00 	lds	r22, 0x0061
 1fe:	77 27       	eor	r23, r23
 200:	67 fd       	sbrc	r22, 7
 202:	70 95       	com	r23
 204:	87 2f       	mov	r24, r23
 206:	97 2f       	mov	r25, r23
 208:	32 df       	rcall	.-412    	; 0x6e <printInt>
 20a:	08 95       	ret
	}
	
	else if(switch_state == 4)	//Green
 20c:	80 91 62 00 	lds	r24, 0x0062
 210:	84 30       	cpi	r24, 0x04	; 4
 212:	81 f4       	brne	.+32     	; 0x234 <update_Display+0xca>
	{
		commandDisplay(Go_Home);
 214:	88 e4       	ldi	r24, 0x48	; 72
 216:	23 df       	rcall	.-442    	; 0x5e <commandDisplay>
		uart_puts("State=4");
 218:	83 e8       	ldi	r24, 0x83	; 131
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	6f d1       	rcall	.+734    	; 0x4fc <uart0_puts>
		PRINT_NL;
 21e:	8a e0       	ldi	r24, 0x0A	; 10
 220:	58 d1       	rcall	.+688    	; 0x4d2 <uart0_putc>
		printInt(i);
 222:	60 91 61 00 	lds	r22, 0x0061
 226:	77 27       	eor	r23, r23
 228:	67 fd       	sbrc	r22, 7
 22a:	70 95       	com	r23
 22c:	87 2f       	mov	r24, r23
 22e:	97 2f       	mov	r25, r23
 230:	1e df       	rcall	.-452    	; 0x6e <printInt>
 232:	08 95       	ret
	}
	else if(switch_state == 5)	//Blue
 234:	80 91 62 00 	lds	r24, 0x0062
 238:	85 30       	cpi	r24, 0x05	; 5
 23a:	81 f4       	brne	.+32     	; 0x25c <update_Display+0xf2>
	{
		commandDisplay(Go_Home);
 23c:	88 e4       	ldi	r24, 0x48	; 72
 23e:	0f df       	rcall	.-482    	; 0x5e <commandDisplay>
		uart_puts("State=5");
 240:	8b e8       	ldi	r24, 0x8B	; 139
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	5b d1       	rcall	.+694    	; 0x4fc <uart0_puts>
		PRINT_NL;
 246:	8a e0       	ldi	r24, 0x0A	; 10
 248:	44 d1       	rcall	.+648    	; 0x4d2 <uart0_putc>
		printInt(i);
 24a:	60 91 61 00 	lds	r22, 0x0061
 24e:	77 27       	eor	r23, r23
 250:	67 fd       	sbrc	r22, 7
 252:	70 95       	com	r23
 254:	87 2f       	mov	r24, r23
 256:	97 2f       	mov	r25, r23
 258:	0a df       	rcall	.-492    	; 0x6e <printInt>
 25a:	08 95       	ret
	}
	else if(switch_state == 6)	//Blue
 25c:	80 91 62 00 	lds	r24, 0x0062
 260:	86 30       	cpi	r24, 0x06	; 6
 262:	81 f4       	brne	.+32     	; 0x284 <update_Display+0x11a>
	{
		commandDisplay(Go_Home);
 264:	88 e4       	ldi	r24, 0x48	; 72
 266:	fb de       	rcall	.-522    	; 0x5e <commandDisplay>
		uart_puts("State=6");
 268:	83 e9       	ldi	r24, 0x93	; 147
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	47 d1       	rcall	.+654    	; 0x4fc <uart0_puts>
		PRINT_NL;
 26e:	8a e0       	ldi	r24, 0x0A	; 10
 270:	30 d1       	rcall	.+608    	; 0x4d2 <uart0_putc>
		printInt(i);
 272:	60 91 61 00 	lds	r22, 0x0061
 276:	77 27       	eor	r23, r23
 278:	67 fd       	sbrc	r22, 7
 27a:	70 95       	com	r23
 27c:	87 2f       	mov	r24, r23
 27e:	97 2f       	mov	r25, r23
 280:	f6 de       	rcall	.-532    	; 0x6e <printInt>
 282:	08 95       	ret
	}
	else if(switch_state > 6)	//Blue
 284:	80 91 62 00 	lds	r24, 0x0062
 288:	87 30       	cpi	r24, 0x07	; 7
 28a:	b0 f0       	brcs	.+44     	; 0x2b8 <update_Display+0x14e>
	{
		commandDisplay(Go_Home);
 28c:	88 e4       	ldi	r24, 0x48	; 72
 28e:	e7 de       	rcall	.-562    	; 0x5e <commandDisplay>
		uart_puts("State=");
 290:	8b e9       	ldi	r24, 0x9B	; 155
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	33 d1       	rcall	.+614    	; 0x4fc <uart0_puts>
		printInt(switch_state);
 296:	60 91 62 00 	lds	r22, 0x0062
 29a:	70 e0       	ldi	r23, 0x00	; 0
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	e6 de       	rcall	.-564    	; 0x6e <printInt>
		PRINT_NL;
 2a2:	8a e0       	ldi	r24, 0x0A	; 10
 2a4:	16 d1       	rcall	.+556    	; 0x4d2 <uart0_putc>
		printInt(i);
 2a6:	60 91 61 00 	lds	r22, 0x0061
 2aa:	77 27       	eor	r23, r23
 2ac:	67 fd       	sbrc	r22, 7
 2ae:	70 95       	com	r23
 2b0:	87 2f       	mov	r24, r23
 2b2:	97 2f       	mov	r25, r23
 2b4:	dc de       	rcall	.-584    	; 0x6e <printInt>
 2b6:	08 95       	ret
	}
	else if(switch_state == 0)	//Light detected OFF
 2b8:	80 91 62 00 	lds	r24, 0x0062
 2bc:	81 11       	cpse	r24, r1
 2be:	10 c0       	rjmp	.+32     	; 0x2e0 <update_Display+0x176>
	{
		commandDisplay(Go_Home);
 2c0:	88 e4       	ldi	r24, 0x48	; 72
 2c2:	cd de       	rcall	.-614    	; 0x5e <commandDisplay>
		uart_puts("State=0");
 2c4:	83 e6       	ldi	r24, 0x63	; 99
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	19 d1       	rcall	.+562    	; 0x4fc <uart0_puts>
		PRINT_NL;
 2ca:	8a e0       	ldi	r24, 0x0A	; 10
 2cc:	02 d1       	rcall	.+516    	; 0x4d2 <uart0_putc>
		printInt(i);
 2ce:	60 91 61 00 	lds	r22, 0x0061
 2d2:	77 27       	eor	r23, r23
 2d4:	67 fd       	sbrc	r22, 7
 2d6:	70 95       	com	r23
 2d8:	87 2f       	mov	r24, r23
 2da:	97 2f       	mov	r25, r23
 2dc:	c8 de       	rcall	.-624    	; 0x6e <printInt>
 2de:	08 95       	ret
	}
	else
	{
		
		switch_state = 0; // set switch state to 0 if the state is above 9
 2e0:	10 92 62 00 	sts	0x0062, r1
 2e4:	08 95       	ret

000002e6 <__vector_9>:
/* 9600 baud */
#define UART_BAUD_RATE      19200      


ISR(TIMER0_OVF_vect) // timer 0 overflow interrupt
{
 2e6:	1f 92       	push	r1
 2e8:	0f 92       	push	r0
 2ea:	0f b6       	in	r0, 0x3f	; 63
 2ec:	0f 92       	push	r0
 2ee:	11 24       	eor	r1, r1
 2f0:	2f 93       	push	r18
 2f2:	3f 93       	push	r19
 2f4:	4f 93       	push	r20
 2f6:	5f 93       	push	r21
 2f8:	6f 93       	push	r22
 2fa:	7f 93       	push	r23
 2fc:	8f 93       	push	r24
 2fe:	9f 93       	push	r25
 300:	af 93       	push	r26
 302:	bf 93       	push	r27
 304:	ef 93       	push	r30
 306:	ff 93       	push	r31
	TCNT0 += 6;
 308:	82 b7       	in	r24, 0x32	; 50
 30a:	8a 5f       	subi	r24, 0xFA	; 250
 30c:	82 bf       	out	0x32, r24	; 50
	if((timer0Overflows % 8) == 0) // push button polling 195 1 sec /975 5 sec/ 11700 1 min/
 30e:	80 91 a3 00 	lds	r24, 0x00A3
 312:	90 91 a4 00 	lds	r25, 0x00A4
 316:	87 70       	andi	r24, 0x07	; 7
 318:	99 27       	eor	r25, r25
 31a:	89 2b       	or	r24, r25
 31c:	29 f4       	brne	.+10     	; 0x328 <__vector_9+0x42>
	{
		if(is_clear(PINB, Switch1)) // if the push button is held down connecting pin B2 to ground
 31e:	b0 99       	sbic	0x16, 0	; 22
 320:	03 c0       	rjmp	.+6      	; 0x328 <__vector_9+0x42>
		{
			BTN_Down = 1; // button down is true
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	80 93 a2 00 	sts	0x00A2, r24
		}
	}
	if((timer0Overflows % 16) == 0) // push button polling on the release
 328:	80 91 a3 00 	lds	r24, 0x00A3
 32c:	90 91 a4 00 	lds	r25, 0x00A4
 330:	8f 70       	andi	r24, 0x0F	; 15
 332:	99 27       	eor	r25, r25
 334:	89 2b       	or	r24, r25
 336:	69 f4       	brne	.+26     	; 0x352 <__vector_9+0x6c>
	{

		if(is_set(PINB, Switch1) && BTN_Down == 1) // 
 338:	b0 9b       	sbis	0x16, 0	; 22
 33a:	0b c0       	rjmp	.+22     	; 0x352 <__vector_9+0x6c>
 33c:	80 91 a2 00 	lds	r24, 0x00A2
 340:	81 30       	cpi	r24, 0x01	; 1
 342:	39 f4       	brne	.+14     	; 0x352 <__vector_9+0x6c>
		{
			switch_state++; // increment mode states by 1 i.e. red -> yellow, green - > blue
 344:	80 91 62 00 	lds	r24, 0x0062
 348:	8f 5f       	subi	r24, 0xFF	; 255
 34a:	80 93 62 00 	sts	0x0062, r24
			BTN_Down = 0; // push button is released so the button is no longer held down
 34e:	10 92 a2 00 	sts	0x00A2, r1
		}
	}
	if((timer0Overflows % 16) == 0) // push button polling on the release
 352:	80 91 a3 00 	lds	r24, 0x00A3
 356:	90 91 a4 00 	lds	r25, 0x00A4
 35a:	8f 70       	andi	r24, 0x0F	; 15
 35c:	99 27       	eor	r25, r25
 35e:	89 2b       	or	r24, r25
 360:	09 f4       	brne	.+2      	; 0x364 <__vector_9+0x7e>
	{
		update_Display();
 362:	03 df       	rcall	.-506    	; 0x16a <update_Display>
	}
	if((timer0Overflows % 32) == 0) // push button polling on the release
 364:	80 91 a3 00 	lds	r24, 0x00A3
 368:	90 91 a4 00 	lds	r25, 0x00A4
 36c:	8f 71       	andi	r24, 0x1F	; 31
 36e:	99 27       	eor	r25, r25
 370:	89 2b       	or	r24, r25
 372:	e1 f4       	brne	.+56     	; 0x3ac <__vector_9+0xc6>
	{
		if (i == 127) d = -1;   // count down
 374:	80 91 61 00 	lds	r24, 0x0061
 378:	8f 37       	cpi	r24, 0x7F	; 127
 37a:	19 f4       	brne	.+6      	; 0x382 <__vector_9+0x9c>
 37c:	8f ef       	ldi	r24, 0xFF	; 255
 37e:	80 93 60 00 	sts	0x0060, r24
		if (i == -128) d = 1;   // count up
 382:	80 91 61 00 	lds	r24, 0x0061
 386:	80 38       	cpi	r24, 0x80	; 128
 388:	19 f4       	brne	.+6      	; 0x390 <__vector_9+0xaa>
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	80 93 60 00 	sts	0x0060, r24
		i += d;
 390:	80 91 61 00 	lds	r24, 0x0061
 394:	90 91 60 00 	lds	r25, 0x0060
 398:	89 0f       	add	r24, r25
 39a:	80 93 61 00 	sts	0x0061, r24
		
		if(is_clear(PINB, Switch2))
 39e:	b1 99       	sbic	0x16, 1	; 22
 3a0:	05 c0       	rjmp	.+10     	; 0x3ac <__vector_9+0xc6>
		{
			switch_state--;
 3a2:	80 91 62 00 	lds	r24, 0x0062
 3a6:	81 50       	subi	r24, 0x01	; 1
 3a8:	80 93 62 00 	sts	0x0062, r24
		}
		
	}
	
	timer0Overflows++;	
 3ac:	80 91 a3 00 	lds	r24, 0x00A3
 3b0:	90 91 a4 00 	lds	r25, 0x00A4
 3b4:	01 96       	adiw	r24, 0x01	; 1
 3b6:	90 93 a4 00 	sts	0x00A4, r25
 3ba:	80 93 a3 00 	sts	0x00A3, r24
}
 3be:	ff 91       	pop	r31
 3c0:	ef 91       	pop	r30
 3c2:	bf 91       	pop	r27
 3c4:	af 91       	pop	r26
 3c6:	9f 91       	pop	r25
 3c8:	8f 91       	pop	r24
 3ca:	7f 91       	pop	r23
 3cc:	6f 91       	pop	r22
 3ce:	5f 91       	pop	r21
 3d0:	4f 91       	pop	r20
 3d2:	3f 91       	pop	r19
 3d4:	2f 91       	pop	r18
 3d6:	0f 90       	pop	r0
 3d8:	0f be       	out	0x3f, r0	; 63
 3da:	0f 90       	pop	r0
 3dc:	1f 90       	pop	r1
 3de:	18 95       	reti

000003e0 <main>:
   // uart_puts("String stored in SRAM\n");
    //uart_puts_P("String stored in FLASH\n");
   // itoa( num, buffer, 10);   // convert interger into string (decimal format)         
    //uart_puts(buffer);        // and transmit string to UART
	
	 uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) );
 3e0:	89 e1       	ldi	r24, 0x19	; 25
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	62 d0       	rcall	.+196    	; 0x4aa <uart0_init>
	 
	 timer0_init();
 3e6:	b6 de       	rcall	.-660    	; 0x154 <timer0_init>

	 sei();
 3e8:	78 94       	sei


	
    commandDisplay(Clear_Screen);
 3ea:	88 e5       	ldi	r24, 0x58	; 88
 3ec:	38 de       	rcall	.-912    	; 0x5e <commandDisplay>
  
	
	set_input(DDRB, Switch1);
 3ee:	b8 98       	cbi	0x17, 0	; 23
	set_input(DDRB, Switch2);
 3f0:	b9 98       	cbi	0x17, 1	; 23
	set_input(DDRB, Switch3);
 3f2:	ba 98       	cbi	0x17, 2	; 23
 3f4:	ff cf       	rjmp	.-2      	; 0x3f4 <main+0x14>

000003f6 <__vector_11>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
 3f6:	1f 92       	push	r1
 3f8:	0f 92       	push	r0
 3fa:	0f b6       	in	r0, 0x3f	; 63
 3fc:	0f 92       	push	r0
 3fe:	11 24       	eor	r1, r1
 400:	2f 93       	push	r18
 402:	3f 93       	push	r19
 404:	4f 93       	push	r20
 406:	5f 93       	push	r21
 408:	8f 93       	push	r24
 40a:	9f 93       	push	r25
 40c:	ef 93       	push	r30
 40e:	ff 93       	push	r31
    uint8_t data;
    uint8_t usr;
    uint8_t lastRxError;
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
 410:	4b b1       	in	r20, 0x0b	; 11
    data = UART0_DATA;
 412:	5c b1       	in	r21, 0x0c	; 12
    
    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
 414:	48 71       	andi	r20, 0x18	; 24
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX0_BUFFER_MASK;
 416:	80 91 a7 00 	lds	r24, 0x00A7
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	01 96       	adiw	r24, 0x01	; 1
 41e:	8f 77       	andi	r24, 0x7F	; 127
 420:	99 27       	eor	r25, r25
    
    if ( tmphead == UART_RxTail ) {
 422:	20 91 a6 00 	lds	r18, 0x00A6
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	28 17       	cp	r18, r24
 42a:	39 07       	cpc	r19, r25
 42c:	39 f0       	breq	.+14     	; 0x43c <__vector_11+0x46>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    } else {
        /* store new index */
        UART_RxHead = tmphead;
 42e:	80 93 a7 00 	sts	0x00A7, r24
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 432:	fc 01       	movw	r30, r24
 434:	e6 55       	subi	r30, 0x56	; 86
 436:	ff 4f       	sbci	r31, 0xFF	; 255
 438:	50 83       	st	Z, r21
 43a:	01 c0       	rjmp	.+2      	; 0x43e <__vector_11+0x48>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX0_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 43c:	42 e0       	ldi	r20, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError = lastRxError;   
 43e:	40 93 a5 00 	sts	0x00A5, r20
}
 442:	ff 91       	pop	r31
 444:	ef 91       	pop	r30
 446:	9f 91       	pop	r25
 448:	8f 91       	pop	r24
 44a:	5f 91       	pop	r21
 44c:	4f 91       	pop	r20
 44e:	3f 91       	pop	r19
 450:	2f 91       	pop	r18
 452:	0f 90       	pop	r0
 454:	0f be       	out	0x3f, r0	; 63
 456:	0f 90       	pop	r0
 458:	1f 90       	pop	r1
 45a:	18 95       	reti

0000045c <__vector_12>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 45c:	1f 92       	push	r1
 45e:	0f 92       	push	r0
 460:	0f b6       	in	r0, 0x3f	; 63
 462:	0f 92       	push	r0
 464:	11 24       	eor	r1, r1
 466:	8f 93       	push	r24
 468:	9f 93       	push	r25
 46a:	ef 93       	push	r30
 46c:	ff 93       	push	r31
    uint16_t tmptail;

    if ( UART_TxHead != UART_TxTail) {
 46e:	90 91 a9 00 	lds	r25, 0x00A9
 472:	80 91 a8 00 	lds	r24, 0x00A8
 476:	98 17       	cp	r25, r24
 478:	71 f0       	breq	.+28     	; 0x496 <__stack+0x37>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX0_BUFFER_MASK;
 47a:	80 91 a8 00 	lds	r24, 0x00A8
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	01 96       	adiw	r24, 0x01	; 1
 482:	8f 77       	andi	r24, 0x7F	; 127
 484:	99 27       	eor	r25, r25
        UART_TxTail = tmptail;
 486:	80 93 a8 00 	sts	0x00A8, r24
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 48a:	fc 01       	movw	r30, r24
 48c:	e6 5d       	subi	r30, 0xD6	; 214
 48e:	fe 4f       	sbci	r31, 0xFE	; 254
 490:	80 81       	ld	r24, Z
 492:	8c b9       	out	0x0c, r24	; 12
 494:	01 c0       	rjmp	.+2      	; 0x498 <__stack+0x39>
    } else {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 496:	55 98       	cbi	0x0a, 5	; 10
    }
}
 498:	ff 91       	pop	r31
 49a:	ef 91       	pop	r30
 49c:	9f 91       	pop	r25
 49e:	8f 91       	pop	r24
 4a0:	0f 90       	pop	r0
 4a2:	0f be       	out	0x3f, r0	; 63
 4a4:	0f 90       	pop	r0
 4a6:	1f 90       	pop	r1
 4a8:	18 95       	reti

000004aa <uart0_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart0_init(uint16_t baudrate)
{
	UART_TxHead = 0;
 4aa:	10 92 a9 00 	sts	0x00A9, r1
	UART_TxTail = 0;
 4ae:	10 92 a8 00 	sts	0x00A8, r1
	UART_RxHead = 0;
 4b2:	10 92 a7 00 	sts	0x00A7, r1
	UART_RxTail = 0;
 4b6:	10 92 a6 00 	sts	0x00A6, r1
	/* enable UART receiver and transmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
	/* Set baud rate */
	if ( baudrate & 0x8000 ) {
 4ba:	99 23       	and	r25, r25
 4bc:	1c f4       	brge	.+6      	; 0x4c4 <uart0_init+0x1a>
		UART0_STATUS = (1<<U2X);  //Enable 2x speed
 4be:	22 e0       	ldi	r18, 0x02	; 2
 4c0:	2b b9       	out	0x0b, r18	; 11
		baudrate &= ~0x8000;
 4c2:	9f 77       	andi	r25, 0x7F	; 127
	}
	UBRRH = (uint8_t)(baudrate>>8);
 4c4:	90 bd       	out	0x20, r25	; 32
	UBRRL = (uint8_t) baudrate;
 4c6:	89 b9       	out	0x09, r24	; 9

	/* Enable USART receiver and transmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
 4c8:	88 e9       	ldi	r24, 0x98	; 152
 4ca:	8a b9       	out	0x0a, r24	; 10

	/* Set frame format: asynchronous, 8data, no parity, 1stop bit */
#ifdef URSEL
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
 4cc:	86 e8       	ldi	r24, 0x86	; 134
 4ce:	80 bd       	out	0x20, r24	; 32
 4d0:	08 95       	ret

000004d2 <uart0_putc>:
**************************************************************************/
void uart0_putc(uint8_t data)
{
	uint16_t tmphead;

	tmphead  = (UART_TxHead + 1) & UART_TX0_BUFFER_MASK;
 4d2:	40 91 a9 00 	lds	r20, 0x00A9
 4d6:	50 e0       	ldi	r21, 0x00	; 0
 4d8:	4f 5f       	subi	r20, 0xFF	; 255
 4da:	5f 4f       	sbci	r21, 0xFF	; 255
 4dc:	4f 77       	andi	r20, 0x7F	; 127
 4de:	55 27       	eor	r21, r21

	while ( tmphead == UART_TxTail ) {
 4e0:	20 91 a8 00 	lds	r18, 0x00A8
 4e4:	30 e0       	ldi	r19, 0x00	; 0
 4e6:	24 17       	cp	r18, r20
 4e8:	35 07       	cpc	r19, r21
 4ea:	d1 f3       	breq	.-12     	; 0x4e0 <uart0_putc+0xe>
		;/* wait for free space in buffer */
	}

	UART_TxBuf[tmphead] = data;
 4ec:	fa 01       	movw	r30, r20
 4ee:	e6 5d       	subi	r30, 0xD6	; 214
 4f0:	fe 4f       	sbci	r31, 0xFE	; 254
 4f2:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
 4f4:	40 93 a9 00 	sts	0x00A9, r20

	/* enable UDRE interrupt */
	UART0_CONTROL    |= _BV(UART0_UDRIE);
 4f8:	55 9a       	sbi	0x0a, 5	; 10
 4fa:	08 95       	ret

000004fc <uart0_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
{
 4fc:	cf 93       	push	r28
 4fe:	df 93       	push	r29
 500:	ec 01       	movw	r28, r24
	while (*s) {
 502:	88 81       	ld	r24, Y
 504:	88 23       	and	r24, r24
 506:	29 f0       	breq	.+10     	; 0x512 <uart0_puts+0x16>
 508:	21 96       	adiw	r28, 0x01	; 1
		uart0_putc(*s++);
 50a:	e3 df       	rcall	.-58     	; 0x4d2 <uart0_putc>
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
{
	while (*s) {
 50c:	89 91       	ld	r24, Y+
 50e:	81 11       	cpse	r24, r1
 510:	fc cf       	rjmp	.-8      	; 0x50a <uart0_puts+0xe>
		uart0_putc(*s++);
	}

} /* uart0_puts */
 512:	df 91       	pop	r29
 514:	cf 91       	pop	r28
 516:	08 95       	ret

00000518 <__divmodsi4>:
 518:	05 2e       	mov	r0, r21
 51a:	97 fb       	bst	r25, 7
 51c:	16 f4       	brtc	.+4      	; 0x522 <__divmodsi4+0xa>
 51e:	00 94       	com	r0
 520:	0f d0       	rcall	.+30     	; 0x540 <__negsi2>
 522:	57 fd       	sbrc	r21, 7
 524:	05 d0       	rcall	.+10     	; 0x530 <__divmodsi4_neg2>
 526:	14 d0       	rcall	.+40     	; 0x550 <__udivmodsi4>
 528:	07 fc       	sbrc	r0, 7
 52a:	02 d0       	rcall	.+4      	; 0x530 <__divmodsi4_neg2>
 52c:	46 f4       	brtc	.+16     	; 0x53e <__divmodsi4_exit>
 52e:	08 c0       	rjmp	.+16     	; 0x540 <__negsi2>

00000530 <__divmodsi4_neg2>:
 530:	50 95       	com	r21
 532:	40 95       	com	r20
 534:	30 95       	com	r19
 536:	21 95       	neg	r18
 538:	3f 4f       	sbci	r19, 0xFF	; 255
 53a:	4f 4f       	sbci	r20, 0xFF	; 255
 53c:	5f 4f       	sbci	r21, 0xFF	; 255

0000053e <__divmodsi4_exit>:
 53e:	08 95       	ret

00000540 <__negsi2>:
 540:	90 95       	com	r25
 542:	80 95       	com	r24
 544:	70 95       	com	r23
 546:	61 95       	neg	r22
 548:	7f 4f       	sbci	r23, 0xFF	; 255
 54a:	8f 4f       	sbci	r24, 0xFF	; 255
 54c:	9f 4f       	sbci	r25, 0xFF	; 255
 54e:	08 95       	ret

00000550 <__udivmodsi4>:
 550:	a1 e2       	ldi	r26, 0x21	; 33
 552:	1a 2e       	mov	r1, r26
 554:	aa 1b       	sub	r26, r26
 556:	bb 1b       	sub	r27, r27
 558:	fd 01       	movw	r30, r26
 55a:	0d c0       	rjmp	.+26     	; 0x576 <__udivmodsi4_ep>

0000055c <__udivmodsi4_loop>:
 55c:	aa 1f       	adc	r26, r26
 55e:	bb 1f       	adc	r27, r27
 560:	ee 1f       	adc	r30, r30
 562:	ff 1f       	adc	r31, r31
 564:	a2 17       	cp	r26, r18
 566:	b3 07       	cpc	r27, r19
 568:	e4 07       	cpc	r30, r20
 56a:	f5 07       	cpc	r31, r21
 56c:	20 f0       	brcs	.+8      	; 0x576 <__udivmodsi4_ep>
 56e:	a2 1b       	sub	r26, r18
 570:	b3 0b       	sbc	r27, r19
 572:	e4 0b       	sbc	r30, r20
 574:	f5 0b       	sbc	r31, r21

00000576 <__udivmodsi4_ep>:
 576:	66 1f       	adc	r22, r22
 578:	77 1f       	adc	r23, r23
 57a:	88 1f       	adc	r24, r24
 57c:	99 1f       	adc	r25, r25
 57e:	1a 94       	dec	r1
 580:	69 f7       	brne	.-38     	; 0x55c <__udivmodsi4_loop>
 582:	60 95       	com	r22
 584:	70 95       	com	r23
 586:	80 95       	com	r24
 588:	90 95       	com	r25
 58a:	9b 01       	movw	r18, r22
 58c:	ac 01       	movw	r20, r24
 58e:	bd 01       	movw	r22, r26
 590:	cf 01       	movw	r24, r30
 592:	08 95       	ret

00000594 <_exit>:
 594:	f8 94       	cli

00000596 <__stop_program>:
 596:	ff cf       	rjmp	.-2      	; 0x596 <__stop_program>
