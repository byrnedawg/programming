
RetrolitTxV2.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000003d4  00000468  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800062  00800062  0000046a  2**0
                  ALLOC
  3 .debug_aranges 00000110  00000000  00000000  0000046a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000021f  00000000  00000000  0000057a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000600  00000000  00000000  00000799  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002bf  00000000  00000000  00000d99  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000739  00000000  00000000  00001058  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a0  00000000  00000000  00001794  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000027d  00000000  00000000  00001934  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000119  00000000  00000000  00001bb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  00001cca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	ADMUX = (ADMUX & ~0xC7) | ref;
	ADMUX |= ch; //clear mux then or with new channel value
	ADCSRA |= (1<<ADSC);
	_delay_ms(10);
	return ( (unsigned int ) ( ADCL + (ADCH<<8) ) );
}
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
	GIMSK |= (0<<INT0)|(1<<PCIE);
	PCMSK |= (0<<PCINT5)|(0<<PCINT4)|(0<<PCINT3)|(0<<PCINT2)|(0<<PCINT1)|(1<<PCINT0);
}

void toggleLED(int ledNum)
{
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   //OCR1B = 0x00; // Governs Duty Cycle (192 ~75% of 256)
   //OCR1C = PWM_200Hz;	// OCR1C = Governs PWM Frequency :: (1Mhz/prescaler)/(OCR1C+1)= PWM Frequency :: 1M/128/39+1 = 200Hz	0x27 1M/128/252+1 = 33Hz	0xFC
   TIMSK |= (0<<OCIE1A)|(0<<OCIE1B)|(0<<OCIE0A)|(0<<OCIE0B)|(1<<TOIE1)|(1<<TOIE0);	// Compare A and OVF Interrupt enabled
   TCNT1  = (unsigned char)65536 - (unsigned char)8000;
   //timer1Overflows = 0; // Start timer overflows at 0
}
   4:	d5 c0       	rjmp	.+426    	; 0x1b0 <__vector_2>
   6:	5d c1       	rjmp	.+698    	; 0x2c2 <__vector_3>
   8:	25 c1       	rjmp	.+586    	; 0x254 <__vector_4>
   a:	6f c1       	rjmp	.+734    	; 0x2ea <__vector_5>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	3c c0       	rjmp	.+120    	; 0x88 <__vector_7>
  10:	6f c0       	rjmp	.+222    	; 0xf0 <__vector_8>
  12:	61 c1       	rjmp	.+706    	; 0x2d6 <__vector_9>
  14:	0b c1       	rjmp	.+534    	; 0x22c <__vector_10>
  16:	14 c1       	rjmp	.+552    	; 0x240 <__vector_11>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e4 ed       	ldi	r30, 0xD4	; 212
  32:	f3 e0       	ldi	r31, 0x03	; 3
  34:	02 c0       	rjmp	.+4      	; 0x3a <.do_copy_data_start>

00000036 <.do_copy_data_loop>:
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0

0000003a <.do_copy_data_start>:
  3a:	a2 36       	cpi	r26, 0x62	; 98
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <.do_copy_data_loop>

00000040 <__do_clear_bss>:
  40:	10 e0       	ldi	r17, 0x00	; 0
  42:	a2 e6       	ldi	r26, 0x62	; 98
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	aa 36       	cpi	r26, 0x6A	; 106
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	7e d0       	rcall	.+252    	; 0x14e <main>
  52:	be c1       	rjmp	.+892    	; 0x3d0 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <Analog_Comparator_init>:

void Analog_Comparator_init() // Initialize Analog Comparator
{
	ADCSRA |= (0<<ADEN);
  56:	e6 e2       	ldi	r30, 0x26	; 38
  58:	f0 e0       	ldi	r31, 0x00	; 0
  5a:	80 81       	ld	r24, Z
  5c:	80 83       	st	Z, r24
	ADCSRB |= (0<<BIN)|(1<<ACME)|(0<<IPR)|(0<<ADTS2)|(0<<ADTS1)|(0<<ADTS0); //Analog Comparator Multiplexer Enable
  5e:	e3 e2       	ldi	r30, 0x23	; 35
  60:	f0 e0       	ldi	r31, 0x00	; 0
  62:	80 81       	ld	r24, Z
  64:	80 64       	ori	r24, 0x40	; 64
  66:	80 83       	st	Z, r24
	ADMUX |= (0<<REFS1)|(0<<REFS0)|(0<<ADLAR)|(0<<REFS2)|(0<<MUX3)|(0<<MUX2)|(1<<MUX1)|(1<<MUX0); //ADC Multiplexer Selection Register... (ADC3(PB3) Selected ADC Input)
  68:	e7 e2       	ldi	r30, 0x27	; 39
  6a:	f0 e0       	ldi	r31, 0x00	; 0
  6c:	80 81       	ld	r24, Z
  6e:	83 60       	ori	r24, 0x03	; 3
  70:	80 83       	st	Z, r24
	ACSR |= (0<<ACD)|(1<<ACBG)|(0<<ACO)|(0<<ACI)|(1<<ACIE)|(1<<ACIS1)|(1<<ACIS0); // Analog Comparator Control Register
  72:	e8 e2       	ldi	r30, 0x28	; 40
  74:	f0 e0       	ldi	r31, 0x00	; 0
  76:	80 81       	ld	r24, Z
  78:	8b 64       	ori	r24, 0x4B	; 75
  7a:	80 83       	st	Z, r24
	DIDR0 |= (0<<ADC0D)|(0<<ADC2D)|(1<<ADC3D)|(0<<ADC1D)|(0<<AIN1D)|(0<<AIN0D); // Digital input Disable Register
  7c:	e4 e3       	ldi	r30, 0x34	; 52
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	80 81       	ld	r24, Z
  82:	88 60       	ori	r24, 0x08	; 8
  84:	80 83       	st	Z, r24
}
  86:	08 95       	ret

00000088 <__vector_7>:

ISR(ANA_COMP_vect)
{
  88:	1f 92       	push	r1
  8a:	0f 92       	push	r0
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	0f 92       	push	r0
  90:	11 24       	eor	r1, r1
  92:	2f 93       	push	r18
  94:	3f 93       	push	r19
  96:	4f 93       	push	r20
  98:	5f 93       	push	r21
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
  9e:	ef 93       	push	r30
  a0:	ff 93       	push	r31
	//toggleLED(2);
	Digital_Out2_High();
  a2:	e8 e3       	ldi	r30, 0x38	; 56
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	80 61       	ori	r24, 0x10	; 16
  aa:	80 83       	st	Z, r24
	Digital_Out1_Low();
  ac:	80 81       	ld	r24, Z
  ae:	8b 7f       	andi	r24, 0xFB	; 251
  b0:	80 83       	st	Z, r24
  b2:	20 e2       	ldi	r18, 0x20	; 32
  b4:	3e e4       	ldi	r19, 0x4E	; 78
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b6:	49 e1       	ldi	r20, 0x19	; 25
  b8:	50 e0       	ldi	r21, 0x00	; 0
  ba:	ca 01       	movw	r24, r20
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <__vector_7+0x34>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c4:	d1 f7       	brne	.-12     	; 0xba <__vector_7+0x32>
	_delay_ms(2000);
	Digital_Out2_Low();
  c6:	e8 e3       	ldi	r30, 0x38	; 56
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	8f 7e       	andi	r24, 0xEF	; 239
  ce:	80 83       	st	Z, r24
	Digital_Out1_High();
  d0:	80 81       	ld	r24, Z
  d2:	84 60       	ori	r24, 0x04	; 4
  d4:	80 83       	st	Z, r24
}
  d6:	ff 91       	pop	r31
  d8:	ef 91       	pop	r30
  da:	9f 91       	pop	r25
  dc:	8f 91       	pop	r24
  de:	5f 91       	pop	r21
  e0:	4f 91       	pop	r20
  e2:	3f 91       	pop	r19
  e4:	2f 91       	pop	r18
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <__vector_8>:

ISR(ADC_vect) // Interrupt for ADC Converter
{
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
	
  fa:	0f 90       	pop	r0
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	0f 90       	pop	r0
 100:	1f 90       	pop	r1
 102:	18 95       	reti

00000104 <init>:
//											--GND |______|PB0--	Switch	(MOSI/DI/SDA/AIN0/OC0A/~OC1A/AREF/PCINT0)
//

void init()
{
	initLEDs();
 104:	27 d0       	rcall	.+78     	; 0x154 <initLEDs>
	initDigitalOutput();
 106:	2c d0       	rcall	.+88     	; 0x160 <initDigitalOutput>
	initButtons();
 108:	34 d0       	rcall	.+104    	; 0x172 <initButtons>
	Led1_on();
 10a:	e8 e3       	ldi	r30, 0x38	; 56
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	8d 7f       	andi	r24, 0xFD	; 253
 112:	80 83       	st	Z, r24
	Digital_Out1_Low();
 114:	80 81       	ld	r24, Z
 116:	8b 7f       	andi	r24, 0xFB	; 251
 118:	80 83       	st	Z, r24
	Digital_Out2_Low();
 11a:	80 81       	ld	r24, Z
 11c:	8f 7e       	andi	r24, 0xEF	; 239
 11e:	80 83       	st	Z, r24
 120:	28 e9       	ldi	r18, 0x98	; 152
 122:	3a e3       	ldi	r19, 0x3A	; 58
 124:	49 e1       	ldi	r20, 0x19	; 25
 126:	50 e0       	ldi	r21, 0x00	; 0
 128:	ca 01       	movw	r24, r20
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <init+0x26>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 132:	d1 f7       	brne	.-12     	; 0x128 <init+0x24>
	 _delay_ms(1500);
	Led1_off();
 134:	e8 e3       	ldi	r30, 0x38	; 56
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	82 60       	ori	r24, 0x02	; 2
 13c:	80 83       	st	Z, r24
	Digital_Out1_High();
 13e:	80 81       	ld	r24, Z
 140:	84 60       	ori	r24, 0x04	; 4
 142:	80 83       	st	Z, r24
	Digital_Out2_Low();
 144:	80 81       	ld	r24, Z
 146:	8f 7e       	andi	r24, 0xEF	; 239
 148:	80 83       	st	Z, r24
	Analog_Comparator_init();
 14a:	85 df       	rcall	.-246    	; 0x56 <Analog_Comparator_init>
	//_delay_ms((unsigned char)500);
	//Timer1_Init();
	//adc_init();
	// watchdog enable
	//wdt_enable(WDTO_15MS);
}
 14c:	08 95       	ret

0000014e <main>:
int main()
{
	init();
 14e:	da df       	rcall	.-76     	; 0x104 <init>
	sei();  // enable interrupt
 150:	78 94       	sei
 152:	ff cf       	rjmp	.-2      	; 0x152 <main+0x4>

00000154 <initLEDs>:

#include "portHardware.h"

void initLEDs(void)
{
	set_output(Led1_DIR, Led1_PIN_BIT);
 154:	e7 e3       	ldi	r30, 0x37	; 55
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	82 60       	ori	r24, 0x02	; 2
 15c:	80 83       	st	Z, r24
	//set_output(Led2_DIR, Led2_PIN_BIT);
}
 15e:	08 95       	ret

00000160 <initDigitalOutput>:

void initDigitalOutput(void)
{
	set_output(Digital_Out1_DIR, Digital_Out1_PIN_BIT);
 160:	e7 e3       	ldi	r30, 0x37	; 55
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	84 60       	ori	r24, 0x04	; 4
 168:	80 83       	st	Z, r24
	set_output(Digital_Out2_DIR, Digital_Out2_PIN_BIT);
 16a:	80 81       	ld	r24, Z
 16c:	80 61       	ori	r24, 0x10	; 16
 16e:	80 83       	st	Z, r24
}
 170:	08 95       	ret

00000172 <initButtons>:

void initButtons(void)
{
	set_input(Button1_DIR, Button1_PIN_BIT);
 172:	e7 e3       	ldi	r30, 0x37	; 55
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	8e 7f       	andi	r24, 0xFE	; 254
 17a:	80 83       	st	Z, r24
	GIMSK |= (0<<INT0)|(1<<PCIE);
 17c:	eb e5       	ldi	r30, 0x5B	; 91
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	80 62       	ori	r24, 0x20	; 32
 184:	80 83       	st	Z, r24
	PCMSK |= (0<<PCINT5)|(0<<PCINT4)|(0<<PCINT3)|(0<<PCINT2)|(0<<PCINT1)|(1<<PCINT0);
 186:	e5 e3       	ldi	r30, 0x35	; 53
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	81 60       	ori	r24, 0x01	; 1
 18e:	80 83       	st	Z, r24
}
 190:	08 95       	ret

00000192 <buttonIsPressed>:
	}
}

unsigned int buttonIsPressed(int button)
{
	if(button == 1)
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	19 f0       	breq	.+6      	; 0x19c <buttonIsPressed+0xa>
 196:	20 e0       	ldi	r18, 0x00	; 0
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	07 c0       	rjmp	.+14     	; 0x1aa <buttonIsPressed+0x18>
	{
		if(Button1_press())
 19c:	86 b3       	in	r24, 0x16	; 22
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	80 95       	com	r24
 1a2:	90 95       	com	r25
 1a4:	9c 01       	movw	r18, r24
 1a6:	21 70       	andi	r18, 0x01	; 1
 1a8:	30 70       	andi	r19, 0x00	; 0
	}
	else
	{
		return 0;
	}
}
 1aa:	82 2f       	mov	r24, r18
 1ac:	93 2f       	mov	r25, r19
 1ae:	08 95       	ret

000001b0 <__vector_2>:

ISR (PCINT0_vect)
{
 1b0:	1f 92       	push	r1
 1b2:	0f 92       	push	r0
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	0f 92       	push	r0
 1b8:	11 24       	eor	r1, r1
 1ba:	2f 93       	push	r18
 1bc:	3f 93       	push	r19
 1be:	4f 93       	push	r20
 1c0:	5f 93       	push	r21
 1c2:	6f 93       	push	r22
 1c4:	7f 93       	push	r23
 1c6:	8f 93       	push	r24
 1c8:	9f 93       	push	r25
 1ca:	af 93       	push	r26
 1cc:	bf 93       	push	r27
 1ce:	ef 93       	push	r30
 1d0:	ff 93       	push	r31
	if(buttonIsPressed(1))
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	dd df       	rcall	.-70     	; 0x192 <buttonIsPressed>
 1d8:	89 2b       	or	r24, r25
 1da:	79 f0       	breq	.+30     	; 0x1fa <__vector_2+0x4a>
	{
		Led1_on();
 1dc:	e8 e3       	ldi	r30, 0x38	; 56
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	8d 7f       	andi	r24, 0xFD	; 253
 1e4:	80 83       	st	Z, r24
		Digital_Out1_Low();
 1e6:	80 81       	ld	r24, Z
 1e8:	8b 7f       	andi	r24, 0xFB	; 251
 1ea:	80 83       	st	Z, r24
		output_toggle(Digital_Out2_DIR, Digital_Out2_PIN_BIT);
 1ec:	e7 e3       	ldi	r30, 0x37	; 55
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	90 e1       	ldi	r25, 0x10	; 16
 1f4:	89 27       	eor	r24, r25
 1f6:	80 83       	st	Z, r24
 1f8:	08 c0       	rjmp	.+16     	; 0x20a <__vector_2+0x5a>
	}
	else
	{
		Led1_off();
 1fa:	e8 e3       	ldi	r30, 0x38	; 56
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	80 81       	ld	r24, Z
 200:	82 60       	ori	r24, 0x02	; 2
 202:	80 83       	st	Z, r24
		Digital_Out1_High();
 204:	80 81       	ld	r24, Z
 206:	84 60       	ori	r24, 0x04	; 4
 208:	80 83       	st	Z, r24
	}
}
 20a:	ff 91       	pop	r31
 20c:	ef 91       	pop	r30
 20e:	bf 91       	pop	r27
 210:	af 91       	pop	r26
 212:	9f 91       	pop	r25
 214:	8f 91       	pop	r24
 216:	7f 91       	pop	r23
 218:	6f 91       	pop	r22
 21a:	5f 91       	pop	r21
 21c:	4f 91       	pop	r20
 21e:	3f 91       	pop	r19
 220:	2f 91       	pop	r18
 222:	0f 90       	pop	r0
 224:	0f be       	out	0x3f, r0	; 63
 226:	0f 90       	pop	r0
 228:	1f 90       	pop	r1
 22a:	18 95       	reti

0000022c <__vector_10>:
		 
     }
}

ISR(TIMER0_COMPA_vect) // timer 0 compare A interrupt
{
 22c:	1f 92       	push	r1
 22e:	0f 92       	push	r0
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	0f 92       	push	r0
 234:	11 24       	eor	r1, r1
	
}
 236:	0f 90       	pop	r0
 238:	0f be       	out	0x3f, r0	; 63
 23a:	0f 90       	pop	r0
 23c:	1f 90       	pop	r1
 23e:	18 95       	reti

00000240 <__vector_11>:

ISR(TIMER0_COMPB_vect) // timer 0 compare B interrupt
{
 240:	1f 92       	push	r1
 242:	0f 92       	push	r0
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	0f 92       	push	r0
 248:	11 24       	eor	r1, r1

}
 24a:	0f 90       	pop	r0
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	0f 90       	pop	r0
 250:	1f 90       	pop	r1
 252:	18 95       	reti

00000254 <__vector_4>:

// Timer 1 interrupt service routine 
// timeout 1.000 ms , fosc = 8.0000 MHz 
//====================================
ISR (TIMER1_OVF_vect)
{
 254:	1f 92       	push	r1
 256:	0f 92       	push	r0
 258:	0f b6       	in	r0, 0x3f	; 63
 25a:	0f 92       	push	r0
 25c:	11 24       	eor	r1, r1
 25e:	8f 93       	push	r24
 260:	9f 93       	push	r25
    TCNT1 = (unsigned char)65536 - (unsigned char)8000; 
 262:	80 ec       	ldi	r24, 0xC0	; 192
 264:	8f bd       	out	0x2f, r24	; 47
    if (++repeat_cnt1 == 1) 
 266:	80 91 64 00 	lds	r24, 0x0064
 26a:	90 91 65 00 	lds	r25, 0x0065
 26e:	01 96       	adiw	r24, 0x01	; 1
 270:	90 93 65 00 	sts	0x0065, r25
 274:	80 93 64 00 	sts	0x0064, r24
 278:	80 91 64 00 	lds	r24, 0x0064
 27c:	90 91 65 00 	lds	r25, 0x0065
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	c1 f4       	brne	.+48     	; 0x2b4 <__stack+0x55>
    {
        repeat_cnt1 = 0; 
 284:	10 92 65 00 	sts	0x0065, r1
 288:	10 92 64 00 	sts	0x0064, r1
		
         msCountedTimer1++;
 28c:	80 91 68 00 	lds	r24, 0x0068
 290:	90 91 69 00 	lds	r25, 0x0069
 294:	01 96       	adiw	r24, 0x01	; 1
 296:	90 93 69 00 	sts	0x0069, r25
 29a:	80 93 68 00 	sts	0x0068, r24
         if(msCountedTimer1 == (unsigned char)1500)
 29e:	80 91 68 00 	lds	r24, 0x0068
 2a2:	90 91 69 00 	lds	r25, 0x0069
 2a6:	8c 3d       	cpi	r24, 0xDC	; 220
 2a8:	91 05       	cpc	r25, r1
 2aa:	21 f4       	brne	.+8      	; 0x2b4 <__stack+0x55>
         {
	         msCountedTimer1 = 0;
 2ac:	10 92 69 00 	sts	0x0069, r1
 2b0:	10 92 68 00 	sts	0x0068, r1
	          
		 }
	
	}
}
 2b4:	9f 91       	pop	r25
 2b6:	8f 91       	pop	r24
 2b8:	0f 90       	pop	r0
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	0f 90       	pop	r0
 2be:	1f 90       	pop	r1
 2c0:	18 95       	reti

000002c2 <__vector_3>:

ISR(TIMER1_COMPA_vect) // timer 1 compare A interrupt
{
 2c2:	1f 92       	push	r1
 2c4:	0f 92       	push	r0
 2c6:	0f b6       	in	r0, 0x3f	; 63
 2c8:	0f 92       	push	r0
 2ca:	11 24       	eor	r1, r1

}
 2cc:	0f 90       	pop	r0
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	0f 90       	pop	r0
 2d2:	1f 90       	pop	r1
 2d4:	18 95       	reti

000002d6 <__vector_9>:

ISR(TIMER1_COMPB_vect) // timer 1 compare B interrupt
{
 2d6:	1f 92       	push	r1
 2d8:	0f 92       	push	r0
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	0f 92       	push	r0
 2de:	11 24       	eor	r1, r1

}
 2e0:	0f 90       	pop	r0
 2e2:	0f be       	out	0x3f, r0	; 63
 2e4:	0f 90       	pop	r0
 2e6:	1f 90       	pop	r1
 2e8:	18 95       	reti

000002ea <__vector_5>:

// Timer 2  timeout= 1.000 ms, fosc = 8.0000 MHz 
//=========================================

ISR (TIMER0_OVF_vect)
{
 2ea:	1f 92       	push	r1
 2ec:	0f 92       	push	r0
 2ee:	0f b6       	in	r0, 0x3f	; 63
 2f0:	0f 92       	push	r0
 2f2:	11 24       	eor	r1, r1
 2f4:	2f 93       	push	r18
 2f6:	3f 93       	push	r19
 2f8:	4f 93       	push	r20
 2fa:	5f 93       	push	r21
 2fc:	6f 93       	push	r22
 2fe:	7f 93       	push	r23
 300:	8f 93       	push	r24
 302:	9f 93       	push	r25
 304:	af 93       	push	r26
 306:	bf 93       	push	r27
 308:	ef 93       	push	r30
 30a:	ff 93       	push	r31
	TCNT0 = 256 - 125; 
 30c:	83 e8       	ldi	r24, 0x83	; 131
 30e:	82 bf       	out	0x32, r24	; 50

    if (++repeat_cnt0 == 1) 
 310:	80 91 62 00 	lds	r24, 0x0062
 314:	90 91 63 00 	lds	r25, 0x0063
 318:	01 96       	adiw	r24, 0x01	; 1
 31a:	90 93 63 00 	sts	0x0063, r25
 31e:	80 93 62 00 	sts	0x0062, r24
 322:	80 91 62 00 	lds	r24, 0x0062
 326:	90 91 63 00 	lds	r25, 0x0063
 32a:	01 97       	sbiw	r24, 0x01	; 1
 32c:	61 f5       	brne	.+88     	; 0x386 <__vector_5+0x9c>
    {
        repeat_cnt0 = 0; 
 32e:	10 92 63 00 	sts	0x0063, r1
 332:	10 92 62 00 	sts	0x0062, r1
		
         msCountedTimer0++;
 336:	80 91 66 00 	lds	r24, 0x0066
 33a:	90 91 67 00 	lds	r25, 0x0067
 33e:	01 96       	adiw	r24, 0x01	; 1
 340:	90 93 67 00 	sts	0x0067, r25
 344:	80 93 66 00 	sts	0x0066, r24
		 if(msCountedTimer0 % 50 == 0)
 348:	80 91 66 00 	lds	r24, 0x0066
 34c:	90 91 67 00 	lds	r25, 0x0067
			  //else
			  //{
				//  Led2_off();
			  //}
		 }
         if(msCountedTimer0 % 1000 == 0)
 350:	80 91 66 00 	lds	r24, 0x0066
 354:	90 91 67 00 	lds	r25, 0x0067
 358:	68 ee       	ldi	r22, 0xE8	; 232
 35a:	73 e0       	ldi	r23, 0x03	; 3
 35c:	25 d0       	rcall	.+74     	; 0x3a8 <__udivmodhi4>
 35e:	89 2b       	or	r24, r25
 360:	91 f4       	brne	.+36     	; 0x386 <__vector_5+0x9c>
         {
			  if(FirstpowerOn)
 362:	80 91 60 00 	lds	r24, 0x0060
 366:	88 23       	and	r24, r24
 368:	71 f0       	breq	.+28     	; 0x386 <__vector_5+0x9c>
			  {
				  Analog_Comparator_init();
 36a:	75 de       	rcall	.-790    	; 0x56 <Analog_Comparator_init>
				  Led1_off();
 36c:	e8 e3       	ldi	r30, 0x38	; 56
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	80 81       	ld	r24, Z
 372:	82 60       	ori	r24, 0x02	; 2
 374:	80 83       	st	Z, r24
				  Digital_Out1_High();
 376:	80 81       	ld	r24, Z
 378:	84 60       	ori	r24, 0x04	; 4
 37a:	80 83       	st	Z, r24
				  Digital_Out2_Low();
 37c:	80 81       	ld	r24, Z
 37e:	8f 7e       	andi	r24, 0xEF	; 239
 380:	80 83       	st	Z, r24
				  FirstpowerOn = 0;
 382:	10 92 60 00 	sts	0x0060, r1
			  }
			  
		 }
		 
     }
}
 386:	ff 91       	pop	r31
 388:	ef 91       	pop	r30
 38a:	bf 91       	pop	r27
 38c:	af 91       	pop	r26
 38e:	9f 91       	pop	r25
 390:	8f 91       	pop	r24
 392:	7f 91       	pop	r23
 394:	6f 91       	pop	r22
 396:	5f 91       	pop	r21
 398:	4f 91       	pop	r20
 39a:	3f 91       	pop	r19
 39c:	2f 91       	pop	r18
 39e:	0f 90       	pop	r0
 3a0:	0f be       	out	0x3f, r0	; 63
 3a2:	0f 90       	pop	r0
 3a4:	1f 90       	pop	r1
 3a6:	18 95       	reti

000003a8 <__udivmodhi4>:
 3a8:	aa 1b       	sub	r26, r26
 3aa:	bb 1b       	sub	r27, r27
 3ac:	51 e1       	ldi	r21, 0x11	; 17
 3ae:	07 c0       	rjmp	.+14     	; 0x3be <__udivmodhi4_ep>

000003b0 <__udivmodhi4_loop>:
 3b0:	aa 1f       	adc	r26, r26
 3b2:	bb 1f       	adc	r27, r27
 3b4:	a6 17       	cp	r26, r22
 3b6:	b7 07       	cpc	r27, r23
 3b8:	10 f0       	brcs	.+4      	; 0x3be <__udivmodhi4_ep>
 3ba:	a6 1b       	sub	r26, r22
 3bc:	b7 0b       	sbc	r27, r23

000003be <__udivmodhi4_ep>:
 3be:	88 1f       	adc	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	5a 95       	dec	r21
 3c4:	a9 f7       	brne	.-22     	; 0x3b0 <__udivmodhi4_loop>
 3c6:	80 95       	com	r24
 3c8:	90 95       	com	r25
 3ca:	bc 01       	movw	r22, r24
 3cc:	cd 01       	movw	r24, r26
 3ce:	08 95       	ret

000003d0 <_exit>:
 3d0:	f8 94       	cli

000003d2 <__stop_program>:
 3d2:	ff cf       	rjmp	.-2      	; 0x3d2 <__stop_program>
