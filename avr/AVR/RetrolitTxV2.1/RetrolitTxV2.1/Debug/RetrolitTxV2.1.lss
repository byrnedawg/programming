
RetrolitTxV2.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000376  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000008  00800060  00800060  000003ea  2**0
                  ALLOC
  2 .debug_aranges 00000108  00000000  00000000  000003ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000001ff  00000000  00000000  000004f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000005d1  00000000  00000000  000006f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002bd  00000000  00000000  00000cc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000006d7  00000000  00000000  00000f7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000190  00000000  00000000  00001658  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000265  00000000  00000000  000017e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000119  00000000  00000000  00001a4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000e8  00000000  00000000  00001b66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	ADMUX = (ADMUX & ~0xC7) | ref;
	ADMUX |= ch; //clear mux then or with new channel value
	ADCSRA |= (1<<ADSC);
	_delay_ms(10);
	return ( (unsigned int ) ( ADCL + (ADCH<<8) ) );
}
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
{
	set_input(Button1_DIR, Button1_PIN_BIT);
}

void toggleLED(int ledNum)
{
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>


// Timer 1  timeout= 1.000 ms, fosc = 8.0000 MHz 
//=========================================
void Timer1_Init()
{
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	20 c1       	rjmp	.+576    	; 0x248 <__vector_3>
   8:	e6 c0       	rjmp	.+460    	; 0x1d6 <__vector_4>
   a:	32 c1       	rjmp	.+612    	; 0x270 <__vector_5>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	3c c0       	rjmp	.+120    	; 0x88 <__vector_7>
  10:	6f c0       	rjmp	.+222    	; 0xf0 <__vector_8>
  12:	24 c1       	rjmp	.+584    	; 0x25c <__vector_9>
  14:	cc c0       	rjmp	.+408    	; 0x1ae <__vector_10>
  16:	d5 c0       	rjmp	.+426    	; 0x1c2 <__vector_11>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e6 e7       	ldi	r30, 0x76	; 118
  32:	f3 e0       	ldi	r31, 0x03	; 3
  34:	02 c0       	rjmp	.+4      	; 0x3a <.do_copy_data_start>

00000036 <.do_copy_data_loop>:
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0

0000003a <.do_copy_data_start>:
  3a:	a0 36       	cpi	r26, 0x60	; 96
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <.do_copy_data_loop>

00000040 <__do_clear_bss>:
  40:	10 e0       	ldi	r17, 0x00	; 0
  42:	a0 e6       	ldi	r26, 0x60	; 96
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a8 36       	cpi	r26, 0x68	; 104
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	79 d0       	rcall	.+242    	; 0x144 <main>
  52:	8f c1       	rjmp	.+798    	; 0x372 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <Analog_Comparator_init>:

void Analog_Comparator_init() // Initialize Analog Comparator
{
	ADCSRA |= (0<<ADEN);
  56:	e6 e2       	ldi	r30, 0x26	; 38
  58:	f0 e0       	ldi	r31, 0x00	; 0
  5a:	80 81       	ld	r24, Z
  5c:	80 83       	st	Z, r24
	ADCSRB |= (0<<BIN)|(1<<ACME)|(0<<IPR)|(0<<ADTS2)|(0<<ADTS1)|(0<<ADTS0); //Analog Comparator Multiplexer Enable
  5e:	e3 e2       	ldi	r30, 0x23	; 35
  60:	f0 e0       	ldi	r31, 0x00	; 0
  62:	80 81       	ld	r24, Z
  64:	80 64       	ori	r24, 0x40	; 64
  66:	80 83       	st	Z, r24
	ADMUX |= (0<<REFS1)|(0<<REFS0)|(0<<ADLAR)|(0<<REFS2)|(0<<MUX3)|(0<<MUX2)|(1<<MUX1)|(1<<MUX0); //ADC Multiplexer Selection Register... (ADC3(PB3) Selected ADC Input)
  68:	e7 e2       	ldi	r30, 0x27	; 39
  6a:	f0 e0       	ldi	r31, 0x00	; 0
  6c:	80 81       	ld	r24, Z
  6e:	83 60       	ori	r24, 0x03	; 3
  70:	80 83       	st	Z, r24
	ACSR |= (0<<ACD)|(1<<ACBG)|(0<<ACO)|(0<<ACI)|(1<<ACIE)|(1<<ACIS1)|(1<<ACIS0); // Analog Comparator Control Register
  72:	e8 e2       	ldi	r30, 0x28	; 40
  74:	f0 e0       	ldi	r31, 0x00	; 0
  76:	80 81       	ld	r24, Z
  78:	8b 64       	ori	r24, 0x4B	; 75
  7a:	80 83       	st	Z, r24
	DIDR0 |= (0<<ADC0D)|(0<<ADC2D)|(1<<ADC3D)|(0<<ADC1D)|(0<<AIN1D)|(0<<AIN0D); // Digital input Disable Register
  7c:	e4 e3       	ldi	r30, 0x34	; 52
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	80 81       	ld	r24, Z
  82:	88 60       	ori	r24, 0x08	; 8
  84:	80 83       	st	Z, r24
}
  86:	08 95       	ret

00000088 <__vector_7>:

ISR(ANA_COMP_vect)
{
  88:	1f 92       	push	r1
  8a:	0f 92       	push	r0
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	0f 92       	push	r0
  90:	11 24       	eor	r1, r1
  92:	2f 93       	push	r18
  94:	3f 93       	push	r19
  96:	4f 93       	push	r20
  98:	5f 93       	push	r21
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
  9e:	ef 93       	push	r30
  a0:	ff 93       	push	r31
	//toggleLED(2);
	Digital_Out2_High();
  a2:	e8 e3       	ldi	r30, 0x38	; 56
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	80 61       	ori	r24, 0x10	; 16
  aa:	80 83       	st	Z, r24
	Digital_Out1_Low();
  ac:	80 81       	ld	r24, Z
  ae:	8b 7f       	andi	r24, 0xFB	; 251
  b0:	80 83       	st	Z, r24
  b2:	20 e2       	ldi	r18, 0x20	; 32
  b4:	3e e4       	ldi	r19, 0x4E	; 78
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b6:	49 e1       	ldi	r20, 0x19	; 25
  b8:	50 e0       	ldi	r21, 0x00	; 0
  ba:	ca 01       	movw	r24, r20
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <__vector_7+0x34>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c4:	d1 f7       	brne	.-12     	; 0xba <__vector_7+0x32>
	_delay_ms(2000);
	Digital_Out2_Low();
  c6:	e8 e3       	ldi	r30, 0x38	; 56
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	8f 7e       	andi	r24, 0xEF	; 239
  ce:	80 83       	st	Z, r24
	Digital_Out1_High();
  d0:	80 81       	ld	r24, Z
  d2:	84 60       	ori	r24, 0x04	; 4
  d4:	80 83       	st	Z, r24
}
  d6:	ff 91       	pop	r31
  d8:	ef 91       	pop	r30
  da:	9f 91       	pop	r25
  dc:	8f 91       	pop	r24
  de:	5f 91       	pop	r21
  e0:	4f 91       	pop	r20
  e2:	3f 91       	pop	r19
  e4:	2f 91       	pop	r18
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <__vector_8>:

ISR(ADC_vect) // Interrupt for ADC Converter
{
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
	
  fa:	0f 90       	pop	r0
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	0f 90       	pop	r0
 100:	1f 90       	pop	r1
 102:	18 95       	reti

00000104 <init>:
//											--GND |______|PB0--	Switch	(MOSI/DI/SDA/AIN0/OC0A/~OC1A/AREF/PCINT0)
//

void init()
{
	initLEDs();
 104:	22 d0       	rcall	.+68     	; 0x14a <initLEDs>
	initButtons();
 106:	2d d0       	rcall	.+90     	; 0x162 <initButtons>
	initDigitalOutput();
 108:	26 d0       	rcall	.+76     	; 0x156 <initDigitalOutput>
	Led1_on();
 10a:	e8 e3       	ldi	r30, 0x38	; 56
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	8d 7f       	andi	r24, 0xFD	; 253
 112:	80 83       	st	Z, r24
	Digital_Out1_Low();
 114:	80 81       	ld	r24, Z
 116:	8b 7f       	andi	r24, 0xFB	; 251
 118:	80 83       	st	Z, r24
	Digital_Out2_Low();
 11a:	80 81       	ld	r24, Z
 11c:	8f 7e       	andi	r24, 0xEF	; 239
 11e:	80 83       	st	Z, r24
 120:	20 e2       	ldi	r18, 0x20	; 32
 122:	3e e4       	ldi	r19, 0x4E	; 78
 124:	49 e1       	ldi	r20, 0x19	; 25
 126:	50 e0       	ldi	r21, 0x00	; 0
 128:	ca 01       	movw	r24, r20
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <init+0x26>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 132:	d1 f7       	brne	.-12     	; 0x128 <init+0x24>
	_delay_ms(2000);
	Digital_Out1_High();
 134:	e8 e3       	ldi	r30, 0x38	; 56
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	84 60       	ori	r24, 0x04	; 4
 13c:	80 83       	st	Z, r24
	//interrupt0_init();
	//interrupt1_init();
	Timer0_Init();
 13e:	26 d0       	rcall	.+76     	; 0x18c <Timer0_Init>
	//Timer1_Init();
	//adc_init();
	Analog_Comparator_init();
 140:	8a df       	rcall	.-236    	; 0x56 <Analog_Comparator_init>
	// watchdog enable
	//wdt_enable(WDTO_15MS);
}
 142:	08 95       	ret

00000144 <main>:
int main()
{
	init();
 144:	df df       	rcall	.-66     	; 0x104 <init>
	sei();  // enable interrupt
 146:	78 94       	sei
 148:	ff cf       	rjmp	.-2      	; 0x148 <main+0x4>

0000014a <initLEDs>:

#include "portHardware.h"

void initLEDs(void)
{
	set_output(Led1_DIR, Led1_PIN_BIT);
 14a:	e7 e3       	ldi	r30, 0x37	; 55
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	82 60       	ori	r24, 0x02	; 2
 152:	80 83       	st	Z, r24
	//set_output(Led2_DIR, Led2_PIN_BIT);
}
 154:	08 95       	ret

00000156 <initDigitalOutput>:

void initDigitalOutput(void)
{
	set_output(Digital_Out1_DIR, Digital_Out1_PIN_BIT);
 156:	e7 e3       	ldi	r30, 0x37	; 55
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	84 60       	ori	r24, 0x04	; 4
 15e:	80 83       	st	Z, r24
}
 160:	08 95       	ret

00000162 <initButtons>:

void initButtons(void)
{
	set_input(Button1_DIR, Button1_PIN_BIT);
 162:	e7 e3       	ldi	r30, 0x37	; 55
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	8e 7f       	andi	r24, 0xFE	; 254
 16a:	80 83       	st	Z, r24
}
 16c:	08 95       	ret

0000016e <buttonIsPressed>:
	}
}

unsigned int buttonIsPressed(int button)
{
	if(button == 1)
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	19 f0       	breq	.+6      	; 0x178 <buttonIsPressed+0xa>
 172:	20 e0       	ldi	r18, 0x00	; 0
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	07 c0       	rjmp	.+14     	; 0x186 <buttonIsPressed+0x18>
	{
		if(Button1_press())
 178:	86 b3       	in	r24, 0x16	; 22
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	80 95       	com	r24
 17e:	90 95       	com	r25
 180:	9c 01       	movw	r18, r24
 182:	21 70       	andi	r18, 0x01	; 1
 184:	30 70       	andi	r19, 0x00	; 0
	}
	else
	{
		return 0;
	}
}
 186:	82 2f       	mov	r24, r18
 188:	93 2f       	mov	r25, r19
 18a:	08 95       	ret

0000018c <Timer0_Init>:
	TCNT0 = 256 - 125; 	 
	*/
// NOTE: Assumes DIV8 fuse set for 1 MHz operation
// 8-bit counter means overflow interrupt every 61 Hz to turn on the LED
// Variable Compare_A interrupt in between OVF to turn off the LED
TCCR0A |= (0<<COM0A1)|(0<<COM0A0)|(0<<COM0B1)|(0<<COM0B0)|(0<<WGM01)|(0<<WGM00); // Set OC0A/OC0B on Compare Match, clear OC0A/OC0B at BOTTOM (inverting mode) ,Fast PWM Mode
 18c:	ea e4       	ldi	r30, 0x4A	; 74
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	80 83       	st	Z, r24
TCCR0B |= (0<<FOC0A)|(0<<FOC0B)|(0<<WGM02)|(0<<CS02)|(1<<CS01)|(0<<CS00); //0x02;	pre-scale= CK/8
 194:	e3 e5       	ldi	r30, 0x53	; 83
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	82 60       	ori	r24, 0x02	; 2
 19c:	80 83       	st	Z, r24
//OCR0A = 0x00; // Governs Duty Cycle (192 ~75% of 256) for inverting mode OCR0A = (255-duty-cycle)
//OCR0B = 0x00; // Governs Duty Cycle (192 ~75% of 256) for inverting mode OCR0B = (255-duty-cycle)
TIMSK |= (0<<OCIE1A)|(0<<OCIE1B)|(0<<OCIE0A)|(0<<OCIE0B)|(0<<TOIE1)|(1<<TOIE0);	// Compare A and OVF Interrupt enabled
 19e:	e9 e5       	ldi	r30, 0x59	; 89
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 81       	ld	r24, Z
 1a4:	82 60       	ori	r24, 0x02	; 2
 1a6:	80 83       	st	Z, r24
TCNT0 = 256 - 125;
 1a8:	83 e8       	ldi	r24, 0x83	; 131
 1aa:	82 bf       	out	0x32, r24	; 50
}
 1ac:	08 95       	ret

000001ae <__vector_10>:
		 
     }
}

ISR(TIMER0_COMPA_vect) // timer 0 compare A interrupt
{
 1ae:	1f 92       	push	r1
 1b0:	0f 92       	push	r0
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	0f 92       	push	r0
 1b6:	11 24       	eor	r1, r1
	
}
 1b8:	0f 90       	pop	r0
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	0f 90       	pop	r0
 1be:	1f 90       	pop	r1
 1c0:	18 95       	reti

000001c2 <__vector_11>:

ISR(TIMER0_COMPB_vect) // timer 0 compare B interrupt
{
 1c2:	1f 92       	push	r1
 1c4:	0f 92       	push	r0
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	0f 92       	push	r0
 1ca:	11 24       	eor	r1, r1

}
 1cc:	0f 90       	pop	r0
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	0f 90       	pop	r0
 1d2:	1f 90       	pop	r1
 1d4:	18 95       	reti

000001d6 <__vector_4>:

// Timer 1 interrupt service routine 
// timeout 1.000 ms , fosc = 8.0000 MHz 
//====================================
ISR (TIMER1_OVF_vect)
{
 1d6:	1f 92       	push	r1
 1d8:	0f 92       	push	r0
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	0f 92       	push	r0
 1de:	11 24       	eor	r1, r1
 1e0:	2f 93       	push	r18
 1e2:	8f 93       	push	r24
 1e4:	9f 93       	push	r25
    TCNT1 = 65536 - 8000; 
 1e6:	80 ec       	ldi	r24, 0xC0	; 192
 1e8:	8f bd       	out	0x2f, r24	; 47
    if (++repeat_cnt1 == 1) 
 1ea:	80 91 62 00 	lds	r24, 0x0062
 1ee:	90 91 63 00 	lds	r25, 0x0063
 1f2:	01 96       	adiw	r24, 0x01	; 1
 1f4:	90 93 63 00 	sts	0x0063, r25
 1f8:	80 93 62 00 	sts	0x0062, r24
 1fc:	80 91 62 00 	lds	r24, 0x0062
 200:	90 91 63 00 	lds	r25, 0x0063
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	c1 f4       	brne	.+48     	; 0x238 <__vector_4+0x62>
    {
        repeat_cnt1 = 0; 
 208:	10 92 63 00 	sts	0x0063, r1
 20c:	10 92 62 00 	sts	0x0062, r1
		
         msCountedTimer1++;
 210:	80 91 66 00 	lds	r24, 0x0066
 214:	90 91 67 00 	lds	r25, 0x0067
 218:	01 96       	adiw	r24, 0x01	; 1
 21a:	90 93 67 00 	sts	0x0067, r25
 21e:	80 93 66 00 	sts	0x0066, r24
         if(msCountedTimer1 == 1500)
 222:	80 91 66 00 	lds	r24, 0x0066
 226:	90 91 67 00 	lds	r25, 0x0067
 22a:	8c 5d       	subi	r24, 0xDC	; 220
 22c:	95 40       	sbci	r25, 0x05	; 5
 22e:	21 f4       	brne	.+8      	; 0x238 <__vector_4+0x62>
         {
	         msCountedTimer1 = 0;
 230:	10 92 67 00 	sts	0x0067, r1
 234:	10 92 66 00 	sts	0x0066, r1
	          
		 }
	
	}
}
 238:	9f 91       	pop	r25
 23a:	8f 91       	pop	r24
 23c:	2f 91       	pop	r18
 23e:	0f 90       	pop	r0
 240:	0f be       	out	0x3f, r0	; 63
 242:	0f 90       	pop	r0
 244:	1f 90       	pop	r1
 246:	18 95       	reti

00000248 <__vector_3>:

ISR(TIMER1_COMPA_vect) // timer 1 compare A interrupt
{
 248:	1f 92       	push	r1
 24a:	0f 92       	push	r0
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	0f 92       	push	r0
 250:	11 24       	eor	r1, r1

}
 252:	0f 90       	pop	r0
 254:	0f be       	out	0x3f, r0	; 63
 256:	0f 90       	pop	r0
 258:	1f 90       	pop	r1
 25a:	18 95       	reti

0000025c <__vector_9>:

ISR(TIMER1_COMPB_vect) // timer 1 compare B interrupt
{
 25c:	1f 92       	push	r1
 25e:	0f 92       	push	r0
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	0f 92       	push	r0
 264:	11 24       	eor	r1, r1

}
 266:	0f 90       	pop	r0
 268:	0f be       	out	0x3f, r0	; 63
 26a:	0f 90       	pop	r0
 26c:	1f 90       	pop	r1
 26e:	18 95       	reti

00000270 <__vector_5>:

// Timer 2  timeout= 1.000 ms, fosc = 8.0000 MHz 
//=========================================

ISR (TIMER0_OVF_vect)
{
 270:	1f 92       	push	r1
 272:	0f 92       	push	r0
 274:	0f b6       	in	r0, 0x3f	; 63
 276:	0f 92       	push	r0
 278:	11 24       	eor	r1, r1
 27a:	2f 93       	push	r18
 27c:	3f 93       	push	r19
 27e:	4f 93       	push	r20
 280:	5f 93       	push	r21
 282:	6f 93       	push	r22
 284:	7f 93       	push	r23
 286:	8f 93       	push	r24
 288:	9f 93       	push	r25
 28a:	af 93       	push	r26
 28c:	bf 93       	push	r27
 28e:	ef 93       	push	r30
 290:	ff 93       	push	r31
	TCNT0 = 256 - 125; 
 292:	83 e8       	ldi	r24, 0x83	; 131
 294:	82 bf       	out	0x32, r24	; 50

    if (++repeat_cnt0 == 1) 
 296:	80 91 60 00 	lds	r24, 0x0060
 29a:	90 91 61 00 	lds	r25, 0x0061
 29e:	01 96       	adiw	r24, 0x01	; 1
 2a0:	90 93 61 00 	sts	0x0061, r25
 2a4:	80 93 60 00 	sts	0x0060, r24
 2a8:	80 91 60 00 	lds	r24, 0x0060
 2ac:	90 91 61 00 	lds	r25, 0x0061
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	d1 f5       	brne	.+116    	; 0x328 <__vector_5+0xb8>
    {
        repeat_cnt0 = 0; 
 2b4:	10 92 61 00 	sts	0x0061, r1
 2b8:	10 92 60 00 	sts	0x0060, r1
		
         msCountedTimer0++;
 2bc:	80 91 64 00 	lds	r24, 0x0064
 2c0:	90 91 65 00 	lds	r25, 0x0065
 2c4:	01 96       	adiw	r24, 0x01	; 1
 2c6:	90 93 65 00 	sts	0x0065, r25
 2ca:	80 93 64 00 	sts	0x0064, r24
		 if(msCountedTimer0 % 50 == 0)
 2ce:	80 91 64 00 	lds	r24, 0x0064
 2d2:	90 91 65 00 	lds	r25, 0x0065
			  //else
			  //{
				//  Led2_off();
			  //}
		 }
         if(msCountedTimer0 % 100 == 0)
 2d6:	80 91 64 00 	lds	r24, 0x0064
 2da:	90 91 65 00 	lds	r25, 0x0065
 2de:	64 e6       	ldi	r22, 0x64	; 100
 2e0:	70 e0       	ldi	r23, 0x00	; 0
 2e2:	33 d0       	rcall	.+102    	; 0x34a <__udivmodhi4>
 2e4:	89 2b       	or	r24, r25
 2e6:	01 f5       	brne	.+64     	; 0x328 <__vector_5+0xb8>
         {
			  if(buttonIsPressed(1))
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	40 df       	rcall	.-384    	; 0x16e <buttonIsPressed>
 2ee:	89 2b       	or	r24, r25
 2f0:	99 f0       	breq	.+38     	; 0x318 <__vector_5+0xa8>
			  {
				  msCountedTimer0 = 0;
 2f2:	10 92 65 00 	sts	0x0065, r1
 2f6:	10 92 64 00 	sts	0x0064, r1
				  Led1_on();
 2fa:	e8 e3       	ldi	r30, 0x38	; 56
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	80 81       	ld	r24, Z
 300:	8d 7f       	andi	r24, 0xFD	; 253
 302:	80 83       	st	Z, r24
				  Digital_Out1_Low();
 304:	80 81       	ld	r24, Z
 306:	8b 7f       	andi	r24, 0xFB	; 251
 308:	80 83       	st	Z, r24
				  output_toggle(Digital_Out2_DIR, Digital_Out2_PIN_BIT);
 30a:	e7 e3       	ldi	r30, 0x37	; 55
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	80 81       	ld	r24, Z
 310:	90 e1       	ldi	r25, 0x10	; 16
 312:	89 27       	eor	r24, r25
 314:	80 83       	st	Z, r24
 316:	08 c0       	rjmp	.+16     	; 0x328 <__vector_5+0xb8>
			  }
			  else
			  {
				  Led1_off();
 318:	e8 e3       	ldi	r30, 0x38	; 56
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	80 81       	ld	r24, Z
 31e:	82 60       	ori	r24, 0x02	; 2
 320:	80 83       	st	Z, r24
				  Digital_Out1_High();
 322:	80 81       	ld	r24, Z
 324:	84 60       	ori	r24, 0x04	; 4
 326:	80 83       	st	Z, r24
			  }
		 }
		 
     }
}
 328:	ff 91       	pop	r31
 32a:	ef 91       	pop	r30
 32c:	bf 91       	pop	r27
 32e:	af 91       	pop	r26
 330:	9f 91       	pop	r25
 332:	8f 91       	pop	r24
 334:	7f 91       	pop	r23
 336:	6f 91       	pop	r22
 338:	5f 91       	pop	r21
 33a:	4f 91       	pop	r20
 33c:	3f 91       	pop	r19
 33e:	2f 91       	pop	r18
 340:	0f 90       	pop	r0
 342:	0f be       	out	0x3f, r0	; 63
 344:	0f 90       	pop	r0
 346:	1f 90       	pop	r1
 348:	18 95       	reti

0000034a <__udivmodhi4>:
 34a:	aa 1b       	sub	r26, r26
 34c:	bb 1b       	sub	r27, r27
 34e:	51 e1       	ldi	r21, 0x11	; 17
 350:	07 c0       	rjmp	.+14     	; 0x360 <__udivmodhi4_ep>

00000352 <__udivmodhi4_loop>:
 352:	aa 1f       	adc	r26, r26
 354:	bb 1f       	adc	r27, r27
 356:	a6 17       	cp	r26, r22
 358:	b7 07       	cpc	r27, r23
 35a:	10 f0       	brcs	.+4      	; 0x360 <__udivmodhi4_ep>
 35c:	a6 1b       	sub	r26, r22
 35e:	b7 0b       	sbc	r27, r23

00000360 <__udivmodhi4_ep>:
 360:	88 1f       	adc	r24, r24
 362:	99 1f       	adc	r25, r25
 364:	5a 95       	dec	r21
 366:	a9 f7       	brne	.-22     	; 0x352 <__udivmodhi4_loop>
 368:	80 95       	com	r24
 36a:	90 95       	com	r25
 36c:	bc 01       	movw	r22, r24
 36e:	cd 01       	movw	r24, r26
 370:	08 95       	ret

00000372 <_exit>:
 372:	f8 94       	cli

00000374 <__stop_program>:
 374:	ff cf       	rjmp	.-2      	; 0x374 <__stop_program>
