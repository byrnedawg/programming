
RetrolitTxV2.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000372  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000008  00800060  00800060  000003e6  2**0
                  ALLOC
  2 .debug_aranges 00000100  00000000  00000000  000003e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000001e9  00000000  00000000  000004e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000005b8  00000000  00000000  000006cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002ba  00000000  00000000  00000c87  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000692  00000000  00000000  00000f41  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000180  00000000  00000000  000015d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000253  00000000  00000000  00001754  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000111  00000000  00000000  000019a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000128  00000000  00000000  00001ab8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	ADMUX = (ADMUX & ~0xC7) | ref;
	ADMUX |= ch; //clear mux then or with new channel value
	ADCSRA |= (1<<ADSC);
	_delay_ms(10);
	return ( (unsigned int ) ( ADCL + (ADCH<<8) ) );
}
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>


// Timer 1  timeout= 1.000 ms, fosc = 8.0000 MHz 
//=========================================
void Timer1_Init()
{
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	2a c1       	rjmp	.+596    	; 0x25c <__vector_3>
   8:	f0 c0       	rjmp	.+480    	; 0x1ea <__vector_4>
   a:	3c c1       	rjmp	.+632    	; 0x284 <__vector_5>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	3c c0       	rjmp	.+120    	; 0x88 <__vector_7>
  10:	69 c0       	rjmp	.+210    	; 0xe4 <__vector_8>
  12:	2e c1       	rjmp	.+604    	; 0x270 <__vector_9>
  14:	d6 c0       	rjmp	.+428    	; 0x1c2 <__vector_10>
  16:	df c0       	rjmp	.+446    	; 0x1d6 <__vector_11>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e2 e7       	ldi	r30, 0x72	; 114
  32:	f3 e0       	ldi	r31, 0x03	; 3
  34:	02 c0       	rjmp	.+4      	; 0x3a <.do_copy_data_start>

00000036 <.do_copy_data_loop>:
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0

0000003a <.do_copy_data_start>:
  3a:	a0 36       	cpi	r26, 0x60	; 96
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <.do_copy_data_loop>

00000040 <__do_clear_bss>:
  40:	10 e0       	ldi	r17, 0x00	; 0
  42:	a0 e6       	ldi	r26, 0x60	; 96
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a8 36       	cpi	r26, 0x68	; 104
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	73 d0       	rcall	.+230    	; 0x138 <main>
  52:	8d c1       	rjmp	.+794    	; 0x36e <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <Analog_Comparator_init>:

void Analog_Comparator_init() // Initialize Analog Comparator
{
	ADCSRA |= (0<<ADEN);
  56:	e6 e2       	ldi	r30, 0x26	; 38
  58:	f0 e0       	ldi	r31, 0x00	; 0
  5a:	80 81       	ld	r24, Z
  5c:	80 83       	st	Z, r24
	ADCSRB |= (0<<BIN)|(1<<ACME)|(0<<IPR)|(0<<ADTS2)|(0<<ADTS1)|(0<<ADTS0); //Analog Comparator Multiplexer Enable
  5e:	e3 e2       	ldi	r30, 0x23	; 35
  60:	f0 e0       	ldi	r31, 0x00	; 0
  62:	80 81       	ld	r24, Z
  64:	80 64       	ori	r24, 0x40	; 64
  66:	80 83       	st	Z, r24
	ADMUX |= (0<<REFS1)|(0<<REFS0)|(0<<ADLAR)|(0<<REFS2)|(0<<MUX3)|(0<<MUX2)|(1<<MUX1)|(1<<MUX0); //ADC Multiplexer Selection Register... (ADC3(PB3) Selected ADC Input)
  68:	e7 e2       	ldi	r30, 0x27	; 39
  6a:	f0 e0       	ldi	r31, 0x00	; 0
  6c:	80 81       	ld	r24, Z
  6e:	83 60       	ori	r24, 0x03	; 3
  70:	80 83       	st	Z, r24
	ACSR |= (0<<ACD)|(1<<ACBG)|(0<<ACO)|(0<<ACI)|(1<<ACIE)|(1<<ACIS1)|(1<<ACIS0); // Analog Comparator Control Register
  72:	e8 e2       	ldi	r30, 0x28	; 40
  74:	f0 e0       	ldi	r31, 0x00	; 0
  76:	80 81       	ld	r24, Z
  78:	8b 64       	ori	r24, 0x4B	; 75
  7a:	80 83       	st	Z, r24
	DIDR0 |= (0<<ADC0D)|(0<<ADC2D)|(1<<ADC3D)|(0<<ADC1D)|(0<<AIN1D)|(0<<AIN0D); // Digital input Disable Register
  7c:	e4 e3       	ldi	r30, 0x34	; 52
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	80 81       	ld	r24, Z
  82:	88 60       	ori	r24, 0x08	; 8
  84:	80 83       	st	Z, r24
}
  86:	08 95       	ret

00000088 <__vector_7>:

ISR(ANA_COMP_vect)
{
  88:	1f 92       	push	r1
  8a:	0f 92       	push	r0
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	0f 92       	push	r0
  90:	11 24       	eor	r1, r1
  92:	2f 93       	push	r18
  94:	3f 93       	push	r19
  96:	4f 93       	push	r20
  98:	5f 93       	push	r21
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
  9e:	ef 93       	push	r30
  a0:	ff 93       	push	r31
	//toggleLED(2);
	Led2_off();
  a2:	e8 e3       	ldi	r30, 0x38	; 56
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	84 60       	ori	r24, 0x04	; 4
  aa:	80 83       	st	Z, r24
  ac:	20 e2       	ldi	r18, 0x20	; 32
  ae:	3e e4       	ldi	r19, 0x4E	; 78
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b0:	49 e1       	ldi	r20, 0x19	; 25
  b2:	50 e0       	ldi	r21, 0x00	; 0
  b4:	ca 01       	movw	r24, r20
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <__vector_7+0x2e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  be:	d1 f7       	brne	.-12     	; 0xb4 <__vector_7+0x2c>
	_delay_ms(2000);
	Led2_on();
  c0:	e8 e3       	ldi	r30, 0x38	; 56
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	8b 7f       	andi	r24, 0xFB	; 251
  c8:	80 83       	st	Z, r24
}
  ca:	ff 91       	pop	r31
  cc:	ef 91       	pop	r30
  ce:	9f 91       	pop	r25
  d0:	8f 91       	pop	r24
  d2:	5f 91       	pop	r21
  d4:	4f 91       	pop	r20
  d6:	3f 91       	pop	r19
  d8:	2f 91       	pop	r18
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <__vector_8>:

ISR(ADC_vect) // Interrupt for ADC Converter
{
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
	
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <init>:
//	(PCINT4/XTAL2/CLKO/OC1B/ADC2)	N/C 	--PB4 |		 |PB1--	GRN LED	(MISO/DO/AIN1/OC0B/OC1A/PCINT1)
//											--GND |______|PB0--	Switch	(MOSI/DI/SDA/AIN0/OC0A/~OC1A/AREF/PCINT0)
//

void init()
{
  f8:	0f 93       	push	r16
  fa:	1f 93       	push	r17
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
	initLEDs();
 100:	1e d0       	rcall	.+60     	; 0x13e <initLEDs>
	initButtons();
 102:	26 d0       	rcall	.+76     	; 0x150 <initButtons>
	Led2_on();
 104:	e8 e3       	ldi	r30, 0x38	; 56
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	8b 7f       	andi	r24, 0xFB	; 251
 10c:	80 83       	st	Z, r24
	//interrupt0_init();
	//interrupt1_init();
	Timer0_Init();
 10e:	48 d0       	rcall	.+144    	; 0x1a0 <Timer0_Init>
	//Timer1_Init();
	//adc_init();
	Analog_Comparator_init();
 110:	a2 df       	rcall	.-188    	; 0x56 <Analog_Comparator_init>
 112:	c0 e0       	ldi	r28, 0x00	; 0
 114:	d0 e0       	ldi	r29, 0x00	; 0
 116:	04 e2       	ldi	r16, 0x24	; 36
 118:	14 ef       	ldi	r17, 0xF4	; 244
	
	for(int i = 0; i < 4; i++)
	{
		toggleLED(1);
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	1e d0       	rcall	.+60     	; 0x15c <toggleLED>
 120:	c8 01       	movw	r24, r16
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <init+0x2a>
	Timer0_Init();
	//Timer1_Init();
	//adc_init();
	Analog_Comparator_init();
	
	for(int i = 0; i < 4; i++)
 126:	21 96       	adiw	r28, 0x01	; 1
 128:	c4 30       	cpi	r28, 0x04	; 4
 12a:	d1 05       	cpc	r29, r1
 12c:	b1 f7       	brne	.-20     	; 0x11a <init+0x22>
	
	// watchdog enable
	//wdt_enable(WDTO_15MS);
	

}
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	1f 91       	pop	r17
 134:	0f 91       	pop	r16
 136:	08 95       	ret

00000138 <main>:
int main()
{
	init();
 138:	df df       	rcall	.-66     	; 0xf8 <init>
	sei();  // enable interrupt
 13a:	78 94       	sei
 13c:	ff cf       	rjmp	.-2      	; 0x13c <main+0x4>

0000013e <initLEDs>:

#include "portHardware.h"

void initLEDs(void)
{
	set_output(Led1_DIR, Led1_PIN_BIT);
 13e:	e7 e3       	ldi	r30, 0x37	; 55
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	82 60       	ori	r24, 0x02	; 2
 146:	80 83       	st	Z, r24
	set_output(Led2_DIR, Led2_PIN_BIT);
 148:	80 81       	ld	r24, Z
 14a:	84 60       	ori	r24, 0x04	; 4
 14c:	80 83       	st	Z, r24
}
 14e:	08 95       	ret

00000150 <initButtons>:

void initButtons(void)
{
	set_input(Button1_DIR, Button1_PIN_BIT);
 150:	e7 e3       	ldi	r30, 0x37	; 55
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	8e 7f       	andi	r24, 0xFE	; 254
 158:	80 83       	st	Z, r24
	
}
 15a:	08 95       	ret

0000015c <toggleLED>:

void toggleLED(int ledNum)
{
	if(ledNum == 1)
 15c:	81 30       	cpi	r24, 0x01	; 1
 15e:	91 05       	cpc	r25, r1
 160:	39 f4       	brne	.+14     	; 0x170 <toggleLED+0x14>
	{
		output_toggle(Led1_DIR, Led1_PIN_BIT);
 162:	e7 e3       	ldi	r30, 0x37	; 55
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	92 e0       	ldi	r25, 0x02	; 2
 16a:	89 27       	eor	r24, r25
 16c:	80 83       	st	Z, r24
 16e:	08 95       	ret
	}
	else if(ledNum == 2)
 170:	02 97       	sbiw	r24, 0x02	; 2
 172:	31 f4       	brne	.+12     	; 0x180 <toggleLED+0x24>
	{
		output_toggle(Led2_DIR, Led2_PIN_BIT);
 174:	e7 e3       	ldi	r30, 0x37	; 55
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	94 e0       	ldi	r25, 0x04	; 4
 17c:	89 27       	eor	r24, r25
 17e:	80 83       	st	Z, r24
 180:	08 95       	ret

00000182 <buttonIsPressed>:
	}
}

unsigned int buttonIsPressed(int button)
{
	if(button == 1)
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	19 f0       	breq	.+6      	; 0x18c <buttonIsPressed+0xa>
 186:	20 e0       	ldi	r18, 0x00	; 0
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	07 c0       	rjmp	.+14     	; 0x19a <buttonIsPressed+0x18>
	{
		if(Button1_press())
 18c:	86 b3       	in	r24, 0x16	; 22
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	80 95       	com	r24
 192:	90 95       	com	r25
 194:	9c 01       	movw	r18, r24
 196:	21 70       	andi	r18, 0x01	; 1
 198:	30 70       	andi	r19, 0x00	; 0
	}
	else
	{
		return 0;
	}
}
 19a:	82 2f       	mov	r24, r18
 19c:	93 2f       	mov	r25, r19
 19e:	08 95       	ret

000001a0 <Timer0_Init>:
	TCNT0 = 256 - 125; 	 
	*/
// NOTE: Assumes DIV8 fuse set for 1 MHz operation
// 8-bit counter means overflow interrupt every 61 Hz to turn on the LED
// Variable Compare_A interrupt in between OVF to turn off the LED
TCCR0A |= (0<<COM0A1)|(0<<COM0A0)|(0<<COM0B1)|(0<<COM0B0)|(0<<WGM01)|(0<<WGM00); // Set OC0A/OC0B on Compare Match, clear OC0A/OC0B at BOTTOM (inverting mode) ,Fast PWM Mode
 1a0:	ea e4       	ldi	r30, 0x4A	; 74
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	80 83       	st	Z, r24
TCCR0B |= (0<<FOC0A)|(0<<FOC0B)|(0<<WGM02)|(0<<CS02)|(1<<CS01)|(0<<CS00); //0x02;	pre-scale= CK/8
 1a8:	e3 e5       	ldi	r30, 0x53	; 83
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	82 60       	ori	r24, 0x02	; 2
 1b0:	80 83       	st	Z, r24
//OCR0A = 0x00; // Governs Duty Cycle (192 ~75% of 256) for inverting mode OCR0A = (255-duty-cycle)
//OCR0B = 0x00; // Governs Duty Cycle (192 ~75% of 256) for inverting mode OCR0B = (255-duty-cycle)
TIMSK |= (0<<OCIE1A)|(0<<OCIE1B)|(0<<OCIE0A)|(0<<OCIE0B)|(0<<TOIE1)|(1<<TOIE0);	// Compare A and OVF Interrupt enabled
 1b2:	e9 e5       	ldi	r30, 0x59	; 89
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	82 60       	ori	r24, 0x02	; 2
 1ba:	80 83       	st	Z, r24
TCNT0 = 256 - 125;
 1bc:	83 e8       	ldi	r24, 0x83	; 131
 1be:	82 bf       	out	0x32, r24	; 50
}
 1c0:	08 95       	ret

000001c2 <__vector_10>:
		 
     }
}

ISR(TIMER0_COMPA_vect) // timer 0 compare A interrupt
{
 1c2:	1f 92       	push	r1
 1c4:	0f 92       	push	r0
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	0f 92       	push	r0
 1ca:	11 24       	eor	r1, r1
	
}
 1cc:	0f 90       	pop	r0
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	0f 90       	pop	r0
 1d2:	1f 90       	pop	r1
 1d4:	18 95       	reti

000001d6 <__vector_11>:

ISR(TIMER0_COMPB_vect) // timer 0 compare B interrupt
{
 1d6:	1f 92       	push	r1
 1d8:	0f 92       	push	r0
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	0f 92       	push	r0
 1de:	11 24       	eor	r1, r1

}
 1e0:	0f 90       	pop	r0
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	0f 90       	pop	r0
 1e6:	1f 90       	pop	r1
 1e8:	18 95       	reti

000001ea <__vector_4>:

// Timer 1 interrupt service routine 
// timeout 1.000 ms , fosc = 8.0000 MHz 
//====================================
ISR (TIMER1_OVF_vect)
{
 1ea:	1f 92       	push	r1
 1ec:	0f 92       	push	r0
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	0f 92       	push	r0
 1f2:	11 24       	eor	r1, r1
 1f4:	2f 93       	push	r18
 1f6:	8f 93       	push	r24
 1f8:	9f 93       	push	r25
    TCNT1 = 65536 - 8000; 
 1fa:	80 ec       	ldi	r24, 0xC0	; 192
 1fc:	8f bd       	out	0x2f, r24	; 47
    if (++repeat_cnt1 == 1) 
 1fe:	80 91 62 00 	lds	r24, 0x0062
 202:	90 91 63 00 	lds	r25, 0x0063
 206:	01 96       	adiw	r24, 0x01	; 1
 208:	90 93 63 00 	sts	0x0063, r25
 20c:	80 93 62 00 	sts	0x0062, r24
 210:	80 91 62 00 	lds	r24, 0x0062
 214:	90 91 63 00 	lds	r25, 0x0063
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	c1 f4       	brne	.+48     	; 0x24c <__vector_4+0x62>
    {
        repeat_cnt1 = 0; 
 21c:	10 92 63 00 	sts	0x0063, r1
 220:	10 92 62 00 	sts	0x0062, r1
		
         msCountedTimer1++;
 224:	80 91 66 00 	lds	r24, 0x0066
 228:	90 91 67 00 	lds	r25, 0x0067
 22c:	01 96       	adiw	r24, 0x01	; 1
 22e:	90 93 67 00 	sts	0x0067, r25
 232:	80 93 66 00 	sts	0x0066, r24
         if(msCountedTimer1 == 1500)
 236:	80 91 66 00 	lds	r24, 0x0066
 23a:	90 91 67 00 	lds	r25, 0x0067
 23e:	8c 5d       	subi	r24, 0xDC	; 220
 240:	95 40       	sbci	r25, 0x05	; 5
 242:	21 f4       	brne	.+8      	; 0x24c <__vector_4+0x62>
         {
	         msCountedTimer1 = 0;
 244:	10 92 67 00 	sts	0x0067, r1
 248:	10 92 66 00 	sts	0x0066, r1
	          
		 }
	
	}
}
 24c:	9f 91       	pop	r25
 24e:	8f 91       	pop	r24
 250:	2f 91       	pop	r18
 252:	0f 90       	pop	r0
 254:	0f be       	out	0x3f, r0	; 63
 256:	0f 90       	pop	r0
 258:	1f 90       	pop	r1
 25a:	18 95       	reti

0000025c <__vector_3>:

ISR(TIMER1_COMPA_vect) // timer 1 compare A interrupt
{
 25c:	1f 92       	push	r1
 25e:	0f 92       	push	r0
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	0f 92       	push	r0
 264:	11 24       	eor	r1, r1

}
 266:	0f 90       	pop	r0
 268:	0f be       	out	0x3f, r0	; 63
 26a:	0f 90       	pop	r0
 26c:	1f 90       	pop	r1
 26e:	18 95       	reti

00000270 <__vector_9>:

ISR(TIMER1_COMPB_vect) // timer 1 compare B interrupt
{
 270:	1f 92       	push	r1
 272:	0f 92       	push	r0
 274:	0f b6       	in	r0, 0x3f	; 63
 276:	0f 92       	push	r0
 278:	11 24       	eor	r1, r1

}
 27a:	0f 90       	pop	r0
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	0f 90       	pop	r0
 280:	1f 90       	pop	r1
 282:	18 95       	reti

00000284 <__vector_5>:

// Timer 2  timeout= 1.000 ms, fosc = 8.0000 MHz 
//=========================================

ISR (TIMER0_OVF_vect)
{
 284:	1f 92       	push	r1
 286:	0f 92       	push	r0
 288:	0f b6       	in	r0, 0x3f	; 63
 28a:	0f 92       	push	r0
 28c:	11 24       	eor	r1, r1
 28e:	2f 93       	push	r18
 290:	3f 93       	push	r19
 292:	4f 93       	push	r20
 294:	5f 93       	push	r21
 296:	6f 93       	push	r22
 298:	7f 93       	push	r23
 29a:	8f 93       	push	r24
 29c:	9f 93       	push	r25
 29e:	af 93       	push	r26
 2a0:	bf 93       	push	r27
 2a2:	ef 93       	push	r30
 2a4:	ff 93       	push	r31
	TCNT0 = 256 - 125; 
 2a6:	83 e8       	ldi	r24, 0x83	; 131
 2a8:	82 bf       	out	0x32, r24	; 50

    if (++repeat_cnt0 == 1) 
 2aa:	80 91 60 00 	lds	r24, 0x0060
 2ae:	90 91 61 00 	lds	r25, 0x0061
 2b2:	01 96       	adiw	r24, 0x01	; 1
 2b4:	90 93 61 00 	sts	0x0061, r25
 2b8:	80 93 60 00 	sts	0x0060, r24
 2bc:	80 91 60 00 	lds	r24, 0x0060
 2c0:	90 91 61 00 	lds	r25, 0x0061
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	71 f5       	brne	.+92     	; 0x324 <__vector_5+0xa0>
    {
        repeat_cnt0 = 0; 
 2c8:	10 92 61 00 	sts	0x0061, r1
 2cc:	10 92 60 00 	sts	0x0060, r1
		
         msCountedTimer0++;
 2d0:	80 91 64 00 	lds	r24, 0x0064
 2d4:	90 91 65 00 	lds	r25, 0x0065
 2d8:	01 96       	adiw	r24, 0x01	; 1
 2da:	90 93 65 00 	sts	0x0065, r25
 2de:	80 93 64 00 	sts	0x0064, r24
		 if(msCountedTimer0 % 50 == 0)
 2e2:	80 91 64 00 	lds	r24, 0x0064
 2e6:	90 91 65 00 	lds	r25, 0x0065
			  //else
			  //{
				//  Led2_off();
			  //}
		 }
         if(msCountedTimer0 % 100 == 0)
 2ea:	80 91 64 00 	lds	r24, 0x0064
 2ee:	90 91 65 00 	lds	r25, 0x0065
 2f2:	64 e6       	ldi	r22, 0x64	; 100
 2f4:	70 e0       	ldi	r23, 0x00	; 0
 2f6:	27 d0       	rcall	.+78     	; 0x346 <__udivmodhi4>
 2f8:	89 2b       	or	r24, r25
 2fa:	a1 f4       	brne	.+40     	; 0x324 <__vector_5+0xa0>
         {
			  if(buttonIsPressed(1))
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	40 df       	rcall	.-384    	; 0x182 <buttonIsPressed>
 302:	89 2b       	or	r24, r25
 304:	51 f0       	breq	.+20     	; 0x31a <__vector_5+0x96>
			  {
				  msCountedTimer0 = 0;
 306:	10 92 65 00 	sts	0x0065, r1
 30a:	10 92 64 00 	sts	0x0064, r1
				  Led1_on();
 30e:	e8 e3       	ldi	r30, 0x38	; 56
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	80 81       	ld	r24, Z
 314:	8d 7f       	andi	r24, 0xFD	; 253
 316:	80 83       	st	Z, r24
 318:	05 c0       	rjmp	.+10     	; 0x324 <__vector_5+0xa0>
			  }
			  else
			  {
				  Led1_off();
 31a:	e8 e3       	ldi	r30, 0x38	; 56
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	80 81       	ld	r24, Z
 320:	82 60       	ori	r24, 0x02	; 2
 322:	80 83       	st	Z, r24
			  }
		 }
		 
     }
}
 324:	ff 91       	pop	r31
 326:	ef 91       	pop	r30
 328:	bf 91       	pop	r27
 32a:	af 91       	pop	r26
 32c:	9f 91       	pop	r25
 32e:	8f 91       	pop	r24
 330:	7f 91       	pop	r23
 332:	6f 91       	pop	r22
 334:	5f 91       	pop	r21
 336:	4f 91       	pop	r20
 338:	3f 91       	pop	r19
 33a:	2f 91       	pop	r18
 33c:	0f 90       	pop	r0
 33e:	0f be       	out	0x3f, r0	; 63
 340:	0f 90       	pop	r0
 342:	1f 90       	pop	r1
 344:	18 95       	reti

00000346 <__udivmodhi4>:
 346:	aa 1b       	sub	r26, r26
 348:	bb 1b       	sub	r27, r27
 34a:	51 e1       	ldi	r21, 0x11	; 17
 34c:	07 c0       	rjmp	.+14     	; 0x35c <__udivmodhi4_ep>

0000034e <__udivmodhi4_loop>:
 34e:	aa 1f       	adc	r26, r26
 350:	bb 1f       	adc	r27, r27
 352:	a6 17       	cp	r26, r22
 354:	b7 07       	cpc	r27, r23
 356:	10 f0       	brcs	.+4      	; 0x35c <__udivmodhi4_ep>
 358:	a6 1b       	sub	r26, r22
 35a:	b7 0b       	sbc	r27, r23

0000035c <__udivmodhi4_ep>:
 35c:	88 1f       	adc	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	5a 95       	dec	r21
 362:	a9 f7       	brne	.-22     	; 0x34e <__udivmodhi4_loop>
 364:	80 95       	com	r24
 366:	90 95       	com	r25
 368:	bc 01       	movw	r22, r24
 36a:	cd 01       	movw	r24, r26
 36c:	08 95       	ret

0000036e <_exit>:
 36e:	f8 94       	cli

00000370 <__stop_program>:
 370:	ff cf       	rjmp	.-2      	; 0x370 <__stop_program>
