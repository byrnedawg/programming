
Atmega644DRI_V2_0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001c0  00800100  00004b52  00004be6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004b52  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000476  008002c0  008002c0  00004da6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004da6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001e0  00000000  00000000  00004e02  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003486  00000000  00000000  00004fe2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066d  00000000  00000000  00008468  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bec  00000000  00000000  00008ad5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000700  00000000  00000000  000096c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000879  00000000  00000000  00009dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000217c  00000000  00000000  0000a63d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000220  00000000  00000000  0000c7b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e9 10 	jmp	0x21d2	; 0x21d2 <__ctors_end>
       4:	0c 94 06 11 	jmp	0x220c	; 0x220c <__bad_interrupt>
       8:	0c 94 06 11 	jmp	0x220c	; 0x220c <__bad_interrupt>
       c:	0c 94 06 11 	jmp	0x220c	; 0x220c <__bad_interrupt>
      10:	0c 94 06 11 	jmp	0x220c	; 0x220c <__bad_interrupt>
      14:	0c 94 06 11 	jmp	0x220c	; 0x220c <__bad_interrupt>
      18:	0c 94 06 11 	jmp	0x220c	; 0x220c <__bad_interrupt>
      1c:	0c 94 06 11 	jmp	0x220c	; 0x220c <__bad_interrupt>
      20:	0c 94 06 11 	jmp	0x220c	; 0x220c <__bad_interrupt>
      24:	0c 94 06 11 	jmp	0x220c	; 0x220c <__bad_interrupt>
      28:	0c 94 06 11 	jmp	0x220c	; 0x220c <__bad_interrupt>
      2c:	0c 94 06 11 	jmp	0x220c	; 0x220c <__bad_interrupt>
      30:	0c 94 06 11 	jmp	0x220c	; 0x220c <__bad_interrupt>
      34:	0c 94 06 11 	jmp	0x220c	; 0x220c <__bad_interrupt>
      38:	0c 94 06 11 	jmp	0x220c	; 0x220c <__bad_interrupt>
      3c:	0c 94 06 11 	jmp	0x220c	; 0x220c <__bad_interrupt>
      40:	0c 94 06 11 	jmp	0x220c	; 0x220c <__bad_interrupt>
      44:	0c 94 06 11 	jmp	0x220c	; 0x220c <__bad_interrupt>
      48:	0c 94 86 1b 	jmp	0x370c	; 0x370c <__vector_18>
      4c:	0c 94 06 11 	jmp	0x220c	; 0x220c <__bad_interrupt>
      50:	0c 94 06 11 	jmp	0x220c	; 0x220c <__bad_interrupt>
      54:	0c 94 06 11 	jmp	0x220c	; 0x220c <__bad_interrupt>
      58:	0c 94 06 11 	jmp	0x220c	; 0x220c <__bad_interrupt>
      5c:	0c 94 06 11 	jmp	0x220c	; 0x220c <__bad_interrupt>
      60:	0c 94 06 11 	jmp	0x220c	; 0x220c <__bad_interrupt>
      64:	0c 94 06 11 	jmp	0x220c	; 0x220c <__bad_interrupt>
      68:	0c 94 06 11 	jmp	0x220c	; 0x220c <__bad_interrupt>
      6c:	0c 94 06 11 	jmp	0x220c	; 0x220c <__bad_interrupt>
      70:	0c 94 06 11 	jmp	0x220c	; 0x220c <__bad_interrupt>
      74:	0c 94 06 11 	jmp	0x220c	; 0x220c <__bad_interrupt>
      78:	0c 94 06 11 	jmp	0x220c	; 0x220c <__bad_interrupt>
      7c:	03 6e       	ori	r16, 0xE3	; 227
      7e:	db 36       	cpi	r29, 0x6B	; 107
      80:	3d 9a       	sbi	0x07, 5	; 7
      82:	99 99       	sbic	0x13, 1	; 19
      84:	99 3d       	cpi	r25, 0xD9	; 217
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	3e 00       	.word	0x003e	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 4a       	sbci	r16, 0xA8	; 168
      92:	d7 3b       	cpi	r29, 0xB7	; 183
      94:	3b ce       	rjmp	.-906    	; 0xfffffd0c <__eeprom_end+0xff7efd0c>
      96:	01 6e       	ori	r16, 0xE1	; 225
      98:	84 bc       	out	0x24, r8	; 36
      9a:	bf fd       	.word	0xfdbf	; ????
      9c:	c1 2f       	mov	r28, r17
      9e:	3d 6c       	ori	r19, 0xCD	; 205
      a0:	74 31       	cpi	r23, 0x14	; 20
      a2:	9a bd       	out	0x2a, r25	; 42
      a4:	56 83       	std	Z+6, r21	; 0x06
      a6:	3d da       	rcall	.-2950   	; 0xfffff522 <__eeprom_end+0xff7ef522>
      a8:	3d 00       	.word	0x003d	; ????
      aa:	c7 7f       	andi	r28, 0xF7	; 247
      ac:	11 be       	out	0x31, r1	; 49
      ae:	d9 e4       	ldi	r29, 0x49	; 73
      b0:	bb 4c       	sbci	r27, 0xCB	; 203
      b2:	3e 91       	ld	r19, -X
      b4:	6b aa       	std	Y+51, r6	; 0x33
      b6:	aa be       	out	0x3a, r10	; 58
      b8:	00 00       	nop
      ba:	00 80       	ld	r0, Z
      bc:	3f 07       	cpc	r19, r31
      be:	2c 7a       	andi	r18, 0xAC	; 172
      c0:	a5 ba       	out	0x15, r10	; 21
      c2:	6c c5       	rjmp	.+2776   	; 0xb9c <M769ch1+0x2b8>
      c4:	90 da       	rcall	.-2784   	; 0xfffff5e6 <__eeprom_end+0xff7ef5e6>
      c6:	3b 93       	.word	0x933b	; ????
      c8:	65 fc       	sbrc	r6, 5
      ca:	8b bc       	out	0x2b, r8	; 43
      cc:	53 f8       	bld	r5, 3
      ce:	10 fd       	sbrc	r17, 0
      d0:	3c 56       	subi	r19, 0x6C	; 108
      d2:	92 83       	std	Z+2, r25	; 0x02
      d4:	4d bd       	out	0x2d, r20	; 45
      d6:	87 9d       	mul	r24, r7
      d8:	3a b6       	in	r3, 0x3a	; 58
      da:	3d cb       	rjmp	.-2438   	; 0xfffff756 <__eeprom_end+0xff7ef756>
      dc:	c9 bf       	out	0x39, r28	; 57
      de:	5b be       	out	0x3b, r5	; 59
      e0:	73 da       	rcall	.-2842   	; 0xfffff5c8 <__eeprom_end+0xff7ef5c8>
      e2:	0f c9       	rjmp	.-3554   	; 0xfffff302 <__eeprom_end+0xff7ef302>
      e4:	3f 00       	.word	0x003f	; ????

000000e6 <M721fuzetimes>:
      e6:	c0 00 c1 00 c1 00 c1 00 c1 00 c1 00 c1 00 c1 00     ................
      f6:	c1 00 c1 00 c1 00 c1 00 c2 00 c2 00 c2 00 c2 00     ................
     106:	c2 00 c2 00 c2 00 c2 00 c2 00 c2 00 c2 00 c2 00     ................
     116:	c2 00 c2 00 c2 00 c2 00 c2 00 c2 00 c2 00 c2 00     ................
     126:	c2 00 c2 00 c2 00 c2 00 c2 00 c2 00 c2 00 c2 00     ................
     136:	c2 00 c2 00 c2 00 c2 00 c2 00 c2 00 c2 00 c2 00     ................
     146:	c2 00 c2 00 c2 00 c2 00 c1 00 c1 00 c1 00 c1 00     ................
     156:	c1 00 c1 00 c1 00 c1 00 c1 00 c1 00 c1 00 c0 00     ................
     166:	c0 00 c0 00 c0 00 c0 00 c0 00 c0 00 c0 00 c0 00     ................
     176:	bf 00 bf 00 bf 00 bf 00 bf 00 bf 00 be 00 be 00     ................
     186:	be 00 be 00 be 00 be 00 bd 00 bd 00 bd 00 bd 00     ................
     196:	bd 00 bc 00 bc 00 bc 00 bc 00 bc 00 bb 00 bb 00     ................
     1a6:	bb 00 bb 00 ba 00 ba 00 ba 00 ba 00 b9 00 b9 00     ................
     1b6:	b9 00 b8 00 b8 00 b8 00 b8 00 b7 00 b7 00 b7 00     ................
     1c6:	b6 00 b6 00 b5 00 b5 00 b5 00 b4 00 b4 00 b4 00     ................
     1d6:	b3 00 b3 00 b2 00 b2 00 b1 00 b1 00 b0 00 b0 00     ................
     1e6:	af 00 af 00 ae 00 ad 00 ad 00 ac 00 ac 00 ab 00     ................
     1f6:	aa 00 a9 00 a9 00 a8 00 a7 00 a6 00 a5 00 a4 00     ................
     206:	a3 00 a2 00 a1 00 a0 00 9e 00 9d 00 9b 00 99 00     ................
     216:	96 00                                               ..

00000218 <M721ch1>:
     218:	b4 00 e5 05 b9 00 e2 05 be 00 e0 05 c3 00 dd 05     ................
     228:	c8 00 db 05 cd 00 d8 05 d2 00 d6 05 d7 00 d4 05     ................
     238:	dc 00 d1 05 e1 00 cf 05 e6 00 cd 05 eb 00 ca 05     ................
     248:	f0 00 c8 05 f5 00 c5 05 fa 00 c3 05 ff 00 c1 05     ................
     258:	04 01 be 05 09 01 bc 05 0e 01 b9 05 13 01 b7 05     ................
     268:	18 01 b5 05 1d 01 b2 05 22 01 b0 05 27 01 ad 05     ........"...'...
     278:	2c 01 ab 05 31 01 a9 05 36 01 a6 05 3b 01 a4 05     ,...1...6...;...
     288:	40 01 a1 05 45 01 9f 05 4a 01 9d 05 4f 01 9a 05     @...E...J...O...
     298:	54 01 98 05 59 01 95 05 5e 01 93 05 63 01 90 05     T...Y...^...c...
     2a8:	68 01 8e 05 6d 01 8c 05 72 01 89 05 77 01 87 05     h...m...r...w...
     2b8:	7c 01 84 05 81 01 82 05 86 01 7f 05 8b 01 7d 05     |.............}.
     2c8:	90 01 7a 05 95 01 78 05 9a 01 76 05 9f 01 73 05     ..z...x...v...s.
     2d8:	a4 01 71 05 a9 01 6e 05 ae 01 6c 05 b3 01 69 05     ..q...n...l...i.
     2e8:	b8 01 67 05 bd 01 64 05 c2 01 62 05 c7 01 5f 05     ..g...d...b..._.
     2f8:	cc 01 5c 05 d1 01 5a 05 d6 01 57 05 db 01 55 05     ..\...Z...W...U.
     308:	e0 01 52 05 e5 01 50 05 ea 01 4d 05 ef 01 4a 05     ..R...P...M...J.
     318:	f4 01 48 05 f9 01 45 05 fe 01 43 05 03 02 40 05     ..H...E...C...@.
     328:	08 02 3d 05 0d 02 3b 05 12 02 38 05 17 02 35 05     ..=...;...8...5.
     338:	1c 02 33 05 21 02 30 05 26 02 2d 05 2b 02 2b 05     ..3.!.0.&.-.+.+.
     348:	30 02 28 05 35 02 25 05 3a 02 22 05 3f 02 20 05     0.(.5.%.:.".?. .
     358:	44 02 1d 05 49 02 1a 05 4e 02 17 05 53 02 14 05     D...I...N...S...
     368:	58 02 12 05 5d 02 0f 05 62 02 0c 05 67 02 09 05     X...]...b...g...
     378:	6c 02 06 05 71 02 03 05 76 02 00 05 7b 02 fd 04     l...q...v...{...
     388:	80 02 fa 04 85 02 f7 04 8a 02 f4 04 8f 02 f1 04     ................
     398:	94 02 ee 04 99 02 eb 04 9e 02 e8 04 a3 02 e5 04     ................
     3a8:	a8 02 e2 04 ad 02 df 04 b2 02 db 04 b7 02 d8 04     ................
     3b8:	bc 02 d5 04 c1 02 d2 04 c6 02 ce 04 cb 02 cb 04     ................
     3c8:	d0 02 c8 04 d5 02 c4 04 da 02 c1 04 df 02 bd 04     ................
     3d8:	e4 02 ba 04 e9 02 b6 04 ee 02 b3 04 f3 02 af 04     ................
     3e8:	f8 02 ab 04 fd 02 a8 04 02 03 a4 04 07 03 a0 04     ................
     3f8:	0c 03 9c 04 11 03 98 04 16 03 94 04 1b 03 90 04     ................
     408:	20 03 8c 04 25 03 88 04 2a 03 83 04 2f 03 7f 04      ...%...*.../...
     418:	34 03 7b 04 39 03 76 04 3e 03 72 04 43 03 6d 04     4.{.9.v.>.r.C.m.
     428:	48 03 68 04 4d 03 63 04 52 03 5e 04 57 03 59 04     H.h.M.c.R.^.W.Y.
     438:	5c 03 54 04 61 03 4e 04 66 03 49 04 6b 03 43 04     \.T.a.N.f.I.k.C.
     448:	70 03 3d 04 75 03 37 04 7a 03 31 04 7f 03 2a 04     p.=.u.7.z.1...*.
     458:	84 03 23 04 89 03 1c 04 8e 03 14 04 93 03 0c 04     ..#.............
     468:	98 03 03 04 9d 03 f9 03 a2 03 ee 03 a7 03 e1 03     ................
     478:	ac 03 d1 03                                         ....

0000047c <M888ch1>:
     47c:	d2 00 e8 05 d7 00 e6 05 dc 00 e4 05 e1 00 e1 05     ................
     48c:	e6 00 df 05 eb 00 dd 05 f0 00 db 05 f5 00 d9 05     ................
     49c:	fa 00 d7 05 ff 00 d5 05 04 01 d3 05 09 01 d1 05     ................
     4ac:	0e 01 cf 05 13 01 cd 05 18 01 cb 05 1d 01 c9 05     ................
     4bc:	22 01 c7 05 27 01 c5 05 2c 01 c3 05 31 01 c1 05     "...'...,...1...
     4cc:	36 01 bf 05 3b 01 bd 05 40 01 bb 05 45 01 b9 05     6...;...@...E...
     4dc:	4a 01 b7 05 4f 01 b5 05 54 01 b3 05 59 01 b1 05     J...O...T...Y...
     4ec:	5e 01 af 05 63 01 ac 05 68 01 aa 05 6d 01 a8 05     ^...c...h...m...
     4fc:	72 01 a6 05 77 01 a4 05 7c 01 a2 05 81 01 a0 05     r...w...|.......
     50c:	86 01 9e 05 8b 01 9c 05 90 01 9a 05 95 01 98 05     ................
     51c:	9a 01 96 05 9f 01 94 05 a4 01 92 05 a9 01 90 05     ................
     52c:	ae 01 8e 05 b3 01 8c 05 b8 01 89 05 bd 01 87 05     ................
     53c:	c2 01 85 05 c7 01 83 05 cc 01 81 05 d1 01 7f 05     ................
     54c:	d6 01 7d 05 db 01 7b 05 e0 01 79 05 e5 01 77 05     ..}...{...y...w.
     55c:	ea 01 75 05 ef 01 72 05 f4 01 70 05 f9 01 6e 05     ..u...r...p...n.
     56c:	fe 01 6c 05 03 02 6a 05 08 02 68 05 0d 02 66 05     ..l...j...h...f.
     57c:	12 02 64 05 17 02 61 05 1c 02 5f 05 21 02 5d 05     ..d...a..._.!.].
     58c:	26 02 5b 05 2b 02 59 05 30 02 57 05 35 02 54 05     &.[.+.Y.0.W.5.T.
     59c:	3a 02 52 05 3f 02 50 05 44 02 4e 05 49 02 4c 05     :.R.?.P.D.N.I.L.
     5ac:	4e 02 4a 05 53 02 47 05 58 02 45 05 5d 02 43 05     N.J.S.G.X.E.].C.
     5bc:	62 02 41 05 67 02 3f 05 6c 02 3c 05 71 02 3a 05     b.A.g.?.l.<.q.:.
     5cc:	76 02 38 05 7b 02 36 05 80 02 33 05 85 02 31 05     v.8.{.6...3...1.
     5dc:	8a 02 2f 05 8f 02 2d 05 94 02 2a 05 99 02 28 05     ../...-...*...(.
     5ec:	9e 02 26 05 a3 02 24 05 a8 02 21 05 ad 02 1f 05     ..&...$...!.....
     5fc:	b2 02 1d 05 b7 02 1a 05 bc 02 18 05 c1 02 16 05     ................
     60c:	c6 02 13 05 cb 02 11 05 d0 02 0f 05 d5 02 0c 05     ................
     61c:	da 02 0a 05 df 02 08 05 e4 02 05 05 e9 02 03 05     ................
     62c:	ee 02 00 05 f3 02 fe 04 f8 02 fc 04 fd 02 f9 04     ................
     63c:	02 03 f7 04 07 03 f4 04 0c 03 f2 04 11 03 ef 04     ................
     64c:	16 03 ed 04 1b 03 ea 04 20 03 e8 04 25 03 e5 04     ........ ...%...
     65c:	2a 03 e3 04 2f 03 e0 04 34 03 de 04 39 03 db 04     *.../...4...9...
     66c:	3e 03 d9 04 43 03 d6 04 48 03 d4 04 4d 03 d1 04     >...C...H...M...
     67c:	52 03 ce 04 57 03 cc 04 5c 03 c9 04 61 03 c6 04     R...W...\...a...
     68c:	66 03 c4 04 6b 03 c1 04 70 03 be 04 75 03 bc 04     f...k...p...u...
     69c:	7a 03 b9 04 7f 03 b6 04 84 03 b3 04 89 03 b1 04     z...............
     6ac:	8e 03 ae 04 93 03 ab 04 98 03 a8 04 9d 03 a5 04     ................
     6bc:	a2 03 a2 04 a7 03 9f 04 ac 03 9c 04 b1 03 9a 04     ................
     6cc:	b6 03 97 04 bb 03 94 04 c0 03 91 04 c5 03 8e 04     ................
     6dc:	ca 03 8b 04 cf 03 87 04 d4 03 84 04 d9 03 81 04     ................
     6ec:	de 03 7e 04 e3 03 7b 04 e8 03 78 04 ed 03 75 04     ..~...{...x...u.
     6fc:	f2 03 71 04 f7 03 6e 04 fc 03 6b 04 01 04 67 04     ..q...n...k...g.
     70c:	06 04 64 04 0b 04 61 04 10 04 5d 04 15 04 5a 04     ..d...a...]...Z.
     71c:	1a 04 56 04 1f 04 53 04 24 04 4f 04 29 04 4c 04     ..V...S.$.O.).L.
     72c:	2e 04 48 04 33 04 44 04 38 04 41 04 3d 04 3d 04     ..H.3.D.8.A.=.=.
     73c:	42 04 39 04 47 04 35 04 4c 04 31 04 51 04 2d 04     B.9.G.5.L.1.Q.-.
     74c:	56 04 2a 04 5b 04 26 04 60 04 21 04 65 04 1d 04     V.*.[.&.`.!.e...
     75c:	6a 04 19 04 6f 04 15 04 74 04 11 04 79 04 0c 04     j...o...t...y...
     76c:	7e 04 08 04 83 04 03 04 88 04 ff 03 8d 04 fa 03     ~...............
     77c:	92 04 f5 03 97 04 f0 03 9c 04 eb 03 a1 04 e6 03     ................
     78c:	a6 04 e1 03 ab 04 dc 03 b0 04 d6 03 b5 04 d1 03     ................
     79c:	ba 04 cb 03 bf 04 c5 03 c4 04 bf 03 c9 04 b9 03     ................
     7ac:	ce 04 b2 03 d3 04 ab 03 d8 04 a4 03 dd 04 9d 03     ................
     7bc:	e2 04 95 03 e7 04 8d 03 ec 04 84 03 f1 04 7a 03     ..............z.
     7cc:	f6 04 70 03 fb 04 64 03 00 05 57 03 05 05 46 03     ..p...d...W...F.
     7dc:	0a 05 30 03                                         ..0.

000007e0 <M888ch0>:
     7e0:	41 00 e6 05 46 00 e0 05 4b 00 d9 05 50 00 d2 05     A...F...K...P...
     7f0:	55 00 cb 05 5a 00 c5 05 5f 00 be 05 64 00 b7 05     U...Z..._...d...
     800:	69 00 b0 05 6e 00 aa 05 73 00 a3 05 78 00 9c 05     i...n...s...x...
     810:	7d 00 95 05 82 00 8e 05 87 00 87 05 8c 00 80 05     }...............
     820:	91 00 79 05 96 00 72 05 9b 00 6b 05 a0 00 64 05     ..y...r...k...d.
     830:	a5 00 5d 05 aa 00 56 05 af 00 4e 05 b4 00 47 05     ..]...V...N...G.
     840:	b9 00 40 05 be 00 38 05 c3 00 31 05 c8 00 29 05     ..@...8...1...).
     850:	cd 00 22 05 d2 00 1a 05 d7 00 12 05 dc 00 0a 05     ..".............
     860:	e1 00 02 05 e6 00 fa 04 eb 00 f2 04 f0 00 ea 04     ................
     870:	f5 00 e1 04 fa 00 d9 04 ff 00 d0 04 04 01 c7 04     ................
     880:	09 01 be 04 0e 01 b5 04 13 01 ac 04 18 01 a2 04     ................
     890:	1d 01 99 04 22 01 8f 04 27 01 85 04 2c 01 7a 04     ...."...'...,.z.
     8a0:	31 01 70 04 36 01 65 04 3b 01 5a 04 40 01 4e 04     1.p.6.e.;.Z.@.N.
     8b0:	45 01 42 04 4a 01 35 04 4f 01 28 04 54 01 1b 04     E.B.J.5.O.(.T...
     8c0:	59 01 0c 04 5e 01 fd 03 63 01 ed 03 68 01 dc 03     Y...^...c...h...
     8d0:	6d 01 c9 03 72 01 b3 03 77 01 9b 03 7c 01 7c 03     m...r...w...|.|.
     8e0:	81 01 4e 03                                         ..N.

000008e4 <M769ch1>:
     8e4:	e1 00 e6 05 e6 00 e4 05 eb 00 e2 05 f0 00 e0 05     ................
     8f4:	f5 00 de 05 fa 00 dc 05 ff 00 da 05 04 01 d8 05     ................
     904:	09 01 d6 05 0e 01 d4 05 13 01 d2 05 18 01 d0 05     ................
     914:	1d 01 cf 05 22 01 cd 05 27 01 cb 05 2c 01 c9 05     ...."...'...,...
     924:	31 01 c7 05 36 01 c5 05 3b 01 c3 05 40 01 c1 05     1...6...;...@...
     934:	45 01 bf 05 4a 01 bd 05 4f 01 bb 05 54 01 b9 05     E...J...O...T...
     944:	59 01 b7 05 5e 01 b5 05 63 01 b3 05 68 01 b1 05     Y...^...c...h...
     954:	6d 01 af 05 72 01 ad 05 77 01 ab 05 7c 01 a9 05     m...r...w...|...
     964:	81 01 a7 05 86 01 a5 05 8b 01 a3 05 90 01 a1 05     ................
     974:	95 01 9f 05 9a 01 9d 05 9f 01 9b 05 a4 01 99 05     ................
     984:	a9 01 97 05 ae 01 95 05 b3 01 93 05 b8 01 91 05     ................
     994:	bd 01 8f 05 c2 01 8d 05 c7 01 8b 05 cc 01 89 05     ................
     9a4:	d1 01 87 05 d6 01 85 05 db 01 83 05 e0 01 81 05     ................
     9b4:	e5 01 7f 05 ea 01 7d 05 ef 01 7b 05 f4 01 79 05     ......}...{...y.
     9c4:	f9 01 77 05 fe 01 75 05 03 02 73 05 08 02 71 05     ..w...u...s...q.
     9d4:	0d 02 6f 05 12 02 6d 05 17 02 6b 05 1c 02 69 05     ..o...m...k...i.
     9e4:	21 02 67 05 26 02 65 05 2b 02 63 05 30 02 61 05     !.g.&.e.+.c.0.a.
     9f4:	35 02 5e 05 3a 02 5c 05 3f 02 5a 05 44 02 58 05     5.^.:.\.?.Z.D.X.
     a04:	49 02 56 05 4e 02 54 05 53 02 52 05 58 02 50 05     I.V.N.T.S.R.X.P.
     a14:	5d 02 4e 05 62 02 4c 05 67 02 49 05 6c 02 47 05     ].N.b.L.g.I.l.G.
     a24:	71 02 45 05 76 02 43 05 7b 02 41 05 80 02 3f 05     q.E.v.C.{.A...?.
     a34:	85 02 3d 05 8a 02 3b 05 8f 02 38 05 94 02 36 05     ..=...;...8...6.
     a44:	99 02 34 05 9e 02 32 05 a3 02 30 05 a8 02 2e 05     ..4...2...0.....
     a54:	ad 02 2b 05 b2 02 29 05 b7 02 27 05 bc 02 25 05     ..+...)...'...%.
     a64:	c1 02 23 05 c6 02 20 05 cb 02 1e 05 d0 02 1c 05     ..#... .........
     a74:	d5 02 1a 05 da 02 17 05 df 02 15 05 e4 02 13 05     ................
     a84:	e9 02 11 05 ee 02 0e 05 f3 02 0c 05 f8 02 0a 05     ................
     a94:	fd 02 08 05 02 03 05 05 07 03 03 05 0c 03 01 05     ................
     aa4:	11 03 fe 04 16 03 fc 04 1b 03 fa 04 20 03 f7 04     ............ ...
     ab4:	25 03 f5 04 2a 03 f3 04 2f 03 f0 04 34 03 ee 04     %...*.../...4...
     ac4:	39 03 eb 04 3e 03 e9 04 43 03 e7 04 48 03 e4 04     9...>...C...H...
     ad4:	4d 03 e2 04 52 03 df 04 57 03 dd 04 5c 03 da 04     M...R...W...\...
     ae4:	61 03 d8 04 66 03 d5 04 6b 03 d3 04 70 03 d0 04     a...f...k...p...
     af4:	75 03 ce 04 7a 03 cb 04 7f 03 c9 04 84 03 c6 04     u...z...........
     b04:	89 03 c4 04 8e 03 c1 04 93 03 bf 04 98 03 bc 04     ................
     b14:	9d 03 b9 04 a2 03 b7 04 a7 03 b4 04 ac 03 b2 04     ................
     b24:	b1 03 af 04 b6 03 ac 04 bb 03 aa 04 c0 03 a7 04     ................
     b34:	c5 03 a4 04 ca 03 a1 04 cf 03 9f 04 d4 03 9c 04     ................
     b44:	d9 03 99 04 de 03 96 04 e3 03 93 04 e8 03 91 04     ................
     b54:	ed 03 8e 04 f2 03 8b 04 f7 03 88 04 fc 03 85 04     ................
     b64:	01 04 82 04 06 04 7f 04 0b 04 7c 04 10 04 79 04     ..........|...y.
     b74:	15 04 76 04 1a 04 73 04 1f 04 70 04 24 04 6d 04     ..v...s...p.$.m.
     b84:	29 04 6a 04 2e 04 67 04 33 04 64 04 38 04 60 04     ).j...g.3.d.8.`.
     b94:	3d 04 5d 04 42 04 5a 04 47 04 57 04 4c 04 53 04     =.].B.Z.G.W.L.S.
     ba4:	51 04 50 04 56 04 4d 04 5b 04 49 04 60 04 46 04     Q.P.V.M.[.I.`.F.
     bb4:	65 04 42 04 6a 04 3f 04 6f 04 3b 04 74 04 38 04     e.B.j.?.o.;.t.8.
     bc4:	79 04 34 04 7e 04 30 04 83 04 2d 04 88 04 29 04     y.4.~.0...-...).
     bd4:	8d 04 25 04 92 04 21 04 97 04 1d 04 9c 04 19 04     ..%...!.........
     be4:	a1 04 15 04 a6 04 11 04 ab 04 0d 04 b0 04 09 04     ................
     bf4:	b5 04 05 04 ba 04 00 04 bf 04 fc 03 c4 04 f7 03     ................
     c04:	c9 04 f3 03 ce 04 ee 03 d3 04 e9 03 d8 04 e4 03     ................
     c14:	dd 04 df 03 e2 04 da 03 e7 04 d5 03 ec 04 d0 03     ................
     c24:	f1 04 ca 03 f6 04 c5 03 fb 04 bf 03 00 05 b9 03     ................
     c34:	05 05 b3 03 0a 05 ac 03 0f 05 a5 03 14 05 9e 03     ................
     c44:	19 05 97 03 1e 05 8f 03 23 05 87 03 28 05 7e 03     ........#...(.~.
     c54:	2d 05 74 03 32 05 6a 03 37 05 5e 03 3c 05 51 03     -.t.2.j.7.^.<.Q.
     c64:	41 05 40 03 46 05 28 03                             A.@.F.(.

00000c6c <M769ch0>:
     c6c:	46 00 e1 05 4b 00 da 05 50 00 d3 05 55 00 cd 05     F...K...P...U...
     c7c:	5a 00 c6 05 5f 00 bf 05 64 00 b8 05 69 00 b1 05     Z..._...d...i...
     c8c:	6e 00 aa 05 73 00 a3 05 78 00 9c 05 7d 00 95 05     n...s...x...}...
     c9c:	82 00 8e 05 87 00 87 05 8c 00 80 05 91 00 79 05     ..............y.
     cac:	96 00 72 05 9b 00 6a 05 a0 00 63 05 a5 00 5c 05     ..r...j...c...\.
     cbc:	aa 00 55 05 af 00 4d 05 b4 00 46 05 b9 00 3e 05     ..U...M...F...>.
     ccc:	be 00 36 05 c3 00 2f 05 c8 00 27 05 cd 00 1f 05     ..6.../...'.....
     cdc:	d2 00 17 05 d7 00 0f 05 dc 00 07 05 e1 00 ff 04     ................
     cec:	e6 00 f7 04 eb 00 ef 04 f0 00 e6 04 f5 00 de 04     ................
     cfc:	fa 00 d5 04 ff 00 cc 04 04 01 c3 04 09 01 ba 04     ................
     d0c:	0e 01 b1 04 13 01 a7 04 18 01 9e 04 1d 01 94 04     ................
     d1c:	22 01 8a 04 27 01 7f 04 2c 01 75 04 31 01 6a 04     "...'...,.u.1.j.
     d2c:	36 01 5f 04 3b 01 53 04 40 01 48 04 45 01 3b 04     6._.;.S.@.H.E.;.
     d3c:	4a 01 2e 04 4f 01 21 04 54 01 13 04 59 01 04 04     J...O.!.T...Y...
     d4c:	5e 01 f4 03 63 01 e3 03 68 01 d1 03 6d 01 bd 03     ^...c...h...m...
     d5c:	72 01 a5 03 77 01 8a 03 7c 01 64 03                 r...w...|.d.

00000d68 <M722A1ch1>:
     d68:	e1 00 e5 05 e6 00 e3 05 eb 00 e1 05 f0 00 df 05     ................
     d78:	f5 00 dd 05 fa 00 db 05 ff 00 d9 05 04 01 d7 05     ................
     d88:	09 01 d6 05 0e 01 d4 05 13 01 d2 05 18 01 d0 05     ................
     d98:	1d 01 ce 05 22 01 cc 05 27 01 ca 05 2c 01 c8 05     ...."...'...,...
     da8:	31 01 c6 05 36 01 c4 05 3b 01 c2 05 40 01 c0 05     1...6...;...@...
     db8:	45 01 be 05 4a 01 bc 05 4f 01 ba 05 54 01 b8 05     E...J...O...T...
     dc8:	59 01 b6 05 5e 01 b4 05 63 01 b2 05 68 01 b0 05     Y...^...c...h...
     dd8:	6d 01 ae 05 72 01 ac 05 77 01 aa 05 7c 01 a8 05     m...r...w...|...
     de8:	81 01 a6 05 86 01 a4 05 8b 01 a2 05 90 01 a0 05     ................
     df8:	95 01 9e 05 9a 01 9c 05 9f 01 9a 05 a4 01 98 05     ................
     e08:	a9 01 96 05 ae 01 94 05 b3 01 92 05 b8 01 90 05     ................
     e18:	bd 01 8e 05 c2 01 8c 05 c7 01 8a 05 cc 01 88 05     ................
     e28:	d1 01 86 05 d6 01 84 05 db 01 82 05 e0 01 80 05     ................
     e38:	e5 01 7e 05 ea 01 7c 05 ef 01 7a 05 f4 01 78 05     ..~...|...z...x.
     e48:	f9 01 76 05 fe 01 73 05 03 02 71 05 08 02 6f 05     ..v...s...q...o.
     e58:	0d 02 6d 05 12 02 6b 05 17 02 69 05 1c 02 67 05     ..m...k...i...g.
     e68:	21 02 65 05 26 02 63 05 2b 02 61 05 30 02 5f 05     !.e.&.c.+.a.0._.
     e78:	35 02 5d 05 3a 02 5b 05 3f 02 59 05 44 02 56 05     5.].:.[.?.Y.D.V.
     e88:	49 02 54 05 4e 02 52 05 53 02 50 05 58 02 4e 05     I.T.N.R.S.P.X.N.
     e98:	5d 02 4c 05 62 02 4a 05 67 02 48 05 6c 02 45 05     ].L.b.J.g.H.l.E.
     ea8:	71 02 43 05 76 02 41 05 7b 02 3f 05 80 02 3d 05     q.C.v.A.{.?...=.
     eb8:	85 02 3b 05 8a 02 38 05 8f 02 36 05 94 02 34 05     ..;...8...6...4.
     ec8:	99 02 32 05 9e 02 30 05 a3 02 2e 05 a8 02 2b 05     ..2...0.......+.
     ed8:	ad 02 29 05 b2 02 27 05 b7 02 25 05 bc 02 23 05     ..)...'...%...#.
     ee8:	c1 02 20 05 c6 02 1e 05 cb 02 1c 05 d0 02 1a 05     .. .............
     ef8:	d5 02 17 05 da 02 15 05 df 02 13 05 e4 02 10 05     ................
     f08:	e9 02 0e 05 ee 02 0c 05 f3 02 0a 05 f8 02 07 05     ................
     f18:	fd 02 05 05 02 03 03 05 07 03 00 05 0c 03 fe 04     ................
     f28:	11 03 fc 04 16 03 f9 04 1b 03 f7 04 20 03 f5 04     ............ ...
     f38:	25 03 f2 04 2a 03 f0 04 2f 03 ed 04 34 03 eb 04     %...*.../...4...
     f48:	39 03 e9 04 3e 03 e6 04 43 03 e4 04 48 03 e1 04     9...>...C...H...
     f58:	4d 03 df 04 52 03 dc 04 57 03 da 04 5c 03 d7 04     M...R...W...\...
     f68:	61 03 d5 04 66 03 d2 04 6b 03 d0 04 70 03 cd 04     a...f...k...p...
     f78:	75 03 cb 04 7a 03 c8 04 7f 03 c6 04 84 03 c3 04     u...z...........
     f88:	89 03 c1 04 8e 03 be 04 93 03 bb 04 98 03 b9 04     ................
     f98:	9d 03 b6 04 a2 03 b3 04 a7 03 b1 04 ac 03 ae 04     ................
     fa8:	b1 03 ab 04 b6 03 a9 04 bb 03 a6 04 c0 03 a3 04     ................
     fb8:	c5 03 a0 04 ca 03 9e 04 cf 03 9b 04 d4 03 98 04     ................
     fc8:	d9 03 95 04 de 03 92 04 e3 03 8f 04 e8 03 8d 04     ................
     fd8:	ed 03 8a 04 f2 03 87 04 f7 03 84 04 fc 03 81 04     ................
     fe8:	01 04 7e 04 06 04 7b 04 0b 04 78 04 10 04 75 04     ..~...{...x...u.
     ff8:	15 04 72 04 1a 04 6f 04 1f 04 6c 04 24 04 68 04     ..r...o...l.$.h.
    1008:	29 04 65 04 2e 04 62 04 33 04 5f 04 38 04 5c 04     ).e...b.3._.8.\.
    1018:	3d 04 58 04 42 04 55 04 47 04 52 04 4c 04 4e 04     =.X.B.U.G.R.L.N.
    1028:	51 04 4b 04 56 04 47 04 5b 04 44 04 60 04 40 04     Q.K.V.G.[.D.`.@.
    1038:	65 04 3d 04 6a 04 39 04 6f 04 36 04 74 04 32 04     e.=.j.9.o.6.t.2.
    1048:	79 04 2e 04 7e 04 2a 04 83 04 27 04 88 04 23 04     y...~.*...'...#.
    1058:	8d 04 1f 04 92 04 1b 04 97 04 17 04 9c 04 13 04     ................
    1068:	a1 04 0f 04 a6 04 0a 04 ab 04 06 04 b0 04 02 04     ................
    1078:	b5 04 fd 03 ba 04 f9 03 bf 04 f4 03 c4 04 f0 03     ................
    1088:	c9 04 eb 03 ce 04 e6 03 d3 04 e1 03 d8 04 dc 03     ................
    1098:	dd 04 d7 03 e2 04 d1 03 e7 04 cc 03 ec 04 c6 03     ................
    10a8:	f1 04 c0 03 f6 04 ba 03 fb 04 b4 03 00 05 ae 03     ................
    10b8:	05 05 a7 03 0a 05 a0 03 0f 05 99 03 14 05 91 03     ................
    10c8:	19 05 89 03 1e 05 80 03 23 05 77 03 28 05 6c 03     ........#.w.(.l.
    10d8:	2d 05 61 03 32 05 54 03 37 05 44 03 3c 05 2e 03     -.a.2.T.7.D.<...

000010e8 <M722A1ch0>:
    10e8:	46 00 e6 05 4b 00 e0 05 50 00 da 05 55 00 d3 05     F...K...P...U...
    10f8:	5a 00 cd 05 5f 00 c6 05 64 00 c0 05 69 00 b9 05     Z..._...d...i...
    1108:	6e 00 b3 05 73 00 ac 05 78 00 a6 05 7d 00 9f 05     n...s...x...}...
    1118:	82 00 99 05 87 00 92 05 8c 00 8b 05 91 00 85 05     ................
    1128:	96 00 7e 05 9b 00 77 05 a0 00 70 05 a5 00 6a 05     ..~...w...p...j.
    1138:	aa 00 63 05 af 00 5c 05 b4 00 55 05 b9 00 4e 05     ..c...\...U...N.
    1148:	be 00 47 05 c3 00 40 05 c8 00 39 05 cd 00 31 05     ..G...@...9...1.
    1158:	d2 00 2a 05 d7 00 23 05 dc 00 1b 05 e1 00 14 05     ..*...#.........
    1168:	e6 00 0c 05 eb 00 05 05 f0 00 fd 04 f5 00 f5 04     ................
    1178:	fa 00 ed 04 ff 00 e6 04 04 01 dd 04 09 01 d5 04     ................
    1188:	0e 01 cd 04 13 01 c4 04 18 01 bc 04 1d 01 b3 04     ................
    1198:	22 01 aa 04 27 01 a1 04 2c 01 98 04 31 01 8f 04     "...'...,...1...
    11a8:	36 01 85 04 3b 01 7b 04 40 01 71 04 45 01 67 04     6...;.{.@.q.E.g.
    11b8:	4a 01 5c 04 4f 01 52 04 54 01 46 04 59 01 3b 04     J.\.O.R.T.F.Y.;.
    11c8:	5e 01 2f 04 63 01 22 04 68 01 15 04 6d 01 07 04     ^./.c.".h...m...
    11d8:	72 01 f8 03 77 01 e9 03 7c 01 d8 03 81 01 c5 03     r...w...|.......
    11e8:	86 01 b1 03 8b 01 99 03 90 01 7c 03 95 01 52 03     ..........|...R.

000011f8 <M720ch1>:
    11f8:	e1 00 e5 05 e6 00 e3 05 eb 00 e1 05 f0 00 df 05     ................
    1208:	f5 00 dd 05 fa 00 db 05 ff 00 d9 05 04 01 d7 05     ................
    1218:	09 01 d6 05 0e 01 d4 05 13 01 d2 05 18 01 d0 05     ................
    1228:	1d 01 ce 05 22 01 cc 05 27 01 ca 05 2c 01 c8 05     ...."...'...,...
    1238:	31 01 c6 05 36 01 c4 05 3b 01 c2 05 40 01 c0 05     1...6...;...@...
    1248:	45 01 be 05 4a 01 bc 05 4f 01 ba 05 54 01 b8 05     E...J...O...T...
    1258:	59 01 b6 05 5e 01 b4 05 63 01 b2 05 68 01 b0 05     Y...^...c...h...
    1268:	6d 01 ae 05 72 01 ac 05 77 01 aa 05 7c 01 a8 05     m...r...w...|...
    1278:	81 01 a6 05 86 01 a4 05 8b 01 a2 05 90 01 a0 05     ................
    1288:	95 01 9e 05 9a 01 9c 05 9f 01 9a 05 a4 01 98 05     ................
    1298:	a9 01 96 05 ae 01 94 05 b3 01 92 05 b8 01 90 05     ................
    12a8:	bd 01 8e 05 c2 01 8c 05 c7 01 8a 05 cc 01 88 05     ................
    12b8:	d1 01 86 05 d6 01 84 05 db 01 82 05 e0 01 80 05     ................
    12c8:	e5 01 7e 05 ea 01 7c 05 ef 01 7a 05 f4 01 78 05     ..~...|...z...x.
    12d8:	f9 01 76 05 fe 01 73 05 03 02 71 05 08 02 6f 05     ..v...s...q...o.
    12e8:	0d 02 6d 05 12 02 6b 05 17 02 69 05 1c 02 67 05     ..m...k...i...g.
    12f8:	21 02 65 05 26 02 63 05 2b 02 61 05 30 02 5f 05     !.e.&.c.+.a.0._.
    1308:	35 02 5d 05 3a 02 5b 05 3f 02 59 05 44 02 56 05     5.].:.[.?.Y.D.V.
    1318:	49 02 54 05 4e 02 52 05 53 02 50 05 58 02 4e 05     I.T.N.R.S.P.X.N.
    1328:	5d 02 4c 05 62 02 4a 05 67 02 48 05 6c 02 45 05     ].L.b.J.g.H.l.E.
    1338:	71 02 43 05 76 02 41 05 7b 02 3f 05 80 02 3d 05     q.C.v.A.{.?...=.
    1348:	85 02 3b 05 8a 02 38 05 8f 02 36 05 94 02 34 05     ..;...8...6...4.
    1358:	99 02 32 05 9e 02 30 05 a3 02 2e 05 a8 02 2b 05     ..2...0.......+.
    1368:	ad 02 29 05 b2 02 27 05 b7 02 25 05 bc 02 23 05     ..)...'...%...#.
    1378:	c1 02 20 05 c6 02 1e 05 cb 02 1c 05 d0 02 1a 05     .. .............
    1388:	d5 02 17 05 da 02 15 05 df 02 13 05 e4 02 10 05     ................
    1398:	e9 02 0e 05 ee 02 0c 05 f3 02 0a 05 f8 02 07 05     ................
    13a8:	fd 02 05 05 02 03 03 05 07 03 00 05 0c 03 fe 04     ................
    13b8:	11 03 fc 04 16 03 f9 04 1b 03 f7 04 20 03 f5 04     ............ ...
    13c8:	25 03 f2 04 2a 03 f0 04 2f 03 ed 04 34 03 eb 04     %...*.../...4...
    13d8:	39 03 e9 04 3e 03 e6 04 43 03 e4 04 48 03 e1 04     9...>...C...H...
    13e8:	4d 03 df 04 52 03 dc 04 57 03 da 04 5c 03 d7 04     M...R...W...\...
    13f8:	61 03 d5 04 66 03 d2 04 6b 03 d0 04 70 03 cd 04     a...f...k...p...
    1408:	75 03 cb 04 7a 03 c8 04 7f 03 c6 04 84 03 c3 04     u...z...........
    1418:	89 03 c1 04 8e 03 be 04 93 03 bb 04 98 03 b9 04     ................
    1428:	9d 03 b6 04 a2 03 b3 04 a7 03 b1 04 ac 03 ae 04     ................
    1438:	b1 03 ab 04 b6 03 a9 04 bb 03 a6 04 c0 03 a3 04     ................
    1448:	c5 03 a0 04 ca 03 9e 04 cf 03 9b 04 d4 03 98 04     ................
    1458:	d9 03 95 04 de 03 92 04 e3 03 8f 04 e8 03 8d 04     ................
    1468:	ed 03 8a 04 f2 03 87 04 f7 03 84 04 fc 03 81 04     ................
    1478:	01 04 7e 04 06 04 7b 04 0b 04 78 04 10 04 75 04     ..~...{...x...u.
    1488:	15 04 72 04 1a 04 6f 04 1f 04 6c 04 24 04 68 04     ..r...o...l.$.h.
    1498:	29 04 65 04 2e 04 62 04 33 04 5f 04 38 04 5c 04     ).e...b.3._.8.\.
    14a8:	3d 04 58 04 42 04 55 04 47 04 52 04 4c 04 4e 04     =.X.B.U.G.R.L.N.
    14b8:	51 04 4b 04 56 04 47 04 5b 04 44 04 60 04 40 04     Q.K.V.G.[.D.`.@.
    14c8:	65 04 3d 04 6a 04 39 04 6f 04 36 04 74 04 32 04     e.=.j.9.o.6.t.2.
    14d8:	79 04 2e 04 7e 04 2a 04 83 04 27 04 88 04 23 04     y...~.*...'...#.
    14e8:	8d 04 1f 04 92 04 1b 04 97 04 17 04 9c 04 13 04     ................
    14f8:	a1 04 0f 04 a6 04 0a 04 ab 04 06 04 b0 04 02 04     ................
    1508:	b5 04 fd 03 ba 04 f9 03 bf 04 f4 03 c4 04 f0 03     ................
    1518:	c9 04 eb 03 ce 04 e6 03 d3 04 e1 03 d8 04 dc 03     ................
    1528:	dd 04 d7 03 e2 04 d1 03 e7 04 cc 03 ec 04 c6 03     ................
    1538:	f1 04 c0 03 f6 04 ba 03 fb 04 b4 03 00 05 ae 03     ................
    1548:	05 05 a7 03 0a 05 a0 03 0f 05 99 03 14 05 91 03     ................
    1558:	19 05 89 03 1e 05 80 03 23 05 77 03 28 05 6c 03     ........#.w.(.l.
    1568:	2d 05 61 03 32 05 54 03 37 05 44 03 3c 05 2e 03     -.a.2.T.7.D.<...

00001578 <M720ch0>:
    1578:	46 00 e6 05 4b 00 e0 05 50 00 da 05 55 00 d3 05     F...K...P...U...
    1588:	5a 00 cd 05 5f 00 c6 05 64 00 c0 05 69 00 b9 05     Z..._...d...i...
    1598:	6e 00 b3 05 73 00 ac 05 78 00 a6 05 7d 00 9f 05     n...s...x...}...
    15a8:	82 00 99 05 87 00 92 05 8c 00 8b 05 91 00 85 05     ................
    15b8:	96 00 7e 05 9b 00 77 05 a0 00 70 05 a5 00 6a 05     ..~...w...p...j.
    15c8:	aa 00 63 05 af 00 5c 05 b4 00 55 05 b9 00 4e 05     ..c...\...U...N.
    15d8:	be 00 47 05 c3 00 40 05 c8 00 39 05 cd 00 31 05     ..G...@...9...1.
    15e8:	d2 00 2a 05 d7 00 23 05 dc 00 1b 05 e1 00 14 05     ..*...#.........
    15f8:	e6 00 0c 05 eb 00 05 05 f0 00 fd 04 f5 00 f5 04     ................
    1608:	fa 00 ed 04 ff 00 e6 04 04 01 dd 04 09 01 d5 04     ................
    1618:	0e 01 cd 04 13 01 c4 04 18 01 bc 04 1d 01 b3 04     ................
    1628:	22 01 aa 04 27 01 a1 04 2c 01 98 04 31 01 8f 04     "...'...,...1...
    1638:	36 01 85 04 3b 01 7b 04 40 01 71 04 45 01 67 04     6...;.{.@.q.E.g.
    1648:	4a 01 5c 04 4f 01 52 04 54 01 46 04 59 01 3b 04     J.\.O.R.T.F.Y.;.
    1658:	5e 01 2f 04 63 01 22 04 68 01 15 04 6d 01 07 04     ^./.c.".h...m...
    1668:	72 01 f8 03 77 01 e9 03 7c 01 d8 03 81 01 c5 03     r...w...|.......
    1678:	86 01 b1 03 8b 01 99 03 90 01 7c 03 95 01 52 03     ..........|...R.

00001688 <M302A1ch1>:
    1688:	55 00 e5 05 5a 00 df 05 5f 00 da 05 64 00 d5 05     U...Z..._...d...
    1698:	69 00 d0 05 6e 00 cb 05 73 00 c5 05 78 00 c0 05     i...n...s...x...
    16a8:	7d 00 bb 05 82 00 b6 05 87 00 b0 05 8c 00 ab 05     }...............
    16b8:	91 00 a6 05 96 00 a0 05 9b 00 9b 05 a0 00 96 05     ................
    16c8:	a5 00 90 05 aa 00 8b 05 af 00 86 05 b4 00 80 05     ................
    16d8:	b9 00 7b 05 be 00 76 05 c3 00 70 05 c8 00 6b 05     ..{...v...p...k.
    16e8:	cd 00 65 05 d2 00 60 05 d7 00 5a 05 dc 00 55 05     ..e...`...Z...U.
    16f8:	e1 00 4f 05 e6 00 49 05 eb 00 44 05 f0 00 3e 05     ..O...I...D...>.
    1708:	f5 00 38 05 fa 00 33 05 ff 00 2d 05 04 01 27 05     ..8...3...-...'.
    1718:	09 01 21 05 0e 01 1b 05 13 01 15 05 18 01 0f 05     ..!.............
    1728:	1d 01 09 05 22 01 03 05 27 01 fd 04 2c 01 f7 04     ...."...'...,...
    1738:	31 01 f1 04 36 01 eb 04 3b 01 e4 04 40 01 de 04     1...6...;...@...
    1748:	45 01 d7 04 4a 01 d1 04 4f 01 ca 04 54 01 c3 04     E...J...O...T...
    1758:	59 01 bd 04 5e 01 b6 04 63 01 af 04 68 01 a8 04     Y...^...c...h...
    1768:	6d 01 a1 04 72 01 99 04 77 01 92 04 7c 01 8b 04     m...r...w...|...
    1778:	81 01 83 04 86 01 7b 04 8b 01 73 04 90 01 6b 04     ......{...s...k.
    1788:	95 01 63 04 9a 01 5b 04 9f 01 52 04 a4 01 49 04     ..c...[...R...I.
    1798:	a9 01 40 04 ae 01 37 04 b3 01 2e 04 b8 01 24 04     ..@...7.......$.
    17a8:	bd 01 1a 04 c2 01 0f 04 c7 01 04 04 cc 01 f8 03     ................
    17b8:	d1 01 ec 03 d6 01 df 03 db 01 d2 03 e0 01 c3 03     ................
    17c8:	e5 01 b3 03 ea 01 a1 03 ef 01 8c 03 f4 01 72 03     ..............r.
    17d8:	f9 01 4d 03                                         ..M.

000017dc <M302A1ch0>:
    17dc:	23 00 e2 05 28 00 d5 05 2d 00 c8 05 32 00 ba 05     #...(...-...2...
    17ec:	37 00 ad 05 3c 00 a0 05 41 00 92 05 46 00 85 05     7...<...A...F...
    17fc:	4b 00 77 05 50 00 69 05 55 00 5c 05 5a 00 4d 05     K.w.P.i.U.\.Z.M.
    180c:	5f 00 3f 05 64 00 31 05 69 00 22 05 6e 00 13 05     _.?.d.1.i.".n...
    181c:	73 00 04 05 78 00 f4 04 7d 00 e4 04 82 00 d4 04     s...x...}.......
    182c:	87 00 c3 04 8c 00 b1 04 91 00 9f 04 96 00 8d 04     ................
    183c:	9b 00 79 04 a0 00 65 04 a5 00 4f 04 aa 00 38 04     ..y...e...O...8.
    184c:	af 00 1f 04 b4 00 04 04 b9 00 e5 03 be 00 c1 03     ................
    185c:	c3 00 94 03 c8 00 44 03                             ......D.

00001864 <M1061ch1>:
    1864:	b4 00 e7 05 b9 00 e4 05 be 00 e2 05 c3 00 e0 05     ................
    1874:	c8 00 dd 05 cd 00 db 05 d2 00 d8 05 d7 00 d6 05     ................
    1884:	dc 00 d4 05 e1 00 d1 05 e6 00 cf 05 eb 00 cc 05     ................
    1894:	f0 00 ca 05 f5 00 c8 05 fa 00 c5 05 ff 00 c3 05     ................
    18a4:	04 01 c1 05 09 01 be 05 0e 01 bc 05 13 01 b9 05     ................
    18b4:	18 01 b7 05 1d 01 b5 05 22 01 b2 05 27 01 b0 05     ........"...'...
    18c4:	2c 01 ad 05 31 01 ab 05 36 01 a9 05 3b 01 a6 05     ,...1...6...;...
    18d4:	40 01 a4 05 45 01 a1 05 4a 01 9f 05 4f 01 9d 05     @...E...J...O...
    18e4:	54 01 9a 05 59 01 98 05 5e 01 96 05 63 01 93 05     T...Y...^...c...
    18f4:	68 01 91 05 6d 01 8e 05 72 01 8c 05 77 01 8a 05     h...m...r...w...
    1904:	7c 01 87 05 81 01 85 05 86 01 82 05 8b 01 80 05     |...............
    1914:	90 01 7d 05 95 01 7b 05 9a 01 79 05 9f 01 76 05     ..}...{...y...v.
    1924:	a4 01 74 05 a9 01 71 05 ae 01 6f 05 b3 01 6d 05     ..t...q...o...m.
    1934:	b8 01 6a 05 bd 01 68 05 c2 01 65 05 c7 01 63 05     ..j...h...e...c.
    1944:	cc 01 60 05 d1 01 5e 05 d6 01 5c 05 db 01 59 05     ..`...^...\...Y.
    1954:	e0 01 57 05 e5 01 54 05 ea 01 52 05 ef 01 4f 05     ..W...T...R...O.
    1964:	f4 01 4d 05 f9 01 4a 05 fe 01 48 05 03 02 45 05     ..M...J...H...E.
    1974:	08 02 43 05 0d 02 41 05 12 02 3e 05 17 02 3c 05     ..C...A...>...<.
    1984:	1c 02 39 05 21 02 37 05 26 02 34 05 2b 02 32 05     ..9.!.7.&.4.+.2.
    1994:	30 02 2f 05 35 02 2d 05 3a 02 2a 05 3f 02 28 05     0./.5.-.:.*.?.(.
    19a4:	44 02 25 05 49 02 22 05 4e 02 20 05 53 02 1d 05     D.%.I.".N. .S...
    19b4:	58 02 1b 05 5d 02 18 05 62 02 16 05 67 02 13 05     X...]...b...g...
    19c4:	6c 02 11 05 71 02 0e 05 76 02 0b 05 7b 02 09 05     l...q...v...{...
    19d4:	80 02 06 05 85 02 04 05 8a 02 01 05 8f 02 fe 04     ................
    19e4:	94 02 fc 04 99 02 f9 04 9e 02 f7 04 a3 02 f4 04     ................
    19f4:	a8 02 f1 04 ad 02 ef 04 b2 02 ec 04 b7 02 e9 04     ................
    1a04:	bc 02 e7 04 c1 02 e4 04 c6 02 e1 04 cb 02 df 04     ................
    1a14:	d0 02 dc 04 d5 02 d9 04 da 02 d6 04 df 02 d4 04     ................
    1a24:	e4 02 d1 04 e9 02 ce 04 ee 02 cb 04 f3 02 c9 04     ................
    1a34:	f8 02 c6 04 fd 02 c3 04 02 03 c0 04 07 03 bd 04     ................
    1a44:	0c 03 bb 04 11 03 b8 04 16 03 b5 04 1b 03 b2 04     ................
    1a54:	20 03 af 04 25 03 ac 04 2a 03 a9 04 2f 03 a6 04      ...%...*.../...
    1a64:	34 03 a3 04 39 03 a1 04 3e 03 9e 04 43 03 9b 04     4...9...>...C...
    1a74:	48 03 98 04 4d 03 95 04 52 03 92 04 57 03 8f 04     H...M...R...W...
    1a84:	5c 03 8c 04 61 03 88 04 66 03 85 04 6b 03 82 04     \...a...f...k...
    1a94:	70 03 7f 04 75 03 7c 04 7a 03 79 04 7f 03 76 04     p...u.|.z.y...v.
    1aa4:	84 03 73 04 89 03 6f 04 8e 03 6c 04 93 03 69 04     ..s...o...l...i.
    1ab4:	98 03 66 04 9d 03 62 04 a2 03 5f 04 a7 03 5c 04     ..f...b..._...\.
    1ac4:	ac 03 58 04 b1 03 55 04 b6 03 52 04 bb 03 4e 04     ..X...U...R...N.
    1ad4:	c0 03 4b 04 c5 03 47 04 ca 03 44 04 cf 03 40 04     ..K...G...D...@.
    1ae4:	d4 03 3d 04 d9 03 39 04 de 03 35 04 e3 03 32 04     ..=...9...5...2.
    1af4:	e8 03 2e 04 ed 03 2a 04 f2 03 27 04 f7 03 23 04     ......*...'...#.
    1b04:	fc 03 1f 04 01 04 1b 04 06 04 17 04 0b 04 13 04     ................
    1b14:	10 04 0f 04 15 04 0b 04 1a 04 07 04 1f 04 03 04     ................
    1b24:	24 04 ff 03 29 04 fa 03 2e 04 f6 03 33 04 f2 03     $...).......3...
    1b34:	38 04 ed 03 3d 04 e9 03 42 04 e4 03 47 04 e0 03     8...=...B...G...
    1b44:	4c 04 db 03 51 04 d6 03 56 04 d1 03 5b 04 cc 03     L...Q...V...[...
    1b54:	60 04 c7 03 65 04 c2 03 6a 04 bc 03 6f 04 b7 03     `...e...j...o...
    1b64:	74 04 b1 03 79 04 ac 03 7e 04 a6 03 83 04 a0 03     t...y...~.......
    1b74:	88 04 99 03 8d 04 93 03 92 04 8c 03 97 04 85 03     ................
    1b84:	9c 04 7e 03 a1 04 76 03 a6 04 6e 03 ab 04 65 03     ..~...v...n...e.
    1b94:	b0 04 5c 03 b5 04 52 03 ba 04 47 03 bf 04 3a 03     ..\...R...G...:.
    1ba4:	c4 04 2c 03                                         ..,.

00001ba8 <M1061ch0>:
    1ba8:	3c 00 e1 05 41 00 d9 05 46 00 d1 05 4b 00 c9 05     <...A...F...K...
    1bb8:	50 00 c0 05 55 00 b8 05 5a 00 b0 05 5f 00 a8 05     P...U...Z..._...
    1bc8:	64 00 9f 05 69 00 97 05 6e 00 8f 05 73 00 86 05     d...i...n...s...
    1bd8:	78 00 7e 05 7d 00 75 05 82 00 6c 05 87 00 64 05     x.~.}.u...l...d.
    1be8:	8c 00 5b 05 91 00 52 05 96 00 49 05 9b 00 40 05     ..[...R...I...@.
    1bf8:	a0 00 37 05 a5 00 2e 05 aa 00 25 05 af 00 1b 05     ..7.......%.....
    1c08:	b4 00 12 05 b9 00 08 05 be 00 fe 04 c3 00 f4 04     ................
    1c18:	c8 00 ea 04 cd 00 e0 04 d2 00 d5 04 d7 00 cb 04     ................
    1c28:	dc 00 c0 04 e1 00 b5 04 e6 00 aa 04 eb 00 9e 04     ................
    1c38:	f0 00 92 04 f5 00 86 04 fa 00 7a 04 ff 00 6d 04     ..........z...m.
    1c48:	04 01 5f 04 09 01 52 04 0e 01 43 04 13 01 34 04     .._...R...C...4.
    1c58:	18 01 25 04 1d 01 14 04 22 01 02 04 27 01 ef 03     ..%....."...'...
    1c68:	2c 01 da 03 31 01 c3 03 36 01 a8 03 3b 01 87 03     ,...1...6...;...
    1c78:	40 01 57 03                                         @.W.

00001c7c <M720A1ch1>:
    1c7c:	e6 00 e6 05 eb 00 e4 05 f0 00 e2 05 f5 00 e0 05     ................
    1c8c:	fa 00 de 05 ff 00 dc 05 04 01 da 05 09 01 d8 05     ................
    1c9c:	0e 01 d6 05 13 01 d4 05 18 01 d2 05 1d 01 d0 05     ................
    1cac:	22 01 cf 05 27 01 cd 05 2c 01 cb 05 31 01 c9 05     "...'...,...1...
    1cbc:	36 01 c7 05 3b 01 c5 05 40 01 c3 05 45 01 c1 05     6...;...@...E...
    1ccc:	4a 01 bf 05 4f 01 bd 05 54 01 bb 05 59 01 b9 05     J...O...T...Y...
    1cdc:	5e 01 b7 05 63 01 b5 05 68 01 b4 05 6d 01 b2 05     ^...c...h...m...
    1cec:	72 01 b0 05 77 01 ae 05 7c 01 ac 05 81 01 aa 05     r...w...|.......
    1cfc:	86 01 a8 05 8b 01 a6 05 90 01 a4 05 95 01 a2 05     ................
    1d0c:	9a 01 a0 05 9f 01 9e 05 a4 01 9c 05 a9 01 9a 05     ................
    1d1c:	ae 01 98 05 b3 01 96 05 b8 01 94 05 bd 01 92 05     ................
    1d2c:	c2 01 91 05 c7 01 8f 05 cc 01 8d 05 d1 01 8b 05     ................
    1d3c:	d6 01 89 05 db 01 87 05 e0 01 85 05 e5 01 83 05     ................
    1d4c:	ea 01 81 05 ef 01 7f 05 f4 01 7d 05 f9 01 7b 05     ..........}...{.
    1d5c:	fe 01 79 05 03 02 77 05 08 02 75 05 0d 02 73 05     ..y...w...u...s.
    1d6c:	12 02 71 05 17 02 6f 05 1c 02 6d 05 21 02 6b 05     ..q...o...m.!.k.
    1d7c:	26 02 69 05 2b 02 67 05 30 02 65 05 35 02 63 05     &.i.+.g.0.e.5.c.
    1d8c:	3a 02 61 05 3f 02 5f 05 44 02 5d 05 49 02 5b 05     :.a.?._.D.].I.[.
    1d9c:	4e 02 59 05 53 02 56 05 58 02 54 05 5d 02 52 05     N.Y.S.V.X.T.].R.
    1dac:	62 02 50 05 67 02 4e 05 6c 02 4c 05 71 02 4a 05     b.P.g.N.l.L.q.J.
    1dbc:	76 02 48 05 7b 02 46 05 80 02 44 05 85 02 42 05     v.H.{.F...D...B.
    1dcc:	8a 02 40 05 8f 02 3e 05 94 02 3b 05 99 02 39 05     ..@...>...;...9.
    1ddc:	9e 02 37 05 a3 02 35 05 a8 02 33 05 ad 02 31 05     ..7...5...3...1.
    1dec:	b2 02 2f 05 b7 02 2d 05 bc 02 2a 05 c1 02 28 05     ../...-...*...(.
    1dfc:	c6 02 26 05 cb 02 24 05 d0 02 22 05 d5 02 20 05     ..&...$..."... .
    1e0c:	da 02 1d 05 df 02 1b 05 e4 02 19 05 e9 02 17 05     ................
    1e1c:	ee 02 15 05 f3 02 12 05 f8 02 10 05 fd 02 0e 05     ................
    1e2c:	02 03 0c 05 07 03 0a 05 0c 03 07 05 11 03 05 05     ................
    1e3c:	16 03 03 05 1b 03 01 05 20 03 fe 04 25 03 fc 04     ........ ...%...
    1e4c:	2a 03 fa 04 2f 03 f7 04 34 03 f5 04 39 03 f3 04     *.../...4...9...
    1e5c:	3e 03 f0 04 43 03 ee 04 48 03 ec 04 4d 03 e9 04     >...C...H...M...
    1e6c:	52 03 e7 04 57 03 e5 04 5c 03 e2 04 61 03 e0 04     R...W...\...a...
    1e7c:	66 03 de 04 6b 03 db 04 70 03 d9 04 75 03 d6 04     f...k...p...u...
    1e8c:	7a 03 d4 04 7f 03 d1 04 84 03 cf 04 89 03 cc 04     z...............
    1e9c:	8e 03 ca 04 93 03 c8 04 98 03 c5 04 9d 03 c2 04     ................
    1eac:	a2 03 c0 04 a7 03 bd 04 ac 03 bb 04 b1 03 b8 04     ................
    1ebc:	b6 03 b6 04 bb 03 b3 04 c0 03 b1 04 c5 03 ae 04     ................
    1ecc:	ca 03 ab 04 cf 03 a9 04 d4 03 a6 04 d9 03 a3 04     ................
    1edc:	de 03 a1 04 e3 03 9e 04 e8 03 9b 04 ed 03 99 04     ................
    1eec:	f2 03 96 04 f7 03 93 04 fc 03 90 04 01 04 8d 04     ................
    1efc:	06 04 8b 04 0b 04 88 04 10 04 85 04 15 04 82 04     ................
    1f0c:	1a 04 7f 04 1f 04 7c 04 24 04 79 04 29 04 76 04     ......|.$.y.).v.
    1f1c:	2e 04 73 04 33 04 70 04 38 04 6d 04 3d 04 6a 04     ..s.3.p.8.m.=.j.
    1f2c:	42 04 67 04 47 04 64 04 4c 04 61 04 51 04 5e 04     B.g.G.d.L.a.Q.^.
    1f3c:	56 04 5b 04 5b 04 57 04 60 04 54 04 65 04 51 04     V.[.[.W.`.T.e.Q.
    1f4c:	6a 04 4e 04 6f 04 4a 04 74 04 47 04 79 04 44 04     j.N.o.J.t.G.y.D.
    1f5c:	7e 04 40 04 83 04 3d 04 88 04 39 04 8d 04 36 04     ~.@...=...9...6.
    1f6c:	92 04 32 04 97 04 2e 04 9c 04 2b 04 a1 04 27 04     ..2.......+...'.
    1f7c:	a6 04 23 04 ab 04 1f 04 b0 04 1c 04 b5 04 18 04     ..#.............
    1f8c:	ba 04 14 04 bf 04 10 04 c4 04 0c 04 c9 04 07 04     ................
    1f9c:	ce 04 03 04 d3 04 ff 03 d8 04 fb 03 dd 04 f6 03     ................
    1fac:	e2 04 f2 03 e7 04 ed 03 ec 04 e8 03 f1 04 e4 03     ................
    1fbc:	f6 04 df 03 fb 04 da 03 00 05 d5 03 05 05 cf 03     ................
    1fcc:	0a 05 ca 03 0f 05 c4 03 14 05 bf 03 19 05 b9 03     ................
    1fdc:	1e 05 b3 03 23 05 ac 03 28 05 a6 03 2d 05 9f 03     ....#...(...-...
    1fec:	32 05 98 03 37 05 90 03 3c 05 88 03 41 05 80 03     2...7...<...A...
    1ffc:	46 05 76 03 4b 05 6c 03 50 05 61 03 55 05 55 03     F.v.K.l.P.a.U.U.
    200c:	5a 05 46 03 5f 05 32 03                             Z.F._.2.

00002014 <M720A1ch0>:
    2014:	4b 00 e5 05 50 00 df 05 55 00 d9 05 5a 00 d3 05     K...P...U...Z...
    2024:	5f 00 cd 05 69 00 c1 05 6e 00 bb 05 73 00 b5 05     _...i...n...s...
    2034:	78 00 ae 05 7d 00 a8 05 82 00 a2 05 87 00 9c 05     x...}...........
    2044:	8c 00 96 05 91 00 8f 05 96 00 89 05 9b 00 83 05     ................
    2054:	a0 00 7c 05 a5 00 76 05 aa 00 70 05 af 00 69 05     ..|...v...p...i.
    2064:	b4 00 63 05 b9 00 5c 05 be 00 56 05 c3 00 4f 05     ..c...\...V...O.
    2074:	c8 00 48 05 cd 00 42 05 d2 00 3b 05 d7 00 34 05     ..H...B...;...4.
    2084:	dc 00 2d 05 e1 00 27 05 e6 00 20 05 eb 00 19 05     ..-...'... .....
    2094:	f0 00 11 05 f5 00 0a 05 fa 00 03 05 ff 00 fc 04     ................
    20a4:	04 01 f4 04 09 01 ed 04 0e 01 e5 04 13 01 de 04     ................
    20b4:	18 01 d6 04 1d 01 ce 04 22 01 c6 04 27 01 be 04     ........"...'...
    20c4:	2c 01 b6 04 31 01 ae 04 36 01 a5 04 3b 01 9d 04     ,...1...6...;...
    20d4:	40 01 94 04 45 01 8b 04 4a 01 82 04 4f 01 79 04     @...E...J...O.y.
    20e4:	54 01 6f 04 59 01 65 04 5e 01 5b 04 63 01 51 04     T.o.Y.e.^.[.c.Q.
    20f4:	68 01 46 04 6d 01 3b 04 72 01 30 04 77 01 24 04     h.F.m.;.r.0.w.$.
    2104:	7c 01 18 04 81 01 0b 04 86 01 fd 03 8b 01 ef 03     |...............
    2114:	90 01 df 03 95 01 cf 03 9a 01 bd 03 9f 01 a8 03     ................
    2124:	a4 01 90 03 a9 01 73 03 ae 01 44 03                 ......s...D.

00002130 <PowerString>:
    2130:	50 6f 77 65 72 69 6e 67 20 44 6f 77 6e 20 3a 29     Powering Down :)
	...

00002141 <State9>:
    2141:	53 74 61 74 65 20 39 00                             State 9.

00002149 <State7>:
    2149:	53 74 61 74 65 20 37 00                             State 7.

00002151 <State6>:
    2151:	53 74 61 74 65 20 36 00                             State 6.

00002159 <State5>:
    2159:	53 74 61 74 65 20 35 00                             State 5.

00002161 <State4>:
    2161:	53 74 61 74 65 20 34 00                             State 4.

00002169 <State3>:
    2169:	53 74 61 74 65 20 33 00                             State 3.

00002171 <State2>:
    2171:	53 74 61 74 65 20 32 00                             State 2.

00002179 <State1>:
    2179:	53 74 61 74 65 20 31 00                             State 1.

00002181 <State0>:
    2181:	53 74 61 74 65 20 30 00                             State 0.

00002189 <OnScreen>:
    2189:	44 52 49 20 56 32 2e 30 00                          DRI V2.0.

00002192 <LcdCustomChar>:
    2192:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
    21a2:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
    21b2:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
    21c2:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000021d2 <__ctors_end>:
    21d2:	11 24       	eor	r1, r1
    21d4:	1f be       	out	0x3f, r1	; 63
    21d6:	cf ef       	ldi	r28, 0xFF	; 255
    21d8:	d0 e1       	ldi	r29, 0x10	; 16
    21da:	de bf       	out	0x3e, r29	; 62
    21dc:	cd bf       	out	0x3d, r28	; 61

000021de <__do_copy_data>:
    21de:	12 e0       	ldi	r17, 0x02	; 2
    21e0:	a0 e0       	ldi	r26, 0x00	; 0
    21e2:	b1 e0       	ldi	r27, 0x01	; 1
    21e4:	e2 e5       	ldi	r30, 0x52	; 82
    21e6:	fb e4       	ldi	r31, 0x4B	; 75
    21e8:	02 c0       	rjmp	.+4      	; 0x21ee <__do_copy_data+0x10>
    21ea:	05 90       	lpm	r0, Z+
    21ec:	0d 92       	st	X+, r0
    21ee:	a0 3c       	cpi	r26, 0xC0	; 192
    21f0:	b1 07       	cpc	r27, r17
    21f2:	d9 f7       	brne	.-10     	; 0x21ea <__do_copy_data+0xc>

000021f4 <__do_clear_bss>:
    21f4:	27 e0       	ldi	r18, 0x07	; 7
    21f6:	a0 ec       	ldi	r26, 0xC0	; 192
    21f8:	b2 e0       	ldi	r27, 0x02	; 2
    21fa:	01 c0       	rjmp	.+2      	; 0x21fe <.do_clear_bss_start>

000021fc <.do_clear_bss_loop>:
    21fc:	1d 92       	st	X+, r1

000021fe <.do_clear_bss_start>:
    21fe:	a6 33       	cpi	r26, 0x36	; 54
    2200:	b2 07       	cpc	r27, r18
    2202:	e1 f7       	brne	.-8      	; 0x21fc <.do_clear_bss_loop>
    2204:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <main>
    2208:	0c 94 a7 25 	jmp	0x4b4e	; 0x4b4e <_exit>

0000220c <__bad_interrupt>:
    220c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00002210 <i2cSendStart>:
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
    2210:	3c 9a       	sbi	0x07, 4	; 7
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    2212:	84 ea       	ldi	r24, 0xA4	; 164
    2214:	80 93 bc 00 	sts	0x00BC, r24
    2218:	08 95       	ret

0000221a <i2cWaitForComplete>:
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    221a:	80 91 bc 00 	lds	r24, 0x00BC
    221e:	88 23       	and	r24, r24
    2220:	54 f0       	brlt	.+20     	; 0x2236 <i2cWaitForComplete+0x1c>
    2222:	8a e5       	ldi	r24, 0x5A	; 90
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	ec eb       	ldi	r30, 0xBC	; 188
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	20 81       	ld	r18, Z
    222c:	22 23       	and	r18, r18
    222e:	1c f0       	brlt	.+6      	; 0x2236 <i2cWaitForComplete+0x1c>
    2230:	01 97       	sbiw	r24, 0x01	; 1
    2232:	00 97       	sbiw	r24, 0x00	; 0
    2234:	d1 f7       	brne	.-12     	; 0x222a <i2cWaitForComplete+0x10>
    2236:	08 95       	ret

00002238 <i2cReceiveByte>:
}

void i2cReceiveByte(unsigned char ackFlag)
{
	// begin receive over i2c
	if( ackFlag )
    2238:	88 23       	and	r24, r24
    223a:	39 f0       	breq	.+14     	; 0x224a <i2cReceiveByte+0x12>
	{
		// ackFlag = TRUE: ACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
    223c:	ec eb       	ldi	r30, 0xBC	; 188
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	80 81       	ld	r24, Z
    2242:	8f 70       	andi	r24, 0x0F	; 15
    2244:	80 6c       	ori	r24, 0xC0	; 192
    2246:	80 83       	st	Z, r24
    2248:	08 95       	ret
	}
	else
	{
		// ackFlag = FALSE: NACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    224a:	ec eb       	ldi	r30, 0xBC	; 188
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	80 81       	ld	r24, Z
    2250:	8f 70       	andi	r24, 0x0F	; 15
    2252:	80 68       	ori	r24, 0x80	; 128
    2254:	80 83       	st	Z, r24
    2256:	08 95       	ret

00002258 <delay_ms>:
}

void delay_ms(uint16_t x)
{
  uint8_t y, z;
  for ( ; x > 0 ; x--){
    2258:	00 97       	sbiw	r24, 0x00	; 0
    225a:	61 f4       	brne	.+24     	; 0x2274 <delay_ms+0x1c>
    225c:	08 95       	ret
	...
    for ( y = 0 ; y < 90 ; y++){
      for ( z = 0 ; z < 6 ; z++){
        asm volatile ("nop");
    226a:	21 50       	subi	r18, 0x01	; 1

void delay_ms(uint16_t x)
{
  uint8_t y, z;
  for ( ; x > 0 ; x--){
    for ( y = 0 ; y < 90 ; y++){
    226c:	c1 f7       	brne	.-16     	; 0x225e <delay_ms+0x6>
}

void delay_ms(uint16_t x)
{
  uint8_t y, z;
  for ( ; x > 0 ; x--){
    226e:	01 97       	sbiw	r24, 0x01	; 1
    2270:	00 97       	sbiw	r24, 0x00	; 0
    2272:	11 f0       	breq	.+4      	; 0x2278 <delay_ms+0x20>
	// retieve current i2c status from i2c TWSR
	return( inb(TWSR) );
}

void delay_ms(uint16_t x)
{
    2274:	2a e5       	ldi	r18, 0x5A	; 90
    2276:	f3 cf       	rjmp	.-26     	; 0x225e <delay_ms+0x6>
    2278:	08 95       	ret

0000227a <i2cSendByte>:
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
}

void i2cSendByte(unsigned char data)
{
    227a:	cf 93       	push	r28
    227c:	c8 2f       	mov	r28, r24
	delay_ms(1);
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	0e 94 2c 11 	call	0x2258	; 0x2258 <delay_ms>
	//printf("sending 0x%x\n", data);
	WRITE_sda();
    2286:	3c 9a       	sbi	0x07, 4	; 7
	// save data to the TWDR
	TWDR = data;
    2288:	c0 93 bb 00 	sts	0x00BB, r28
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    228c:	84 e8       	ldi	r24, 0x84	; 132
    228e:	80 93 bc 00 	sts	0x00BC, r24
}
    2292:	cf 91       	pop	r28
    2294:	08 95       	ret

00002296 <writeRegister>:
#define MMA8452_ADDRESS 0x1D
#define FALSE	0
#define TRUE	-1

void writeRegister(uint8_t address, uint8_t data)
{
    2296:	cf 93       	push	r28
    2298:	df 93       	push	r29
    229a:	d8 2f       	mov	r29, r24
    229c:	c6 2f       	mov	r28, r22
	i2cSendStart();
    229e:	0e 94 08 11 	call	0x2210	; 0x2210 <i2cSendStart>
	i2cWaitForComplete();
    22a2:	0e 94 0d 11 	call	0x221a	; 0x221a <i2cWaitForComplete>

	i2cSendByte((MMA8452_ADDRESS<<1)); // Write 0xB4
    22a6:	8a e3       	ldi	r24, 0x3A	; 58
    22a8:	0e 94 3d 11 	call	0x227a	; 0x227a <i2cSendByte>
	i2cWaitForComplete();
    22ac:	0e 94 0d 11 	call	0x221a	; 0x221a <i2cWaitForComplete>

	i2cSendByte(address);	// Write register address
    22b0:	8d 2f       	mov	r24, r29
    22b2:	0e 94 3d 11 	call	0x227a	; 0x227a <i2cSendByte>
	i2cWaitForComplete();
    22b6:	0e 94 0d 11 	call	0x221a	; 0x221a <i2cWaitForComplete>

	i2cSendByte(data);
    22ba:	8c 2f       	mov	r24, r28
    22bc:	0e 94 3d 11 	call	0x227a	; 0x227a <i2cSendByte>
	i2cWaitForComplete();
    22c0:	0e 94 0d 11 	call	0x221a	; 0x221a <i2cWaitForComplete>
}

void i2cSendStop(void)
{
	// transmit stop condition
        TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    22c4:	84 e9       	ldi	r24, 0x94	; 148
    22c6:	80 93 bc 00 	sts	0x00BC, r24

	i2cSendStop();
}
    22ca:	df 91       	pop	r29
    22cc:	cf 91       	pop	r28
    22ce:	08 95       	ret

000022d0 <readRegisters>:

void readRegisters(uint8_t address, int i, uint8_t * dest)
{
    22d0:	ef 92       	push	r14
    22d2:	ff 92       	push	r15
    22d4:	0f 93       	push	r16
    22d6:	1f 93       	push	r17
    22d8:	cf 93       	push	r28
    22da:	df 93       	push	r29
    22dc:	c8 2f       	mov	r28, r24
    22de:	8b 01       	movw	r16, r22
    22e0:	7a 01       	movw	r14, r20
	i2cSendStart();
    22e2:	0e 94 08 11 	call	0x2210	; 0x2210 <i2cSendStart>
	i2cWaitForComplete();
    22e6:	0e 94 0d 11 	call	0x221a	; 0x221a <i2cWaitForComplete>

	i2cSendByte((MMA8452_ADDRESS<<1)); // write 0xB4
    22ea:	8a e3       	ldi	r24, 0x3A	; 58
    22ec:	0e 94 3d 11 	call	0x227a	; 0x227a <i2cSendByte>
	i2cWaitForComplete();
    22f0:	0e 94 0d 11 	call	0x221a	; 0x221a <i2cWaitForComplete>

	i2cSendByte(address);	// write register address
    22f4:	8c 2f       	mov	r24, r28
    22f6:	0e 94 3d 11 	call	0x227a	; 0x227a <i2cSendByte>
	i2cWaitForComplete();
    22fa:	0e 94 0d 11 	call	0x221a	; 0x221a <i2cWaitForComplete>

	i2cSendStart();
    22fe:	0e 94 08 11 	call	0x2210	; 0x2210 <i2cSendStart>
	i2cSendByte((MMA8452_ADDRESS<<1)|0x01); // write 0xB5
    2302:	8b e3       	ldi	r24, 0x3B	; 59
    2304:	0e 94 3d 11 	call	0x227a	; 0x227a <i2cSendByte>
	i2cWaitForComplete();
    2308:	0e 94 0d 11 	call	0x221a	; 0x221a <i2cWaitForComplete>
	for (int j=0; j<i; j++)
    230c:	10 16       	cp	r1, r16
    230e:	11 06       	cpc	r1, r17
    2310:	84 f4       	brge	.+32     	; 0x2332 <readRegisters+0x62>
    2312:	e7 01       	movw	r28, r14
    2314:	e0 0e       	add	r14, r16
    2316:	f1 1e       	adc	r15, r17
}

unsigned char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
    2318:	0b eb       	ldi	r16, 0xBB	; 187
    231a:	10 e0       	ldi	r17, 0x00	; 0
	{
		i2cReceiveByte(TRUE);
    231c:	8f ef       	ldi	r24, 0xFF	; 255
    231e:	0e 94 1c 11 	call	0x2238	; 0x2238 <i2cReceiveByte>
		i2cWaitForComplete();
    2322:	0e 94 0d 11 	call	0x221a	; 0x221a <i2cWaitForComplete>
    2326:	f8 01       	movw	r30, r16
    2328:	80 81       	ld	r24, Z
		dest[j] = i2cGetReceivedByte(); // Get MSB result
    232a:	89 93       	st	Y+, r24
	i2cWaitForComplete();

	i2cSendStart();
	i2cSendByte((MMA8452_ADDRESS<<1)|0x01); // write 0xB5
	i2cWaitForComplete();
	for (int j=0; j<i; j++)
    232c:	ce 15       	cp	r28, r14
    232e:	df 05       	cpc	r29, r15
    2330:	a9 f7       	brne	.-22     	; 0x231c <readRegisters+0x4c>
	{
		i2cReceiveByte(TRUE);
		i2cWaitForComplete();
		dest[j] = i2cGetReceivedByte(); // Get MSB result
	}
	i2cWaitForComplete();
    2332:	0e 94 0d 11 	call	0x221a	; 0x221a <i2cWaitForComplete>
}

void i2cSendStop(void)
{
	// transmit stop condition
        TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    2336:	ec eb       	ldi	r30, 0xBC	; 188
    2338:	f0 e0       	ldi	r31, 0x00	; 0
    233a:	84 e9       	ldi	r24, 0x94	; 148
    233c:	80 83       	st	Z, r24
	i2cSendStop();

	cbi(TWCR, TWEN); // Disable TWI
    233e:	80 81       	ld	r24, Z
    2340:	8b 7f       	andi	r24, 0xFB	; 251
    2342:	80 83       	st	Z, r24
	sbi(TWCR, TWEN); // Enable TWI
    2344:	80 81       	ld	r24, Z
    2346:	84 60       	ori	r24, 0x04	; 4
    2348:	80 83       	st	Z, r24
}
    234a:	df 91       	pop	r29
    234c:	cf 91       	pop	r28
    234e:	1f 91       	pop	r17
    2350:	0f 91       	pop	r16
    2352:	ff 90       	pop	r15
    2354:	ef 90       	pop	r14
    2356:	08 95       	ret

00002358 <readRegister>:

unsigned char readRegister(uint8_t address)
{
    2358:	cf 93       	push	r28
    235a:	c8 2f       	mov	r28, r24
	unsigned char data;

	i2cSendStart();
    235c:	0e 94 08 11 	call	0x2210	; 0x2210 <i2cSendStart>
	i2cWaitForComplete();
    2360:	0e 94 0d 11 	call	0x221a	; 0x221a <i2cWaitForComplete>

	i2cSendByte((MMA8452_ADDRESS<<1)); // Write 0xB4
    2364:	8a e3       	ldi	r24, 0x3A	; 58
    2366:	0e 94 3d 11 	call	0x227a	; 0x227a <i2cSendByte>
	i2cWaitForComplete();
    236a:	0e 94 0d 11 	call	0x221a	; 0x221a <i2cWaitForComplete>

	i2cSendByte(address);	// Write register address
    236e:	8c 2f       	mov	r24, r28
    2370:	0e 94 3d 11 	call	0x227a	; 0x227a <i2cSendByte>
	i2cWaitForComplete();
    2374:	0e 94 0d 11 	call	0x221a	; 0x221a <i2cWaitForComplete>

	i2cSendStart();
    2378:	0e 94 08 11 	call	0x2210	; 0x2210 <i2cSendStart>

	i2cSendByte((MMA8452_ADDRESS<<1)|0x01); // Write 0xB5
    237c:	8b e3       	ldi	r24, 0x3B	; 59
    237e:	0e 94 3d 11 	call	0x227a	; 0x227a <i2cSendByte>
	i2cWaitForComplete();
    2382:	0e 94 0d 11 	call	0x221a	; 0x221a <i2cWaitForComplete>
	i2cReceiveByte(TRUE);
    2386:	8f ef       	ldi	r24, 0xFF	; 255
    2388:	0e 94 1c 11 	call	0x2238	; 0x2238 <i2cReceiveByte>
	i2cWaitForComplete();
    238c:	0e 94 0d 11 	call	0x221a	; 0x221a <i2cWaitForComplete>
}

unsigned char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
    2390:	c0 91 bb 00 	lds	r28, 0x00BB

	data = i2cGetReceivedByte();	// Get MSB result
	i2cWaitForComplete();
    2394:	0e 94 0d 11 	call	0x221a	; 0x221a <i2cWaitForComplete>
}

void i2cSendStop(void)
{
	// transmit stop condition
        TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    2398:	ec eb       	ldi	r30, 0xBC	; 188
    239a:	f0 e0       	ldi	r31, 0x00	; 0
    239c:	84 e9       	ldi	r24, 0x94	; 148
    239e:	80 83       	st	Z, r24
	i2cSendStop();

	cbi(TWCR, TWEN);	// Disable TWI
    23a0:	80 81       	ld	r24, Z
    23a2:	8b 7f       	andi	r24, 0xFB	; 251
    23a4:	80 83       	st	Z, r24
	sbi(TWCR, TWEN);	// Enable TWI
    23a6:	80 81       	ld	r24, Z
    23a8:	84 60       	ori	r24, 0x04	; 4
    23aa:	80 83       	st	Z, r24

	return data;
}
    23ac:	8c 2f       	mov	r24, r28
    23ae:	cf 91       	pop	r28
    23b0:	08 95       	ret

000023b2 <MMA8452Active>:

void MMA8452Active(void)
{
	unsigned char c = readRegister(0x2A);
    23b2:	8a e2       	ldi	r24, 0x2A	; 42
    23b4:	0e 94 ac 11 	call	0x2358	; 0x2358 <readRegister>
	writeRegister(0x2A, c | 0x01);
    23b8:	68 2f       	mov	r22, r24
    23ba:	61 60       	ori	r22, 0x01	; 1
    23bc:	8a e2       	ldi	r24, 0x2A	; 42
    23be:	0e 94 4b 11 	call	0x2296	; 0x2296 <writeRegister>
    23c2:	08 95       	ret

000023c4 <MMA8452Standby>:
}

void MMA8452Standby(void)
{
	unsigned char c = readRegister(0x2A);
    23c4:	8a e2       	ldi	r24, 0x2A	; 42
    23c6:	0e 94 ac 11 	call	0x2358	; 0x2358 <readRegister>
	writeRegister(0x2A, c & ~(0x01));
    23ca:	68 2f       	mov	r22, r24
    23cc:	6e 7f       	andi	r22, 0xFE	; 254
    23ce:	8a e2       	ldi	r24, 0x2A	; 42
    23d0:	0e 94 4b 11 	call	0x2296	; 0x2296 <writeRegister>
    23d4:	08 95       	ret

000023d6 <initMMA8452>:
}

void initMMA8452(uint8_t fsr, uint8_t dataRate)
{
    23d6:	cf 93       	push	r28
    23d8:	df 93       	push	r29
    23da:	c8 2f       	mov	r28, r24
    23dc:	d6 2f       	mov	r29, r22
  MMA8452Standby();  // Must be in standby to change registers
    23de:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <MMA8452Standby>

  // Set up the full scale range to 2, 4, or 8g.
  if ((fsr==2)||(fsr==4)||(fsr==8))
    23e2:	c2 30       	cpi	r28, 0x02	; 2
    23e4:	21 f0       	breq	.+8      	; 0x23ee <initMMA8452+0x18>
    23e6:	c4 30       	cpi	r28, 0x04	; 4
    23e8:	11 f0       	breq	.+4      	; 0x23ee <initMMA8452+0x18>
    23ea:	c8 30       	cpi	r28, 0x08	; 8
    23ec:	39 f4       	brne	.+14     	; 0x23fc <initMMA8452+0x26>
    writeRegister(0x0E, fsr >> 2);  
    23ee:	6c 2f       	mov	r22, r28
    23f0:	66 95       	lsr	r22
    23f2:	66 95       	lsr	r22
    23f4:	8e e0       	ldi	r24, 0x0E	; 14
    23f6:	0e 94 4b 11 	call	0x2296	; 0x2296 <writeRegister>
    23fa:	04 c0       	rjmp	.+8      	; 0x2404 <initMMA8452+0x2e>
  else
    writeRegister(0x0E, 0);
    23fc:	60 e0       	ldi	r22, 0x00	; 0
    23fe:	8e e0       	ldi	r24, 0x0E	; 14
    2400:	0e 94 4b 11 	call	0x2296	; 0x2296 <writeRegister>

  // Setup the 3 data rate bits, from 0 to 7
  writeRegister(0x2A, readRegister(0x2A) & ~(0x38));
    2404:	8a e2       	ldi	r24, 0x2A	; 42
    2406:	0e 94 ac 11 	call	0x2358	; 0x2358 <readRegister>
    240a:	68 2f       	mov	r22, r24
    240c:	67 7c       	andi	r22, 0xC7	; 199
    240e:	8a e2       	ldi	r24, 0x2A	; 42
    2410:	0e 94 4b 11 	call	0x2296	; 0x2296 <writeRegister>
  if (dataRate <= 7)
    2414:	d8 30       	cpi	r29, 0x08	; 8
    2416:	58 f4       	brcc	.+22     	; 0x242e <initMMA8452+0x58>
    writeRegister(0x2A, readRegister(0x2A) | (dataRate << 3));  
    2418:	8a e2       	ldi	r24, 0x2A	; 42
    241a:	0e 94 ac 11 	call	0x2358	; 0x2358 <readRegister>
    241e:	dd 0f       	add	r29, r29
    2420:	dd 0f       	add	r29, r29
    2422:	dd 0f       	add	r29, r29
    2424:	6d 2f       	mov	r22, r29
    2426:	68 2b       	or	r22, r24
    2428:	8a e2       	ldi	r24, 0x2A	; 42
    242a:	0e 94 4b 11 	call	0x2296	; 0x2296 <writeRegister>
  // 1. Enable P/L
  // 2. Set the back/front angle trigger points (z-lock)
  // 3. Set the threshold/hysteresis angle
  // 4. Set the debouce rate
  // For more info check out this app note: http://cache.freescale.com/files/sensors/doc/app_note/AN4068.pdf
  writeRegister(0x11, 0x40);  // 1. Enable P/L
    242e:	60 e4       	ldi	r22, 0x40	; 64
    2430:	81 e1       	ldi	r24, 0x11	; 17
    2432:	0e 94 4b 11 	call	0x2296	; 0x2296 <writeRegister>
  writeRegister(0x13, 0x44);  // 2. 29deg z-lock (don't think this register is actually writable)
    2436:	64 e4       	ldi	r22, 0x44	; 68
    2438:	83 e1       	ldi	r24, 0x13	; 19
    243a:	0e 94 4b 11 	call	0x2296	; 0x2296 <writeRegister>
  writeRegister(0x14, 0x84);  // 3. 45deg thresh, 14deg hyst (don't think this register is writable either)
    243e:	64 e8       	ldi	r22, 0x84	; 132
    2440:	84 e1       	ldi	r24, 0x14	; 20
    2442:	0e 94 4b 11 	call	0x2296	; 0x2296 <writeRegister>
  writeRegister(0x12, 0x50);  // 4. debounce counter at 100ms (at 800 hz)
    2446:	60 e5       	ldi	r22, 0x50	; 80
    2448:	82 e1       	ldi	r24, 0x12	; 18
    244a:	0e 94 4b 11 	call	0x2296	; 0x2296 <writeRegister>
   2. Set the threshold - minimum required acceleration to cause a tap.
   3. Set the time limit - the maximum time that a tap can be above the threshold
   4. Set the pulse latency - the minimum required time between one pulse and the next
   5. Set the second pulse window - maximum allowed time between end of latency and start of second pulse
   for more info check out this app note: http://cache.freescale.com/files/sensors/doc/app_note/AN4072.pdf */
  writeRegister(0x21, 0x7F);  // 1. enable single/double taps on all axes
    244e:	6f e7       	ldi	r22, 0x7F	; 127
    2450:	81 e2       	ldi	r24, 0x21	; 33
    2452:	0e 94 4b 11 	call	0x2296	; 0x2296 <writeRegister>
  // writeRegister(0x21, 0x55);  // 1. single taps only on all axes
  // writeRegister(0x21, 0x6A);  // 1. double taps only on all axes
  writeRegister(0x23, 0x20);  // 2. x thresh at 2g, multiply the value by 0.0625g/LSB to get the threshold
    2456:	60 e2       	ldi	r22, 0x20	; 32
    2458:	83 e2       	ldi	r24, 0x23	; 35
    245a:	0e 94 4b 11 	call	0x2296	; 0x2296 <writeRegister>
  writeRegister(0x24, 0x20);  // 2. y thresh at 2g, multiply the value by 0.0625g/LSB to get the threshold
    245e:	60 e2       	ldi	r22, 0x20	; 32
    2460:	84 e2       	ldi	r24, 0x24	; 36
    2462:	0e 94 4b 11 	call	0x2296	; 0x2296 <writeRegister>
  writeRegister(0x25, 0x08);  // 2. z thresh at .5g, multiply the value by 0.0625g/LSB to get the threshold
    2466:	68 e0       	ldi	r22, 0x08	; 8
    2468:	85 e2       	ldi	r24, 0x25	; 37
    246a:	0e 94 4b 11 	call	0x2296	; 0x2296 <writeRegister>
  writeRegister(0x26, 0x30);  // 3. 30ms time limit at 800Hz odr, this is very dependent on data rate, see the app note
    246e:	60 e3       	ldi	r22, 0x30	; 48
    2470:	86 e2       	ldi	r24, 0x26	; 38
    2472:	0e 94 4b 11 	call	0x2296	; 0x2296 <writeRegister>
  writeRegister(0x27, 0xA0);  // 4. 200ms (at 800Hz odr) between taps min, this also depends on the data rate
    2476:	60 ea       	ldi	r22, 0xA0	; 160
    2478:	87 e2       	ldi	r24, 0x27	; 39
    247a:	0e 94 4b 11 	call	0x2296	; 0x2296 <writeRegister>
  writeRegister(0x28, 0xFF);  // 5. 318ms (max value) between taps max
    247e:	6f ef       	ldi	r22, 0xFF	; 255
    2480:	88 e2       	ldi	r24, 0x28	; 40
    2482:	0e 94 4b 11 	call	0x2296	; 0x2296 <writeRegister>

  // Set up interrupt 1 and 2
  writeRegister(0x2C, 0x02);  // Active high, push-pull interrupts
    2486:	62 e0       	ldi	r22, 0x02	; 2
    2488:	8c e2       	ldi	r24, 0x2C	; 44
    248a:	0e 94 4b 11 	call	0x2296	; 0x2296 <writeRegister>
  writeRegister(0x2D, 0x19);  // DRDY, P/L and tap ints enabled
    248e:	69 e1       	ldi	r22, 0x19	; 25
    2490:	8d e2       	ldi	r24, 0x2D	; 45
    2492:	0e 94 4b 11 	call	0x2296	; 0x2296 <writeRegister>
  writeRegister(0x2E, 0x01);  // DRDY on INT1, P/L and taps on INT2
    2496:	61 e0       	ldi	r22, 0x01	; 1
    2498:	8e e2       	ldi	r24, 0x2E	; 46
    249a:	0e 94 4b 11 	call	0x2296	; 0x2296 <writeRegister>

  MMA8452Active();  // Set to active to start reading
    249e:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <MMA8452Active>
}
    24a2:	df 91       	pop	r29
    24a4:	cf 91       	pop	r28
    24a6:	08 95       	ret

000024a8 <readAccelData>:

void readAccelData(int * destination)
{
    24a8:	0f 93       	push	r16
    24aa:	1f 93       	push	r17
    24ac:	cf 93       	push	r28
    24ae:	df 93       	push	r29
    24b0:	00 d0       	rcall	.+0      	; 0x24b2 <readAccelData+0xa>
    24b2:	00 d0       	rcall	.+0      	; 0x24b4 <readAccelData+0xc>
    24b4:	00 d0       	rcall	.+0      	; 0x24b6 <readAccelData+0xe>
    24b6:	cd b7       	in	r28, 0x3d	; 61
    24b8:	de b7       	in	r29, 0x3e	; 62
    24ba:	8c 01       	movw	r16, r24
	uint8_t rawData[6];  // x/y/z accel register data stored here

	readRegisters(0x01, 6, &rawData[0]);  // Read the six raw data registers into data array
    24bc:	ae 01       	movw	r20, r28
    24be:	4f 5f       	subi	r20, 0xFF	; 255
    24c0:	5f 4f       	sbci	r21, 0xFF	; 255
    24c2:	66 e0       	ldi	r22, 0x06	; 6
    24c4:	70 e0       	ldi	r23, 0x00	; 0
    24c6:	81 e0       	ldi	r24, 0x01	; 1
    24c8:	0e 94 68 11 	call	0x22d0	; 0x22d0 <readRegisters>
    24cc:	fe 01       	movw	r30, r28
    24ce:	32 96       	adiw	r30, 0x02	; 2

	// Loop to calculate 12-bit ADC and g value for each axis
	for (int i=0; i<6; i+=2)
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	30 e0       	ldi	r19, 0x00	; 0
	{
		destination[i/2] = ((rawData[i] << 8) | rawData[i+1]) >> 4;  // Turn the MSB and LSB into a 12-bit value
    24d4:	a9 01       	movw	r20, r18
    24d6:	33 23       	and	r19, r19
    24d8:	14 f4       	brge	.+4      	; 0x24de <readAccelData+0x36>
    24da:	4f 5f       	subi	r20, 0xFF	; 255
    24dc:	5f 4f       	sbci	r21, 0xFF	; 255
    24de:	4e 7f       	andi	r20, 0xFE	; 254
    24e0:	b8 01       	movw	r22, r16
    24e2:	64 0f       	add	r22, r20
    24e4:	75 1f       	adc	r23, r21
    24e6:	cf 01       	movw	r24, r30
    24e8:	01 97       	sbiw	r24, 0x01	; 1
    24ea:	dc 01       	movw	r26, r24
    24ec:	8c 91       	ld	r24, X
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	98 2f       	mov	r25, r24
    24f2:	88 27       	eor	r24, r24
    24f4:	40 81       	ld	r20, Z
    24f6:	84 2b       	or	r24, r20
    24f8:	95 95       	asr	r25
    24fa:	87 95       	ror	r24
    24fc:	95 95       	asr	r25
    24fe:	87 95       	ror	r24
    2500:	95 95       	asr	r25
    2502:	87 95       	ror	r24
    2504:	95 95       	asr	r25
    2506:	87 95       	ror	r24
		if (rawData[i] > 0x7F)
		{
			// If the number is negative, we have to make it so manually (no 12-bit data type)
			destination[i/2] = ~destination[i/2] + 1;
			destination[i/2] *= -1;  // Transform into negative 2's complement #
    2508:	db 01       	movw	r26, r22
    250a:	8d 93       	st	X+, r24
    250c:	9c 93       	st	X, r25
	uint8_t rawData[6];  // x/y/z accel register data stored here

	readRegisters(0x01, 6, &rawData[0]);  // Read the six raw data registers into data array

	// Loop to calculate 12-bit ADC and g value for each axis
	for (int i=0; i<6; i+=2)
    250e:	2e 5f       	subi	r18, 0xFE	; 254
    2510:	3f 4f       	sbci	r19, 0xFF	; 255
    2512:	32 96       	adiw	r30, 0x02	; 2
    2514:	26 30       	cpi	r18, 0x06	; 6
    2516:	31 05       	cpc	r19, r1
    2518:	e9 f6       	brne	.-70     	; 0x24d4 <readAccelData+0x2c>
			// If the number is negative, we have to make it so manually (no 12-bit data type)
			destination[i/2] = ~destination[i/2] + 1;
			destination[i/2] *= -1;  // Transform into negative 2's complement #
		}
	}
    251a:	26 96       	adiw	r28, 0x06	; 6
    251c:	0f b6       	in	r0, 0x3f	; 63
    251e:	f8 94       	cli
    2520:	de bf       	out	0x3e, r29	; 62
    2522:	0f be       	out	0x3f, r0	; 63
    2524:	cd bf       	out	0x3d, r28	; 61
    2526:	df 91       	pop	r29
    2528:	cf 91       	pop	r28
    252a:	1f 91       	pop	r17
    252c:	0f 91       	pop	r16
    252e:	08 95       	ret

00002530 <printTime>:
		LCDsendChar(' ');
	}
}

void printTime(uint8_t x, uint8_t y, uint32_t system_clk)
{
    2530:	cf 92       	push	r12
    2532:	df 92       	push	r13
    2534:	ef 92       	push	r14
    2536:	ff 92       	push	r15
    2538:	0f 93       	push	r16
    253a:	1f 93       	push	r17
    253c:	cf 93       	push	r28
    253e:	df 93       	push	r29
    2540:	cd b7       	in	r28, 0x3d	; 61
    2542:	de b7       	in	r29, 0x3e	; 62
    2544:	60 97       	sbiw	r28, 0x10	; 16
    2546:	0f b6       	in	r0, 0x3f	; 63
    2548:	f8 94       	cli
    254a:	de bf       	out	0x3e, r29	; 62
    254c:	0f be       	out	0x3f, r0	; 63
    254e:	cd bf       	out	0x3d, r28	; 61
    2550:	18 2f       	mov	r17, r24
    2552:	06 2f       	mov	r16, r22
    2554:	69 01       	movw	r12, r18
    2556:	7a 01       	movw	r14, r20
	system_Second = system_clk % 60;
    2558:	ca 01       	movw	r24, r20
    255a:	b9 01       	movw	r22, r18
    255c:	2c e3       	ldi	r18, 0x3C	; 60
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	40 e0       	ldi	r20, 0x00	; 0
    2562:	50 e0       	ldi	r21, 0x00	; 0
    2564:	0e 94 7d 22 	call	0x44fa	; 0x44fa <__udivmodsi4>
    2568:	60 93 d5 02 	sts	0x02D5, r22
	system_Minute = system_clk / 60;
    256c:	20 93 d4 02 	sts	0x02D4, r18
	system_Hour = system_clk / 3600;
    2570:	c7 01       	movw	r24, r14
    2572:	b6 01       	movw	r22, r12
    2574:	20 e1       	ldi	r18, 0x10	; 16
    2576:	3e e0       	ldi	r19, 0x0E	; 14
    2578:	40 e0       	ldi	r20, 0x00	; 0
    257a:	50 e0       	ldi	r21, 0x00	; 0
    257c:	0e 94 7d 22 	call	0x44fa	; 0x44fa <__udivmodsi4>
    2580:	20 93 d3 02 	sts	0x02D3, r18
	system_Day = system_clk / 86400;
    2584:	c7 01       	movw	r24, r14
    2586:	b6 01       	movw	r22, r12
    2588:	20 e8       	ldi	r18, 0x80	; 128
    258a:	31 e5       	ldi	r19, 0x51	; 81
    258c:	41 e0       	ldi	r20, 0x01	; 1
    258e:	50 e0       	ldi	r21, 0x00	; 0
    2590:	0e 94 7d 22 	call	0x44fa	; 0x44fa <__udivmodsi4>
    2594:	20 93 d2 02 	sts	0x02D2, r18
				system_Hour = 0;
			}
		}
	}
	*/
	LCDGotoXY(x, y);
    2598:	60 2f       	mov	r22, r16
    259a:	81 2f       	mov	r24, r17
    259c:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <LCDGotoXY>
	char buf[PRINT_INT_BUFSIZE];
	
	buf[10] = system_Day / 10 +48 ;
    25a0:	90 91 d2 02 	lds	r25, 0x02D2
    25a4:	8d ec       	ldi	r24, 0xCD	; 205
    25a6:	98 9f       	mul	r25, r24
    25a8:	21 2d       	mov	r18, r1
    25aa:	11 24       	eor	r1, r1
    25ac:	26 95       	lsr	r18
    25ae:	26 95       	lsr	r18
    25b0:	26 95       	lsr	r18
    25b2:	30 e3       	ldi	r19, 0x30	; 48
    25b4:	32 0f       	add	r19, r18
    25b6:	3b 87       	std	Y+11, r19	; 0x0b
	buf[9] =  system_Day % 10 +48 ;
    25b8:	22 0f       	add	r18, r18
    25ba:	32 2f       	mov	r19, r18
    25bc:	33 0f       	add	r19, r19
    25be:	33 0f       	add	r19, r19
    25c0:	23 0f       	add	r18, r19
    25c2:	92 1b       	sub	r25, r18
    25c4:	90 5d       	subi	r25, 0xD0	; 208
    25c6:	9a 87       	std	Y+10, r25	; 0x0a
	buf[8] =  ':' ;
    25c8:	2a e3       	ldi	r18, 0x3A	; 58
    25ca:	29 87       	std	Y+9, r18	; 0x09
	buf[7] = (system_Hour%24) / 10 +48 ;
    25cc:	30 91 d3 02 	lds	r19, 0x02D3
    25d0:	9b ea       	ldi	r25, 0xAB	; 171
    25d2:	39 9f       	mul	r19, r25
    25d4:	91 2d       	mov	r25, r1
    25d6:	11 24       	eor	r1, r1
    25d8:	92 95       	swap	r25
    25da:	9f 70       	andi	r25, 0x0F	; 15
    25dc:	48 e1       	ldi	r20, 0x18	; 24
    25de:	94 9f       	mul	r25, r20
    25e0:	30 19       	sub	r19, r0
    25e2:	11 24       	eor	r1, r1
    25e4:	93 2f       	mov	r25, r19
    25e6:	38 9f       	mul	r19, r24
    25e8:	31 2d       	mov	r19, r1
    25ea:	11 24       	eor	r1, r1
    25ec:	36 95       	lsr	r19
    25ee:	36 95       	lsr	r19
    25f0:	36 95       	lsr	r19
    25f2:	40 e3       	ldi	r20, 0x30	; 48
    25f4:	43 0f       	add	r20, r19
    25f6:	48 87       	std	Y+8, r20	; 0x08
	buf[6] = (system_Hour%24) % 10 +48 ;
    25f8:	33 0f       	add	r19, r19
    25fa:	43 2f       	mov	r20, r19
    25fc:	44 0f       	add	r20, r20
    25fe:	44 0f       	add	r20, r20
    2600:	34 0f       	add	r19, r20
    2602:	93 1b       	sub	r25, r19
    2604:	90 5d       	subi	r25, 0xD0	; 208
    2606:	9f 83       	std	Y+7, r25	; 0x07
	buf[5] =  ':' ;
    2608:	2e 83       	std	Y+6, r18	; 0x06
	buf[4] = (system_Minute%60) / 10 +48 ;
    260a:	30 91 d4 02 	lds	r19, 0x02D4
    260e:	99 e8       	ldi	r25, 0x89	; 137
    2610:	39 9f       	mul	r19, r25
    2612:	91 2d       	mov	r25, r1
    2614:	11 24       	eor	r1, r1
    2616:	92 95       	swap	r25
    2618:	96 95       	lsr	r25
    261a:	97 70       	andi	r25, 0x07	; 7
    261c:	ec e3       	ldi	r30, 0x3C	; 60
    261e:	9e 9f       	mul	r25, r30
    2620:	30 19       	sub	r19, r0
    2622:	11 24       	eor	r1, r1
    2624:	93 2f       	mov	r25, r19
    2626:	38 9f       	mul	r19, r24
    2628:	31 2d       	mov	r19, r1
    262a:	11 24       	eor	r1, r1
    262c:	36 95       	lsr	r19
    262e:	36 95       	lsr	r19
    2630:	36 95       	lsr	r19
    2632:	40 e3       	ldi	r20, 0x30	; 48
    2634:	43 0f       	add	r20, r19
    2636:	4d 83       	std	Y+5, r20	; 0x05
	buf[3] =  (system_Minute%60) % 10 +48 ;
    2638:	33 0f       	add	r19, r19
    263a:	43 2f       	mov	r20, r19
    263c:	44 0f       	add	r20, r20
    263e:	44 0f       	add	r20, r20
    2640:	34 0f       	add	r19, r20
    2642:	93 1b       	sub	r25, r19
    2644:	90 5d       	subi	r25, 0xD0	; 208
    2646:	9c 83       	std	Y+4, r25	; 0x04
	buf[2] =  ':' ;
    2648:	2b 83       	std	Y+3, r18	; 0x03
	buf[1] = system_Second / 10 +48 ;
    264a:	90 91 d5 02 	lds	r25, 0x02D5
    264e:	98 9f       	mul	r25, r24
    2650:	81 2d       	mov	r24, r1
    2652:	11 24       	eor	r1, r1
    2654:	86 95       	lsr	r24
    2656:	86 95       	lsr	r24
    2658:	86 95       	lsr	r24
    265a:	20 e3       	ldi	r18, 0x30	; 48
    265c:	28 0f       	add	r18, r24
    265e:	2a 83       	std	Y+2, r18	; 0x02
	buf[0] =  system_Second % 10 +48 ;
    2660:	88 0f       	add	r24, r24
    2662:	28 2f       	mov	r18, r24
    2664:	22 0f       	add	r18, r18
    2666:	22 0f       	add	r18, r18
    2668:	82 0f       	add	r24, r18
    266a:	98 1b       	sub	r25, r24
    266c:	90 5d       	subi	r25, 0xD0	; 208
    266e:	99 83       	std	Y+1, r25	; 0x01
    2670:	7e 01       	movw	r14, r28
    2672:	fc e0       	ldi	r31, 0x0C	; 12
    2674:	ef 0e       	add	r14, r31
    2676:	f1 1c       	adc	r15, r1
    2678:	8e 01       	movw	r16, r28
    267a:	0f 5f       	subi	r16, 0xFF	; 255
    267c:	1f 4f       	sbci	r17, 0xFF	; 255
	
	for(int k = 10; k >= 0; k--)
	{
		LCDsendChar(buf[k]);
    267e:	f7 01       	movw	r30, r14
    2680:	82 91       	ld	r24, -Z
    2682:	7f 01       	movw	r14, r30
    2684:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <LCDsendChar>
	buf[3] =  (system_Minute%60) % 10 +48 ;
	buf[2] =  ':' ;
	buf[1] = system_Second / 10 +48 ;
	buf[0] =  system_Second % 10 +48 ;
	
	for(int k = 10; k >= 0; k--)
    2688:	e0 16       	cp	r14, r16
    268a:	f1 06       	cpc	r15, r17
    268c:	c1 f7       	brne	.-16     	; 0x267e <printTime+0x14e>
	{
		LCDsendChar(buf[k]);
	}
}
    268e:	60 96       	adiw	r28, 0x10	; 16
    2690:	0f b6       	in	r0, 0x3f	; 63
    2692:	f8 94       	cli
    2694:	de bf       	out	0x3e, r29	; 62
    2696:	0f be       	out	0x3f, r0	; 63
    2698:	cd bf       	out	0x3d, r28	; 61
    269a:	df 91       	pop	r29
    269c:	cf 91       	pop	r28
    269e:	1f 91       	pop	r17
    26a0:	0f 91       	pop	r16
    26a2:	ff 90       	pop	r15
    26a4:	ef 90       	pop	r14
    26a6:	df 90       	pop	r13
    26a8:	cf 90       	pop	r12
    26aa:	08 95       	ret

000026ac <printAccelMil>:
void printAccelMil(uint8_t x, uint8_t y, int accel)
{
    26ac:	ef 92       	push	r14
    26ae:	ff 92       	push	r15
    26b0:	0f 93       	push	r16
    26b2:	1f 93       	push	r17
    26b4:	cf 93       	push	r28
    26b6:	df 93       	push	r29
    26b8:	cd b7       	in	r28, 0x3d	; 61
    26ba:	de b7       	in	r29, 0x3e	; 62
    26bc:	60 97       	sbiw	r28, 0x10	; 16
    26be:	0f b6       	in	r0, 0x3f	; 63
    26c0:	f8 94       	cli
    26c2:	de bf       	out	0x3e, r29	; 62
    26c4:	0f be       	out	0x3f, r0	; 63
    26c6:	cd bf       	out	0x3d, r28	; 61
    26c8:	8a 01       	movw	r16, r20
	//accel = asin(accel)*1018.59163579;
	LCDGotoXY(x, y);
    26ca:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <LCDGotoXY>
	char buf[PRINT_INT_BUFSIZE];
	int8_t sign = 1;
	if (accel < 0) { // look for the sign
    26ce:	11 23       	and	r17, r17
    26d0:	ac f5       	brge	.+106    	; 0x273c <printAccelMil+0x90>
		sign = -1;
		accel= -accel;
    26d2:	11 95       	neg	r17
    26d4:	01 95       	neg	r16
    26d6:	11 09       	sbc	r17, r1
	}
	
	if (sign < 0)
	{	// don't forget to add the sign
		buf[4] = '-';
    26d8:	8d e2       	ldi	r24, 0x2D	; 45
    26da:	8d 83       	std	Y+5, r24	; 0x05
	}
	else
	{
		buf[4] = ' ';
	}
	buf[3] = accel / 1000 +48 ;
    26dc:	c8 01       	movw	r24, r16
    26de:	68 ee       	ldi	r22, 0xE8	; 232
    26e0:	73 e0       	ldi	r23, 0x03	; 3
    26e2:	0e 94 69 22 	call	0x44d2	; 0x44d2 <__divmodhi4>
    26e6:	60 5d       	subi	r22, 0xD0	; 208
    26e8:	6c 83       	std	Y+4, r22	; 0x04
	buf[2] = (accel / 100) %10 +48 ;
    26ea:	c8 01       	movw	r24, r16
    26ec:	64 e6       	ldi	r22, 0x64	; 100
    26ee:	70 e0       	ldi	r23, 0x00	; 0
    26f0:	0e 94 69 22 	call	0x44d2	; 0x44d2 <__divmodhi4>
    26f4:	cb 01       	movw	r24, r22
    26f6:	2a e0       	ldi	r18, 0x0A	; 10
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	b9 01       	movw	r22, r18
    26fc:	0e 94 69 22 	call	0x44d2	; 0x44d2 <__divmodhi4>
    2700:	80 5d       	subi	r24, 0xD0	; 208
    2702:	8b 83       	std	Y+3, r24	; 0x03
	buf[1] = (accel / 10)%10 +48 ;
    2704:	c8 01       	movw	r24, r16
    2706:	b9 01       	movw	r22, r18
    2708:	0e 94 69 22 	call	0x44d2	; 0x44d2 <__divmodhi4>
    270c:	48 2f       	mov	r20, r24
    270e:	cb 01       	movw	r24, r22
    2710:	b9 01       	movw	r22, r18
    2712:	0e 94 69 22 	call	0x44d2	; 0x44d2 <__divmodhi4>
    2716:	80 5d       	subi	r24, 0xD0	; 208
    2718:	8a 83       	std	Y+2, r24	; 0x02
	buf[0] =  accel % 10 +48 ;
    271a:	40 5d       	subi	r20, 0xD0	; 208
    271c:	49 83       	std	Y+1, r20	; 0x01
    271e:	8e 01       	movw	r16, r28
    2720:	0a 5f       	subi	r16, 0xFA	; 250
    2722:	1f 4f       	sbci	r17, 0xFF	; 255
    2724:	ce 01       	movw	r24, r28
    2726:	01 96       	adiw	r24, 0x01	; 1
    2728:	7c 01       	movw	r14, r24
	
	for(int k = 4; k >= 0; k--)
	{
		LCDsendChar(buf[k]);
    272a:	f8 01       	movw	r30, r16
    272c:	82 91       	ld	r24, -Z
    272e:	8f 01       	movw	r16, r30
    2730:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <LCDsendChar>
	buf[3] = accel / 1000 +48 ;
	buf[2] = (accel / 100) %10 +48 ;
	buf[1] = (accel / 10)%10 +48 ;
	buf[0] =  accel % 10 +48 ;
	
	for(int k = 4; k >= 0; k--)
    2734:	0e 15       	cp	r16, r14
    2736:	1f 05       	cpc	r17, r15
    2738:	c1 f7       	brne	.-16     	; 0x272a <printAccelMil+0x7e>
    273a:	03 c0       	rjmp	.+6      	; 0x2742 <printAccelMil+0x96>
	{	// don't forget to add the sign
		buf[4] = '-';
	}
	else
	{
		buf[4] = ' ';
    273c:	80 e2       	ldi	r24, 0x20	; 32
    273e:	8d 83       	std	Y+5, r24	; 0x05
    2740:	cd cf       	rjmp	.-102    	; 0x26dc <printAccelMil+0x30>
	
	for(int k = 4; k >= 0; k--)
	{
		LCDsendChar(buf[k]);
	}
}
    2742:	60 96       	adiw	r28, 0x10	; 16
    2744:	0f b6       	in	r0, 0x3f	; 63
    2746:	f8 94       	cli
    2748:	de bf       	out	0x3e, r29	; 62
    274a:	0f be       	out	0x3f, r0	; 63
    274c:	cd bf       	out	0x3d, r28	; 61
    274e:	df 91       	pop	r29
    2750:	cf 91       	pop	r28
    2752:	1f 91       	pop	r17
    2754:	0f 91       	pop	r16
    2756:	ff 90       	pop	r15
    2758:	ef 90       	pop	r14
    275a:	08 95       	ret

0000275c <printAccelTilt>:

void printAccelTilt(uint8_t x, uint8_t y, int accel)
{
    275c:	ef 92       	push	r14
    275e:	ff 92       	push	r15
    2760:	0f 93       	push	r16
    2762:	1f 93       	push	r17
    2764:	cf 93       	push	r28
    2766:	df 93       	push	r29
    2768:	cd b7       	in	r28, 0x3d	; 61
    276a:	de b7       	in	r29, 0x3e	; 62
    276c:	60 97       	sbiw	r28, 0x10	; 16
    276e:	0f b6       	in	r0, 0x3f	; 63
    2770:	f8 94       	cli
    2772:	de bf       	out	0x3e, r29	; 62
    2774:	0f be       	out	0x3f, r0	; 63
    2776:	cd bf       	out	0x3d, r28	; 61
    2778:	8a 01       	movw	r16, r20
	//accel = asin(accel)*1018.59163579;
	LCDGotoXY(x, y);
    277a:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <LCDGotoXY>
	char buf[PRINT_INT_BUFSIZE];
	int8_t sign = 1;
	if (accel < 0) { // look for the sign
    277e:	11 23       	and	r17, r17
    2780:	ac f5       	brge	.+106    	; 0x27ec <printAccelTilt+0x90>
		sign = -1;
		accel= -accel;
    2782:	11 95       	neg	r17
    2784:	01 95       	neg	r16
    2786:	11 09       	sbc	r17, r1
	}
	
	if (sign < 0)
	{	// don't forget to add the sign
		buf[4] = '-';
    2788:	8d e2       	ldi	r24, 0x2D	; 45
    278a:	8d 83       	std	Y+5, r24	; 0x05
	}
	else
	{
		buf[4] = ' ';
	}
	buf[3] = accel / 1000 +48 ;
    278c:	c8 01       	movw	r24, r16
    278e:	68 ee       	ldi	r22, 0xE8	; 232
    2790:	73 e0       	ldi	r23, 0x03	; 3
    2792:	0e 94 69 22 	call	0x44d2	; 0x44d2 <__divmodhi4>
    2796:	60 5d       	subi	r22, 0xD0	; 208
    2798:	6c 83       	std	Y+4, r22	; 0x04
	buf[2] = (accel / 100) %10 +48 ;
    279a:	c8 01       	movw	r24, r16
    279c:	64 e6       	ldi	r22, 0x64	; 100
    279e:	70 e0       	ldi	r23, 0x00	; 0
    27a0:	0e 94 69 22 	call	0x44d2	; 0x44d2 <__divmodhi4>
    27a4:	cb 01       	movw	r24, r22
    27a6:	2a e0       	ldi	r18, 0x0A	; 10
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	b9 01       	movw	r22, r18
    27ac:	0e 94 69 22 	call	0x44d2	; 0x44d2 <__divmodhi4>
    27b0:	80 5d       	subi	r24, 0xD0	; 208
    27b2:	8b 83       	std	Y+3, r24	; 0x03
	buf[1] = (accel / 10)%10 +48 ;
    27b4:	c8 01       	movw	r24, r16
    27b6:	b9 01       	movw	r22, r18
    27b8:	0e 94 69 22 	call	0x44d2	; 0x44d2 <__divmodhi4>
    27bc:	48 2f       	mov	r20, r24
    27be:	cb 01       	movw	r24, r22
    27c0:	b9 01       	movw	r22, r18
    27c2:	0e 94 69 22 	call	0x44d2	; 0x44d2 <__divmodhi4>
    27c6:	80 5d       	subi	r24, 0xD0	; 208
    27c8:	8a 83       	std	Y+2, r24	; 0x02
	buf[0] =  accel % 10 +48 ;
    27ca:	40 5d       	subi	r20, 0xD0	; 208
    27cc:	49 83       	std	Y+1, r20	; 0x01
    27ce:	8e 01       	movw	r16, r28
    27d0:	0a 5f       	subi	r16, 0xFA	; 250
    27d2:	1f 4f       	sbci	r17, 0xFF	; 255
    27d4:	ce 01       	movw	r24, r28
    27d6:	01 96       	adiw	r24, 0x01	; 1
    27d8:	7c 01       	movw	r14, r24
	
	for(int k = 4; k >= 0; k--)
	{
		LCDsendChar(buf[k]);
    27da:	f8 01       	movw	r30, r16
    27dc:	82 91       	ld	r24, -Z
    27de:	8f 01       	movw	r16, r30
    27e0:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <LCDsendChar>
	buf[3] = accel / 1000 +48 ;
	buf[2] = (accel / 100) %10 +48 ;
	buf[1] = (accel / 10)%10 +48 ;
	buf[0] =  accel % 10 +48 ;
	
	for(int k = 4; k >= 0; k--)
    27e4:	0e 15       	cp	r16, r14
    27e6:	1f 05       	cpc	r17, r15
    27e8:	c1 f7       	brne	.-16     	; 0x27da <printAccelTilt+0x7e>
    27ea:	03 c0       	rjmp	.+6      	; 0x27f2 <printAccelTilt+0x96>
	{	// don't forget to add the sign
		buf[4] = '-';
	}
	else
	{
		buf[4] = ' ';
    27ec:	80 e2       	ldi	r24, 0x20	; 32
    27ee:	8d 83       	std	Y+5, r24	; 0x05
    27f0:	cd cf       	rjmp	.-102    	; 0x278c <printAccelTilt+0x30>
	
	for(int k = 4; k >= 0; k--)
	{
		LCDsendChar(buf[k]);
	}
}
    27f2:	60 96       	adiw	r28, 0x10	; 16
    27f4:	0f b6       	in	r0, 0x3f	; 63
    27f6:	f8 94       	cli
    27f8:	de bf       	out	0x3e, r29	; 62
    27fa:	0f be       	out	0x3f, r0	; 63
    27fc:	cd bf       	out	0x3d, r28	; 61
    27fe:	df 91       	pop	r29
    2800:	cf 91       	pop	r28
    2802:	1f 91       	pop	r17
    2804:	0f 91       	pop	r16
    2806:	ff 90       	pop	r15
    2808:	ef 90       	pop	r14
    280a:	08 95       	ret

0000280c <printAccelDeg>:

void printAccelDeg(uint8_t x, uint8_t y, int accel)
{
    280c:	0f 93       	push	r16
    280e:	1f 93       	push	r17
    2810:	cf 93       	push	r28
    2812:	df 93       	push	r29
    2814:	cd b7       	in	r28, 0x3d	; 61
    2816:	de b7       	in	r29, 0x3e	; 62
    2818:	60 97       	sbiw	r28, 0x10	; 16
    281a:	0f b6       	in	r0, 0x3f	; 63
    281c:	f8 94       	cli
    281e:	de bf       	out	0x3e, r29	; 62
    2820:	0f be       	out	0x3f, r0	; 63
    2822:	cd bf       	out	0x3d, r28	; 61
    2824:	8a 01       	movw	r16, r20
	//accel = asin(accel)*57.2957795;
	LCDGotoXY(x, y);
    2826:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <LCDGotoXY>
	char buf[PRINT_INT_BUFSIZE];
	int8_t sign = 1;
	if (accel < 0) { // look for the sign
    282a:	11 23       	and	r17, r17
    282c:	f4 f4       	brge	.+60     	; 0x286a <printAccelDeg+0x5e>
		sign = -1;
		accel= -accel;
    282e:	11 95       	neg	r17
    2830:	01 95       	neg	r16
    2832:	11 09       	sbc	r17, r1
	}
	
	if (sign < 0)
	{	// don't forget to add the sign
		buf[2] = '-';
    2834:	8d e2       	ldi	r24, 0x2D	; 45
    2836:	8b 83       	std	Y+3, r24	; 0x03
	else
	{
		buf[2] = ' ';
	}

	buf[1] = (accel / 10)%10 +48 ;
    2838:	2a e0       	ldi	r18, 0x0A	; 10
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	c8 01       	movw	r24, r16
    283e:	b9 01       	movw	r22, r18
    2840:	0e 94 69 22 	call	0x44d2	; 0x44d2 <__divmodhi4>
    2844:	48 2f       	mov	r20, r24
    2846:	cb 01       	movw	r24, r22
    2848:	b9 01       	movw	r22, r18
    284a:	0e 94 69 22 	call	0x44d2	; 0x44d2 <__divmodhi4>
    284e:	80 5d       	subi	r24, 0xD0	; 208
    2850:	8a 83       	std	Y+2, r24	; 0x02
	buf[0] =  accel % 10 +48 ;
    2852:	40 5d       	subi	r20, 0xD0	; 208
    2854:	49 83       	std	Y+1, r20	; 0x01
	
	for(int k = 2; k >= 0; k--)
	{
		LCDsendChar(buf[k]);
    2856:	8b 81       	ldd	r24, Y+3	; 0x03
    2858:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <LCDsendChar>
    285c:	8a 81       	ldd	r24, Y+2	; 0x02
    285e:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <LCDsendChar>
    2862:	89 81       	ldd	r24, Y+1	; 0x01
    2864:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <LCDsendChar>
    2868:	03 c0       	rjmp	.+6      	; 0x2870 <printAccelDeg+0x64>
	{	// don't forget to add the sign
		buf[2] = '-';
	}
	else
	{
		buf[2] = ' ';
    286a:	80 e2       	ldi	r24, 0x20	; 32
    286c:	8b 83       	std	Y+3, r24	; 0x03
    286e:	e4 cf       	rjmp	.-56     	; 0x2838 <printAccelDeg+0x2c>
	
	for(int k = 2; k >= 0; k--)
	{
		LCDsendChar(buf[k]);
	}
}
    2870:	60 96       	adiw	r28, 0x10	; 16
    2872:	0f b6       	in	r0, 0x3f	; 63
    2874:	f8 94       	cli
    2876:	de bf       	out	0x3e, r29	; 62
    2878:	0f be       	out	0x3f, r0	; 63
    287a:	cd bf       	out	0x3d, r28	; 61
    287c:	df 91       	pop	r29
    287e:	cf 91       	pop	r28
    2880:	1f 91       	pop	r17
    2882:	0f 91       	pop	r16
    2884:	08 95       	ret

00002886 <printInt>:
void printInt(uint8_t x, uint8_t y, int32_t i)
{
    2886:	7f 92       	push	r7
    2888:	8f 92       	push	r8
    288a:	9f 92       	push	r9
    288c:	af 92       	push	r10
    288e:	bf 92       	push	r11
    2890:	cf 92       	push	r12
    2892:	df 92       	push	r13
    2894:	ef 92       	push	r14
    2896:	ff 92       	push	r15
    2898:	0f 93       	push	r16
    289a:	1f 93       	push	r17
    289c:	cf 93       	push	r28
    289e:	df 93       	push	r29
    28a0:	69 01       	movw	r12, r18
    28a2:	7a 01       	movw	r14, r20
	LCDGotoXY(x, y);
    28a4:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <LCDGotoXY>
	char buf[PRINT_INT_BUFSIZE];
	int8_t sign = 1;
	//int8_t len = 0;
	if (i < 0) { // look for the sign
    28a8:	ff 20       	and	r15, r15
    28aa:	0c f0       	brlt	.+2      	; 0x28ae <printInt+0x28>
    28ac:	72 c0       	rjmp	.+228    	; 0x2992 <printInt+0x10c>
		sign = -1;
		i = -i;
    28ae:	f0 94       	com	r15
    28b0:	e0 94       	com	r14
    28b2:	d0 94       	com	r13
    28b4:	c0 94       	com	r12
    28b6:	c1 1c       	adc	r12, r1
    28b8:	d1 1c       	adc	r13, r1
    28ba:	e1 1c       	adc	r14, r1
    28bc:	f1 1c       	adc	r15, r1
	}
	
	buf[3] = i / 1000 + 48;
	buf[2] = (i / 100)%10 +48 ;
	buf[1] = (i / 10)%10 +48 ;
	buf[0] =  i % 10 +48 ;
    28be:	c7 01       	movw	r24, r14
    28c0:	b6 01       	movw	r22, r12
    28c2:	2a e0       	ldi	r18, 0x0A	; 10
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	40 e0       	ldi	r20, 0x00	; 0
    28c8:	50 e0       	ldi	r21, 0x00	; 0
    28ca:	0e 94 9f 22 	call	0x453e	; 0x453e <__divmodsi4>
    28ce:	d0 e3       	ldi	r29, 0x30	; 48
    28d0:	d6 0f       	add	r29, r22
	
	if (sign < 0)
	{	// don't forget to add the sign
		buf[4] = '-';
    28d2:	cd e2       	ldi	r28, 0x2D	; 45
	else
	{
		buf[4] = ' ';
	}
	
	if(i < 1000)
    28d4:	88 ee       	ldi	r24, 0xE8	; 232
    28d6:	c8 16       	cp	r12, r24
    28d8:	83 e0       	ldi	r24, 0x03	; 3
    28da:	d8 06       	cpc	r13, r24
    28dc:	e1 04       	cpc	r14, r1
    28de:	f1 04       	cpc	r15, r1
    28e0:	5c f0       	brlt	.+22     	; 0x28f8 <printInt+0x72>
	if (i < 0) { // look for the sign
		sign = -1;
		i = -i;
	}
	
	buf[3] = i / 1000 + 48;
    28e2:	c7 01       	movw	r24, r14
    28e4:	b6 01       	movw	r22, r12
    28e6:	28 ee       	ldi	r18, 0xE8	; 232
    28e8:	33 e0       	ldi	r19, 0x03	; 3
    28ea:	40 e0       	ldi	r20, 0x00	; 0
    28ec:	50 e0       	ldi	r21, 0x00	; 0
    28ee:	0e 94 9f 22 	call	0x453e	; 0x453e <__divmodsi4>
    28f2:	10 e3       	ldi	r17, 0x30	; 48
    28f4:	12 0f       	add	r17, r18
    28f6:	01 c0       	rjmp	.+2      	; 0x28fa <printInt+0x74>
		buf[4] = ' ';
	}
	
	if(i < 1000)
	{
		buf[3] = ' ';
    28f8:	10 e2       	ldi	r17, 0x20	; 32
	}
	if(i < 100)
    28fa:	84 e6       	ldi	r24, 0x64	; 100
    28fc:	c8 16       	cp	r12, r24
    28fe:	d1 04       	cpc	r13, r1
    2900:	e1 04       	cpc	r14, r1
    2902:	f1 04       	cpc	r15, r1
    2904:	b4 f0       	brlt	.+44     	; 0x2932 <printInt+0xac>
		sign = -1;
		i = -i;
	}
	
	buf[3] = i / 1000 + 48;
	buf[2] = (i / 100)%10 +48 ;
    2906:	c7 01       	movw	r24, r14
    2908:	b6 01       	movw	r22, r12
    290a:	24 e6       	ldi	r18, 0x64	; 100
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	40 e0       	ldi	r20, 0x00	; 0
    2910:	50 e0       	ldi	r21, 0x00	; 0
    2912:	0e 94 9f 22 	call	0x453e	; 0x453e <__divmodsi4>
    2916:	ca 01       	movw	r24, r20
    2918:	b9 01       	movw	r22, r18
    291a:	2a e0       	ldi	r18, 0x0A	; 10
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	40 e0       	ldi	r20, 0x00	; 0
    2920:	50 e0       	ldi	r21, 0x00	; 0
    2922:	0e 94 9f 22 	call	0x453e	; 0x453e <__divmodsi4>
    2926:	0f 2e       	mov	r0, r31
    2928:	f0 e3       	ldi	r31, 0x30	; 48
    292a:	7f 2e       	mov	r7, r31
    292c:	f0 2d       	mov	r31, r0
    292e:	76 0e       	add	r7, r22
    2930:	03 c0       	rjmp	.+6      	; 0x2938 <printInt+0xb2>
	{
		buf[3] = ' ';
	}
	if(i < 100)
	{
		buf[2] = ' ';
    2932:	68 94       	set
    2934:	77 24       	eor	r7, r7
    2936:	75 f8       	bld	r7, 5
	}
	if(i < 10)
    2938:	8a e0       	ldi	r24, 0x0A	; 10
    293a:	c8 16       	cp	r12, r24
    293c:	d1 04       	cpc	r13, r1
    293e:	e1 04       	cpc	r14, r1
    2940:	f1 04       	cpc	r15, r1
    2942:	b4 f0       	brlt	.+44     	; 0x2970 <printInt+0xea>
		i = -i;
	}
	
	buf[3] = i / 1000 + 48;
	buf[2] = (i / 100)%10 +48 ;
	buf[1] = (i / 10)%10 +48 ;
    2944:	0f 2e       	mov	r0, r31
    2946:	fa e0       	ldi	r31, 0x0A	; 10
    2948:	8f 2e       	mov	r8, r31
    294a:	91 2c       	mov	r9, r1
    294c:	a1 2c       	mov	r10, r1
    294e:	b1 2c       	mov	r11, r1
    2950:	f0 2d       	mov	r31, r0
    2952:	c7 01       	movw	r24, r14
    2954:	b6 01       	movw	r22, r12
    2956:	a5 01       	movw	r20, r10
    2958:	94 01       	movw	r18, r8
    295a:	0e 94 9f 22 	call	0x453e	; 0x453e <__divmodsi4>
    295e:	ca 01       	movw	r24, r20
    2960:	b9 01       	movw	r22, r18
    2962:	a5 01       	movw	r20, r10
    2964:	94 01       	movw	r18, r8
    2966:	0e 94 9f 22 	call	0x453e	; 0x453e <__divmodsi4>
    296a:	00 e3       	ldi	r16, 0x30	; 48
    296c:	06 0f       	add	r16, r22
    296e:	01 c0       	rjmp	.+2      	; 0x2972 <printInt+0xec>
	{
		buf[2] = ' ';
	}
	if(i < 10)
	{
		buf[1] = ' ';
    2970:	00 e2       	ldi	r16, 0x20	; 32
	}
	LCDsendChar(buf[4]);
    2972:	8c 2f       	mov	r24, r28
    2974:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <LCDsendChar>
	LCDsendChar(buf[3]);
    2978:	81 2f       	mov	r24, r17
    297a:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <LCDsendChar>
	LCDsendChar(buf[2]);
    297e:	87 2d       	mov	r24, r7
    2980:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <LCDsendChar>
	LCDsendChar(buf[1]);
    2984:	80 2f       	mov	r24, r16
    2986:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <LCDsendChar>
	LCDsendChar(buf[0]);
    298a:	8d 2f       	mov	r24, r29
    298c:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <LCDsendChar>
    2990:	0c c0       	rjmp	.+24     	; 0x29aa <printInt+0x124>
	}
	
	buf[3] = i / 1000 + 48;
	buf[2] = (i / 100)%10 +48 ;
	buf[1] = (i / 10)%10 +48 ;
	buf[0] =  i % 10 +48 ;
    2992:	c7 01       	movw	r24, r14
    2994:	b6 01       	movw	r22, r12
    2996:	2a e0       	ldi	r18, 0x0A	; 10
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	40 e0       	ldi	r20, 0x00	; 0
    299c:	50 e0       	ldi	r21, 0x00	; 0
    299e:	0e 94 9f 22 	call	0x453e	; 0x453e <__divmodsi4>
    29a2:	d0 e3       	ldi	r29, 0x30	; 48
    29a4:	d6 0f       	add	r29, r22
	{	// don't forget to add the sign
		buf[4] = '-';
	}
	else
	{
		buf[4] = ' ';
    29a6:	c0 e2       	ldi	r28, 0x20	; 32
    29a8:	95 cf       	rjmp	.-214    	; 0x28d4 <printInt+0x4e>
	LCDsendChar(buf[4]);
	LCDsendChar(buf[3]);
	LCDsendChar(buf[2]);
	LCDsendChar(buf[1]);
	LCDsendChar(buf[0]);
}
    29aa:	df 91       	pop	r29
    29ac:	cf 91       	pop	r28
    29ae:	1f 91       	pop	r17
    29b0:	0f 91       	pop	r16
    29b2:	ff 90       	pop	r15
    29b4:	ef 90       	pop	r14
    29b6:	df 90       	pop	r13
    29b8:	cf 90       	pop	r12
    29ba:	bf 90       	pop	r11
    29bc:	af 90       	pop	r10
    29be:	9f 90       	pop	r9
    29c0:	8f 90       	pop	r8
    29c2:	7f 90       	pop	r7
    29c4:	08 95       	ret

000029c6 <timer0_init>:
	timer0Overflows++;
}

void timer0_init(void) // Initialize timer 0
{
	TCCR0A |= (0<<COM0A1)|(0<<COM0A0)|(0<<COM0B1)|(0<<COM0B0)|(0<<WGM01)|(0<<WGM00);
    29c6:	84 b5       	in	r24, 0x24	; 36
    29c8:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (0<<FOC0A)|(0<<FOC0B)|(0<<WGM02)|(1<<CS02)|(0<<CS01)|(0<<CS00); //1024
    29ca:	85 b5       	in	r24, 0x25	; 37
    29cc:	84 60       	ori	r24, 0x04	; 4
    29ce:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (0<<OCIE0B)|(0<<OCIE0A)|(1<<TOIE0);
    29d0:	ee e6       	ldi	r30, 0x6E	; 110
    29d2:	f0 e0       	ldi	r31, 0x00	; 0
    29d4:	80 81       	ld	r24, Z
    29d6:	81 60       	ori	r24, 0x01	; 1
    29d8:	80 83       	st	Z, r24
	TIFR0 |=  (0<<OCF0B)|(0<<OCF0A)|(0<<TOV0);
    29da:	85 b3       	in	r24, 0x15	; 21
    29dc:	85 bb       	out	0x15, r24	; 21
	

	timer0Overflows = 0; // Start timer overflows at 0
    29de:	10 92 d1 02 	sts	0x02D1, r1
    29e2:	10 92 d0 02 	sts	0x02D0, r1
    29e6:	08 95       	ret

000029e8 <delay1s>:
}

//delay 1s
void delay1s(void)
{
    29e8:	84 e6       	ldi	r24, 0x64	; 100
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    29ea:	ef e1       	ldi	r30, 0x1F	; 31
    29ec:	fe e4       	ldi	r31, 0x4E	; 78
    29ee:	31 97       	sbiw	r30, 0x01	; 1
    29f0:	f1 f7       	brne	.-4      	; 0x29ee <delay1s+0x6>
    29f2:	00 c0       	rjmp	.+0      	; 0x29f4 <delay1s+0xc>
    29f4:	00 00       	nop
    29f6:	81 50       	subi	r24, 0x01	; 1
	uint8_t i;
	for(i=0;i<100;i++)
    29f8:	c1 f7       	brne	.-16     	; 0x29ea <delay1s+0x2>
	{
		_delay_ms(10);
	}
}
    29fa:	08 95       	ret

000029fc <progress>:
//demonstration of progress bar
void progress(void)
{
    29fc:	cf 93       	push	r28
	LCDclr();
    29fe:	0e 94 05 1e 	call	0x3c0a	; 0x3c0a <LCDclr>
	CopyStringtoLCD(OnScreen, 4, 0);
    2a02:	40 e0       	ldi	r20, 0x00	; 0
    2a04:	64 e0       	ldi	r22, 0x04	; 4
    2a06:	89 e8       	ldi	r24, 0x89	; 137
    2a08:	91 e2       	ldi	r25, 0x21	; 33
    2a0a:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <CopyStringtoLCD>
	/*
	LCDsendChar('D');
	delay1s();
	
	*/
	delay1s();
    2a0e:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <delay1s>
	for(uint8_t i=0;i<255;i++)
    2a12:	c0 e0       	ldi	r28, 0x00	; 0
	{
		//_delay_ms(5);
		LCDGotoXY(4, 1);
    2a14:	61 e0       	ldi	r22, 0x01	; 1
    2a16:	84 e0       	ldi	r24, 0x04	; 4
    2a18:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <LCDGotoXY>
		LCDprogressBar(i, 255, 8);
    2a1c:	48 e0       	ldi	r20, 0x08	; 8
    2a1e:	6f ef       	ldi	r22, 0xFF	; 255
    2a20:	8c 2f       	mov	r24, r28
    2a22:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <LCDprogressBar>
	LCDsendChar('D');
	delay1s();
	
	*/
	delay1s();
	for(uint8_t i=0;i<255;i++)
    2a26:	cf 5f       	subi	r28, 0xFF	; 255
    2a28:	cf 3f       	cpi	r28, 0xFF	; 255
    2a2a:	a1 f7       	brne	.-24     	; 0x2a14 <progress+0x18>
	{
		//_delay_ms(5);
		LCDGotoXY(4, 1);
		LCDprogressBar(i, 255, 8);
	}
	LCDclr();
    2a2c:	0e 94 05 1e 	call	0x3c0a	; 0x3c0a <LCDclr>
}
    2a30:	cf 91       	pop	r28
    2a32:	08 95       	ret

00002a34 <setupI2C>:
void setupI2C(void)
{
	unsigned char c;

	// Read the WHO_AM_I register, this is a good test of communication
	c = readRegister(0x0D);  // Read WHO_AM_I register
    2a34:	8d e0       	ldi	r24, 0x0D	; 13
    2a36:	0e 94 ac 11 	call	0x2358	; 0x2358 <readRegister>
	if (c == 0x2A) // WHO_AM_I should always be 0x2A
    2a3a:	8a 32       	cpi	r24, 0x2A	; 42
    2a3c:	29 f4       	brne	.+10     	; 0x2a48 <setupI2C+0x14>
	{
		initMMA8452(SCALE, dataRate);  // init the accelerometer if communication is OK
    2a3e:	60 e0       	ldi	r22, 0x00	; 0
    2a40:	82 e0       	ldi	r24, 0x02	; 2
    2a42:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <initMMA8452>
    2a46:	08 95       	ret
	}
	else
	{
		while(1)
		{
			output_high(PORTD, GreenLED);
    2a48:	5f 9a       	sbi	0x0b, 7	; 11
    2a4a:	2f ef       	ldi	r18, 0xFF	; 255
    2a4c:	84 e3       	ldi	r24, 0x34	; 52
    2a4e:	9c e0       	ldi	r25, 0x0C	; 12
    2a50:	21 50       	subi	r18, 0x01	; 1
    2a52:	80 40       	sbci	r24, 0x00	; 0
    2a54:	90 40       	sbci	r25, 0x00	; 0
    2a56:	e1 f7       	brne	.-8      	; 0x2a50 <setupI2C+0x1c>
    2a58:	00 c0       	rjmp	.+0      	; 0x2a5a <setupI2C+0x26>
    2a5a:	00 00       	nop
			_delay_ms(500);
			
			output_low(PORTD, GreenLED);
    2a5c:	5f 98       	cbi	0x0b, 7	; 11
    2a5e:	2f ef       	ldi	r18, 0xFF	; 255
    2a60:	84 e3       	ldi	r24, 0x34	; 52
    2a62:	9c e0       	ldi	r25, 0x0C	; 12
    2a64:	21 50       	subi	r18, 0x01	; 1
    2a66:	80 40       	sbci	r24, 0x00	; 0
    2a68:	90 40       	sbci	r25, 0x00	; 0
    2a6a:	e1 f7       	brne	.-8      	; 0x2a64 <setupI2C+0x30>
    2a6c:	00 c0       	rjmp	.+0      	; 0x2a6e <setupI2C+0x3a>
    2a6e:	00 00       	nop
    2a70:	eb cf       	rjmp	.-42     	; 0x2a48 <setupI2C+0x14>

00002a72 <trans>:
		} // Loop forever if communication doesn't happen
	}
}

int trans(int elv, char * shltyp, int charge)
{
    2a72:	af 92       	push	r10
    2a74:	bf 92       	push	r11
    2a76:	cf 92       	push	r12
    2a78:	df 92       	push	r13
    2a7a:	ef 92       	push	r14
    2a7c:	ff 92       	push	r15
    2a7e:	0f 93       	push	r16
    2a80:	1f 93       	push	r17
    2a82:	cf 93       	push	r28
    2a84:	df 93       	push	r29
    2a86:	8c 01       	movw	r16, r24
    2a88:	6b 01       	movw	r12, r22
    2a8a:	5a 01       	movw	r10, r20


	/* generate pointers to correct shell type table ..
	initially ignoring illumination differences */

	fztime = 0;	/* assume 0 overwrite for illum rds */
    2a8c:	10 92 14 07 	sts	0x0714, r1

	for(currentFT = firstFT; currentFT <= lastFT; currentFT++)
    2a90:	c0 91 5b 01 	lds	r28, 0x015B
    2a94:	d0 91 5c 01 	lds	r29, 0x015C
    2a98:	d0 93 2b 03 	sts	0x032B, r29
    2a9c:	c0 93 2a 03 	sts	0x032A, r28
    2aa0:	e0 90 59 01 	lds	r14, 0x0159
    2aa4:	f0 90 5a 01 	lds	r15, 0x015A
    2aa8:	ec 16       	cp	r14, r28
    2aaa:	fd 06       	cpc	r15, r29
    2aac:	c0 f1       	brcs	.+112    	; 0x2b1e <trans+0xac>
	{
		if(!(strcmp(shltyp,currentFT->shelltype)))
    2aae:	68 81       	ld	r22, Y
    2ab0:	79 81       	ldd	r23, Y+1	; 0x01
    2ab2:	c6 01       	movw	r24, r12
    2ab4:	0e 94 cd 22 	call	0x459a	; 0x459a <strcmp>
    2ab8:	89 2b       	or	r24, r25
    2aba:	49 f5       	brne	.+82     	; 0x2b0e <trans+0x9c>
		{
			if(charge == 0)
    2abc:	a1 14       	cp	r10, r1
    2abe:	b1 04       	cpc	r11, r1
    2ac0:	79 f4       	brne	.+30     	; 0x2ae0 <trans+0x6e>
			{
				first = currentFT->firstch0;
    2ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ac6:	90 93 16 07 	sts	0x0716, r25
    2aca:	80 93 15 07 	sts	0x0715, r24

				/* check if charge 0 is a valid value..is except for illums normally */
				if(first == (const struct lookup *)0)
    2ace:	89 2b       	or	r24, r25
    2ad0:	69 f0       	breq	.+26     	; 0x2aec <trans+0x7a>
				{
					charge = 1;
					goto chg1;
				}
				/* above being true means only charge 1 valid */
				last = currentFT->lastch0;
    2ad2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ad4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ad6:	90 93 f9 02 	sts	0x02F9, r25
    2ada:	80 93 f8 02 	sts	0x02F8, r24
				break;
    2ade:	1f c0       	rjmp	.+62     	; 0x2b1e <trans+0xac>
			}
			chg1:
			if(charge == 1)
    2ae0:	81 e0       	ldi	r24, 0x01	; 1
    2ae2:	a8 16       	cp	r10, r24
    2ae4:	b1 04       	cpc	r11, r1
    2ae6:	99 f4       	brne	.+38     	; 0x2b0e <trans+0x9c>
    2ae8:	fe 01       	movw	r30, r28
    2aea:	01 c0       	rjmp	.+2      	; 0x2aee <trans+0x7c>
    2aec:	fe 01       	movw	r30, r28
			{ /* would be else except for invalid charge 0 above */
				first = currentFT->firstch1;
    2aee:	86 81       	ldd	r24, Z+6	; 0x06
    2af0:	97 81       	ldd	r25, Z+7	; 0x07
    2af2:	90 93 16 07 	sts	0x0716, r25
    2af6:	80 93 15 07 	sts	0x0715, r24
				last = currentFT->lastch1;
    2afa:	80 85       	ldd	r24, Z+8	; 0x08
    2afc:	91 85       	ldd	r25, Z+9	; 0x09
    2afe:	90 93 f9 02 	sts	0x02F9, r25
    2b02:	80 93 f8 02 	sts	0x02F8, r24
				break;
    2b06:	aa 24       	eor	r10, r10
    2b08:	a3 94       	inc	r10
    2b0a:	b1 2c       	mov	r11, r1
    2b0c:	08 c0       	rjmp	.+16     	; 0x2b1e <trans+0xac>
	/* generate pointers to correct shell type table ..
	initially ignoring illumination differences */

	fztime = 0;	/* assume 0 overwrite for illum rds */

	for(currentFT = firstFT; currentFT <= lastFT; currentFT++)
    2b0e:	2c 96       	adiw	r28, 0x0c	; 12
    2b10:	d0 93 2b 03 	sts	0x032B, r29
    2b14:	c0 93 2a 03 	sts	0x032A, r28
    2b18:	ec 16       	cp	r14, r28
    2b1a:	fd 06       	cpc	r15, r29
    2b1c:	40 f6       	brcc	.-112    	; 0x2aae <trans+0x3c>
				break;
			}
		}
	}

	gblcharge = charge;	/* usually the same as in but can override above */
    2b1e:	a0 92 35 07 	sts	0x0735, r10
	/* translate from elevation to range */

	if(pgm_read_word(&(first->mils)) < elv) return(-1);	/* too high */
    2b22:	a0 91 15 07 	lds	r26, 0x0715
    2b26:	b0 91 16 07 	lds	r27, 0x0716
    2b2a:	fd 01       	movw	r30, r26
    2b2c:	32 96       	adiw	r30, 0x02	; 2
    2b2e:	25 91       	lpm	r18, Z+
    2b30:	34 91       	lpm	r19, Z
    2b32:	c8 01       	movw	r24, r16
    2b34:	20 17       	cp	r18, r16
    2b36:	31 07       	cpc	r19, r17
    2b38:	08 f4       	brcc	.+2      	; 0x2b3c <trans+0xca>
    2b3a:	84 c0       	rjmp	.+264    	; 0x2c44 <trans+0x1d2>
	if(pgm_read_word(&(last->mils)) > elv)  return(-2);	/* too low */
    2b3c:	60 91 f8 02 	lds	r22, 0x02F8
    2b40:	70 91 f9 02 	lds	r23, 0x02F9
    2b44:	fb 01       	movw	r30, r22
    2b46:	32 96       	adiw	r30, 0x02	; 2
    2b48:	25 91       	lpm	r18, Z+
    2b4a:	34 91       	lpm	r19, Z
    2b4c:	02 17       	cp	r16, r18
    2b4e:	13 07       	cpc	r17, r19
    2b50:	08 f4       	brcc	.+2      	; 0x2b54 <trans+0xe2>
    2b52:	7b c0       	rjmp	.+246    	; 0x2c4a <trans+0x1d8>

	for(current = first; current < last ; current++) { /* here elv in bounds, get range in meters*/
    2b54:	b0 93 25 03 	sts	0x0325, r27
    2b58:	a0 93 24 03 	sts	0x0324, r26
    2b5c:	a6 17       	cp	r26, r22
    2b5e:	b7 07       	cpc	r27, r23
    2b60:	08 f0       	brcs	.+2      	; 0x2b64 <trans+0xf2>
    2b62:	58 c0       	rjmp	.+176    	; 0x2c14 <trans+0x1a2>
    2b64:	9d 01       	movw	r18, r26
    2b66:	a9 01       	movw	r20, r18
    2b68:	4e 5f       	subi	r20, 0xFE	; 254
    2b6a:	5f 4f       	sbci	r21, 0xFF	; 255
		if(pgm_read_word(&(current->mils)) >= elv && pgm_read_word(&((current + 1)->mils)) < elv) {
    2b6c:	fa 01       	movw	r30, r20
    2b6e:	e5 90       	lpm	r14, Z+
    2b70:	f4 90       	lpm	r15, Z
    2b72:	e8 16       	cp	r14, r24
    2b74:	f9 06       	cpc	r15, r25
    2b76:	08 f4       	brcc	.+2      	; 0x2b7a <trans+0x108>
    2b78:	43 c0       	rjmp	.+134    	; 0x2c00 <trans+0x18e>
    2b7a:	79 01       	movw	r14, r18
    2b7c:	e6 e0       	ldi	r30, 0x06	; 6
    2b7e:	ee 0e       	add	r14, r30
    2b80:	f1 1c       	adc	r15, r1
    2b82:	f7 01       	movw	r30, r14
    2b84:	c5 90       	lpm	r12, Z+
    2b86:	d4 90       	lpm	r13, Z
    2b88:	c8 16       	cp	r12, r24
    2b8a:	d9 06       	cpc	r13, r25
    2b8c:	08 f0       	brcs	.+2      	; 0x2b90 <trans+0x11e>
    2b8e:	38 c0       	rjmp	.+112    	; 0x2c00 <trans+0x18e>
    2b90:	30 93 25 03 	sts	0x0325, r19
    2b94:	20 93 24 03 	sts	0x0324, r18

			if((pgm_read_word(&(current->mils))  - elv) < (elv - pgm_read_word(&((current + 1)->mils))) ) { range = pgm_read_word(&(current->meters));
    2b98:	fa 01       	movw	r30, r20
    2b9a:	45 91       	lpm	r20, Z+
    2b9c:	54 91       	lpm	r21, Z
    2b9e:	f7 01       	movw	r30, r14
    2ba0:	85 91       	lpm	r24, Z+
    2ba2:	94 91       	lpm	r25, Z
    2ba4:	40 1b       	sub	r20, r16
    2ba6:	51 0b       	sbc	r21, r17
    2ba8:	08 1b       	sub	r16, r24
    2baa:	19 0b       	sbc	r17, r25
    2bac:	40 17       	cp	r20, r16
    2bae:	51 07       	cpc	r21, r17
    2bb0:	58 f4       	brcc	.+22     	; 0x2bc8 <trans+0x156>
    2bb2:	f9 01       	movw	r30, r18
    2bb4:	85 91       	lpm	r24, Z+
    2bb6:	94 91       	lpm	r25, Z
				i = current - first;
    2bb8:	2a 1b       	sub	r18, r26
    2bba:	3b 0b       	sbc	r19, r27
    2bbc:	a9 01       	movw	r20, r18
    2bbe:	55 95       	asr	r21
    2bc0:	47 95       	ror	r20
    2bc2:	55 95       	asr	r21
    2bc4:	47 95       	ror	r20
    2bc6:	0d c0       	rjmp	.+26     	; 0x2be2 <trans+0x170>

			}
			else {range = pgm_read_word(&((current + 1)->meters));
    2bc8:	f9 01       	movw	r30, r18
    2bca:	34 96       	adiw	r30, 0x04	; 4
    2bcc:	85 91       	lpm	r24, Z+
    2bce:	94 91       	lpm	r25, Z
				i = current + 1 - first;
    2bd0:	2c 5f       	subi	r18, 0xFC	; 252
    2bd2:	3f 4f       	sbci	r19, 0xFF	; 255
    2bd4:	2a 1b       	sub	r18, r26
    2bd6:	3b 0b       	sbc	r19, r27
    2bd8:	a9 01       	movw	r20, r18
    2bda:	55 95       	asr	r21
    2bdc:	47 95       	ror	r20
    2bde:	55 95       	asr	r21
    2be0:	47 95       	ror	r20

			}
			if(pgm_read_word(&(currentFT->fuzetimes))) fztime = (uint8_t*)((pgm_read_word(&(currentFT->fuzetimes))) + i); //fztime =*
    2be2:	2a 96       	adiw	r28, 0x0a	; 10
    2be4:	fe 01       	movw	r30, r28
    2be6:	25 91       	lpm	r18, Z+
    2be8:	34 91       	lpm	r19, Z
    2bea:	23 2b       	or	r18, r19
    2bec:	09 f4       	brne	.+2      	; 0x2bf0 <trans+0x17e>
    2bee:	2f c0       	rjmp	.+94     	; 0x2c4e <trans+0x1dc>
    2bf0:	fe 01       	movw	r30, r28
    2bf2:	25 91       	lpm	r18, Z+
    2bf4:	34 91       	lpm	r19, Z
    2bf6:	42 0f       	add	r20, r18
    2bf8:	53 1f       	adc	r21, r19
    2bfa:	40 93 14 07 	sts	0x0714, r20
    2bfe:	27 c0       	rjmp	.+78     	; 0x2c4e <trans+0x1dc>
	/* translate from elevation to range */

	if(pgm_read_word(&(first->mils)) < elv) return(-1);	/* too high */
	if(pgm_read_word(&(last->mils)) > elv)  return(-2);	/* too low */

	for(current = first; current < last ; current++) { /* here elv in bounds, get range in meters*/
    2c00:	2c 5f       	subi	r18, 0xFC	; 252
    2c02:	3f 4f       	sbci	r19, 0xFF	; 255
    2c04:	26 17       	cp	r18, r22
    2c06:	37 07       	cpc	r19, r23
    2c08:	08 f4       	brcc	.+2      	; 0x2c0c <trans+0x19a>
    2c0a:	ad cf       	rjmp	.-166    	; 0x2b66 <trans+0xf4>
    2c0c:	30 93 25 03 	sts	0x0325, r19
    2c10:	20 93 24 03 	sts	0x0324, r18
		}
	}
	/**** here the elevation is exactly the value of the last elevation otherwise done above **/
	i = last - first;

	if(pgm_read_word(&(currentFT->fuzetimes))) fztime = (uint8_t*)((pgm_read_word(&(currentFT->fuzetimes))) + i); //fztime =*
    2c14:	2a 96       	adiw	r28, 0x0a	; 10
    2c16:	fe 01       	movw	r30, r28
    2c18:	85 91       	lpm	r24, Z+
    2c1a:	94 91       	lpm	r25, Z
    2c1c:	89 2b       	or	r24, r25
    2c1e:	71 f0       	breq	.+28     	; 0x2c3c <trans+0x1ca>
    2c20:	fe 01       	movw	r30, r28
    2c22:	85 91       	lpm	r24, Z+
    2c24:	94 91       	lpm	r25, Z
			if(pgm_read_word(&(currentFT->fuzetimes))) fztime = (uint8_t*)((pgm_read_word(&(currentFT->fuzetimes))) + i); //fztime =*
			return(range);
		}
	}
	/**** here the elevation is exactly the value of the last elevation otherwise done above **/
	i = last - first;
    2c26:	9b 01       	movw	r18, r22
    2c28:	2a 1b       	sub	r18, r26
    2c2a:	3b 0b       	sbc	r19, r27
    2c2c:	35 95       	asr	r19
    2c2e:	27 95       	ror	r18
    2c30:	35 95       	asr	r19
    2c32:	27 95       	ror	r18

	if(pgm_read_word(&(currentFT->fuzetimes))) fztime = (uint8_t*)((pgm_read_word(&(currentFT->fuzetimes))) + i); //fztime =*
    2c34:	82 0f       	add	r24, r18
    2c36:	93 1f       	adc	r25, r19
    2c38:	80 93 14 07 	sts	0x0714, r24
	return(pgm_read_word(&(last->meters)));
    2c3c:	fb 01       	movw	r30, r22
    2c3e:	85 91       	lpm	r24, Z+
    2c40:	94 91       	lpm	r25, Z
    2c42:	05 c0       	rjmp	.+10     	; 0x2c4e <trans+0x1dc>
	}

	gblcharge = charge;	/* usually the same as in but can override above */
	/* translate from elevation to range */

	if(pgm_read_word(&(first->mils)) < elv) return(-1);	/* too high */
    2c44:	8f ef       	ldi	r24, 0xFF	; 255
    2c46:	9f ef       	ldi	r25, 0xFF	; 255
    2c48:	02 c0       	rjmp	.+4      	; 0x2c4e <trans+0x1dc>
	if(pgm_read_word(&(last->mils)) > elv)  return(-2);	/* too low */
    2c4a:	8e ef       	ldi	r24, 0xFE	; 254
    2c4c:	9f ef       	ldi	r25, 0xFF	; 255
	/**** here the elevation is exactly the value of the last elevation otherwise done above **/
	i = last - first;

	if(pgm_read_word(&(currentFT->fuzetimes))) fztime = (uint8_t*)((pgm_read_word(&(currentFT->fuzetimes))) + i); //fztime =*
	return(pgm_read_word(&(last->meters)));
}
    2c4e:	df 91       	pop	r29
    2c50:	cf 91       	pop	r28
    2c52:	1f 91       	pop	r17
    2c54:	0f 91       	pop	r16
    2c56:	ff 90       	pop	r15
    2c58:	ef 90       	pop	r14
    2c5a:	df 90       	pop	r13
    2c5c:	cf 90       	pop	r12
    2c5e:	bf 90       	pop	r11
    2c60:	af 90       	pop	r10
    2c62:	08 95       	ret

00002c64 <update_Display>:
int ammonum = 0;
int chargenum = 0;
int groupnum = 0;

void update_Display(void) //
{
    2c64:	0f 93       	push	r16
    2c66:	1f 93       	push	r17
    2c68:	cf 93       	push	r28
    2c6a:	df 93       	push	r29
	if(switch_state == 0 ) //
    2c6c:	80 91 58 01 	lds	r24, 0x0158
    2c70:	81 11       	cpse	r24, r1
    2c72:	2a c0       	rjmp	.+84     	; 0x2cc8 <update_Display+0x64>
	{
		CopyStringtoLCD(State0, 3, 0);
    2c74:	40 e0       	ldi	r20, 0x00	; 0
    2c76:	63 e0       	ldi	r22, 0x03	; 3
    2c78:	81 e8       	ldi	r24, 0x81	; 129
    2c7a:	91 e2       	ldi	r25, 0x21	; 33
    2c7c:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <CopyStringtoLCD>
		printInt(11, 0 , i);
    2c80:	20 91 56 01 	lds	r18, 0x0156
    2c84:	30 91 57 01 	lds	r19, 0x0157
    2c88:	44 27       	eor	r20, r20
    2c8a:	37 fd       	sbrc	r19, 7
    2c8c:	40 95       	com	r20
    2c8e:	54 2f       	mov	r21, r20
    2c90:	60 e0       	ldi	r22, 0x00	; 0
    2c92:	8b e0       	ldi	r24, 0x0B	; 11
    2c94:	0e 94 43 14 	call	0x2886	; 0x2886 <printInt>
		printInt(0, 1 , system_Clock);
    2c98:	20 91 ca 02 	lds	r18, 0x02CA
    2c9c:	30 91 cb 02 	lds	r19, 0x02CB
    2ca0:	40 91 cc 02 	lds	r20, 0x02CC
    2ca4:	50 91 cd 02 	lds	r21, 0x02CD
    2ca8:	61 e0       	ldi	r22, 0x01	; 1
    2caa:	80 e0       	ldi	r24, 0x00	; 0
    2cac:	0e 94 43 14 	call	0x2886	; 0x2886 <printInt>
		LCDGotoXY(5,1);
    2cb0:	61 e0       	ldi	r22, 0x01	; 1
    2cb2:	85 e0       	ldi	r24, 0x05	; 5
    2cb4:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <LCDGotoXY>
		lcd_puts(" GREG BYRNE");
    2cb8:	8d e5       	ldi	r24, 0x5D	; 93
    2cba:	91 e0       	ldi	r25, 0x01	; 1
    2cbc:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <lcd_puts>
		output_low(PORTD, GreenLED);
    2cc0:	5f 98       	cbi	0x0b, 7	; 11
		updateSpeed = 32;
    2cc2:	80 e2       	ldi	r24, 0x20	; 32
    2cc4:	80 93 53 01 	sts	0x0153, r24
		
	}
	if(switch_state == 1)	//Red
    2cc8:	80 91 58 01 	lds	r24, 0x0158
    2ccc:	81 30       	cpi	r24, 0x01	; 1
    2cce:	b9 f4       	brne	.+46     	; 0x2cfe <update_Display+0x9a>
	{
		CopyStringtoLCD(State1, 3, 0);
    2cd0:	40 e0       	ldi	r20, 0x00	; 0
    2cd2:	63 e0       	ldi	r22, 0x03	; 3
    2cd4:	89 e7       	ldi	r24, 0x79	; 121
    2cd6:	91 e2       	ldi	r25, 0x21	; 33
    2cd8:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <CopyStringtoLCD>
		printInt(11, 0 , i);
    2cdc:	20 91 56 01 	lds	r18, 0x0156
    2ce0:	30 91 57 01 	lds	r19, 0x0157
    2ce4:	44 27       	eor	r20, r20
    2ce6:	37 fd       	sbrc	r19, 7
    2ce8:	40 95       	com	r20
    2cea:	54 2f       	mov	r21, r20
    2cec:	60 e0       	ldi	r22, 0x00	; 0
    2cee:	8b e0       	ldi	r24, 0x0B	; 11
    2cf0:	0e 94 43 14 	call	0x2886	; 0x2886 <printInt>
		output_high(PORTD, GreenLED);
    2cf4:	5f 9a       	sbi	0x0b, 7	; 11
		updateSpeed = 16;
    2cf6:	80 e1       	ldi	r24, 0x10	; 16
    2cf8:	80 93 53 01 	sts	0x0153, r24
    2cfc:	ef c4       	rjmp	.+2526   	; 0x36dc <update_Display+0xa78>
	}
	else if(switch_state == 2)	//Orange
    2cfe:	80 91 58 01 	lds	r24, 0x0158
    2d02:	82 30       	cpi	r24, 0x02	; 2
    2d04:	19 f5       	brne	.+70     	; 0x2d4c <update_Display+0xe8>
	{
		CopyStringtoLCD(State2, 3, 0);
    2d06:	40 e0       	ldi	r20, 0x00	; 0
    2d08:	63 e0       	ldi	r22, 0x03	; 3
    2d0a:	81 e7       	ldi	r24, 0x71	; 113
    2d0c:	91 e2       	ldi	r25, 0x21	; 33
    2d0e:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <CopyStringtoLCD>
		printInt(11, 0 , i);
    2d12:	20 91 56 01 	lds	r18, 0x0156
    2d16:	30 91 57 01 	lds	r19, 0x0157
    2d1a:	44 27       	eor	r20, r20
    2d1c:	37 fd       	sbrc	r19, 7
    2d1e:	40 95       	com	r20
    2d20:	54 2f       	mov	r21, r20
    2d22:	60 e0       	ldi	r22, 0x00	; 0
    2d24:	8b e0       	ldi	r24, 0x0B	; 11
    2d26:	0e 94 43 14 	call	0x2886	; 0x2886 <printInt>
		printTime(3,1, system_Clock);
    2d2a:	20 91 ca 02 	lds	r18, 0x02CA
    2d2e:	30 91 cb 02 	lds	r19, 0x02CB
    2d32:	40 91 cc 02 	lds	r20, 0x02CC
    2d36:	50 91 cd 02 	lds	r21, 0x02CD
    2d3a:	61 e0       	ldi	r22, 0x01	; 1
    2d3c:	83 e0       	ldi	r24, 0x03	; 3
    2d3e:	0e 94 98 12 	call	0x2530	; 0x2530 <printTime>
		output_low(PORTD, GreenLED);
    2d42:	5f 98       	cbi	0x0b, 7	; 11
		updateSpeed = 8;
    2d44:	88 e0       	ldi	r24, 0x08	; 8
    2d46:	80 93 53 01 	sts	0x0153, r24
    2d4a:	c8 c4       	rjmp	.+2448   	; 0x36dc <update_Display+0xa78>
	}
	else if(switch_state == 3)	//Yellow
    2d4c:	80 91 58 01 	lds	r24, 0x0158
    2d50:	83 30       	cpi	r24, 0x03	; 3
    2d52:	b9 f5       	brne	.+110    	; 0x2dc2 <update_Display+0x15e>
	{
		CopyStringtoLCD(State3, 3, 0);
    2d54:	40 e0       	ldi	r20, 0x00	; 0
    2d56:	63 e0       	ldi	r22, 0x03	; 3
    2d58:	89 e6       	ldi	r24, 0x69	; 105
    2d5a:	91 e2       	ldi	r25, 0x21	; 33
    2d5c:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <CopyStringtoLCD>
		LCDGotoXY(0,1);
    2d60:	61 e0       	ldi	r22, 0x01	; 1
    2d62:	80 e0       	ldi	r24, 0x00	; 0
    2d64:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <LCDGotoXY>
		LCDsendChar('X');
    2d68:	88 e5       	ldi	r24, 0x58	; 88
    2d6a:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <LCDsendChar>
		printAccelDeg(1, 1 , (int)accelD[0]);
    2d6e:	60 91 19 07 	lds	r22, 0x0719
    2d72:	70 91 1a 07 	lds	r23, 0x071A
    2d76:	80 91 1b 07 	lds	r24, 0x071B
    2d7a:	90 91 1c 07 	lds	r25, 0x071C
    2d7e:	0e 94 81 20 	call	0x4102	; 0x4102 <__fixsfsi>
    2d82:	ab 01       	movw	r20, r22
    2d84:	61 e0       	ldi	r22, 0x01	; 1
    2d86:	81 e0       	ldi	r24, 0x01	; 1
    2d88:	0e 94 06 14 	call	0x280c	; 0x280c <printAccelDeg>
		LCDGotoXY(9,1);
    2d8c:	61 e0       	ldi	r22, 0x01	; 1
    2d8e:	89 e0       	ldi	r24, 0x09	; 9
    2d90:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <LCDGotoXY>
		LCDsendChar('Y');
    2d94:	89 e5       	ldi	r24, 0x59	; 89
    2d96:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <LCDsendChar>
		printAccelDeg(10, 1 , (int)accelD[1]);
    2d9a:	60 91 1d 07 	lds	r22, 0x071D
    2d9e:	70 91 1e 07 	lds	r23, 0x071E
    2da2:	80 91 1f 07 	lds	r24, 0x071F
    2da6:	90 91 20 07 	lds	r25, 0x0720
    2daa:	0e 94 81 20 	call	0x4102	; 0x4102 <__fixsfsi>
    2dae:	ab 01       	movw	r20, r22
    2db0:	61 e0       	ldi	r22, 0x01	; 1
    2db2:	8a e0       	ldi	r24, 0x0A	; 10
    2db4:	0e 94 06 14 	call	0x280c	; 0x280c <printAccelDeg>
		output_high(PORTD, GreenLED);
    2db8:	5f 9a       	sbi	0x0b, 7	; 11
		updateSpeed = 4;
    2dba:	84 e0       	ldi	r24, 0x04	; 4
    2dbc:	80 93 53 01 	sts	0x0153, r24
    2dc0:	8d c4       	rjmp	.+2330   	; 0x36dc <update_Display+0xa78>
	}
	
	else if(switch_state == 4)	//Green
    2dc2:	80 91 58 01 	lds	r24, 0x0158
    2dc6:	84 30       	cpi	r24, 0x04	; 4
    2dc8:	a1 f5       	brne	.+104    	; 0x2e32 <update_Display+0x1ce>
	{
		CopyStringtoLCD(State4, 3, 0);
    2dca:	40 e0       	ldi	r20, 0x00	; 0
    2dcc:	63 e0       	ldi	r22, 0x03	; 3
    2dce:	81 e6       	ldi	r24, 0x61	; 97
    2dd0:	91 e2       	ldi	r25, 0x21	; 33
    2dd2:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <CopyStringtoLCD>
		LCDGotoXY(0,1);
    2dd6:	61 e0       	ldi	r22, 0x01	; 1
    2dd8:	80 e0       	ldi	r24, 0x00	; 0
    2dda:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <LCDGotoXY>
		LCDsendChar('X');
    2dde:	88 e5       	ldi	r24, 0x58	; 88
    2de0:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <LCDsendChar>
		printAccelMil(1, 1 , (int)accelM[0]);
    2de4:	60 91 29 07 	lds	r22, 0x0729
    2de8:	70 91 2a 07 	lds	r23, 0x072A
    2dec:	80 91 2b 07 	lds	r24, 0x072B
    2df0:	90 91 2c 07 	lds	r25, 0x072C
    2df4:	0e 94 81 20 	call	0x4102	; 0x4102 <__fixsfsi>
    2df8:	ab 01       	movw	r20, r22
    2dfa:	61 e0       	ldi	r22, 0x01	; 1
    2dfc:	81 e0       	ldi	r24, 0x01	; 1
    2dfe:	0e 94 56 13 	call	0x26ac	; 0x26ac <printAccelMil>
		LCDGotoXY(9,1);
    2e02:	61 e0       	ldi	r22, 0x01	; 1
    2e04:	89 e0       	ldi	r24, 0x09	; 9
    2e06:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <LCDGotoXY>
		LCDsendChar('Y');
    2e0a:	89 e5       	ldi	r24, 0x59	; 89
    2e0c:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <LCDsendChar>
		printAccelMil(10, 1 , (int)accelM[1]);
    2e10:	60 91 2d 07 	lds	r22, 0x072D
    2e14:	70 91 2e 07 	lds	r23, 0x072E
    2e18:	80 91 2f 07 	lds	r24, 0x072F
    2e1c:	90 91 30 07 	lds	r25, 0x0730
    2e20:	0e 94 81 20 	call	0x4102	; 0x4102 <__fixsfsi>
    2e24:	ab 01       	movw	r20, r22
    2e26:	61 e0       	ldi	r22, 0x01	; 1
    2e28:	8a e0       	ldi	r24, 0x0A	; 10
    2e2a:	0e 94 56 13 	call	0x26ac	; 0x26ac <printAccelMil>
		//LCDGotoXY(12,1);
		//LCDsendChar('Z');
		//printAccel(13, 1 , (int)accelD[2]);
		
		output_low(PORTD, GreenLED);
    2e2e:	5f 98       	cbi	0x0b, 7	; 11
    2e30:	55 c4       	rjmp	.+2218   	; 0x36dc <update_Display+0xa78>
		//updateSpeed = 2;
	}
	else if(switch_state == 5)	//Blue
    2e32:	80 91 58 01 	lds	r24, 0x0158
    2e36:	85 30       	cpi	r24, 0x05	; 5
    2e38:	09 f0       	breq	.+2      	; 0x2e3c <update_Display+0x1d8>
    2e3a:	b0 c0       	rjmp	.+352    	; 0x2f9c <update_Display+0x338>
	{
		CopyStringtoLCD(State5, 3, 0);
    2e3c:	40 e0       	ldi	r20, 0x00	; 0
    2e3e:	63 e0       	ldi	r22, 0x03	; 3
    2e40:	89 e5       	ldi	r24, 0x59	; 89
    2e42:	91 e2       	ldi	r25, 0x21	; 33
    2e44:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <CopyStringtoLCD>
		printInt(11, 0 , i);
    2e48:	20 91 56 01 	lds	r18, 0x0156
    2e4c:	30 91 57 01 	lds	r19, 0x0157
    2e50:	44 27       	eor	r20, r20
    2e52:	37 fd       	sbrc	r19, 7
    2e54:	40 95       	com	r20
    2e56:	54 2f       	mov	r21, r20
    2e58:	60 e0       	ldi	r22, 0x00	; 0
    2e5a:	8b e0       	ldi	r24, 0x0B	; 11
    2e5c:	0e 94 43 14 	call	0x2886	; 0x2886 <printInt>
		//printInt(5, 1 , system_Clock);
		sprintf(rangestring,"%5d",(int)accelM[0]);
    2e60:	60 91 29 07 	lds	r22, 0x0729
    2e64:	70 91 2a 07 	lds	r23, 0x072A
    2e68:	80 91 2b 07 	lds	r24, 0x072B
    2e6c:	90 91 2c 07 	lds	r25, 0x072C
    2e70:	0e 94 81 20 	call	0x4102	; 0x4102 <__fixsfsi>
    2e74:	7f 93       	push	r23
    2e76:	6f 93       	push	r22
    2e78:	89 e6       	ldi	r24, 0x69	; 105
    2e7a:	91 e0       	ldi	r25, 0x01	; 1
    2e7c:	9f 93       	push	r25
    2e7e:	8f 93       	push	r24
    2e80:	ce e4       	ldi	r28, 0x4E	; 78
    2e82:	d1 e0       	ldi	r29, 0x01	; 1
    2e84:	df 93       	push	r29
    2e86:	cf 93       	push	r28
    2e88:	0e 94 d6 22 	call	0x45ac	; 0x45ac <sprintf>
		/* convert leading zeros to leading blanks */
		index = 0;
    2e8c:	10 92 c6 02 	sts	0x02C6, r1
		while(rangestring[index] == '\0') {rangestring[index] = ' ' ; index++;}
    2e90:	0f 90       	pop	r0
    2e92:	0f 90       	pop	r0
    2e94:	0f 90       	pop	r0
    2e96:	0f 90       	pop	r0
    2e98:	0f 90       	pop	r0
    2e9a:	0f 90       	pop	r0
    2e9c:	88 81       	ld	r24, Y
    2e9e:	81 11       	cpse	r24, r1
    2ea0:	07 c4       	rjmp	.+2062   	; 0x36b0 <update_Display+0xa4c>
    2ea2:	21 e0       	ldi	r18, 0x01	; 1
    2ea4:	80 e0       	ldi	r24, 0x00	; 0
    2ea6:	90 e0       	ldi	r25, 0x00	; 0
    2ea8:	50 e2       	ldi	r21, 0x20	; 32
    2eaa:	fc 01       	movw	r30, r24
    2eac:	e2 5b       	subi	r30, 0xB2	; 178
    2eae:	fe 4f       	sbci	r31, 0xFE	; 254
    2eb0:	50 83       	st	Z, r21
    2eb2:	82 2f       	mov	r24, r18
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	41 e0       	ldi	r20, 0x01	; 1
    2eb8:	42 0f       	add	r20, r18
    2eba:	fc 01       	movw	r30, r24
    2ebc:	e2 5b       	subi	r30, 0xB2	; 178
    2ebe:	fe 4f       	sbci	r31, 0xFE	; 254
    2ec0:	30 81       	ld	r19, Z
    2ec2:	31 11       	cpse	r19, r1
    2ec4:	02 c0       	rjmp	.+4      	; 0x2eca <update_Display+0x266>
    2ec6:	24 2f       	mov	r18, r20
    2ec8:	f0 cf       	rjmp	.-32     	; 0x2eaa <update_Display+0x246>
    2eca:	20 93 c6 02 	sts	0x02C6, r18
		LCDGotoXY(0,1);
    2ece:	61 e0       	ldi	r22, 0x01	; 1
    2ed0:	80 e0       	ldi	r24, 0x00	; 0
    2ed2:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <LCDGotoXY>
		LCDsendChar('X');
    2ed6:	88 e5       	ldi	r24, 0x58	; 88
    2ed8:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <LCDsendChar>
		for(index = 0; index < 5; index++)
    2edc:	10 92 c6 02 	sts	0x02C6, r1
    2ee0:	f0 c3       	rjmp	.+2016   	; 0x36c2 <update_Display+0xa5e>
		{
			LCDsendChar(rangestring[index]);
    2ee2:	f0 e0       	ldi	r31, 0x00	; 0
    2ee4:	e2 5b       	subi	r30, 0xB2	; 178
    2ee6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ee8:	80 81       	ld	r24, Z
    2eea:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <LCDsendChar>
		/* convert leading zeros to leading blanks */
		index = 0;
		while(rangestring[index] == '\0') {rangestring[index] = ' ' ; index++;}
		LCDGotoXY(0,1);
		LCDsendChar('X');
		for(index = 0; index < 5; index++)
    2eee:	e0 91 c6 02 	lds	r30, 0x02C6
    2ef2:	ef 5f       	subi	r30, 0xFF	; 255
    2ef4:	e0 93 c6 02 	sts	0x02C6, r30
    2ef8:	e5 30       	cpi	r30, 0x05	; 5
    2efa:	98 f3       	brcs	.-26     	; 0x2ee2 <update_Display+0x27e>
		{
			LCDsendChar(rangestring[index]);
		}
		sprintf(rangestring,"%5d",(int)accelM[1]);
    2efc:	60 91 2d 07 	lds	r22, 0x072D
    2f00:	70 91 2e 07 	lds	r23, 0x072E
    2f04:	80 91 2f 07 	lds	r24, 0x072F
    2f08:	90 91 30 07 	lds	r25, 0x0730
    2f0c:	0e 94 81 20 	call	0x4102	; 0x4102 <__fixsfsi>
    2f10:	7f 93       	push	r23
    2f12:	6f 93       	push	r22
    2f14:	89 e6       	ldi	r24, 0x69	; 105
    2f16:	91 e0       	ldi	r25, 0x01	; 1
    2f18:	9f 93       	push	r25
    2f1a:	8f 93       	push	r24
    2f1c:	ce e4       	ldi	r28, 0x4E	; 78
    2f1e:	d1 e0       	ldi	r29, 0x01	; 1
    2f20:	df 93       	push	r29
    2f22:	cf 93       	push	r28
    2f24:	0e 94 d6 22 	call	0x45ac	; 0x45ac <sprintf>
		/* convert leading zeros to leading blanks */
		index = 0;
    2f28:	10 92 c6 02 	sts	0x02C6, r1
		while(rangestring[index] == '\0') {rangestring[index] = ' ' ; index++;}
    2f2c:	0f 90       	pop	r0
    2f2e:	0f 90       	pop	r0
    2f30:	0f 90       	pop	r0
    2f32:	0f 90       	pop	r0
    2f34:	0f 90       	pop	r0
    2f36:	0f 90       	pop	r0
    2f38:	88 81       	ld	r24, Y
    2f3a:	81 11       	cpse	r24, r1
    2f3c:	c4 c3       	rjmp	.+1928   	; 0x36c6 <update_Display+0xa62>
    2f3e:	21 e0       	ldi	r18, 0x01	; 1
    2f40:	80 e0       	ldi	r24, 0x00	; 0
    2f42:	90 e0       	ldi	r25, 0x00	; 0
    2f44:	50 e2       	ldi	r21, 0x20	; 32
    2f46:	fc 01       	movw	r30, r24
    2f48:	e2 5b       	subi	r30, 0xB2	; 178
    2f4a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f4c:	50 83       	st	Z, r21
    2f4e:	82 2f       	mov	r24, r18
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	41 e0       	ldi	r20, 0x01	; 1
    2f54:	42 0f       	add	r20, r18
    2f56:	fc 01       	movw	r30, r24
    2f58:	e2 5b       	subi	r30, 0xB2	; 178
    2f5a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f5c:	30 81       	ld	r19, Z
    2f5e:	31 11       	cpse	r19, r1
    2f60:	02 c0       	rjmp	.+4      	; 0x2f66 <update_Display+0x302>
    2f62:	24 2f       	mov	r18, r20
    2f64:	f0 cf       	rjmp	.-32     	; 0x2f46 <update_Display+0x2e2>
    2f66:	20 93 c6 02 	sts	0x02C6, r18
		LCDGotoXY(9,1);
    2f6a:	61 e0       	ldi	r22, 0x01	; 1
    2f6c:	89 e0       	ldi	r24, 0x09	; 9
    2f6e:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <LCDGotoXY>
		LCDsendChar('Y');
    2f72:	89 e5       	ldi	r24, 0x59	; 89
    2f74:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <LCDsendChar>
		for(index = 0; index < 5; index++)
    2f78:	10 92 c6 02 	sts	0x02C6, r1
    2f7c:	ad c3       	rjmp	.+1882   	; 0x36d8 <update_Display+0xa74>
		{
			LCDsendChar(rangestring[index]);
    2f7e:	f0 e0       	ldi	r31, 0x00	; 0
    2f80:	e2 5b       	subi	r30, 0xB2	; 178
    2f82:	fe 4f       	sbci	r31, 0xFE	; 254
    2f84:	80 81       	ld	r24, Z
    2f86:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <LCDsendChar>
		/* convert leading zeros to leading blanks */
		index = 0;
		while(rangestring[index] == '\0') {rangestring[index] = ' ' ; index++;}
		LCDGotoXY(9,1);
		LCDsendChar('Y');
		for(index = 0; index < 5; index++)
    2f8a:	e0 91 c6 02 	lds	r30, 0x02C6
    2f8e:	ef 5f       	subi	r30, 0xFF	; 255
    2f90:	e0 93 c6 02 	sts	0x02C6, r30
    2f94:	e5 30       	cpi	r30, 0x05	; 5
    2f96:	98 f3       	brcs	.-26     	; 0x2f7e <update_Display+0x31a>
		{
			LCDsendChar(rangestring[index]);
		}
		output_high(PORTD, GreenLED);
    2f98:	5f 9a       	sbi	0x0b, 7	; 11
    2f9a:	a0 c3       	rjmp	.+1856   	; 0x36dc <update_Display+0xa78>
		//updateSpeed = 1;
	}
	else if(switch_state == 6)	//Blue
    2f9c:	80 91 58 01 	lds	r24, 0x0158
    2fa0:	86 30       	cpi	r24, 0x06	; 6
    2fa2:	09 f0       	breq	.+2      	; 0x2fa6 <update_Display+0x342>
    2fa4:	68 c0       	rjmp	.+208    	; 0x3076 <update_Display+0x412>
	{
		CopyStringtoLCD(State6, 3, 0);
    2fa6:	40 e0       	ldi	r20, 0x00	; 0
    2fa8:	63 e0       	ldi	r22, 0x03	; 3
    2faa:	81 e5       	ldi	r24, 0x51	; 81
    2fac:	91 e2       	ldi	r25, 0x21	; 33
    2fae:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <CopyStringtoLCD>
		printInt(11, 0 , i);
    2fb2:	20 91 56 01 	lds	r18, 0x0156
    2fb6:	30 91 57 01 	lds	r19, 0x0157
    2fba:	44 27       	eor	r20, r20
    2fbc:	37 fd       	sbrc	r19, 7
    2fbe:	40 95       	com	r20
    2fc0:	54 2f       	mov	r21, r20
    2fc2:	60 e0       	ldi	r22, 0x00	; 0
    2fc4:	8b e0       	ldi	r24, 0x0B	; 11
    2fc6:	0e 94 43 14 	call	0x2886	; 0x2886 <printInt>
		LCDGotoXY(0,1);
    2fca:	61 e0       	ldi	r22, 0x01	; 1
    2fcc:	80 e0       	ldi	r24, 0x00	; 0
    2fce:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <LCDGotoXY>
		for(z = 0; z < 16; z++) outstring[z] = ' ';
    2fd2:	10 92 c9 02 	sts	0x02C9, r1
    2fd6:	80 91 c9 02 	lds	r24, 0x02C9
    2fda:	80 31       	cpi	r24, 0x10	; 16
    2fdc:	80 f4       	brcc	.+32     	; 0x2ffe <update_Display+0x39a>
    2fde:	90 e2       	ldi	r25, 0x20	; 32
    2fe0:	e0 91 c9 02 	lds	r30, 0x02C9
    2fe4:	f0 e0       	ldi	r31, 0x00	; 0
    2fe6:	e5 5f       	subi	r30, 0xF5	; 245
    2fe8:	fc 4f       	sbci	r31, 0xFC	; 252
    2fea:	90 83       	st	Z, r25
    2fec:	80 91 c9 02 	lds	r24, 0x02C9
    2ff0:	8f 5f       	subi	r24, 0xFF	; 255
    2ff2:	80 93 c9 02 	sts	0x02C9, r24
    2ff6:	80 91 c9 02 	lds	r24, 0x02C9
    2ffa:	80 31       	cpi	r24, 0x10	; 16
    2ffc:	88 f3       	brcs	.-30     	; 0x2fe0 <update_Display+0x37c>
		outstring[16]= '\0';
    2ffe:	10 92 1b 03 	sts	0x031B, r1
		charptr = (char *)group[groupnum];
    3002:	e0 91 c0 02 	lds	r30, 0x02C0
    3006:	f0 91 c1 02 	lds	r31, 0x02C1
    300a:	ee 0f       	add	r30, r30
    300c:	ff 1f       	adc	r31, r31
    300e:	e0 50       	subi	r30, 0x00	; 0
    3010:	ff 4f       	sbci	r31, 0xFF	; 255
    3012:	a0 81       	ld	r26, Z
    3014:	b1 81       	ldd	r27, Z+1	; 0x01
    3016:	b0 93 18 07 	sts	0x0718, r27
    301a:	a0 93 17 07 	sts	0x0717, r26
		tptr = &outstring[0];
    301e:	8b e0       	ldi	r24, 0x0B	; 11
    3020:	93 e0       	ldi	r25, 0x03	; 3
    3022:	90 93 29 03 	sts	0x0329, r25
    3026:	80 93 28 03 	sts	0x0328, r24
		while (*charptr) *tptr++ = *charptr++ ; /* COPY Group STRING TO OUTSTRING */
    302a:	fd 01       	movw	r30, r26
    302c:	8c 91       	ld	r24, X
    302e:	88 23       	and	r24, r24
    3030:	c9 f0       	breq	.+50     	; 0x3064 <update_Display+0x400>
    3032:	a0 91 28 03 	lds	r26, 0x0328
    3036:	b0 91 29 03 	lds	r27, 0x0329
    303a:	cd 01       	movw	r24, r26
    303c:	01 96       	adiw	r24, 0x01	; 1
    303e:	90 93 29 03 	sts	0x0329, r25
    3042:	80 93 28 03 	sts	0x0328, r24
    3046:	cf 01       	movw	r24, r30
    3048:	01 96       	adiw	r24, 0x01	; 1
    304a:	90 93 18 07 	sts	0x0718, r25
    304e:	80 93 17 07 	sts	0x0717, r24
    3052:	80 81       	ld	r24, Z
    3054:	8c 93       	st	X, r24
    3056:	e0 91 17 07 	lds	r30, 0x0717
    305a:	f0 91 18 07 	lds	r31, 0x0718
    305e:	80 81       	ld	r24, Z
    3060:	81 11       	cpse	r24, r1
    3062:	e7 cf       	rjmp	.-50     	; 0x3032 <update_Display+0x3ce>
		lcd_puts(outstring);
    3064:	8b e0       	ldi	r24, 0x0B	; 11
    3066:	93 e0       	ldi	r25, 0x03	; 3
    3068:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <lcd_puts>
		output_low(PORTD, GreenLED);
    306c:	5f 98       	cbi	0x0b, 7	; 11
		updateSpeed = 64;
    306e:	80 e4       	ldi	r24, 0x40	; 64
    3070:	80 93 53 01 	sts	0x0153, r24
    3074:	33 c3       	rjmp	.+1638   	; 0x36dc <update_Display+0xa78>
	}
	else if(switch_state == 7)	//Blue
    3076:	80 91 58 01 	lds	r24, 0x0158
    307a:	87 30       	cpi	r24, 0x07	; 7
    307c:	09 f0       	breq	.+2      	; 0x3080 <update_Display+0x41c>
    307e:	76 c0       	rjmp	.+236    	; 0x316c <update_Display+0x508>
	{
		CopyStringtoLCD(State7, 3, 0);
    3080:	40 e0       	ldi	r20, 0x00	; 0
    3082:	63 e0       	ldi	r22, 0x03	; 3
    3084:	89 e4       	ldi	r24, 0x49	; 73
    3086:	91 e2       	ldi	r25, 0x21	; 33
    3088:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <CopyStringtoLCD>
		printInt(11, 0 , i);
    308c:	20 91 56 01 	lds	r18, 0x0156
    3090:	30 91 57 01 	lds	r19, 0x0157
    3094:	44 27       	eor	r20, r20
    3096:	37 fd       	sbrc	r19, 7
    3098:	40 95       	com	r20
    309a:	54 2f       	mov	r21, r20
    309c:	60 e0       	ldi	r22, 0x00	; 0
    309e:	8b e0       	ldi	r24, 0x0B	; 11
    30a0:	0e 94 43 14 	call	0x2886	; 0x2886 <printInt>
		LCDGotoXY(0,1);
    30a4:	61 e0       	ldi	r22, 0x01	; 1
    30a6:	80 e0       	ldi	r24, 0x00	; 0
    30a8:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <LCDGotoXY>
		for(z = 0; z < 16; z++) outstring[z] = ' ';
    30ac:	10 92 c9 02 	sts	0x02C9, r1
    30b0:	80 91 c9 02 	lds	r24, 0x02C9
    30b4:	80 31       	cpi	r24, 0x10	; 16
    30b6:	80 f4       	brcc	.+32     	; 0x30d8 <update_Display+0x474>
    30b8:	90 e2       	ldi	r25, 0x20	; 32
    30ba:	e0 91 c9 02 	lds	r30, 0x02C9
    30be:	f0 e0       	ldi	r31, 0x00	; 0
    30c0:	e5 5f       	subi	r30, 0xF5	; 245
    30c2:	fc 4f       	sbci	r31, 0xFC	; 252
    30c4:	90 83       	st	Z, r25
    30c6:	80 91 c9 02 	lds	r24, 0x02C9
    30ca:	8f 5f       	subi	r24, 0xFF	; 255
    30cc:	80 93 c9 02 	sts	0x02C9, r24
    30d0:	80 91 c9 02 	lds	r24, 0x02C9
    30d4:	80 31       	cpi	r24, 0x10	; 16
    30d6:	88 f3       	brcs	.-30     	; 0x30ba <update_Display+0x456>
		outstring[16]= '\0';
    30d8:	10 92 1b 03 	sts	0x031B, r1
		charptr = (char *)ammotype[groupnum][ammonum];
    30dc:	80 91 c0 02 	lds	r24, 0x02C0
    30e0:	90 91 c1 02 	lds	r25, 0x02C1
    30e4:	fc 01       	movw	r30, r24
    30e6:	ee 0f       	add	r30, r30
    30e8:	ff 1f       	adc	r31, r31
    30ea:	8e 0f       	add	r24, r30
    30ec:	9f 1f       	adc	r25, r31
    30ee:	fc 01       	movw	r30, r24
    30f0:	ee 0f       	add	r30, r30
    30f2:	ff 1f       	adc	r31, r31
    30f4:	20 91 c4 02 	lds	r18, 0x02C4
    30f8:	30 91 c5 02 	lds	r19, 0x02C5
    30fc:	e2 0f       	add	r30, r18
    30fe:	f3 1f       	adc	r31, r19
    3100:	ee 0f       	add	r30, r30
    3102:	ff 1f       	adc	r31, r31
    3104:	e2 5f       	subi	r30, 0xF2	; 242
    3106:	fe 4f       	sbci	r31, 0xFE	; 254
    3108:	a0 81       	ld	r26, Z
    310a:	b1 81       	ldd	r27, Z+1	; 0x01
    310c:	b0 93 18 07 	sts	0x0718, r27
    3110:	a0 93 17 07 	sts	0x0717, r26
		tptr = &outstring[0];
    3114:	8b e0       	ldi	r24, 0x0B	; 11
    3116:	93 e0       	ldi	r25, 0x03	; 3
    3118:	90 93 29 03 	sts	0x0329, r25
    311c:	80 93 28 03 	sts	0x0328, r24
		while (*charptr) *tptr++ = *charptr++ ; /* COPY AMMO TYPE STRING TO OUTSTRING */
    3120:	fd 01       	movw	r30, r26
    3122:	8c 91       	ld	r24, X
    3124:	88 23       	and	r24, r24
    3126:	c9 f0       	breq	.+50     	; 0x315a <update_Display+0x4f6>
    3128:	a0 91 28 03 	lds	r26, 0x0328
    312c:	b0 91 29 03 	lds	r27, 0x0329
    3130:	cd 01       	movw	r24, r26
    3132:	01 96       	adiw	r24, 0x01	; 1
    3134:	90 93 29 03 	sts	0x0329, r25
    3138:	80 93 28 03 	sts	0x0328, r24
    313c:	cf 01       	movw	r24, r30
    313e:	01 96       	adiw	r24, 0x01	; 1
    3140:	90 93 18 07 	sts	0x0718, r25
    3144:	80 93 17 07 	sts	0x0717, r24
    3148:	80 81       	ld	r24, Z
    314a:	8c 93       	st	X, r24
    314c:	e0 91 17 07 	lds	r30, 0x0717
    3150:	f0 91 18 07 	lds	r31, 0x0718
    3154:	80 81       	ld	r24, Z
    3156:	81 11       	cpse	r24, r1
    3158:	e7 cf       	rjmp	.-50     	; 0x3128 <update_Display+0x4c4>
		lcd_puts(outstring);
    315a:	8b e0       	ldi	r24, 0x0B	; 11
    315c:	93 e0       	ldi	r25, 0x03	; 3
    315e:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <lcd_puts>
		output_high(PORTD, GreenLED);
    3162:	5f 9a       	sbi	0x0b, 7	; 11
		updateSpeed = 8;
    3164:	88 e0       	ldi	r24, 0x08	; 8
    3166:	80 93 53 01 	sts	0x0153, r24
    316a:	b8 c2       	rjmp	.+1392   	; 0x36dc <update_Display+0xa78>
	}
	else if(switch_state == 8)	//Blue
    316c:	80 91 58 01 	lds	r24, 0x0158
    3170:	88 30       	cpi	r24, 0x08	; 8
    3172:	09 f0       	breq	.+2      	; 0x3176 <update_Display+0x512>
    3174:	40 c2       	rjmp	.+1152   	; 0x35f6 <update_Display+0x992>
		//angle = (int)accelM[1];
		//angle = (int)accelM[0];
		//angle = 1297;
		//sscanf(elev,"%d",&angle);
		//sprintf(elev,"%4d",angle);
		ostr2[16]= '\0';
    3176:	10 92 0a 03 	sts	0x030A, r1
		//sprintf(elev,"%5d",(int)accelM[0]); //single axis reading
		sprintf(elev,"%5d",(int)accel3Axis[0]); // 3 axis reading
    317a:	60 91 ea 02 	lds	r22, 0x02EA
    317e:	70 91 eb 02 	lds	r23, 0x02EB
    3182:	80 91 ec 02 	lds	r24, 0x02EC
    3186:	90 91 ed 02 	lds	r25, 0x02ED
    318a:	0e 94 81 20 	call	0x4102	; 0x4102 <__fixsfsi>
    318e:	7f 93       	push	r23
    3190:	6f 93       	push	r22
    3192:	89 e6       	ldi	r24, 0x69	; 105
    3194:	91 e0       	ldi	r25, 0x01	; 1
    3196:	9f 93       	push	r25
    3198:	8f 93       	push	r24
    319a:	cf e1       	ldi	r28, 0x1F	; 31
    319c:	d3 e0       	ldi	r29, 0x03	; 3
    319e:	df 93       	push	r29
    31a0:	cf 93       	push	r28
    31a2:	0e 94 d6 22 	call	0x45ac	; 0x45ac <sprintf>
		fptr = elev;
    31a6:	d0 93 d7 02 	sts	0x02D7, r29
    31aa:	c0 93 d6 02 	sts	0x02D6, r28
		tptr = &ostr2[0];
    31ae:	8a ef       	ldi	r24, 0xFA	; 250
    31b0:	92 e0       	ldi	r25, 0x02	; 2
    31b2:	90 93 29 03 	sts	0x0329, r25
    31b6:	80 93 28 03 	sts	0x0328, r24
		//tptr = &outstring[5];
		for(z = 0; z < 5 ; z++) *tptr++ = *fptr++;
    31ba:	10 92 c9 02 	sts	0x02C9, r1
    31be:	80 91 c9 02 	lds	r24, 0x02C9
    31c2:	0f 90       	pop	r0
    31c4:	0f 90       	pop	r0
    31c6:	0f 90       	pop	r0
    31c8:	0f 90       	pop	r0
    31ca:	0f 90       	pop	r0
    31cc:	0f 90       	pop	r0
    31ce:	85 30       	cpi	r24, 0x05	; 5
    31d0:	f8 f4       	brcc	.+62     	; 0x3210 <update_Display+0x5ac>
    31d2:	e0 91 28 03 	lds	r30, 0x0328
    31d6:	f0 91 29 03 	lds	r31, 0x0329
    31da:	cf 01       	movw	r24, r30
    31dc:	01 96       	adiw	r24, 0x01	; 1
    31de:	90 93 29 03 	sts	0x0329, r25
    31e2:	80 93 28 03 	sts	0x0328, r24
    31e6:	a0 91 d6 02 	lds	r26, 0x02D6
    31ea:	b0 91 d7 02 	lds	r27, 0x02D7
    31ee:	cd 01       	movw	r24, r26
    31f0:	01 96       	adiw	r24, 0x01	; 1
    31f2:	90 93 d7 02 	sts	0x02D7, r25
    31f6:	80 93 d6 02 	sts	0x02D6, r24
    31fa:	8c 91       	ld	r24, X
    31fc:	80 83       	st	Z, r24
    31fe:	80 91 c9 02 	lds	r24, 0x02C9
    3202:	8f 5f       	subi	r24, 0xFF	; 255
    3204:	80 93 c9 02 	sts	0x02C9, r24
    3208:	80 91 c9 02 	lds	r24, 0x02C9
    320c:	85 30       	cpi	r24, 0x05	; 5
    320e:	08 f3       	brcs	.-62     	; 0x31d2 <update_Display+0x56e>
		//LCDGotoXY(10,1);
		 //pgm_read_ptr(&(ammotype[groupnum][ammonum]));
		 		 
		 
		 
		if(groupnum == 4)
    3210:	80 91 c0 02 	lds	r24, 0x02C0
    3214:	90 91 c1 02 	lds	r25, 0x02C1
    3218:	84 30       	cpi	r24, 0x04	; 4
    321a:	91 05       	cpc	r25, r1
    321c:	49 f4       	brne	.+18     	; 0x3230 <update_Display+0x5cc>
		{
			LCDGotoXY(5,0);
    321e:	60 e0       	ldi	r22, 0x00	; 0
    3220:	85 e0       	ldi	r24, 0x05	; 5
    3222:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <LCDGotoXY>
			lcd_puts(ostr2); /* IS elevation mode just put out elevation on 1st line */
    3226:	8a ef       	ldi	r24, 0xFA	; 250
    3228:	92 e0       	ldi	r25, 0x02	; 2
    322a:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <lcd_puts>
    322e:	36 c1       	rjmp	.+620    	; 0x349c <update_Display+0x838>
		}
		else 
		{
			//range = trans((int)accelM[0],(char *)ammotype[groupnum][ammonum],chargenum); // single axis reading
			range = trans((int)accel3Axis[0],(char *)ammotype[groupnum][ammonum],chargenum); // 3 axis reading
    3230:	00 91 c2 02 	lds	r16, 0x02C2
    3234:	10 91 c3 02 	lds	r17, 0x02C3
    3238:	fc 01       	movw	r30, r24
    323a:	ee 0f       	add	r30, r30
    323c:	ff 1f       	adc	r31, r31
    323e:	8e 0f       	add	r24, r30
    3240:	9f 1f       	adc	r25, r31
    3242:	fc 01       	movw	r30, r24
    3244:	ee 0f       	add	r30, r30
    3246:	ff 1f       	adc	r31, r31
    3248:	20 91 c4 02 	lds	r18, 0x02C4
    324c:	30 91 c5 02 	lds	r19, 0x02C5
    3250:	e2 0f       	add	r30, r18
    3252:	f3 1f       	adc	r31, r19
    3254:	ee 0f       	add	r30, r30
    3256:	ff 1f       	adc	r31, r31
    3258:	e2 5f       	subi	r30, 0xF2	; 242
    325a:	fe 4f       	sbci	r31, 0xFE	; 254
    325c:	c0 81       	ld	r28, Z
    325e:	d1 81       	ldd	r29, Z+1	; 0x01
    3260:	60 91 ea 02 	lds	r22, 0x02EA
    3264:	70 91 eb 02 	lds	r23, 0x02EB
    3268:	80 91 ec 02 	lds	r24, 0x02EC
    326c:	90 91 ed 02 	lds	r25, 0x02ED
    3270:	0e 94 81 20 	call	0x4102	; 0x4102 <__fixsfsi>
    3274:	dc 01       	movw	r26, r24
    3276:	cb 01       	movw	r24, r22
    3278:	a8 01       	movw	r20, r16
    327a:	be 01       	movw	r22, r28
    327c:	0e 94 39 15 	call	0x2a72	; 0x2a72 <trans>
    3280:	90 93 c8 02 	sts	0x02C8, r25
    3284:	80 93 c7 02 	sts	0x02C7, r24
			//range = trans((int)accelM[0],(char*)pgm_read_word(ammotype[groupnum][ammonum]),chargenum);
			chargenum = gblcharge;	/* change charge if ammotype only supports charge 1 */
    3288:	80 91 35 07 	lds	r24, 0x0735
    328c:	90 e0       	ldi	r25, 0x00	; 0
    328e:	90 93 c3 02 	sts	0x02C3, r25
    3292:	80 93 c2 02 	sts	0x02C2, r24
			/* check for too high or too low returns first */
			//	if(range == -1) for(i = 0; i < 16; i++) outstring[i] = toohigh[i];

			/*** changed 24 March 2011...here checking also for past vertical the == '-' part **/
			if(range == -1)
    3296:	80 91 c7 02 	lds	r24, 0x02C7
    329a:	90 91 c8 02 	lds	r25, 0x02C8
    329e:	01 96       	adiw	r24, 0x01	; 1
    32a0:	41 f5       	brne	.+80     	; 0x32f2 <update_Display+0x68e>
			{
				for(z = 0; z < 16; z++)
    32a2:	10 92 c9 02 	sts	0x02C9, r1
    32a6:	80 91 c9 02 	lds	r24, 0x02C9
    32aa:	80 31       	cpi	r24, 0x10	; 16
    32ac:	c8 f4       	brcc	.+50     	; 0x32e0 <update_Display+0x67c>
				{
				outstring[z] = toohigh[z];
    32ae:	80 91 4a 01 	lds	r24, 0x014A
    32b2:	90 91 4b 01 	lds	r25, 0x014B
    32b6:	e0 91 c9 02 	lds	r30, 0x02C9
    32ba:	20 91 c9 02 	lds	r18, 0x02C9
    32be:	dc 01       	movw	r26, r24
    32c0:	a2 0f       	add	r26, r18
    32c2:	b1 1d       	adc	r27, r1
    32c4:	2c 91       	ld	r18, X
    32c6:	f0 e0       	ldi	r31, 0x00	; 0
    32c8:	e5 5f       	subi	r30, 0xF5	; 245
    32ca:	fc 4f       	sbci	r31, 0xFC	; 252
    32cc:	20 83       	st	Z, r18
			//	if(range == -1) for(i = 0; i < 16; i++) outstring[i] = toohigh[i];

			/*** changed 24 March 2011...here checking also for past vertical the == '-' part **/
			if(range == -1)
			{
				for(z = 0; z < 16; z++)
    32ce:	20 91 c9 02 	lds	r18, 0x02C9
    32d2:	2f 5f       	subi	r18, 0xFF	; 255
    32d4:	20 93 c9 02 	sts	0x02C9, r18
    32d8:	20 91 c9 02 	lds	r18, 0x02C9
    32dc:	20 31       	cpi	r18, 0x10	; 16
    32de:	58 f3       	brcs	.-42     	; 0x32b6 <update_Display+0x652>
				{
				outstring[z] = toohigh[z];
				} 
				LCDGotoXY(0,0);
    32e0:	60 e0       	ldi	r22, 0x00	; 0
    32e2:	80 e0       	ldi	r24, 0x00	; 0
    32e4:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <LCDGotoXY>
				lcd_puts(outstring);
    32e8:	8b e0       	ldi	r24, 0x0B	; 11
    32ea:	93 e0       	ldi	r25, 0x03	; 3
    32ec:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <lcd_puts>
    32f0:	d5 c0       	rjmp	.+426    	; 0x349c <update_Display+0x838>
			}
			else if(range == -2)
    32f2:	80 91 c7 02 	lds	r24, 0x02C7
    32f6:	90 91 c8 02 	lds	r25, 0x02C8
    32fa:	02 96       	adiw	r24, 0x02	; 2
    32fc:	41 f5       	brne	.+80     	; 0x334e <update_Display+0x6ea>
			{
				for(z = 0; z < 16; z++) 
    32fe:	10 92 c9 02 	sts	0x02C9, r1
    3302:	80 91 c9 02 	lds	r24, 0x02C9
    3306:	80 31       	cpi	r24, 0x10	; 16
    3308:	c8 f4       	brcc	.+50     	; 0x333c <update_Display+0x6d8>
				{
					outstring[z] = toolow[z];
    330a:	80 91 4c 01 	lds	r24, 0x014C
    330e:	90 91 4d 01 	lds	r25, 0x014D
    3312:	e0 91 c9 02 	lds	r30, 0x02C9
    3316:	20 91 c9 02 	lds	r18, 0x02C9
    331a:	dc 01       	movw	r26, r24
    331c:	a2 0f       	add	r26, r18
    331e:	b1 1d       	adc	r27, r1
    3320:	2c 91       	ld	r18, X
    3322:	f0 e0       	ldi	r31, 0x00	; 0
    3324:	e5 5f       	subi	r30, 0xF5	; 245
    3326:	fc 4f       	sbci	r31, 0xFC	; 252
    3328:	20 83       	st	Z, r18
				LCDGotoXY(0,0);
				lcd_puts(outstring);
			}
			else if(range == -2)
			{
				for(z = 0; z < 16; z++) 
    332a:	20 91 c9 02 	lds	r18, 0x02C9
    332e:	2f 5f       	subi	r18, 0xFF	; 255
    3330:	20 93 c9 02 	sts	0x02C9, r18
    3334:	20 91 c9 02 	lds	r18, 0x02C9
    3338:	20 31       	cpi	r18, 0x10	; 16
    333a:	58 f3       	brcs	.-42     	; 0x3312 <update_Display+0x6ae>
				{
					outstring[z] = toolow[z];
				}
				LCDGotoXY(0,0);
    333c:	60 e0       	ldi	r22, 0x00	; 0
    333e:	80 e0       	ldi	r24, 0x00	; 0
    3340:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <LCDGotoXY>
				lcd_puts(outstring);
    3344:	8b e0       	ldi	r24, 0x0B	; 11
    3346:	93 e0       	ldi	r25, 0x03	; 3
    3348:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <lcd_puts>
    334c:	a7 c0       	rjmp	.+334    	; 0x349c <update_Display+0x838>
			}
			else /* is in range */ 
			{	
				sprintf(rangestring,"%4d",range);
    334e:	80 91 c7 02 	lds	r24, 0x02C7
    3352:	90 91 c8 02 	lds	r25, 0x02C8
    3356:	9f 93       	push	r25
    3358:	8f 93       	push	r24
    335a:	8d e6       	ldi	r24, 0x6D	; 109
    335c:	91 e0       	ldi	r25, 0x01	; 1
    335e:	9f 93       	push	r25
    3360:	8f 93       	push	r24
    3362:	8e e4       	ldi	r24, 0x4E	; 78
    3364:	91 e0       	ldi	r25, 0x01	; 1
    3366:	9f 93       	push	r25
    3368:	8f 93       	push	r24
    336a:	0e 94 d6 22 	call	0x45ac	; 0x45ac <sprintf>
				/* convert leading zeros to leading blanks */
				z = 0;
    336e:	10 92 c9 02 	sts	0x02C9, r1
				while(rangestring[z] == '\0') {rangestring[z] = ' ' ; z++;}
    3372:	e0 91 c9 02 	lds	r30, 0x02C9
    3376:	f0 e0       	ldi	r31, 0x00	; 0
    3378:	e2 5b       	subi	r30, 0xB2	; 178
    337a:	fe 4f       	sbci	r31, 0xFE	; 254
    337c:	0f 90       	pop	r0
    337e:	0f 90       	pop	r0
    3380:	0f 90       	pop	r0
    3382:	0f 90       	pop	r0
    3384:	0f 90       	pop	r0
    3386:	0f 90       	pop	r0
    3388:	80 81       	ld	r24, Z
    338a:	81 11       	cpse	r24, r1
    338c:	14 c0       	rjmp	.+40     	; 0x33b6 <update_Display+0x752>
    338e:	90 e2       	ldi	r25, 0x20	; 32
    3390:	e0 91 c9 02 	lds	r30, 0x02C9
    3394:	f0 e0       	ldi	r31, 0x00	; 0
    3396:	e2 5b       	subi	r30, 0xB2	; 178
    3398:	fe 4f       	sbci	r31, 0xFE	; 254
    339a:	90 83       	st	Z, r25
    339c:	80 91 c9 02 	lds	r24, 0x02C9
    33a0:	8f 5f       	subi	r24, 0xFF	; 255
    33a2:	80 93 c9 02 	sts	0x02C9, r24
    33a6:	e0 91 c9 02 	lds	r30, 0x02C9
    33aa:	f0 e0       	ldi	r31, 0x00	; 0
    33ac:	e2 5b       	subi	r30, 0xB2	; 178
    33ae:	fe 4f       	sbci	r31, 0xFE	; 254
    33b0:	80 81       	ld	r24, Z
    33b2:	88 23       	and	r24, r24
    33b4:	69 f3       	breq	.-38     	; 0x3390 <update_Display+0x72c>
				if(fztime) sprintf(fuzestring,"%3d",fztime);
    33b6:	80 91 14 07 	lds	r24, 0x0714
    33ba:	88 23       	and	r24, r24
    33bc:	a1 f0       	breq	.+40     	; 0x33e6 <update_Display+0x782>
    33be:	80 91 14 07 	lds	r24, 0x0714
    33c2:	1f 92       	push	r1
    33c4:	8f 93       	push	r24
    33c6:	81 e7       	ldi	r24, 0x71	; 113
    33c8:	91 e0       	ldi	r25, 0x01	; 1
    33ca:	9f 93       	push	r25
    33cc:	8f 93       	push	r24
    33ce:	85 e2       	ldi	r24, 0x25	; 37
    33d0:	97 e0       	ldi	r25, 0x07	; 7
    33d2:	9f 93       	push	r25
    33d4:	8f 93       	push	r24
    33d6:	0e 94 d6 22 	call	0x45ac	; 0x45ac <sprintf>
    33da:	0f 90       	pop	r0
    33dc:	0f 90       	pop	r0
    33de:	0f 90       	pop	r0
    33e0:	0f 90       	pop	r0
    33e2:	0f 90       	pop	r0
    33e4:	0f 90       	pop	r0
				/* now assemble the output buffer */
				for(z = 0; z < 16; z++) outstring[z] = ' ' ;
    33e6:	10 92 c9 02 	sts	0x02C9, r1
    33ea:	80 91 c9 02 	lds	r24, 0x02C9
    33ee:	80 31       	cpi	r24, 0x10	; 16
    33f0:	80 f4       	brcc	.+32     	; 0x3412 <update_Display+0x7ae>
    33f2:	90 e2       	ldi	r25, 0x20	; 32
    33f4:	e0 91 c9 02 	lds	r30, 0x02C9
    33f8:	f0 e0       	ldi	r31, 0x00	; 0
    33fa:	e5 5f       	subi	r30, 0xF5	; 245
    33fc:	fc 4f       	sbci	r31, 0xFC	; 252
    33fe:	90 83       	st	Z, r25
    3400:	80 91 c9 02 	lds	r24, 0x02C9
    3404:	8f 5f       	subi	r24, 0xFF	; 255
    3406:	80 93 c9 02 	sts	0x02C9, r24
    340a:	80 91 c9 02 	lds	r24, 0x02C9
    340e:	80 31       	cpi	r24, 0x10	; 16
    3410:	88 f3       	brcs	.-30     	; 0x33f4 <update_Display+0x790>
				for(z = 0; z < 4; z++) outstring[z + 5] = rangestring[z];
    3412:	10 92 c9 02 	sts	0x02C9, r1
    3416:	80 91 c9 02 	lds	r24, 0x02C9
    341a:	84 30       	cpi	r24, 0x04	; 4
    341c:	a8 f4       	brcc	.+42     	; 0x3448 <update_Display+0x7e4>
    341e:	e0 91 c9 02 	lds	r30, 0x02C9
    3422:	a0 91 c9 02 	lds	r26, 0x02C9
    3426:	f0 e0       	ldi	r31, 0x00	; 0
    3428:	e5 5f       	subi	r30, 0xF5	; 245
    342a:	fc 4f       	sbci	r31, 0xFC	; 252
    342c:	b0 e0       	ldi	r27, 0x00	; 0
    342e:	a2 5b       	subi	r26, 0xB2	; 178
    3430:	be 4f       	sbci	r27, 0xFE	; 254
    3432:	8c 91       	ld	r24, X
    3434:	85 83       	std	Z+5, r24	; 0x05
    3436:	80 91 c9 02 	lds	r24, 0x02C9
    343a:	8f 5f       	subi	r24, 0xFF	; 255
    343c:	80 93 c9 02 	sts	0x02C9, r24
    3440:	80 91 c9 02 	lds	r24, 0x02C9
    3444:	84 30       	cpi	r24, 0x04	; 4
    3446:	58 f3       	brcs	.-42     	; 0x341e <update_Display+0x7ba>
				outstring[10] = 'm';	/* unit is meters */
    3448:	8d e6       	ldi	r24, 0x6D	; 109
    344a:	80 93 15 03 	sts	0x0315, r24
				//if(fztime)
				if(!strcmp(group[groupnum],"Illum"))
    344e:	e0 91 c0 02 	lds	r30, 0x02C0
    3452:	f0 91 c1 02 	lds	r31, 0x02C1
    3456:	ee 0f       	add	r30, r30
    3458:	ff 1f       	adc	r31, r31
    345a:	e0 50       	subi	r30, 0x00	; 0
    345c:	ff 4f       	sbci	r31, 0xFF	; 255
    345e:	65 e7       	ldi	r22, 0x75	; 117
    3460:	71 e0       	ldi	r23, 0x01	; 1
    3462:	80 81       	ld	r24, Z
    3464:	91 81       	ldd	r25, Z+1	; 0x01
    3466:	0e 94 cd 22 	call	0x459a	; 0x459a <strcmp>
    346a:	89 2b       	or	r24, r25
    346c:	79 f4       	brne	.+30     	; 0x348c <update_Display+0x828>
				{
					outstring[12] = fuzestring[0];
    346e:	80 91 25 07 	lds	r24, 0x0725
    3472:	80 93 17 03 	sts	0x0317, r24
					outstring[13] = fuzestring[1];
    3476:	80 91 26 07 	lds	r24, 0x0726
    347a:	80 93 18 03 	sts	0x0318, r24
					outstring[14] = '.';
    347e:	8e e2       	ldi	r24, 0x2E	; 46
    3480:	80 93 19 03 	sts	0x0319, r24
					outstring[15] = fuzestring[2];
    3484:	80 91 27 07 	lds	r24, 0x0727
    3488:	80 93 1a 03 	sts	0x031A, r24
				}
				LCDGotoXY(0,0);
    348c:	60 e0       	ldi	r22, 0x00	; 0
    348e:	80 e0       	ldi	r24, 0x00	; 0
    3490:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <LCDGotoXY>
				lcd_puts(outstring);
    3494:	8b e0       	ldi	r24, 0x0B	; 11
    3496:	93 e0       	ldi	r25, 0x03	; 3
    3498:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <lcd_puts>
			}
			
		}
		
		for(z = 0; z < 16; z++) outstring[z] = ' ' ; /* 17th character already null */
    349c:	10 92 c9 02 	sts	0x02C9, r1
    34a0:	80 91 c9 02 	lds	r24, 0x02C9
    34a4:	80 31       	cpi	r24, 0x10	; 16
    34a6:	80 f4       	brcc	.+32     	; 0x34c8 <update_Display+0x864>
    34a8:	90 e2       	ldi	r25, 0x20	; 32
    34aa:	e0 91 c9 02 	lds	r30, 0x02C9
    34ae:	f0 e0       	ldi	r31, 0x00	; 0
    34b0:	e5 5f       	subi	r30, 0xF5	; 245
    34b2:	fc 4f       	sbci	r31, 0xFC	; 252
    34b4:	90 83       	st	Z, r25
    34b6:	80 91 c9 02 	lds	r24, 0x02C9
    34ba:	8f 5f       	subi	r24, 0xFF	; 255
    34bc:	80 93 c9 02 	sts	0x02C9, r24
    34c0:	80 91 c9 02 	lds	r24, 0x02C9
    34c4:	80 31       	cpi	r24, 0x10	; 16
    34c6:	88 f3       	brcs	.-30     	; 0x34aa <update_Display+0x846>
		outstring[16]= '\0';
    34c8:	10 92 1b 03 	sts	0x031B, r1
		/* overwrite start of outstring with ammo type and charge */
		fptr = (char *)ammotype[groupnum][ammonum];
    34cc:	80 91 c0 02 	lds	r24, 0x02C0
    34d0:	90 91 c1 02 	lds	r25, 0x02C1
    34d4:	fc 01       	movw	r30, r24
    34d6:	ee 0f       	add	r30, r30
    34d8:	ff 1f       	adc	r31, r31
    34da:	8e 0f       	add	r24, r30
    34dc:	9f 1f       	adc	r25, r31
    34de:	fc 01       	movw	r30, r24
    34e0:	ee 0f       	add	r30, r30
    34e2:	ff 1f       	adc	r31, r31
    34e4:	20 91 c4 02 	lds	r18, 0x02C4
    34e8:	30 91 c5 02 	lds	r19, 0x02C5
    34ec:	e2 0f       	add	r30, r18
    34ee:	f3 1f       	adc	r31, r19
    34f0:	ee 0f       	add	r30, r30
    34f2:	ff 1f       	adc	r31, r31
    34f4:	e2 5f       	subi	r30, 0xF2	; 242
    34f6:	fe 4f       	sbci	r31, 0xFE	; 254
    34f8:	a0 81       	ld	r26, Z
    34fa:	b1 81       	ldd	r27, Z+1	; 0x01
    34fc:	b0 93 d7 02 	sts	0x02D7, r27
    3500:	a0 93 d6 02 	sts	0x02D6, r26
		tptr = outstring;
    3504:	8b e0       	ldi	r24, 0x0B	; 11
    3506:	93 e0       	ldi	r25, 0x03	; 3
    3508:	90 93 29 03 	sts	0x0329, r25
    350c:	80 93 28 03 	sts	0x0328, r24
		while(*fptr)(*tptr++ = *fptr++);
    3510:	fd 01       	movw	r30, r26
    3512:	8c 91       	ld	r24, X
    3514:	88 23       	and	r24, r24
    3516:	c9 f0       	breq	.+50     	; 0x354a <update_Display+0x8e6>
    3518:	a0 91 28 03 	lds	r26, 0x0328
    351c:	b0 91 29 03 	lds	r27, 0x0329
    3520:	cd 01       	movw	r24, r26
    3522:	01 96       	adiw	r24, 0x01	; 1
    3524:	90 93 29 03 	sts	0x0329, r25
    3528:	80 93 28 03 	sts	0x0328, r24
    352c:	cf 01       	movw	r24, r30
    352e:	01 96       	adiw	r24, 0x01	; 1
    3530:	90 93 d7 02 	sts	0x02D7, r25
    3534:	80 93 d6 02 	sts	0x02D6, r24
    3538:	80 81       	ld	r24, Z
    353a:	8c 93       	st	X, r24
    353c:	e0 91 d6 02 	lds	r30, 0x02D6
    3540:	f0 91 d7 02 	lds	r31, 0x02D7
    3544:	80 81       	ld	r24, Z
    3546:	81 11       	cpse	r24, r1
    3548:	e7 cf       	rjmp	.-50     	; 0x3518 <update_Display+0x8b4>
		fptr = (char *)charge[chargenum];
    354a:	e0 91 c2 02 	lds	r30, 0x02C2
    354e:	f0 91 c3 02 	lds	r31, 0x02C3
    3552:	ee 0f       	add	r30, r30
    3554:	ff 1f       	adc	r31, r31
    3556:	e6 5f       	subi	r30, 0xF6	; 246
    3558:	fe 4f       	sbci	r31, 0xFE	; 254
    355a:	a0 81       	ld	r26, Z
    355c:	b1 81       	ldd	r27, Z+1	; 0x01
    355e:	b0 93 d7 02 	sts	0x02D7, r27
    3562:	a0 93 d6 02 	sts	0x02D6, r26
		tptr = &outstring[7];
    3566:	82 e1       	ldi	r24, 0x12	; 18
    3568:	93 e0       	ldi	r25, 0x03	; 3
    356a:	90 93 29 03 	sts	0x0329, r25
    356e:	80 93 28 03 	sts	0x0328, r24
		while (*fptr)(*tptr++ = *fptr++);
    3572:	fd 01       	movw	r30, r26
    3574:	8c 91       	ld	r24, X
    3576:	88 23       	and	r24, r24
    3578:	c9 f0       	breq	.+50     	; 0x35ac <update_Display+0x948>
    357a:	a0 91 28 03 	lds	r26, 0x0328
    357e:	b0 91 29 03 	lds	r27, 0x0329
    3582:	cd 01       	movw	r24, r26
    3584:	01 96       	adiw	r24, 0x01	; 1
    3586:	90 93 29 03 	sts	0x0329, r25
    358a:	80 93 28 03 	sts	0x0328, r24
    358e:	cf 01       	movw	r24, r30
    3590:	01 96       	adiw	r24, 0x01	; 1
    3592:	90 93 d7 02 	sts	0x02D7, r25
    3596:	80 93 d6 02 	sts	0x02D6, r24
    359a:	80 81       	ld	r24, Z
    359c:	8c 93       	st	X, r24
    359e:	e0 91 d6 02 	lds	r30, 0x02D6
    35a2:	f0 91 d7 02 	lds	r31, 0x02D7
    35a6:	80 81       	ld	r24, Z
    35a8:	81 11       	cpse	r24, r1
    35aa:	e7 cf       	rjmp	.-50     	; 0x357a <update_Display+0x916>
		//for(z = 9; z < 16; z++)
		outstring[9] = ostr2[0];
    35ac:	80 91 fa 02 	lds	r24, 0x02FA
    35b0:	80 93 14 03 	sts	0x0314, r24
		outstring[10] = ostr2[1];
    35b4:	80 91 fb 02 	lds	r24, 0x02FB
    35b8:	80 93 15 03 	sts	0x0315, r24
		outstring[11] = ostr2[2];
    35bc:	80 91 fc 02 	lds	r24, 0x02FC
    35c0:	80 93 16 03 	sts	0x0316, r24
		outstring[12] = ostr2[3];
    35c4:	80 91 fd 02 	lds	r24, 0x02FD
    35c8:	80 93 17 03 	sts	0x0317, r24
		outstring[13] = ostr2[4];
    35cc:	80 91 fe 02 	lds	r24, 0x02FE
    35d0:	80 93 18 03 	sts	0x0318, r24
		outstring[14] = ostr2[5];
    35d4:	80 91 ff 02 	lds	r24, 0x02FF
    35d8:	80 93 19 03 	sts	0x0319, r24
		outstring[15] = ostr2[6];
    35dc:	80 91 00 03 	lds	r24, 0x0300
    35e0:	80 93 1a 03 	sts	0x031A, r24
		LCDGotoXY(0,1);
    35e4:	61 e0       	ldi	r22, 0x01	; 1
    35e6:	80 e0       	ldi	r24, 0x00	; 0
    35e8:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <LCDGotoXY>
		lcd_puts(outstring);
    35ec:	8b e0       	ldi	r24, 0x0B	; 11
    35ee:	93 e0       	ldi	r25, 0x03	; 3
    35f0:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <lcd_puts>
    35f4:	73 c0       	rjmp	.+230    	; 0x36dc <update_Display+0xa78>
		
		//printAccelMil(11, 1 , (int)accelM[0]);
					
	}
	else if(switch_state == 9)	//Yellow
    35f6:	80 91 58 01 	lds	r24, 0x0158
    35fa:	89 30       	cpi	r24, 0x09	; 9
    35fc:	a1 f5       	brne	.+104    	; 0x3666 <update_Display+0xa02>
	{
		CopyStringtoLCD(State9, 3, 0);
    35fe:	40 e0       	ldi	r20, 0x00	; 0
    3600:	63 e0       	ldi	r22, 0x03	; 3
    3602:	81 e4       	ldi	r24, 0x41	; 65
    3604:	91 e2       	ldi	r25, 0x21	; 33
    3606:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <CopyStringtoLCD>
		LCDGotoXY(0,1);
    360a:	61 e0       	ldi	r22, 0x01	; 1
    360c:	80 e0       	ldi	r24, 0x00	; 0
    360e:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <LCDGotoXY>
		LCDsendChar('T');
    3612:	84 e5       	ldi	r24, 0x54	; 84
    3614:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <LCDsendChar>
		printAccelTilt(1, 1 , (int)accel3Axis[0]);
    3618:	60 91 ea 02 	lds	r22, 0x02EA
    361c:	70 91 eb 02 	lds	r23, 0x02EB
    3620:	80 91 ec 02 	lds	r24, 0x02EC
    3624:	90 91 ed 02 	lds	r25, 0x02ED
    3628:	0e 94 81 20 	call	0x4102	; 0x4102 <__fixsfsi>
    362c:	ab 01       	movw	r20, r22
    362e:	61 e0       	ldi	r22, 0x01	; 1
    3630:	81 e0       	ldi	r24, 0x01	; 1
    3632:	0e 94 ae 13 	call	0x275c	; 0x275c <printAccelTilt>
		LCDGotoXY(9,1);
    3636:	61 e0       	ldi	r22, 0x01	; 1
    3638:	89 e0       	ldi	r24, 0x09	; 9
    363a:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <LCDGotoXY>
		LCDsendChar('R');
    363e:	82 e5       	ldi	r24, 0x52	; 82
    3640:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <LCDsendChar>
		printAccelTilt(10, 1 , (int)accel3Axis[1]);
    3644:	60 91 ee 02 	lds	r22, 0x02EE
    3648:	70 91 ef 02 	lds	r23, 0x02EF
    364c:	80 91 f0 02 	lds	r24, 0x02F0
    3650:	90 91 f1 02 	lds	r25, 0x02F1
    3654:	0e 94 81 20 	call	0x4102	; 0x4102 <__fixsfsi>
    3658:	ab 01       	movw	r20, r22
    365a:	61 e0       	ldi	r22, 0x01	; 1
    365c:	8a e0       	ldi	r24, 0x0A	; 10
    365e:	0e 94 ae 13 	call	0x275c	; 0x275c <printAccelTilt>
		output_low(PORTD, GreenLED);
    3662:	5f 98       	cbi	0x0b, 7	; 11
    3664:	3b c0       	rjmp	.+118    	; 0x36dc <update_Display+0xa78>
	}
	else
	{
		CopyStringtoLCD(State0, 3, 0);
    3666:	40 e0       	ldi	r20, 0x00	; 0
    3668:	63 e0       	ldi	r22, 0x03	; 3
    366a:	81 e8       	ldi	r24, 0x81	; 129
    366c:	91 e2       	ldi	r25, 0x21	; 33
    366e:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <CopyStringtoLCD>
		printInt(11, 0 , i);
    3672:	20 91 56 01 	lds	r18, 0x0156
    3676:	30 91 57 01 	lds	r19, 0x0157
    367a:	44 27       	eor	r20, r20
    367c:	37 fd       	sbrc	r19, 7
    367e:	40 95       	com	r20
    3680:	54 2f       	mov	r21, r20
    3682:	60 e0       	ldi	r22, 0x00	; 0
    3684:	8b e0       	ldi	r24, 0x0B	; 11
    3686:	0e 94 43 14 	call	0x2886	; 0x2886 <printInt>
		printInt(0, 1 , system_Clock);
    368a:	20 91 ca 02 	lds	r18, 0x02CA
    368e:	30 91 cb 02 	lds	r19, 0x02CB
    3692:	40 91 cc 02 	lds	r20, 0x02CC
    3696:	50 91 cd 02 	lds	r21, 0x02CD
    369a:	61 e0       	ldi	r22, 0x01	; 1
    369c:	80 e0       	ldi	r24, 0x00	; 0
    369e:	0e 94 43 14 	call	0x2886	; 0x2886 <printInt>
		output_low(PORTD, GreenLED);
    36a2:	5f 98       	cbi	0x0b, 7	; 11
		updateSpeed = 32;
    36a4:	80 e2       	ldi	r24, 0x20	; 32
    36a6:	80 93 53 01 	sts	0x0153, r24
		switch_state = 0; // set switch state to 0 if the state is above 9
    36aa:	10 92 58 01 	sts	0x0158, r1
    36ae:	16 c0       	rjmp	.+44     	; 0x36dc <update_Display+0xa78>
		//printInt(5, 1 , system_Clock);
		sprintf(rangestring,"%5d",(int)accelM[0]);
		/* convert leading zeros to leading blanks */
		index = 0;
		while(rangestring[index] == '\0') {rangestring[index] = ' ' ; index++;}
		LCDGotoXY(0,1);
    36b0:	61 e0       	ldi	r22, 0x01	; 1
    36b2:	80 e0       	ldi	r24, 0x00	; 0
    36b4:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <LCDGotoXY>
		LCDsendChar('X');
    36b8:	88 e5       	ldi	r24, 0x58	; 88
    36ba:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <LCDsendChar>
		for(index = 0; index < 5; index++)
    36be:	10 92 c6 02 	sts	0x02C6, r1
		printInt(11, 0 , i);
		//printInt(5, 1 , system_Clock);
		sprintf(rangestring,"%5d",(int)accelM[0]);
		/* convert leading zeros to leading blanks */
		index = 0;
		while(rangestring[index] == '\0') {rangestring[index] = ' ' ; index++;}
    36c2:	e0 e0       	ldi	r30, 0x00	; 0
    36c4:	0e cc       	rjmp	.-2020   	; 0x2ee2 <update_Display+0x27e>
		}
		sprintf(rangestring,"%5d",(int)accelM[1]);
		/* convert leading zeros to leading blanks */
		index = 0;
		while(rangestring[index] == '\0') {rangestring[index] = ' ' ; index++;}
		LCDGotoXY(9,1);
    36c6:	61 e0       	ldi	r22, 0x01	; 1
    36c8:	89 e0       	ldi	r24, 0x09	; 9
    36ca:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <LCDGotoXY>
		LCDsendChar('Y');
    36ce:	89 e5       	ldi	r24, 0x59	; 89
    36d0:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <LCDsendChar>
		for(index = 0; index < 5; index++)
    36d4:	10 92 c6 02 	sts	0x02C6, r1
			LCDsendChar(rangestring[index]);
		}
		sprintf(rangestring,"%5d",(int)accelM[1]);
		/* convert leading zeros to leading blanks */
		index = 0;
		while(rangestring[index] == '\0') {rangestring[index] = ' ' ; index++;}
    36d8:	e0 e0       	ldi	r30, 0x00	; 0
    36da:	51 cc       	rjmp	.-1886   	; 0x2f7e <update_Display+0x31a>
		output_low(PORTD, GreenLED);
		updateSpeed = 32;
		switch_state = 0; // set switch state to 0 if the state is above 9
	}

}
    36dc:	df 91       	pop	r29
    36de:	cf 91       	pop	r28
    36e0:	1f 91       	pop	r17
    36e2:	0f 91       	pop	r16
    36e4:	08 95       	ret

000036e6 <powerDRIdown>:
	return(pgm_read_word(&(last->meters)));
}

void powerDRIdown(void)
{
	LCDclr();//clears LCD
    36e6:	0e 94 05 1e 	call	0x3c0a	; 0x3c0a <LCDclr>
	CopyStringtoLCD(PowerString, 0, 0);
    36ea:	40 e0       	ldi	r20, 0x00	; 0
    36ec:	60 e0       	ldi	r22, 0x00	; 0
    36ee:	80 e3       	ldi	r24, 0x30	; 48
    36f0:	91 e2       	ldi	r25, 0x21	; 33
    36f2:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <CopyStringtoLCD>
    36f6:	2f ef       	ldi	r18, 0xFF	; 255
    36f8:	83 ed       	ldi	r24, 0xD3	; 211
    36fa:	90 e3       	ldi	r25, 0x30	; 48
    36fc:	21 50       	subi	r18, 0x01	; 1
    36fe:	80 40       	sbci	r24, 0x00	; 0
    3700:	90 40       	sbci	r25, 0x00	; 0
    3702:	e1 f7       	brne	.-8      	; 0x36fc <powerDRIdown+0x16>
    3704:	00 c0       	rjmp	.+0      	; 0x3706 <powerDRIdown+0x20>
    3706:	00 00       	nop
	_delay_ms(2000);
	while(1)
	{
		output_low(PORTA, PowerOn);	
    3708:	12 98       	cbi	0x02, 2	; 2
    370a:	fe cf       	rjmp	.-4      	; 0x3708 <powerDRIdown+0x22>

0000370c <__vector_18>:
	}

}

ISR(TIMER0_OVF_vect) // timer 0 overflow interrupt
{
    370c:	1f 92       	push	r1
    370e:	0f 92       	push	r0
    3710:	0f b6       	in	r0, 0x3f	; 63
    3712:	0f 92       	push	r0
    3714:	11 24       	eor	r1, r1
    3716:	4f 92       	push	r4
    3718:	5f 92       	push	r5
    371a:	6f 92       	push	r6
    371c:	7f 92       	push	r7
    371e:	8f 92       	push	r8
    3720:	9f 92       	push	r9
    3722:	af 92       	push	r10
    3724:	bf 92       	push	r11
    3726:	cf 92       	push	r12
    3728:	df 92       	push	r13
    372a:	ef 92       	push	r14
    372c:	ff 92       	push	r15
    372e:	0f 93       	push	r16
    3730:	1f 93       	push	r17
    3732:	2f 93       	push	r18
    3734:	3f 93       	push	r19
    3736:	4f 93       	push	r20
    3738:	5f 93       	push	r21
    373a:	6f 93       	push	r22
    373c:	7f 93       	push	r23
    373e:	8f 93       	push	r24
    3740:	9f 93       	push	r25
    3742:	af 93       	push	r26
    3744:	bf 93       	push	r27
    3746:	ef 93       	push	r30
    3748:	ff 93       	push	r31
    374a:	cf 93       	push	r28
    374c:	df 93       	push	r29
    374e:	cd b7       	in	r28, 0x3d	; 61
    3750:	de b7       	in	r29, 0x3e	; 62
    3752:	28 97       	sbiw	r28, 0x08	; 8
    3754:	de bf       	out	0x3e, r29	; 62
    3756:	cd bf       	out	0x3d, r28	; 61
	//TCNT0 += 6;
	TCNT0 += 0x83;
    3758:	86 b5       	in	r24, 0x26	; 38
    375a:	8d 57       	subi	r24, 0x7D	; 125
    375c:	86 bd       	out	0x26, r24	; 38
	if((timer0Overflows % 2) == 0) // push button polling 195 1 sec /975 5 sec/ 11700 1 min/
    375e:	80 91 d0 02 	lds	r24, 0x02D0
    3762:	90 91 d1 02 	lds	r25, 0x02D1
    3766:	80 fd       	sbrc	r24, 0
    3768:	05 c0       	rjmp	.+10     	; 0x3774 <__vector_18+0x68>
	{
		if(is_clear(PINA, Switch1)) // if the push button is held down connecting pin B2 to ground
    376a:	00 99       	sbic	0x00, 0	; 0
    376c:	03 c0       	rjmp	.+6      	; 0x3774 <__vector_18+0x68>
		{
			BTN_Down = 1; // button down is true
    376e:	81 e0       	ldi	r24, 0x01	; 1
    3770:	80 93 ce 02 	sts	0x02CE, r24
		}
	}
	if((timer0Overflows % 4) == 0) // push button polling on the release
    3774:	80 91 d0 02 	lds	r24, 0x02D0
    3778:	90 91 d1 02 	lds	r25, 0x02D1
    377c:	83 70       	andi	r24, 0x03	; 3
    377e:	99 27       	eor	r25, r25
    3780:	89 2b       	or	r24, r25
    3782:	09 f0       	breq	.+2      	; 0x3786 <__vector_18+0x7a>
    3784:	4b c0       	rjmp	.+150    	; 0x381c <__vector_18+0x110>
	{

		if(is_set(PINA, Switch1) && BTN_Down == 1) //
    3786:	00 9b       	sbis	0x00, 0	; 0
    3788:	49 c0       	rjmp	.+146    	; 0x381c <__vector_18+0x110>
    378a:	80 91 ce 02 	lds	r24, 0x02CE
    378e:	81 30       	cpi	r24, 0x01	; 1
    3790:	09 f0       	breq	.+2      	; 0x3794 <__vector_18+0x88>
    3792:	44 c0       	rjmp	.+136    	; 0x381c <__vector_18+0x110>
		{
			//switch_state++; // increment mode states by 1 i.e. red -> yellow, green - > blue
			if (switch_state == 6)
    3794:	80 91 58 01 	lds	r24, 0x0158
    3798:	86 30       	cpi	r24, 0x06	; 6
    379a:	89 f4       	brne	.+34     	; 0x37be <__vector_18+0xb2>
			{
		
				if (groupnum >= 4) 
    379c:	80 91 c0 02 	lds	r24, 0x02C0
    37a0:	90 91 c1 02 	lds	r25, 0x02C1
    37a4:	84 30       	cpi	r24, 0x04	; 4
    37a6:	91 05       	cpc	r25, r1
    37a8:	2c f0       	brlt	.+10     	; 0x37b4 <__vector_18+0xa8>
				{
					groupnum = 0;
    37aa:	10 92 c1 02 	sts	0x02C1, r1
    37ae:	10 92 c0 02 	sts	0x02C0, r1
    37b2:	05 c0       	rjmp	.+10     	; 0x37be <__vector_18+0xb2>
				}
				else 
				{
					groupnum++;
    37b4:	01 96       	adiw	r24, 0x01	; 1
    37b6:	90 93 c1 02 	sts	0x02C1, r25
    37ba:	80 93 c0 02 	sts	0x02C0, r24
				}
			}
			if (switch_state == 7)
    37be:	80 91 58 01 	lds	r24, 0x0158
    37c2:	87 30       	cpi	r24, 0x07	; 7
    37c4:	d9 f4       	brne	.+54     	; 0x37fc <__vector_18+0xf0>
			{
				if (ammonum >= ammolim[groupnum])
    37c6:	80 91 c4 02 	lds	r24, 0x02C4
    37ca:	90 91 c5 02 	lds	r25, 0x02C5
    37ce:	e0 91 c0 02 	lds	r30, 0x02C0
    37d2:	f0 91 c1 02 	lds	r31, 0x02C1
    37d6:	ee 0f       	add	r30, r30
    37d8:	ff 1f       	adc	r31, r31
    37da:	ef 5c       	subi	r30, 0xCF	; 207
    37dc:	fd 4f       	sbci	r31, 0xFD	; 253
    37de:	20 81       	ld	r18, Z
    37e0:	31 81       	ldd	r19, Z+1	; 0x01
    37e2:	82 17       	cp	r24, r18
    37e4:	93 07       	cpc	r25, r19
    37e6:	2c f0       	brlt	.+10     	; 0x37f2 <__vector_18+0xe6>
				{
					 ammonum = 0;
    37e8:	10 92 c5 02 	sts	0x02C5, r1
    37ec:	10 92 c4 02 	sts	0x02C4, r1
    37f0:	05 c0       	rjmp	.+10     	; 0x37fc <__vector_18+0xf0>
				}
				else 
				{
					ammonum++;
    37f2:	01 96       	adiw	r24, 0x01	; 1
    37f4:	90 93 c5 02 	sts	0x02C5, r25
    37f8:	80 93 c4 02 	sts	0x02C4, r24
				}
			}
			if (switch_state == 8)
    37fc:	80 91 58 01 	lds	r24, 0x0158
    3800:	88 30       	cpi	r24, 0x08	; 8
    3802:	51 f4       	brne	.+20     	; 0x3818 <__vector_18+0x10c>
			{
				chargenum ^= 1;
    3804:	80 91 c2 02 	lds	r24, 0x02C2
    3808:	90 91 c3 02 	lds	r25, 0x02C3
    380c:	21 e0       	ldi	r18, 0x01	; 1
    380e:	82 27       	eor	r24, r18
    3810:	90 93 c3 02 	sts	0x02C3, r25
    3814:	80 93 c2 02 	sts	0x02C2, r24
			}
			BTN_Down = 0; // push button is released so the button is no longer held down
    3818:	10 92 ce 02 	sts	0x02CE, r1
			//LCDclr();
		}
	}
	if((timer0Overflows % 62) == 0) // push button polling on the release % 16
    381c:	40 91 d0 02 	lds	r20, 0x02D0
    3820:	50 91 d1 02 	lds	r21, 0x02D1
    3824:	9a 01       	movw	r18, r20
    3826:	36 95       	lsr	r19
    3828:	27 95       	ror	r18
    382a:	a1 e1       	ldi	r26, 0x11	; 17
    382c:	b2 e4       	ldi	r27, 0x42	; 66
    382e:	0e 94 be 22 	call	0x457c	; 0x457c <__umulhisi3>
    3832:	96 95       	lsr	r25
    3834:	87 95       	ror	r24
    3836:	96 95       	lsr	r25
    3838:	87 95       	ror	r24
    383a:	96 95       	lsr	r25
    383c:	87 95       	ror	r24
    383e:	6e e3       	ldi	r22, 0x3E	; 62
    3840:	68 9f       	mul	r22, r24
    3842:	90 01       	movw	r18, r0
    3844:	69 9f       	mul	r22, r25
    3846:	30 0d       	add	r19, r0
    3848:	11 24       	eor	r1, r1
    384a:	42 17       	cp	r20, r18
    384c:	53 07       	cpc	r21, r19
    384e:	09 f0       	breq	.+2      	; 0x3852 <__vector_18+0x146>
    3850:	fb c0       	rjmp	.+502    	; 0x3a48 <__vector_18+0x33c>
	{
		if(is_clear(PIND, Switch2)) // if the push button is held down connecting pin B2 to ground
    3852:	4d 99       	sbic	0x09, 5	; 9
    3854:	07 c0       	rjmp	.+14     	; 0x3864 <__vector_18+0x158>
		{
			switch_state--;
    3856:	80 91 58 01 	lds	r24, 0x0158
    385a:	81 50       	subi	r24, 0x01	; 1
    385c:	80 93 58 01 	sts	0x0158, r24
			LCDclr();
    3860:	0e 94 05 1e 	call	0x3c0a	; 0x3c0a <LCDclr>
		}
		if(is_clear(PIND, Switch3)) // if the push button is held down connecting pin B2 to ground
    3864:	4e 99       	sbic	0x09, 6	; 9
    3866:	07 c0       	rjmp	.+14     	; 0x3876 <__vector_18+0x16a>
		{
			switch_state++;
    3868:	80 91 58 01 	lds	r24, 0x0158
    386c:	8f 5f       	subi	r24, 0xFF	; 255
    386e:	80 93 58 01 	sts	0x0158, r24
			LCDclr();
    3872:	0e 94 05 1e 	call	0x3c0a	; 0x3c0a <LCDclr>
		}
		readAccelData(accelCount);
    3876:	88 ed       	ldi	r24, 0xD8	; 216
    3878:	92 e0       	ldi	r25, 0x02	; 2
    387a:	0e 94 54 12 	call	0x24a8	; 0x24a8 <readAccelData>
    387e:	0f 2e       	mov	r0, r31
    3880:	f8 ed       	ldi	r31, 0xD8	; 216
    3882:	8f 2e       	mov	r8, r31
    3884:	f2 e0       	ldi	r31, 0x02	; 2
    3886:	9f 2e       	mov	r9, r31
    3888:	f0 2d       	mov	r31, r0
    388a:	0f 2e       	mov	r0, r31
    388c:	fe ed       	ldi	r31, 0xDE	; 222
    388e:	cf 2e       	mov	r12, r31
    3890:	f2 e0       	ldi	r31, 0x02	; 2
    3892:	df 2e       	mov	r13, r31
    3894:	f0 2d       	mov	r31, r0
    3896:	0f 2e       	mov	r0, r31
    3898:	f9 e1       	ldi	r31, 0x19	; 25
    389a:	ef 2e       	mov	r14, r31
    389c:	f7 e0       	ldi	r31, 0x07	; 7
    389e:	ff 2e       	mov	r15, r31
    38a0:	f0 2d       	mov	r31, r0
    38a2:	09 e2       	ldi	r16, 0x29	; 41
    38a4:	17 e0       	ldi	r17, 0x07	; 7
    38a6:	0f 2e       	mov	r0, r31
    38a8:	fe ed       	ldi	r31, 0xDE	; 222
    38aa:	af 2e       	mov	r10, r31
    38ac:	f2 e0       	ldi	r31, 0x02	; 2
    38ae:	bf 2e       	mov	r11, r31
    38b0:	f0 2d       	mov	r31, r0
		for (int i=0; i<3; i++)
		{
			accelG[i] = (float)accelCount[i]/((1<<12)/(2*SCALE));  // get actual g value, this depends on scale being set
    38b2:	f4 01       	movw	r30, r8
    38b4:	61 91       	ld	r22, Z+
    38b6:	71 91       	ld	r23, Z+
    38b8:	4f 01       	movw	r8, r30
    38ba:	88 27       	eor	r24, r24
    38bc:	77 fd       	sbrc	r23, 7
    38be:	80 95       	com	r24
    38c0:	98 2f       	mov	r25, r24
    38c2:	0e 94 b4 20 	call	0x4168	; 0x4168 <__floatsisf>
    38c6:	20 e0       	ldi	r18, 0x00	; 0
    38c8:	30 e0       	ldi	r19, 0x00	; 0
    38ca:	40 e8       	ldi	r20, 0x80	; 128
    38cc:	5a e3       	ldi	r21, 0x3A	; 58
    38ce:	0e 94 98 21 	call	0x4330	; 0x4330 <__mulsf3>
    38d2:	f6 01       	movw	r30, r12
    38d4:	61 93       	st	Z+, r22
    38d6:	71 93       	st	Z+, r23
    38d8:	81 93       	st	Z+, r24
    38da:	91 93       	st	Z+, r25
    38dc:	6f 01       	movw	r12, r30
			accelD[i] = asin(accelG[i])*57.2957795;
    38de:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <asin>
    38e2:	2b 01       	movw	r4, r22
    38e4:	3c 01       	movw	r6, r24
    38e6:	21 ee       	ldi	r18, 0xE1	; 225
    38e8:	3e e2       	ldi	r19, 0x2E	; 46
    38ea:	45 e6       	ldi	r20, 0x65	; 101
    38ec:	52 e4       	ldi	r21, 0x42	; 66
    38ee:	0e 94 98 21 	call	0x4330	; 0x4330 <__mulsf3>
    38f2:	f7 01       	movw	r30, r14
    38f4:	61 93       	st	Z+, r22
    38f6:	71 93       	st	Z+, r23
    38f8:	81 93       	st	Z+, r24
    38fa:	91 93       	st	Z+, r25
    38fc:	7f 01       	movw	r14, r30
			accelM[i] = asin(accelG[i])*1018.59163579;
    38fe:	2d ed       	ldi	r18, 0xDD	; 221
    3900:	35 ea       	ldi	r19, 0xA5	; 165
    3902:	4e e7       	ldi	r20, 0x7E	; 126
    3904:	54 e4       	ldi	r21, 0x44	; 68
    3906:	c3 01       	movw	r24, r6
    3908:	b2 01       	movw	r22, r4
    390a:	0e 94 98 21 	call	0x4330	; 0x4330 <__mulsf3>
    390e:	f8 01       	movw	r30, r16
    3910:	61 93       	st	Z+, r22
    3912:	71 93       	st	Z+, r23
    3914:	81 93       	st	Z+, r24
    3916:	91 93       	st	Z+, r25
    3918:	8f 01       	movw	r16, r30
		{
			switch_state++;
			LCDclr();
		}
		readAccelData(accelCount);
		for (int i=0; i<3; i++)
    391a:	8a 14       	cp	r8, r10
    391c:	9b 04       	cpc	r9, r11
    391e:	49 f6       	brne	.-110    	; 0x38b2 <__vector_18+0x1a6>
		{
			accelG[i] = (float)accelCount[i]/((1<<12)/(2*SCALE));  // get actual g value, this depends on scale being set
			accelD[i] = asin(accelG[i])*57.2957795;
			accelM[i] = asin(accelG[i])*1018.59163579;
		}
		accel3Axis[0] =  atan(accelG[0]/(sqrt((accelG[1]*accelG[1])+(accelG[2]*accelG[2]))))*1018.59163579;
    3920:	c0 90 de 02 	lds	r12, 0x02DE
    3924:	d0 90 df 02 	lds	r13, 0x02DF
    3928:	e0 90 e0 02 	lds	r14, 0x02E0
    392c:	f0 90 e1 02 	lds	r15, 0x02E1
    3930:	40 90 e2 02 	lds	r4, 0x02E2
    3934:	50 90 e3 02 	lds	r5, 0x02E3
    3938:	60 90 e4 02 	lds	r6, 0x02E4
    393c:	70 90 e5 02 	lds	r7, 0x02E5
    3940:	a3 01       	movw	r20, r6
    3942:	92 01       	movw	r18, r4
    3944:	c3 01       	movw	r24, r6
    3946:	b2 01       	movw	r22, r4
    3948:	0e 94 98 21 	call	0x4330	; 0x4330 <__mulsf3>
    394c:	69 83       	std	Y+1, r22	; 0x01
    394e:	7a 83       	std	Y+2, r23	; 0x02
    3950:	8b 83       	std	Y+3, r24	; 0x03
    3952:	9c 83       	std	Y+4, r25	; 0x04
    3954:	80 90 e6 02 	lds	r8, 0x02E6
    3958:	90 90 e7 02 	lds	r9, 0x02E7
    395c:	a0 90 e8 02 	lds	r10, 0x02E8
    3960:	b0 90 e9 02 	lds	r11, 0x02E9
    3964:	a5 01       	movw	r20, r10
    3966:	94 01       	movw	r18, r8
    3968:	c5 01       	movw	r24, r10
    396a:	b4 01       	movw	r22, r8
    396c:	0e 94 98 21 	call	0x4330	; 0x4330 <__mulsf3>
    3970:	6d 83       	std	Y+5, r22	; 0x05
    3972:	7e 83       	std	Y+6, r23	; 0x06
    3974:	8f 83       	std	Y+7, r24	; 0x07
    3976:	98 87       	std	Y+8, r25	; 0x08
    3978:	9b 01       	movw	r18, r22
    397a:	ac 01       	movw	r20, r24
    397c:	69 81       	ldd	r22, Y+1	; 0x01
    397e:	7a 81       	ldd	r23, Y+2	; 0x02
    3980:	8b 81       	ldd	r24, Y+3	; 0x03
    3982:	9c 81       	ldd	r25, Y+4	; 0x04
    3984:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
    3988:	0e 94 ff 21 	call	0x43fe	; 0x43fe <sqrt>
    398c:	9b 01       	movw	r18, r22
    398e:	ac 01       	movw	r20, r24
    3990:	c7 01       	movw	r24, r14
    3992:	b6 01       	movw	r22, r12
    3994:	0e 94 19 20 	call	0x4032	; 0x4032 <__divsf3>
    3998:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <atan>
    399c:	2d ed       	ldi	r18, 0xDD	; 221
    399e:	35 ea       	ldi	r19, 0xA5	; 165
    39a0:	4e e7       	ldi	r20, 0x7E	; 126
    39a2:	54 e4       	ldi	r21, 0x44	; 68
    39a4:	0e 94 98 21 	call	0x4330	; 0x4330 <__mulsf3>
    39a8:	60 93 ea 02 	sts	0x02EA, r22
    39ac:	70 93 eb 02 	sts	0x02EB, r23
    39b0:	80 93 ec 02 	sts	0x02EC, r24
    39b4:	90 93 ed 02 	sts	0x02ED, r25
		accel3Axis[1] =  atan(accelG[1]/(sqrt((accelG[0]*accelG[0])+(accelG[2]*accelG[2]))))*1018.59163579;
    39b8:	a7 01       	movw	r20, r14
    39ba:	96 01       	movw	r18, r12
    39bc:	c7 01       	movw	r24, r14
    39be:	b6 01       	movw	r22, r12
    39c0:	0e 94 98 21 	call	0x4330	; 0x4330 <__mulsf3>
    39c4:	6b 01       	movw	r12, r22
    39c6:	7c 01       	movw	r14, r24
    39c8:	9b 01       	movw	r18, r22
    39ca:	ac 01       	movw	r20, r24
    39cc:	6d 81       	ldd	r22, Y+5	; 0x05
    39ce:	7e 81       	ldd	r23, Y+6	; 0x06
    39d0:	8f 81       	ldd	r24, Y+7	; 0x07
    39d2:	98 85       	ldd	r25, Y+8	; 0x08
    39d4:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
    39d8:	0e 94 ff 21 	call	0x43fe	; 0x43fe <sqrt>
    39dc:	9b 01       	movw	r18, r22
    39de:	ac 01       	movw	r20, r24
    39e0:	c3 01       	movw	r24, r6
    39e2:	b2 01       	movw	r22, r4
    39e4:	0e 94 19 20 	call	0x4032	; 0x4032 <__divsf3>
    39e8:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <atan>
    39ec:	2d ed       	ldi	r18, 0xDD	; 221
    39ee:	35 ea       	ldi	r19, 0xA5	; 165
    39f0:	4e e7       	ldi	r20, 0x7E	; 126
    39f2:	54 e4       	ldi	r21, 0x44	; 68
    39f4:	0e 94 98 21 	call	0x4330	; 0x4330 <__mulsf3>
    39f8:	60 93 ee 02 	sts	0x02EE, r22
    39fc:	70 93 ef 02 	sts	0x02EF, r23
    3a00:	80 93 f0 02 	sts	0x02F0, r24
    3a04:	90 93 f1 02 	sts	0x02F1, r25
		accel3Axis[2] =  atan(sqrt((accelG[0]*accelG[0])+(accelG[1]*accelG[1]))/accelG[2])*1018.59163579;
    3a08:	a7 01       	movw	r20, r14
    3a0a:	96 01       	movw	r18, r12
    3a0c:	69 81       	ldd	r22, Y+1	; 0x01
    3a0e:	7a 81       	ldd	r23, Y+2	; 0x02
    3a10:	8b 81       	ldd	r24, Y+3	; 0x03
    3a12:	9c 81       	ldd	r25, Y+4	; 0x04
    3a14:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
    3a18:	0e 94 ff 21 	call	0x43fe	; 0x43fe <sqrt>
    3a1c:	a5 01       	movw	r20, r10
    3a1e:	94 01       	movw	r18, r8
    3a20:	0e 94 19 20 	call	0x4032	; 0x4032 <__divsf3>
    3a24:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <atan>
    3a28:	2d ed       	ldi	r18, 0xDD	; 221
    3a2a:	35 ea       	ldi	r19, 0xA5	; 165
    3a2c:	4e e7       	ldi	r20, 0x7E	; 126
    3a2e:	54 e4       	ldi	r21, 0x44	; 68
    3a30:	0e 94 98 21 	call	0x4330	; 0x4330 <__mulsf3>
    3a34:	60 93 f2 02 	sts	0x02F2, r22
    3a38:	70 93 f3 02 	sts	0x02F3, r23
    3a3c:	80 93 f4 02 	sts	0x02F4, r24
    3a40:	90 93 f5 02 	sts	0x02F5, r25
		
		update_Display();
    3a44:	0e 94 32 16 	call	0x2c64	; 0x2c64 <update_Display>
	}
	if((timer0Overflows % 125) == 0) // push button polling on the release 32
    3a48:	40 91 d0 02 	lds	r20, 0x02D0
    3a4c:	50 91 d1 02 	lds	r21, 0x02D1
    3a50:	9a 01       	movw	r18, r20
    3a52:	a5 e2       	ldi	r26, 0x25	; 37
    3a54:	b6 e0       	ldi	r27, 0x06	; 6
    3a56:	0e 94 be 22 	call	0x457c	; 0x457c <__umulhisi3>
    3a5a:	28 1b       	sub	r18, r24
    3a5c:	39 0b       	sbc	r19, r25
    3a5e:	36 95       	lsr	r19
    3a60:	27 95       	ror	r18
    3a62:	82 0f       	add	r24, r18
    3a64:	93 1f       	adc	r25, r19
    3a66:	00 24       	eor	r0, r0
    3a68:	88 0f       	add	r24, r24
    3a6a:	99 1f       	adc	r25, r25
    3a6c:	00 1c       	adc	r0, r0
    3a6e:	88 0f       	add	r24, r24
    3a70:	99 1f       	adc	r25, r25
    3a72:	00 1c       	adc	r0, r0
    3a74:	89 2f       	mov	r24, r25
    3a76:	90 2d       	mov	r25, r0
    3a78:	6d e7       	ldi	r22, 0x7D	; 125
    3a7a:	68 9f       	mul	r22, r24
    3a7c:	90 01       	movw	r18, r0
    3a7e:	69 9f       	mul	r22, r25
    3a80:	30 0d       	add	r19, r0
    3a82:	11 24       	eor	r1, r1
    3a84:	42 17       	cp	r20, r18
    3a86:	53 07       	cpc	r21, r19
    3a88:	11 f5       	brne	.+68     	; 0x3ace <__vector_18+0x3c2>
	{
		system_Clock++;
    3a8a:	80 91 ca 02 	lds	r24, 0x02CA
    3a8e:	90 91 cb 02 	lds	r25, 0x02CB
    3a92:	a0 91 cc 02 	lds	r26, 0x02CC
    3a96:	b0 91 cd 02 	lds	r27, 0x02CD
    3a9a:	01 96       	adiw	r24, 0x01	; 1
    3a9c:	a1 1d       	adc	r26, r1
    3a9e:	b1 1d       	adc	r27, r1
    3aa0:	80 93 ca 02 	sts	0x02CA, r24
    3aa4:	90 93 cb 02 	sts	0x02CB, r25
    3aa8:	a0 93 cc 02 	sts	0x02CC, r26
    3aac:	b0 93 cd 02 	sts	0x02CD, r27
		if(is_clear(PINA, PowerSwitch)) // if the push button is held down connecting pin B2 to ground
    3ab0:	01 99       	sbic	0x00, 1	; 0
    3ab2:	0b c0       	rjmp	.+22     	; 0x3aca <__vector_18+0x3be>
		{
			power_count++;
    3ab4:	80 91 cf 02 	lds	r24, 0x02CF
    3ab8:	8f 5f       	subi	r24, 0xFF	; 255
    3aba:	80 93 cf 02 	sts	0x02CF, r24
			if(power_count == 5)
    3abe:	80 91 cf 02 	lds	r24, 0x02CF
    3ac2:	85 30       	cpi	r24, 0x05	; 5
    3ac4:	21 f4       	brne	.+8      	; 0x3ace <__vector_18+0x3c2>
			{
				powerDRIdown();
    3ac6:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <powerDRIdown>
				power_count = 0;
			}
		}
		else
		{
			power_count = 0;
    3aca:	10 92 cf 02 	sts	0x02CF, r1
		}
	
	}
	if((timer0Overflows % updateSpeed) == 0) // push button polling on the release
    3ace:	80 91 d0 02 	lds	r24, 0x02D0
    3ad2:	90 91 d1 02 	lds	r25, 0x02D1
    3ad6:	60 91 53 01 	lds	r22, 0x0153
    3ada:	70 e0       	ldi	r23, 0x00	; 0
    3adc:	0e 94 55 22 	call	0x44aa	; 0x44aa <__udivmodhi4>
    3ae0:	89 2b       	or	r24, r25
    3ae2:	51 f5       	brne	.+84     	; 0x3b38 <__vector_18+0x42c>
	{
		if (i == 1023) d = -1;   // count down
    3ae4:	80 91 56 01 	lds	r24, 0x0156
    3ae8:	90 91 57 01 	lds	r25, 0x0157
    3aec:	8f 3f       	cpi	r24, 0xFF	; 255
    3aee:	93 40       	sbci	r25, 0x03	; 3
    3af0:	31 f4       	brne	.+12     	; 0x3afe <__vector_18+0x3f2>
    3af2:	8f ef       	ldi	r24, 0xFF	; 255
    3af4:	9f ef       	ldi	r25, 0xFF	; 255
    3af6:	90 93 55 01 	sts	0x0155, r25
    3afa:	80 93 54 01 	sts	0x0154, r24
		if (i == -1024) d = 1;   // count up
    3afe:	80 91 56 01 	lds	r24, 0x0156
    3b02:	90 91 57 01 	lds	r25, 0x0157
    3b06:	81 15       	cp	r24, r1
    3b08:	9c 4f       	sbci	r25, 0xFC	; 252
    3b0a:	31 f4       	brne	.+12     	; 0x3b18 <__vector_18+0x40c>
    3b0c:	81 e0       	ldi	r24, 0x01	; 1
    3b0e:	90 e0       	ldi	r25, 0x00	; 0
    3b10:	90 93 55 01 	sts	0x0155, r25
    3b14:	80 93 54 01 	sts	0x0154, r24
		i += d;
    3b18:	20 91 56 01 	lds	r18, 0x0156
    3b1c:	30 91 57 01 	lds	r19, 0x0157
    3b20:	80 91 54 01 	lds	r24, 0x0154
    3b24:	90 91 55 01 	lds	r25, 0x0155
    3b28:	82 0f       	add	r24, r18
    3b2a:	93 1f       	adc	r25, r19
    3b2c:	90 93 57 01 	sts	0x0157, r25
    3b30:	80 93 56 01 	sts	0x0156, r24
		update_Display();
    3b34:	0e 94 32 16 	call	0x2c64	; 0x2c64 <update_Display>
	}
	timer0Overflows++;
    3b38:	80 91 d0 02 	lds	r24, 0x02D0
    3b3c:	90 91 d1 02 	lds	r25, 0x02D1
    3b40:	01 96       	adiw	r24, 0x01	; 1
    3b42:	90 93 d1 02 	sts	0x02D1, r25
    3b46:	80 93 d0 02 	sts	0x02D0, r24
}
    3b4a:	28 96       	adiw	r28, 0x08	; 8
    3b4c:	0f b6       	in	r0, 0x3f	; 63
    3b4e:	f8 94       	cli
    3b50:	de bf       	out	0x3e, r29	; 62
    3b52:	0f be       	out	0x3f, r0	; 63
    3b54:	cd bf       	out	0x3d, r28	; 61
    3b56:	df 91       	pop	r29
    3b58:	cf 91       	pop	r28
    3b5a:	ff 91       	pop	r31
    3b5c:	ef 91       	pop	r30
    3b5e:	bf 91       	pop	r27
    3b60:	af 91       	pop	r26
    3b62:	9f 91       	pop	r25
    3b64:	8f 91       	pop	r24
    3b66:	7f 91       	pop	r23
    3b68:	6f 91       	pop	r22
    3b6a:	5f 91       	pop	r21
    3b6c:	4f 91       	pop	r20
    3b6e:	3f 91       	pop	r19
    3b70:	2f 91       	pop	r18
    3b72:	1f 91       	pop	r17
    3b74:	0f 91       	pop	r16
    3b76:	ff 90       	pop	r15
    3b78:	ef 90       	pop	r14
    3b7a:	df 90       	pop	r13
    3b7c:	cf 90       	pop	r12
    3b7e:	bf 90       	pop	r11
    3b80:	af 90       	pop	r10
    3b82:	9f 90       	pop	r9
    3b84:	8f 90       	pop	r8
    3b86:	7f 90       	pop	r7
    3b88:	6f 90       	pop	r6
    3b8a:	5f 90       	pop	r5
    3b8c:	4f 90       	pop	r4
    3b8e:	0f 90       	pop	r0
    3b90:	0f be       	out	0x3f, r0	; 63
    3b92:	0f 90       	pop	r0
    3b94:	1f 90       	pop	r1
    3b96:	18 95       	reti

00003b98 <main>:
}
	
int main(void)
{

	set_input(DDRA, Switch1);
    3b98:	08 98       	cbi	0x01, 0	; 1
	set_input(DDRD, Switch2);
    3b9a:	55 98       	cbi	0x0a, 5	; 10
	set_input(DDRD, Switch3);
    3b9c:	56 98       	cbi	0x0a, 6	; 10
	set_output(DDRD, GreenLED);
    3b9e:	57 9a       	sbi	0x0a, 7	; 10
	set_output(DDRA, PowerOn);
    3ba0:	0a 9a       	sbi	0x01, 2	; 1
	set_input(DDRA, PowerSwitch);
    3ba2:	09 98       	cbi	0x01, 1	; 1
	
	output_high(PORTA, PowerOn);
    3ba4:	12 9a       	sbi	0x02, 2	; 2

	LCDinit();//init LCD bit, dual line, cursor right
    3ba6:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <LCDinit>
	LCDclr();//clears LCD
    3baa:	0e 94 05 1e 	call	0x3c0a	; 0x3c0a <LCDclr>
	progress();
    3bae:	0e 94 fe 14 	call	0x29fc	; 0x29fc <progress>
	delay1s();
    3bb2:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <delay1s>
	setupI2C();
    3bb6:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <setupI2C>
	MMA8452Active();
    3bba:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <MMA8452Active>
	timer0_init();
    3bbe:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <timer0_init>
	sei();
    3bc2:	78 94       	sei
    3bc4:	ff cf       	rjmp	.-2      	; 0x3bc4 <main+0x2c>

00003bc6 <LCDsendChar>:
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#else
	//8 bit part
	LDP=ch;
    3bc6:	85 b9       	out	0x05, r24	; 5
	LCP|=1<<LCD_RS;
    3bc8:	5a 9a       	sbi	0x0b, 2	; 11
	LCP|=1<<LCD_E;		
    3bca:	5c 9a       	sbi	0x0b, 4	; 11
    3bcc:	8f ec       	ldi	r24, 0xCF	; 207
    3bce:	97 e0       	ldi	r25, 0x07	; 7
    3bd0:	01 97       	sbiw	r24, 0x01	; 1
    3bd2:	f1 f7       	brne	.-4      	; 0x3bd0 <LCDsendChar+0xa>
    3bd4:	00 c0       	rjmp	.+0      	; 0x3bd6 <LCDsendChar+0x10>
    3bd6:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
    3bd8:	5c 98       	cbi	0x0b, 4	; 11
	LCP&=~(1<<LCD_RS);
    3bda:	5a 98       	cbi	0x0b, 2	; 11
    3bdc:	8f ec       	ldi	r24, 0xCF	; 207
    3bde:	97 e0       	ldi	r25, 0x07	; 7
    3be0:	01 97       	sbiw	r24, 0x01	; 1
    3be2:	f1 f7       	brne	.-4      	; 0x3be0 <LCDsendChar+0x1a>
    3be4:	00 c0       	rjmp	.+0      	; 0x3be6 <LCDsendChar+0x20>
    3be6:	00 00       	nop
    3be8:	08 95       	ret

00003bea <LCDsendCommand>:
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);
#else
	//8 bit part
	LDP=cmd;
    3bea:	85 b9       	out	0x05, r24	; 5
	LCP|=1<<LCD_E;		
    3bec:	5c 9a       	sbi	0x0b, 4	; 11
    3bee:	8f ec       	ldi	r24, 0xCF	; 207
    3bf0:	97 e0       	ldi	r25, 0x07	; 7
    3bf2:	01 97       	sbiw	r24, 0x01	; 1
    3bf4:	f1 f7       	brne	.-4      	; 0x3bf2 <LCDsendCommand+0x8>
    3bf6:	00 c0       	rjmp	.+0      	; 0x3bf8 <LCDsendCommand+0xe>
    3bf8:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    3bfa:	5c 98       	cbi	0x0b, 4	; 11
    3bfc:	8f ec       	ldi	r24, 0xCF	; 207
    3bfe:	97 e0       	ldi	r25, 0x07	; 7
    3c00:	01 97       	sbiw	r24, 0x01	; 1
    3c02:	f1 f7       	brne	.-4      	; 0x3c00 <LCDsendCommand+0x16>
    3c04:	00 c0       	rjmp	.+0      	; 0x3c06 <LCDsendCommand+0x1c>
    3c06:	00 00       	nop
    3c08:	08 95       	ret

00003c0a <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
    3c0a:	81 e0       	ldi	r24, 0x01	; 1
    3c0c:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <LCDsendCommand>
    3c10:	08 95       	ret

00003c12 <lcd_puts>:
		LCDsendChar(data[i]);
	}
}
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    3c12:	cf 93       	push	r28
    3c14:	df 93       	push	r29
	register char c;

	while ( (c = *s++) ) {
    3c16:	ec 01       	movw	r28, r24
    3c18:	21 96       	adiw	r28, 0x01	; 1
    3c1a:	fc 01       	movw	r30, r24
    3c1c:	80 81       	ld	r24, Z
    3c1e:	88 23       	and	r24, r24
    3c20:	29 f0       	breq	.+10     	; 0x3c2c <lcd_puts+0x1a>
		LCDsendChar(c);
    3c22:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <LCDsendChar>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
	register char c;

	while ( (c = *s++) ) {
    3c26:	89 91       	ld	r24, Y+
    3c28:	81 11       	cpse	r24, r1
    3c2a:	fb cf       	rjmp	.-10     	; 0x3c22 <lcd_puts+0x10>
		LCDsendChar(c);
	}

}
    3c2c:	df 91       	pop	r29
    3c2e:	cf 91       	pop	r28
    3c30:	08 95       	ret

00003c32 <LCDGotoXY>:
	}/* lcd_puts_p */
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
    3c32:	62 30       	cpi	r22, 0x02	; 2
    3c34:	31 f0       	breq	.+12     	; 0x3c42 <LCDGotoXY+0x10>
    3c36:	63 30       	cpi	r22, 0x03	; 3
    3c38:	31 f0       	breq	.+12     	; 0x3c46 <LCDGotoXY+0x14>
    3c3a:	61 30       	cpi	r22, 0x01	; 1
    3c3c:	29 f4       	brne	.+10     	; 0x3c48 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
    3c3e:	80 5c       	subi	r24, 0xC0	; 192
    3c40:	03 c0       	rjmp	.+6      	; 0x3c48 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
    3c42:	8c 5e       	subi	r24, 0xEC	; 236
    3c44:	01 c0       	rjmp	.+2      	; 0x3c48 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
    3c46:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
    3c48:	80 68       	ori	r24, 0x80	; 128
    3c4a:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <LCDsendCommand>
    3c4e:	08 95       	ret

00003c50 <CopyStringtoLCD>:
}
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
    3c50:	1f 93       	push	r17
    3c52:	cf 93       	push	r28
    3c54:	df 93       	push	r29
    3c56:	ec 01       	movw	r28, r24
    3c58:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
    3c5a:	64 2f       	mov	r22, r20
    3c5c:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <LCDGotoXY>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    3c60:	9e 01       	movw	r18, r28
    3c62:	fe 01       	movw	r30, r28
    3c64:	84 91       	lpm	r24, Z
    3c66:	88 23       	and	r24, r24
    3c68:	69 f0       	breq	.+26     	; 0x3c84 <CopyStringtoLCD+0x34>
    3c6a:	10 e0       	ldi	r17, 0x00	; 0
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
    3c6c:	f9 01       	movw	r30, r18
    3c6e:	84 91       	lpm	r24, Z
    3c70:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    3c74:	1f 5f       	subi	r17, 0xFF	; 255
    3c76:	9e 01       	movw	r18, r28
    3c78:	21 0f       	add	r18, r17
    3c7a:	31 1d       	adc	r19, r1
    3c7c:	f9 01       	movw	r30, r18
    3c7e:	84 91       	lpm	r24, Z
    3c80:	81 11       	cpse	r24, r1
    3c82:	f4 cf       	rjmp	.-24     	; 0x3c6c <CopyStringtoLCD+0x1c>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
    3c84:	df 91       	pop	r29
    3c86:	cf 91       	pop	r28
    3c88:	1f 91       	pop	r17
    3c8a:	08 95       	ret

00003c8c <LCDdefinechar>:
//defines char symbol in CGRAM

void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
    3c8c:	ef 92       	push	r14
    3c8e:	ff 92       	push	r15
    3c90:	0f 93       	push	r16
    3c92:	1f 93       	push	r17
    3c94:	cf 93       	push	r28
    3c96:	df 93       	push	r29
    3c98:	8c 01       	movw	r16, r24
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
    3c9a:	66 0f       	add	r22, r22
    3c9c:	66 0f       	add	r22, r22
    3c9e:	66 0f       	add	r22, r22
    3ca0:	60 64       	ori	r22, 0x40	; 64
    3ca2:	e6 2e       	mov	r14, r22
	for (i=0; i<8; i++){
    3ca4:	c0 e0       	ldi	r28, 0x00	; 0
    3ca6:	d0 e0       	ldi	r29, 0x00	; 0
    3ca8:	f8 01       	movw	r30, r16
    3caa:	ec 0f       	add	r30, r28
    3cac:	fd 1f       	adc	r31, r29
		pcc=pgm_read_byte(&pc[i]);
    3cae:	f4 90       	lpm	r15, Z
		LCDsendCommand(a++);
    3cb0:	8c 2f       	mov	r24, r28
    3cb2:	8e 0d       	add	r24, r14
    3cb4:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <LCDsendCommand>
		LCDsendChar(pcc);
    3cb8:	8f 2d       	mov	r24, r15
    3cba:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <LCDsendChar>

void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
    3cbe:	21 96       	adiw	r28, 0x01	; 1
    3cc0:	c8 30       	cpi	r28, 0x08	; 8
    3cc2:	d1 05       	cpc	r29, r1
    3cc4:	89 f7       	brne	.-30     	; 0x3ca8 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
    3cc6:	df 91       	pop	r29
    3cc8:	cf 91       	pop	r28
    3cca:	1f 91       	pop	r17
    3ccc:	0f 91       	pop	r16
    3cce:	ff 90       	pop	r15
    3cd0:	ef 90       	pop	r14
    3cd2:	08 95       	ret

00003cd4 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
    3cd4:	1f 93       	push	r17
    3cd6:	cf 93       	push	r28
    3cd8:	df 93       	push	r29
    3cda:	8f e2       	ldi	r24, 0x2F	; 47
    3cdc:	95 e7       	ldi	r25, 0x75	; 117
    3cde:	01 97       	sbiw	r24, 0x01	; 1
    3ce0:	f1 f7       	brne	.-4      	; 0x3cde <LCDinit+0xa>
    3ce2:	00 c0       	rjmp	.+0      	; 0x3ce4 <LCDinit+0x10>
    3ce4:	00 00       	nop


#else
	//8 bit part
	_delay_ms(15);
	LDP=0x00;
    3ce6:	15 b8       	out	0x05, r1	; 5
	LCP=0x00;
    3ce8:	1b b8       	out	0x0b, r1	; 11
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4|1<<LCD_D3
    3cea:	84 b1       	in	r24, 0x04	; 4
    3cec:	8f ef       	ldi	r24, 0xFF	; 255
    3cee:	84 b9       	out	0x04, r24	; 4
			|1<<LCD_D2|1<<LCD_D1|1<<LCD_D0;
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
    3cf0:	8a b1       	in	r24, 0x0a	; 10
    3cf2:	8c 61       	ori	r24, 0x1C	; 28
    3cf4:	8a b9       	out	0x0a, r24	; 10
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4|1<<LCD_D3
    3cf6:	88 e3       	ldi	r24, 0x38	; 56
    3cf8:	85 b9       	out	0x05, r24	; 5
			|0<<LCD_D2|0<<LCD_D1|0<<LCD_D0; //8 it mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    3cfa:	5c 9a       	sbi	0x0b, 4	; 11
    3cfc:	8f ec       	ldi	r24, 0xCF	; 207
    3cfe:	97 e0       	ldi	r25, 0x07	; 7
    3d00:	01 97       	sbiw	r24, 0x01	; 1
    3d02:	f1 f7       	brne	.-4      	; 0x3d00 <LCDinit+0x2c>
    3d04:	00 c0       	rjmp	.+0      	; 0x3d06 <LCDinit+0x32>
    3d06:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    3d08:	5c 98       	cbi	0x0b, 4	; 11
    3d0a:	8f ec       	ldi	r24, 0xCF	; 207
    3d0c:	97 e0       	ldi	r25, 0x07	; 7
    3d0e:	01 97       	sbiw	r24, 0x01	; 1
    3d10:	f1 f7       	brne	.-4      	; 0x3d0e <LCDinit+0x3a>
    3d12:	00 c0       	rjmp	.+0      	; 0x3d14 <LCDinit+0x40>
    3d14:	00 00       	nop
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4|1<<LCD_D3
    3d16:	88 e3       	ldi	r24, 0x38	; 56
    3d18:	85 b9       	out	0x05, r24	; 5
			|0<<LCD_D2|0<<LCD_D1|0<<LCD_D0; //8 it mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    3d1a:	5c 9a       	sbi	0x0b, 4	; 11
    3d1c:	8f ec       	ldi	r24, 0xCF	; 207
    3d1e:	97 e0       	ldi	r25, 0x07	; 7
    3d20:	01 97       	sbiw	r24, 0x01	; 1
    3d22:	f1 f7       	brne	.-4      	; 0x3d20 <LCDinit+0x4c>
    3d24:	00 c0       	rjmp	.+0      	; 0x3d26 <LCDinit+0x52>
    3d26:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    3d28:	5c 98       	cbi	0x0b, 4	; 11
    3d2a:	8f ec       	ldi	r24, 0xCF	; 207
    3d2c:	97 e0       	ldi	r25, 0x07	; 7
    3d2e:	01 97       	sbiw	r24, 0x01	; 1
    3d30:	f1 f7       	brne	.-4      	; 0x3d2e <LCDinit+0x5a>
    3d32:	00 c0       	rjmp	.+0      	; 0x3d34 <LCDinit+0x60>
    3d34:	00 00       	nop
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4|1<<LCD_D3
    3d36:	88 e3       	ldi	r24, 0x38	; 56
    3d38:	85 b9       	out	0x05, r24	; 5
			|0<<LCD_D2|0<<LCD_D1|0<<LCD_D0; //8 it mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    3d3a:	5c 9a       	sbi	0x0b, 4	; 11
    3d3c:	8f ec       	ldi	r24, 0xCF	; 207
    3d3e:	97 e0       	ldi	r25, 0x07	; 7
    3d40:	01 97       	sbiw	r24, 0x01	; 1
    3d42:	f1 f7       	brne	.-4      	; 0x3d40 <LCDinit+0x6c>
    3d44:	00 c0       	rjmp	.+0      	; 0x3d46 <LCDinit+0x72>
    3d46:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    3d48:	5c 98       	cbi	0x0b, 4	; 11
    3d4a:	8f ec       	ldi	r24, 0xCF	; 207
    3d4c:	97 e0       	ldi	r25, 0x07	; 7
    3d4e:	01 97       	sbiw	r24, 0x01	; 1
    3d50:	f1 f7       	brne	.-4      	; 0x3d4e <LCDinit+0x7a>
    3d52:	00 c0       	rjmp	.+0      	; 0x3d54 <LCDinit+0x80>
    3d54:	00 00       	nop
	_delay_ms(1);
	
	//--------8 bit dual line----------
	LDP=0<<LCD_D7|0<<LCD_D6|0<<LCD_D5|1<<LCD_D4|0<<LCD_D3
    3d56:	84 e1       	ldi	r24, 0x14	; 20
    3d58:	85 b9       	out	0x05, r24	; 5
	|1<<LCD_D2|0<<LCD_D1|0<<LCD_D0; //8 it mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;
    3d5a:	5c 9a       	sbi	0x0b, 4	; 11
    3d5c:	8f ec       	ldi	r24, 0xCF	; 207
    3d5e:	97 e0       	ldi	r25, 0x07	; 7
    3d60:	01 97       	sbiw	r24, 0x01	; 1
    3d62:	f1 f7       	brne	.-4      	; 0x3d60 <LCDinit+0x8c>
    3d64:	00 c0       	rjmp	.+0      	; 0x3d66 <LCDinit+0x92>
    3d66:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    3d68:	5c 98       	cbi	0x0b, 4	; 11
    3d6a:	8f ec       	ldi	r24, 0xCF	; 207
    3d6c:	97 e0       	ldi	r25, 0x07	; 7
    3d6e:	01 97       	sbiw	r24, 0x01	; 1
    3d70:	f1 f7       	brne	.-4      	; 0x3d6e <LCDinit+0x9a>
    3d72:	00 c0       	rjmp	.+0      	; 0x3d74 <LCDinit+0xa0>
    3d74:	00 00       	nop
	_delay_ms(1);
	//-----increment address, invisible cursor shift------
	LDP=0<<LCD_D7|0<<LCD_D6|0<<LCD_D5|1<<LCD_D4|0<<LCD_D3
    3d76:	84 e1       	ldi	r24, 0x14	; 20
    3d78:	85 b9       	out	0x05, r24	; 5
	|1<<LCD_D2|0<<LCD_D1|0<<LCD_D0; //8 it mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;
    3d7a:	5c 9a       	sbi	0x0b, 4	; 11
    3d7c:	8f ec       	ldi	r24, 0xCF	; 207
    3d7e:	97 e0       	ldi	r25, 0x07	; 7
    3d80:	01 97       	sbiw	r24, 0x01	; 1
    3d82:	f1 f7       	brne	.-4      	; 0x3d80 <LCDinit+0xac>
    3d84:	00 c0       	rjmp	.+0      	; 0x3d86 <LCDinit+0xb2>
    3d86:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    3d88:	5c 98       	cbi	0x0b, 4	; 11
    3d8a:	8f ec       	ldi	r24, 0xCF	; 207
    3d8c:	97 e0       	ldi	r25, 0x07	; 7
    3d8e:	01 97       	sbiw	r24, 0x01	; 1
    3d90:	f1 f7       	brne	.-4      	; 0x3d8e <LCDinit+0xba>
    3d92:	00 c0       	rjmp	.+0      	; 0x3d94 <LCDinit+0xc0>
    3d94:	00 00       	nop
	_delay_ms(1);
	
	LDP=0<<LCD_D7|0<<LCD_D6|0<<LCD_D5|0<<LCD_D4|1<<LCD_D3
    3d96:	8c e0       	ldi	r24, 0x0C	; 12
    3d98:	85 b9       	out	0x05, r24	; 5
	|1<<LCD_D2|0<<LCD_D1|0<<LCD_D0; //8 it mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;
    3d9a:	5c 9a       	sbi	0x0b, 4	; 11
    3d9c:	8f ec       	ldi	r24, 0xCF	; 207
    3d9e:	97 e0       	ldi	r25, 0x07	; 7
    3da0:	01 97       	sbiw	r24, 0x01	; 1
    3da2:	f1 f7       	brne	.-4      	; 0x3da0 <LCDinit+0xcc>
    3da4:	00 c0       	rjmp	.+0      	; 0x3da6 <LCDinit+0xd2>
    3da6:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    3da8:	5c 98       	cbi	0x0b, 4	; 11
    3daa:	8f ec       	ldi	r24, 0xCF	; 207
    3dac:	97 e0       	ldi	r25, 0x07	; 7
    3dae:	01 97       	sbiw	r24, 0x01	; 1
    3db0:	f1 f7       	brne	.-4      	; 0x3dae <LCDinit+0xda>
    3db2:	00 c0       	rjmp	.+0      	; 0x3db4 <LCDinit+0xe0>
    3db4:	00 00       	nop
	_delay_ms(1);
	//-----increment address, invisible cursor shift------
	LDP=0<<LCD_D7|0<<LCD_D6|0<<LCD_D5|0<<LCD_D4|1<<LCD_D3
    3db6:	8c e0       	ldi	r24, 0x0C	; 12
    3db8:	85 b9       	out	0x05, r24	; 5
	|1<<LCD_D2|0<<LCD_D1|0<<LCD_D0; //8 it mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;
    3dba:	5c 9a       	sbi	0x0b, 4	; 11
    3dbc:	8f ec       	ldi	r24, 0xCF	; 207
    3dbe:	97 e0       	ldi	r25, 0x07	; 7
    3dc0:	01 97       	sbiw	r24, 0x01	; 1
    3dc2:	f1 f7       	brne	.-4      	; 0x3dc0 <LCDinit+0xec>
    3dc4:	00 c0       	rjmp	.+0      	; 0x3dc6 <LCDinit+0xf2>
    3dc6:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    3dc8:	5c 98       	cbi	0x0b, 4	; 11
    3dca:	8f ec       	ldi	r24, 0xCF	; 207
    3dcc:	97 e0       	ldi	r25, 0x07	; 7
    3dce:	01 97       	sbiw	r24, 0x01	; 1
    3dd0:	f1 f7       	brne	.-4      	; 0x3dce <LCDinit+0xfa>
    3dd2:	00 c0       	rjmp	.+0      	; 0x3dd4 <LCDinit+0x100>
    3dd4:	00 00       	nop
	_delay_ms(1);
	
	//--------8 bit dual line----------
	LDP=0<<LCD_D7|0<<LCD_D6|0<<LCD_D5|0<<LCD_D4|0<<LCD_D3
    3dd6:	86 e0       	ldi	r24, 0x06	; 6
    3dd8:	85 b9       	out	0x05, r24	; 5
			|1<<LCD_D2|1<<LCD_D1|0<<LCD_D0; //8 it mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    3dda:	5c 9a       	sbi	0x0b, 4	; 11
    3ddc:	8f ec       	ldi	r24, 0xCF	; 207
    3dde:	97 e0       	ldi	r25, 0x07	; 7
    3de0:	01 97       	sbiw	r24, 0x01	; 1
    3de2:	f1 f7       	brne	.-4      	; 0x3de0 <LCDinit+0x10c>
    3de4:	00 c0       	rjmp	.+0      	; 0x3de6 <LCDinit+0x112>
    3de6:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    3de8:	5c 98       	cbi	0x0b, 4	; 11
    3dea:	8f ec       	ldi	r24, 0xCF	; 207
    3dec:	97 e0       	ldi	r25, 0x07	; 7
    3dee:	01 97       	sbiw	r24, 0x01	; 1
    3df0:	f1 f7       	brne	.-4      	; 0x3dee <LCDinit+0x11a>
    3df2:	00 c0       	rjmp	.+0      	; 0x3df4 <LCDinit+0x120>
    3df4:	00 00       	nop
	_delay_ms(1);
   //-----increment address, invisible cursor shift------
	LDP=0<<LCD_D7|0<<LCD_D6|0<<LCD_D5|0<<LCD_D4|0<<LCD_D3
    3df6:	86 e0       	ldi	r24, 0x06	; 6
    3df8:	85 b9       	out	0x05, r24	; 5
			|1<<LCD_D2|1<<LCD_D1|0<<LCD_D0; //8 it mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    3dfa:	5c 9a       	sbi	0x0b, 4	; 11
    3dfc:	8f ec       	ldi	r24, 0xCF	; 207
    3dfe:	97 e0       	ldi	r25, 0x07	; 7
    3e00:	01 97       	sbiw	r24, 0x01	; 1
    3e02:	f1 f7       	brne	.-4      	; 0x3e00 <LCDinit+0x12c>
    3e04:	00 c0       	rjmp	.+0      	; 0x3e06 <LCDinit+0x132>
    3e06:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    3e08:	5c 98       	cbi	0x0b, 4	; 11
    3e0a:	8f e0       	ldi	r24, 0x0F	; 15
    3e0c:	97 e2       	ldi	r25, 0x27	; 39
    3e0e:	01 97       	sbiw	r24, 0x01	; 1
    3e10:	f1 f7       	brne	.-4      	; 0x3e0e <LCDinit+0x13a>
    3e12:	00 c0       	rjmp	.+0      	; 0x3e14 <LCDinit+0x140>
    3e14:	00 00       	nop
    3e16:	c2 e9       	ldi	r28, 0x92	; 146
    3e18:	d1 e2       	ldi	r29, 0x21	; 33
	_delay_ms(5);

		//init custom chars
	uint8_t ch=0, chn=0;
    3e1a:	60 e0       	ldi	r22, 0x00	; 0
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
    3e1c:	11 e0       	ldi	r17, 0x01	; 1
    3e1e:	16 0f       	add	r17, r22
    3e20:	ce 01       	movw	r24, r28
    3e22:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <LCDdefinechar>
    3e26:	28 96       	adiw	r28, 0x08	; 8
	LCP&=~(1<<LCD_E);
	_delay_ms(5);

		//init custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
    3e28:	18 30       	cpi	r17, 0x08	; 8
    3e2a:	11 f0       	breq	.+4      	; 0x3e30 <LCDinit+0x15c>
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
    3e2c:	61 2f       	mov	r22, r17
    3e2e:	f6 cf       	rjmp	.-20     	; 0x3e1c <LCDinit+0x148>
		ch=ch+8;
	}

#endif
}			
    3e30:	df 91       	pop	r29
    3e32:	cf 91       	pop	r28
    3e34:	1f 91       	pop	r17
    3e36:	08 95       	ret

00003e38 <LCDprogressBar>:
		LCDsendCommand(0x14);
	}
}
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
    3e38:	bf 92       	push	r11
    3e3a:	cf 92       	push	r12
    3e3c:	df 92       	push	r13
    3e3e:	ef 92       	push	r14
    3e40:	ff 92       	push	r15
    3e42:	0f 93       	push	r16
    3e44:	1f 93       	push	r17
    3e46:	cf 93       	push	r28
    3e48:	df 93       	push	r29
    3e4a:	f4 2e       	mov	r15, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
    3e4c:	24 2f       	mov	r18, r20
    3e4e:	30 e0       	ldi	r19, 0x00	; 0
    3e50:	a9 01       	movw	r20, r18
    3e52:	44 0f       	add	r20, r20
    3e54:	55 1f       	adc	r21, r21
    3e56:	24 0f       	add	r18, r20
    3e58:	35 1f       	adc	r19, r21
    3e5a:	22 0f       	add	r18, r18
    3e5c:	33 1f       	adc	r19, r19
    3e5e:	48 2f       	mov	r20, r24
    3e60:	42 9f       	mul	r20, r18
    3e62:	c0 01       	movw	r24, r0
    3e64:	43 9f       	mul	r20, r19
    3e66:	90 0d       	add	r25, r0
    3e68:	11 24       	eor	r1, r1
    3e6a:	70 e0       	ldi	r23, 0x00	; 0
    3e6c:	0e 94 69 22 	call	0x44d2	; 0x44d2 <__divmodhi4>
    3e70:	e6 2f       	mov	r30, r22
    3e72:	06 2f       	mov	r16, r22
    3e74:	17 2f       	mov	r17, r23
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    3e76:	ff 20       	and	r15, r15
    3e78:	71 f1       	breq	.+92     	; 0x3ed6 <LCDprogressBar+0x9e>
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    3e7a:	26 2f       	mov	r18, r22
    3e7c:	37 2f       	mov	r19, r23
    3e7e:	ab ea       	ldi	r26, 0xAB	; 171
    3e80:	ba ea       	ldi	r27, 0xAA	; 170
    3e82:	0e 94 be 22 	call	0x457c	; 0x457c <__umulhisi3>
    3e86:	96 95       	lsr	r25
    3e88:	87 95       	ror	r24
    3e8a:	96 95       	lsr	r25
    3e8c:	87 95       	ror	r24
    3e8e:	ac 01       	movw	r20, r24
    3e90:	44 0f       	add	r20, r20
    3e92:	55 1f       	adc	r21, r21
    3e94:	84 0f       	add	r24, r20
    3e96:	95 1f       	adc	r25, r21
    3e98:	88 0f       	add	r24, r24
    3e9a:	99 1f       	adc	r25, r25
    3e9c:	c0 e0       	ldi	r28, 0x00	; 0
    3e9e:	d0 e0       	ldi	r29, 0x00	; 0
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    3ea0:	e1 2c       	mov	r14, r1
			}
		}
		else
		{
			// this is a full block
			c = 5;
    3ea2:	0f 2e       	mov	r0, r31
    3ea4:	f5 e0       	ldi	r31, 0x05	; 5
    3ea6:	df 2e       	mov	r13, r31
    3ea8:	f0 2d       	mov	r31, r0
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    3eaa:	be 2e       	mov	r11, r30
    3eac:	b8 1a       	sub	r11, r24
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
			{
				// this is an empty block
				// use space character?
				c = 0;
    3eae:	c1 2c       	mov	r12, r1
    3eb0:	ce 01       	movw	r24, r28
    3eb2:	05 96       	adiw	r24, 0x05	; 5
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
    3eb4:	08 17       	cp	r16, r24
    3eb6:	19 07       	cpc	r17, r25
    3eb8:	28 f4       	brcc	.+10     	; 0x3ec4 <LCDprogressBar+0x8c>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    3eba:	0c 17       	cp	r16, r28
    3ebc:	1d 07       	cpc	r17, r29
    3ebe:	20 f4       	brcc	.+8      	; 0x3ec8 <LCDprogressBar+0x90>
			{
				// this is an empty block
				// use space character?
				c = 0;
    3ec0:	8c 2d       	mov	r24, r12
    3ec2:	03 c0       	rjmp	.+6      	; 0x3eca <LCDprogressBar+0x92>
			}
		}
		else
		{
			// this is a full block
			c = 5;
    3ec4:	8d 2d       	mov	r24, r13
    3ec6:	01 c0       	rjmp	.+2      	; 0x3eca <LCDprogressBar+0x92>
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    3ec8:	8b 2d       	mov	r24, r11
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
    3eca:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    3ece:	e3 94       	inc	r14
    3ed0:	26 96       	adiw	r28, 0x06	; 6
    3ed2:	ef 10       	cpse	r14, r15
    3ed4:	ed cf       	rjmp	.-38     	; 0x3eb0 <LCDprogressBar+0x78>
		
		// write character to display
		LCDsendChar(c);
	}

}
    3ed6:	df 91       	pop	r29
    3ed8:	cf 91       	pop	r28
    3eda:	1f 91       	pop	r17
    3edc:	0f 91       	pop	r16
    3ede:	ff 90       	pop	r15
    3ee0:	ef 90       	pop	r14
    3ee2:	df 90       	pop	r13
    3ee4:	cf 90       	pop	r12
    3ee6:	bf 90       	pop	r11
    3ee8:	08 95       	ret

00003eea <__subsf3>:
    3eea:	50 58       	subi	r21, 0x80	; 128

00003eec <__addsf3>:
    3eec:	bb 27       	eor	r27, r27
    3eee:	aa 27       	eor	r26, r26
    3ef0:	0e d0       	rcall	.+28     	; 0x3f0e <__addsf3x>
    3ef2:	dd c1       	rjmp	.+954    	; 0x42ae <__fp_round>
    3ef4:	ce d1       	rcall	.+924    	; 0x4292 <__fp_pscA>
    3ef6:	30 f0       	brcs	.+12     	; 0x3f04 <__addsf3+0x18>
    3ef8:	d3 d1       	rcall	.+934    	; 0x42a0 <__fp_pscB>
    3efa:	20 f0       	brcs	.+8      	; 0x3f04 <__addsf3+0x18>
    3efc:	31 f4       	brne	.+12     	; 0x3f0a <__addsf3+0x1e>
    3efe:	9f 3f       	cpi	r25, 0xFF	; 255
    3f00:	11 f4       	brne	.+4      	; 0x3f06 <__addsf3+0x1a>
    3f02:	1e f4       	brtc	.+6      	; 0x3f0a <__addsf3+0x1e>
    3f04:	8d c1       	rjmp	.+794    	; 0x4220 <__fp_nan>
    3f06:	0e f4       	brtc	.+2      	; 0x3f0a <__addsf3+0x1e>
    3f08:	e0 95       	com	r30
    3f0a:	e7 fb       	bst	r30, 7
    3f0c:	83 c1       	rjmp	.+774    	; 0x4214 <__fp_inf>

00003f0e <__addsf3x>:
    3f0e:	e9 2f       	mov	r30, r25
    3f10:	df d1       	rcall	.+958    	; 0x42d0 <__fp_split3>
    3f12:	80 f3       	brcs	.-32     	; 0x3ef4 <__addsf3+0x8>
    3f14:	ba 17       	cp	r27, r26
    3f16:	62 07       	cpc	r22, r18
    3f18:	73 07       	cpc	r23, r19
    3f1a:	84 07       	cpc	r24, r20
    3f1c:	95 07       	cpc	r25, r21
    3f1e:	18 f0       	brcs	.+6      	; 0x3f26 <__addsf3x+0x18>
    3f20:	71 f4       	brne	.+28     	; 0x3f3e <__addsf3x+0x30>
    3f22:	9e f5       	brtc	.+102    	; 0x3f8a <__addsf3x+0x7c>
    3f24:	f7 c1       	rjmp	.+1006   	; 0x4314 <__fp_zero>
    3f26:	0e f4       	brtc	.+2      	; 0x3f2a <__addsf3x+0x1c>
    3f28:	e0 95       	com	r30
    3f2a:	0b 2e       	mov	r0, r27
    3f2c:	ba 2f       	mov	r27, r26
    3f2e:	a0 2d       	mov	r26, r0
    3f30:	0b 01       	movw	r0, r22
    3f32:	b9 01       	movw	r22, r18
    3f34:	90 01       	movw	r18, r0
    3f36:	0c 01       	movw	r0, r24
    3f38:	ca 01       	movw	r24, r20
    3f3a:	a0 01       	movw	r20, r0
    3f3c:	11 24       	eor	r1, r1
    3f3e:	ff 27       	eor	r31, r31
    3f40:	59 1b       	sub	r21, r25
    3f42:	99 f0       	breq	.+38     	; 0x3f6a <__addsf3x+0x5c>
    3f44:	59 3f       	cpi	r21, 0xF9	; 249
    3f46:	50 f4       	brcc	.+20     	; 0x3f5c <__addsf3x+0x4e>
    3f48:	50 3e       	cpi	r21, 0xE0	; 224
    3f4a:	68 f1       	brcs	.+90     	; 0x3fa6 <__addsf3x+0x98>
    3f4c:	1a 16       	cp	r1, r26
    3f4e:	f0 40       	sbci	r31, 0x00	; 0
    3f50:	a2 2f       	mov	r26, r18
    3f52:	23 2f       	mov	r18, r19
    3f54:	34 2f       	mov	r19, r20
    3f56:	44 27       	eor	r20, r20
    3f58:	58 5f       	subi	r21, 0xF8	; 248
    3f5a:	f3 cf       	rjmp	.-26     	; 0x3f42 <__addsf3x+0x34>
    3f5c:	46 95       	lsr	r20
    3f5e:	37 95       	ror	r19
    3f60:	27 95       	ror	r18
    3f62:	a7 95       	ror	r26
    3f64:	f0 40       	sbci	r31, 0x00	; 0
    3f66:	53 95       	inc	r21
    3f68:	c9 f7       	brne	.-14     	; 0x3f5c <__addsf3x+0x4e>
    3f6a:	7e f4       	brtc	.+30     	; 0x3f8a <__addsf3x+0x7c>
    3f6c:	1f 16       	cp	r1, r31
    3f6e:	ba 0b       	sbc	r27, r26
    3f70:	62 0b       	sbc	r22, r18
    3f72:	73 0b       	sbc	r23, r19
    3f74:	84 0b       	sbc	r24, r20
    3f76:	ba f0       	brmi	.+46     	; 0x3fa6 <__addsf3x+0x98>
    3f78:	91 50       	subi	r25, 0x01	; 1
    3f7a:	a1 f0       	breq	.+40     	; 0x3fa4 <__addsf3x+0x96>
    3f7c:	ff 0f       	add	r31, r31
    3f7e:	bb 1f       	adc	r27, r27
    3f80:	66 1f       	adc	r22, r22
    3f82:	77 1f       	adc	r23, r23
    3f84:	88 1f       	adc	r24, r24
    3f86:	c2 f7       	brpl	.-16     	; 0x3f78 <__addsf3x+0x6a>
    3f88:	0e c0       	rjmp	.+28     	; 0x3fa6 <__addsf3x+0x98>
    3f8a:	ba 0f       	add	r27, r26
    3f8c:	62 1f       	adc	r22, r18
    3f8e:	73 1f       	adc	r23, r19
    3f90:	84 1f       	adc	r24, r20
    3f92:	48 f4       	brcc	.+18     	; 0x3fa6 <__addsf3x+0x98>
    3f94:	87 95       	ror	r24
    3f96:	77 95       	ror	r23
    3f98:	67 95       	ror	r22
    3f9a:	b7 95       	ror	r27
    3f9c:	f7 95       	ror	r31
    3f9e:	9e 3f       	cpi	r25, 0xFE	; 254
    3fa0:	08 f0       	brcs	.+2      	; 0x3fa4 <__addsf3x+0x96>
    3fa2:	b3 cf       	rjmp	.-154    	; 0x3f0a <__addsf3+0x1e>
    3fa4:	93 95       	inc	r25
    3fa6:	88 0f       	add	r24, r24
    3fa8:	08 f0       	brcs	.+2      	; 0x3fac <__addsf3x+0x9e>
    3faa:	99 27       	eor	r25, r25
    3fac:	ee 0f       	add	r30, r30
    3fae:	97 95       	ror	r25
    3fb0:	87 95       	ror	r24
    3fb2:	08 95       	ret

00003fb4 <asin>:
    3fb4:	9f 93       	push	r25
    3fb6:	9f 77       	andi	r25, 0x7F	; 127
    3fb8:	ee e3       	ldi	r30, 0x3E	; 62
    3fba:	89 37       	cpi	r24, 0x79	; 121
    3fbc:	9e 07       	cpc	r25, r30
    3fbe:	20 f4       	brcc	.+8      	; 0x3fc8 <asin+0x14>
    3fc0:	ec e7       	ldi	r30, 0x7C	; 124
    3fc2:	f0 e0       	ldi	r31, 0x00	; 0
    3fc4:	55 d1       	rcall	.+682    	; 0x4270 <__fp_powsodd>
    3fc6:	09 c0       	rjmp	.+18     	; 0x3fda <asin+0x26>
    3fc8:	0a d1       	rcall	.+532    	; 0x41de <__fp_arccos>
    3fca:	90 58       	subi	r25, 0x80	; 128
    3fcc:	a2 ea       	ldi	r26, 0xA2	; 162
    3fce:	2a ed       	ldi	r18, 0xDA	; 218
    3fd0:	3f e0       	ldi	r19, 0x0F	; 15
    3fd2:	49 ec       	ldi	r20, 0xC9	; 201
    3fd4:	5f e3       	ldi	r21, 0x3F	; 63
    3fd6:	9b df       	rcall	.-202    	; 0x3f0e <__addsf3x>
    3fd8:	6a d1       	rcall	.+724    	; 0x42ae <__fp_round>
    3fda:	0f 90       	pop	r0
    3fdc:	07 fc       	sbrc	r0, 7
    3fde:	90 58       	subi	r25, 0x80	; 128
    3fe0:	08 95       	ret

00003fe2 <atan>:
    3fe2:	df 93       	push	r29
    3fe4:	dd 27       	eor	r29, r29
    3fe6:	b9 2f       	mov	r27, r25
    3fe8:	bf 77       	andi	r27, 0x7F	; 127
    3fea:	40 e8       	ldi	r20, 0x80	; 128
    3fec:	5f e3       	ldi	r21, 0x3F	; 63
    3fee:	16 16       	cp	r1, r22
    3ff0:	17 06       	cpc	r1, r23
    3ff2:	48 07       	cpc	r20, r24
    3ff4:	5b 07       	cpc	r21, r27
    3ff6:	10 f4       	brcc	.+4      	; 0x3ffc <atan+0x1a>
    3ff8:	d9 2f       	mov	r29, r25
    3ffa:	93 d1       	rcall	.+806    	; 0x4322 <inverse>
    3ffc:	9f 93       	push	r25
    3ffe:	8f 93       	push	r24
    4000:	7f 93       	push	r23
    4002:	6f 93       	push	r22
    4004:	3a d2       	rcall	.+1140   	; 0x447a <square>
    4006:	e0 e9       	ldi	r30, 0x90	; 144
    4008:	f0 e0       	ldi	r31, 0x00	; 0
    400a:	0d d1       	rcall	.+538    	; 0x4226 <__fp_powser>
    400c:	50 d1       	rcall	.+672    	; 0x42ae <__fp_round>
    400e:	2f 91       	pop	r18
    4010:	3f 91       	pop	r19
    4012:	4f 91       	pop	r20
    4014:	5f 91       	pop	r21
    4016:	98 d1       	rcall	.+816    	; 0x4348 <__mulsf3x>
    4018:	dd 23       	and	r29, r29
    401a:	49 f0       	breq	.+18     	; 0x402e <atan+0x4c>
    401c:	90 58       	subi	r25, 0x80	; 128
    401e:	a2 ea       	ldi	r26, 0xA2	; 162
    4020:	2a ed       	ldi	r18, 0xDA	; 218
    4022:	3f e0       	ldi	r19, 0x0F	; 15
    4024:	49 ec       	ldi	r20, 0xC9	; 201
    4026:	5f e3       	ldi	r21, 0x3F	; 63
    4028:	d0 78       	andi	r29, 0x80	; 128
    402a:	5d 27       	eor	r21, r29
    402c:	70 df       	rcall	.-288    	; 0x3f0e <__addsf3x>
    402e:	df 91       	pop	r29
    4030:	3e c1       	rjmp	.+636    	; 0x42ae <__fp_round>

00004032 <__divsf3>:
    4032:	0c d0       	rcall	.+24     	; 0x404c <__divsf3x>
    4034:	3c c1       	rjmp	.+632    	; 0x42ae <__fp_round>
    4036:	34 d1       	rcall	.+616    	; 0x42a0 <__fp_pscB>
    4038:	40 f0       	brcs	.+16     	; 0x404a <__divsf3+0x18>
    403a:	2b d1       	rcall	.+598    	; 0x4292 <__fp_pscA>
    403c:	30 f0       	brcs	.+12     	; 0x404a <__divsf3+0x18>
    403e:	21 f4       	brne	.+8      	; 0x4048 <__divsf3+0x16>
    4040:	5f 3f       	cpi	r21, 0xFF	; 255
    4042:	19 f0       	breq	.+6      	; 0x404a <__divsf3+0x18>
    4044:	e7 c0       	rjmp	.+462    	; 0x4214 <__fp_inf>
    4046:	51 11       	cpse	r21, r1
    4048:	66 c1       	rjmp	.+716    	; 0x4316 <__fp_szero>
    404a:	ea c0       	rjmp	.+468    	; 0x4220 <__fp_nan>

0000404c <__divsf3x>:
    404c:	41 d1       	rcall	.+642    	; 0x42d0 <__fp_split3>
    404e:	98 f3       	brcs	.-26     	; 0x4036 <__divsf3+0x4>

00004050 <__divsf3_pse>:
    4050:	99 23       	and	r25, r25
    4052:	c9 f3       	breq	.-14     	; 0x4046 <__divsf3+0x14>
    4054:	55 23       	and	r21, r21
    4056:	b1 f3       	breq	.-20     	; 0x4044 <__divsf3+0x12>
    4058:	95 1b       	sub	r25, r21
    405a:	55 0b       	sbc	r21, r21
    405c:	bb 27       	eor	r27, r27
    405e:	aa 27       	eor	r26, r26
    4060:	62 17       	cp	r22, r18
    4062:	73 07       	cpc	r23, r19
    4064:	84 07       	cpc	r24, r20
    4066:	38 f0       	brcs	.+14     	; 0x4076 <__divsf3_pse+0x26>
    4068:	9f 5f       	subi	r25, 0xFF	; 255
    406a:	5f 4f       	sbci	r21, 0xFF	; 255
    406c:	22 0f       	add	r18, r18
    406e:	33 1f       	adc	r19, r19
    4070:	44 1f       	adc	r20, r20
    4072:	aa 1f       	adc	r26, r26
    4074:	a9 f3       	breq	.-22     	; 0x4060 <__divsf3_pse+0x10>
    4076:	33 d0       	rcall	.+102    	; 0x40de <__divsf3_pse+0x8e>
    4078:	0e 2e       	mov	r0, r30
    407a:	3a f0       	brmi	.+14     	; 0x408a <__divsf3_pse+0x3a>
    407c:	e0 e8       	ldi	r30, 0x80	; 128
    407e:	30 d0       	rcall	.+96     	; 0x40e0 <__divsf3_pse+0x90>
    4080:	91 50       	subi	r25, 0x01	; 1
    4082:	50 40       	sbci	r21, 0x00	; 0
    4084:	e6 95       	lsr	r30
    4086:	00 1c       	adc	r0, r0
    4088:	ca f7       	brpl	.-14     	; 0x407c <__divsf3_pse+0x2c>
    408a:	29 d0       	rcall	.+82     	; 0x40de <__divsf3_pse+0x8e>
    408c:	fe 2f       	mov	r31, r30
    408e:	27 d0       	rcall	.+78     	; 0x40de <__divsf3_pse+0x8e>
    4090:	66 0f       	add	r22, r22
    4092:	77 1f       	adc	r23, r23
    4094:	88 1f       	adc	r24, r24
    4096:	bb 1f       	adc	r27, r27
    4098:	26 17       	cp	r18, r22
    409a:	37 07       	cpc	r19, r23
    409c:	48 07       	cpc	r20, r24
    409e:	ab 07       	cpc	r26, r27
    40a0:	b0 e8       	ldi	r27, 0x80	; 128
    40a2:	09 f0       	breq	.+2      	; 0x40a6 <__divsf3_pse+0x56>
    40a4:	bb 0b       	sbc	r27, r27
    40a6:	80 2d       	mov	r24, r0
    40a8:	bf 01       	movw	r22, r30
    40aa:	ff 27       	eor	r31, r31
    40ac:	93 58       	subi	r25, 0x83	; 131
    40ae:	5f 4f       	sbci	r21, 0xFF	; 255
    40b0:	2a f0       	brmi	.+10     	; 0x40bc <__divsf3_pse+0x6c>
    40b2:	9e 3f       	cpi	r25, 0xFE	; 254
    40b4:	51 05       	cpc	r21, r1
    40b6:	68 f0       	brcs	.+26     	; 0x40d2 <__divsf3_pse+0x82>
    40b8:	ad c0       	rjmp	.+346    	; 0x4214 <__fp_inf>
    40ba:	2d c1       	rjmp	.+602    	; 0x4316 <__fp_szero>
    40bc:	5f 3f       	cpi	r21, 0xFF	; 255
    40be:	ec f3       	brlt	.-6      	; 0x40ba <__divsf3_pse+0x6a>
    40c0:	98 3e       	cpi	r25, 0xE8	; 232
    40c2:	dc f3       	brlt	.-10     	; 0x40ba <__divsf3_pse+0x6a>
    40c4:	86 95       	lsr	r24
    40c6:	77 95       	ror	r23
    40c8:	67 95       	ror	r22
    40ca:	b7 95       	ror	r27
    40cc:	f7 95       	ror	r31
    40ce:	9f 5f       	subi	r25, 0xFF	; 255
    40d0:	c9 f7       	brne	.-14     	; 0x40c4 <__divsf3_pse+0x74>
    40d2:	88 0f       	add	r24, r24
    40d4:	91 1d       	adc	r25, r1
    40d6:	96 95       	lsr	r25
    40d8:	87 95       	ror	r24
    40da:	97 f9       	bld	r25, 7
    40dc:	08 95       	ret
    40de:	e1 e0       	ldi	r30, 0x01	; 1
    40e0:	66 0f       	add	r22, r22
    40e2:	77 1f       	adc	r23, r23
    40e4:	88 1f       	adc	r24, r24
    40e6:	bb 1f       	adc	r27, r27
    40e8:	62 17       	cp	r22, r18
    40ea:	73 07       	cpc	r23, r19
    40ec:	84 07       	cpc	r24, r20
    40ee:	ba 07       	cpc	r27, r26
    40f0:	20 f0       	brcs	.+8      	; 0x40fa <__divsf3_pse+0xaa>
    40f2:	62 1b       	sub	r22, r18
    40f4:	73 0b       	sbc	r23, r19
    40f6:	84 0b       	sbc	r24, r20
    40f8:	ba 0b       	sbc	r27, r26
    40fa:	ee 1f       	adc	r30, r30
    40fc:	88 f7       	brcc	.-30     	; 0x40e0 <__divsf3_pse+0x90>
    40fe:	e0 95       	com	r30
    4100:	08 95       	ret

00004102 <__fixsfsi>:
    4102:	04 d0       	rcall	.+8      	; 0x410c <__fixunssfsi>
    4104:	68 94       	set
    4106:	b1 11       	cpse	r27, r1
    4108:	06 c1       	rjmp	.+524    	; 0x4316 <__fp_szero>
    410a:	08 95       	ret

0000410c <__fixunssfsi>:
    410c:	e9 d0       	rcall	.+466    	; 0x42e0 <__fp_splitA>
    410e:	88 f0       	brcs	.+34     	; 0x4132 <__fixunssfsi+0x26>
    4110:	9f 57       	subi	r25, 0x7F	; 127
    4112:	90 f0       	brcs	.+36     	; 0x4138 <__fixunssfsi+0x2c>
    4114:	b9 2f       	mov	r27, r25
    4116:	99 27       	eor	r25, r25
    4118:	b7 51       	subi	r27, 0x17	; 23
    411a:	a0 f0       	brcs	.+40     	; 0x4144 <__fixunssfsi+0x38>
    411c:	d1 f0       	breq	.+52     	; 0x4152 <__fixunssfsi+0x46>
    411e:	66 0f       	add	r22, r22
    4120:	77 1f       	adc	r23, r23
    4122:	88 1f       	adc	r24, r24
    4124:	99 1f       	adc	r25, r25
    4126:	1a f0       	brmi	.+6      	; 0x412e <__fixunssfsi+0x22>
    4128:	ba 95       	dec	r27
    412a:	c9 f7       	brne	.-14     	; 0x411e <__fixunssfsi+0x12>
    412c:	12 c0       	rjmp	.+36     	; 0x4152 <__fixunssfsi+0x46>
    412e:	b1 30       	cpi	r27, 0x01	; 1
    4130:	81 f0       	breq	.+32     	; 0x4152 <__fixunssfsi+0x46>
    4132:	f0 d0       	rcall	.+480    	; 0x4314 <__fp_zero>
    4134:	b1 e0       	ldi	r27, 0x01	; 1
    4136:	08 95       	ret
    4138:	ed c0       	rjmp	.+474    	; 0x4314 <__fp_zero>
    413a:	67 2f       	mov	r22, r23
    413c:	78 2f       	mov	r23, r24
    413e:	88 27       	eor	r24, r24
    4140:	b8 5f       	subi	r27, 0xF8	; 248
    4142:	39 f0       	breq	.+14     	; 0x4152 <__fixunssfsi+0x46>
    4144:	b9 3f       	cpi	r27, 0xF9	; 249
    4146:	cc f3       	brlt	.-14     	; 0x413a <__fixunssfsi+0x2e>
    4148:	86 95       	lsr	r24
    414a:	77 95       	ror	r23
    414c:	67 95       	ror	r22
    414e:	b3 95       	inc	r27
    4150:	d9 f7       	brne	.-10     	; 0x4148 <__fixunssfsi+0x3c>
    4152:	3e f4       	brtc	.+14     	; 0x4162 <__fixunssfsi+0x56>
    4154:	90 95       	com	r25
    4156:	80 95       	com	r24
    4158:	70 95       	com	r23
    415a:	61 95       	neg	r22
    415c:	7f 4f       	sbci	r23, 0xFF	; 255
    415e:	8f 4f       	sbci	r24, 0xFF	; 255
    4160:	9f 4f       	sbci	r25, 0xFF	; 255
    4162:	08 95       	ret

00004164 <__floatunsisf>:
    4164:	e8 94       	clt
    4166:	09 c0       	rjmp	.+18     	; 0x417a <__floatsisf+0x12>

00004168 <__floatsisf>:
    4168:	97 fb       	bst	r25, 7
    416a:	3e f4       	brtc	.+14     	; 0x417a <__floatsisf+0x12>
    416c:	90 95       	com	r25
    416e:	80 95       	com	r24
    4170:	70 95       	com	r23
    4172:	61 95       	neg	r22
    4174:	7f 4f       	sbci	r23, 0xFF	; 255
    4176:	8f 4f       	sbci	r24, 0xFF	; 255
    4178:	9f 4f       	sbci	r25, 0xFF	; 255
    417a:	99 23       	and	r25, r25
    417c:	a9 f0       	breq	.+42     	; 0x41a8 <__floatsisf+0x40>
    417e:	f9 2f       	mov	r31, r25
    4180:	96 e9       	ldi	r25, 0x96	; 150
    4182:	bb 27       	eor	r27, r27
    4184:	93 95       	inc	r25
    4186:	f6 95       	lsr	r31
    4188:	87 95       	ror	r24
    418a:	77 95       	ror	r23
    418c:	67 95       	ror	r22
    418e:	b7 95       	ror	r27
    4190:	f1 11       	cpse	r31, r1
    4192:	f8 cf       	rjmp	.-16     	; 0x4184 <__floatsisf+0x1c>
    4194:	fa f4       	brpl	.+62     	; 0x41d4 <__floatsisf+0x6c>
    4196:	bb 0f       	add	r27, r27
    4198:	11 f4       	brne	.+4      	; 0x419e <__floatsisf+0x36>
    419a:	60 ff       	sbrs	r22, 0
    419c:	1b c0       	rjmp	.+54     	; 0x41d4 <__floatsisf+0x6c>
    419e:	6f 5f       	subi	r22, 0xFF	; 255
    41a0:	7f 4f       	sbci	r23, 0xFF	; 255
    41a2:	8f 4f       	sbci	r24, 0xFF	; 255
    41a4:	9f 4f       	sbci	r25, 0xFF	; 255
    41a6:	16 c0       	rjmp	.+44     	; 0x41d4 <__floatsisf+0x6c>
    41a8:	88 23       	and	r24, r24
    41aa:	11 f0       	breq	.+4      	; 0x41b0 <__floatsisf+0x48>
    41ac:	96 e9       	ldi	r25, 0x96	; 150
    41ae:	11 c0       	rjmp	.+34     	; 0x41d2 <__floatsisf+0x6a>
    41b0:	77 23       	and	r23, r23
    41b2:	21 f0       	breq	.+8      	; 0x41bc <__floatsisf+0x54>
    41b4:	9e e8       	ldi	r25, 0x8E	; 142
    41b6:	87 2f       	mov	r24, r23
    41b8:	76 2f       	mov	r23, r22
    41ba:	05 c0       	rjmp	.+10     	; 0x41c6 <__floatsisf+0x5e>
    41bc:	66 23       	and	r22, r22
    41be:	71 f0       	breq	.+28     	; 0x41dc <__floatsisf+0x74>
    41c0:	96 e8       	ldi	r25, 0x86	; 134
    41c2:	86 2f       	mov	r24, r22
    41c4:	70 e0       	ldi	r23, 0x00	; 0
    41c6:	60 e0       	ldi	r22, 0x00	; 0
    41c8:	2a f0       	brmi	.+10     	; 0x41d4 <__floatsisf+0x6c>
    41ca:	9a 95       	dec	r25
    41cc:	66 0f       	add	r22, r22
    41ce:	77 1f       	adc	r23, r23
    41d0:	88 1f       	adc	r24, r24
    41d2:	da f7       	brpl	.-10     	; 0x41ca <__floatsisf+0x62>
    41d4:	88 0f       	add	r24, r24
    41d6:	96 95       	lsr	r25
    41d8:	87 95       	ror	r24
    41da:	97 f9       	bld	r25, 7
    41dc:	08 95       	ret

000041de <__fp_arccos>:
    41de:	df 93       	push	r29
    41e0:	cf 93       	push	r28
    41e2:	1f 93       	push	r17
    41e4:	0f 93       	push	r16
    41e6:	8b 01       	movw	r16, r22
    41e8:	ec 01       	movw	r28, r24
    41ea:	ed eb       	ldi	r30, 0xBD	; 189
    41ec:	f0 e0       	ldi	r31, 0x00	; 0
    41ee:	1b d0       	rcall	.+54     	; 0x4226 <__fp_powser>
    41f0:	5e d0       	rcall	.+188    	; 0x42ae <__fp_round>
    41f2:	98 01       	movw	r18, r16
    41f4:	ae 01       	movw	r20, r28
    41f6:	8b 01       	movw	r16, r22
    41f8:	ec 01       	movw	r28, r24
    41fa:	60 e0       	ldi	r22, 0x00	; 0
    41fc:	70 e0       	ldi	r23, 0x00	; 0
    41fe:	80 e8       	ldi	r24, 0x80	; 128
    4200:	9f e3       	ldi	r25, 0x3F	; 63
    4202:	73 de       	rcall	.-794    	; 0x3eea <__subsf3>
    4204:	fc d0       	rcall	.+504    	; 0x43fe <sqrt>
    4206:	98 01       	movw	r18, r16
    4208:	ae 01       	movw	r20, r28
    420a:	0f 91       	pop	r16
    420c:	1f 91       	pop	r17
    420e:	cf 91       	pop	r28
    4210:	df 91       	pop	r29
    4212:	9a c0       	rjmp	.+308    	; 0x4348 <__mulsf3x>

00004214 <__fp_inf>:
    4214:	97 f9       	bld	r25, 7
    4216:	9f 67       	ori	r25, 0x7F	; 127
    4218:	80 e8       	ldi	r24, 0x80	; 128
    421a:	70 e0       	ldi	r23, 0x00	; 0
    421c:	60 e0       	ldi	r22, 0x00	; 0
    421e:	08 95       	ret

00004220 <__fp_nan>:
    4220:	9f ef       	ldi	r25, 0xFF	; 255
    4222:	80 ec       	ldi	r24, 0xC0	; 192
    4224:	08 95       	ret

00004226 <__fp_powser>:
    4226:	df 93       	push	r29
    4228:	cf 93       	push	r28
    422a:	1f 93       	push	r17
    422c:	0f 93       	push	r16
    422e:	ff 92       	push	r15
    4230:	ef 92       	push	r14
    4232:	df 92       	push	r13
    4234:	7b 01       	movw	r14, r22
    4236:	8c 01       	movw	r16, r24
    4238:	68 94       	set
    423a:	05 c0       	rjmp	.+10     	; 0x4246 <__fp_powser+0x20>
    423c:	da 2e       	mov	r13, r26
    423e:	ef 01       	movw	r28, r30
    4240:	83 d0       	rcall	.+262    	; 0x4348 <__mulsf3x>
    4242:	fe 01       	movw	r30, r28
    4244:	e8 94       	clt
    4246:	a5 91       	lpm	r26, Z+
    4248:	25 91       	lpm	r18, Z+
    424a:	35 91       	lpm	r19, Z+
    424c:	45 91       	lpm	r20, Z+
    424e:	55 91       	lpm	r21, Z+
    4250:	ae f3       	brts	.-22     	; 0x423c <__fp_powser+0x16>
    4252:	ef 01       	movw	r28, r30
    4254:	5c de       	rcall	.-840    	; 0x3f0e <__addsf3x>
    4256:	fe 01       	movw	r30, r28
    4258:	97 01       	movw	r18, r14
    425a:	a8 01       	movw	r20, r16
    425c:	da 94       	dec	r13
    425e:	79 f7       	brne	.-34     	; 0x423e <__fp_powser+0x18>
    4260:	df 90       	pop	r13
    4262:	ef 90       	pop	r14
    4264:	ff 90       	pop	r15
    4266:	0f 91       	pop	r16
    4268:	1f 91       	pop	r17
    426a:	cf 91       	pop	r28
    426c:	df 91       	pop	r29
    426e:	08 95       	ret

00004270 <__fp_powsodd>:
    4270:	9f 93       	push	r25
    4272:	8f 93       	push	r24
    4274:	7f 93       	push	r23
    4276:	6f 93       	push	r22
    4278:	ff 93       	push	r31
    427a:	ef 93       	push	r30
    427c:	9b 01       	movw	r18, r22
    427e:	ac 01       	movw	r20, r24
    4280:	57 d0       	rcall	.+174    	; 0x4330 <__mulsf3>
    4282:	ef 91       	pop	r30
    4284:	ff 91       	pop	r31
    4286:	cf df       	rcall	.-98     	; 0x4226 <__fp_powser>
    4288:	2f 91       	pop	r18
    428a:	3f 91       	pop	r19
    428c:	4f 91       	pop	r20
    428e:	5f 91       	pop	r21
    4290:	4f c0       	rjmp	.+158    	; 0x4330 <__mulsf3>

00004292 <__fp_pscA>:
    4292:	00 24       	eor	r0, r0
    4294:	0a 94       	dec	r0
    4296:	16 16       	cp	r1, r22
    4298:	17 06       	cpc	r1, r23
    429a:	18 06       	cpc	r1, r24
    429c:	09 06       	cpc	r0, r25
    429e:	08 95       	ret

000042a0 <__fp_pscB>:
    42a0:	00 24       	eor	r0, r0
    42a2:	0a 94       	dec	r0
    42a4:	12 16       	cp	r1, r18
    42a6:	13 06       	cpc	r1, r19
    42a8:	14 06       	cpc	r1, r20
    42aa:	05 06       	cpc	r0, r21
    42ac:	08 95       	ret

000042ae <__fp_round>:
    42ae:	09 2e       	mov	r0, r25
    42b0:	03 94       	inc	r0
    42b2:	00 0c       	add	r0, r0
    42b4:	11 f4       	brne	.+4      	; 0x42ba <__fp_round+0xc>
    42b6:	88 23       	and	r24, r24
    42b8:	52 f0       	brmi	.+20     	; 0x42ce <__fp_round+0x20>
    42ba:	bb 0f       	add	r27, r27
    42bc:	40 f4       	brcc	.+16     	; 0x42ce <__fp_round+0x20>
    42be:	bf 2b       	or	r27, r31
    42c0:	11 f4       	brne	.+4      	; 0x42c6 <__fp_round+0x18>
    42c2:	60 ff       	sbrs	r22, 0
    42c4:	04 c0       	rjmp	.+8      	; 0x42ce <__fp_round+0x20>
    42c6:	6f 5f       	subi	r22, 0xFF	; 255
    42c8:	7f 4f       	sbci	r23, 0xFF	; 255
    42ca:	8f 4f       	sbci	r24, 0xFF	; 255
    42cc:	9f 4f       	sbci	r25, 0xFF	; 255
    42ce:	08 95       	ret

000042d0 <__fp_split3>:
    42d0:	57 fd       	sbrc	r21, 7
    42d2:	90 58       	subi	r25, 0x80	; 128
    42d4:	44 0f       	add	r20, r20
    42d6:	55 1f       	adc	r21, r21
    42d8:	59 f0       	breq	.+22     	; 0x42f0 <__fp_splitA+0x10>
    42da:	5f 3f       	cpi	r21, 0xFF	; 255
    42dc:	71 f0       	breq	.+28     	; 0x42fa <__fp_splitA+0x1a>
    42de:	47 95       	ror	r20

000042e0 <__fp_splitA>:
    42e0:	88 0f       	add	r24, r24
    42e2:	97 fb       	bst	r25, 7
    42e4:	99 1f       	adc	r25, r25
    42e6:	61 f0       	breq	.+24     	; 0x4300 <__fp_splitA+0x20>
    42e8:	9f 3f       	cpi	r25, 0xFF	; 255
    42ea:	79 f0       	breq	.+30     	; 0x430a <__fp_splitA+0x2a>
    42ec:	87 95       	ror	r24
    42ee:	08 95       	ret
    42f0:	12 16       	cp	r1, r18
    42f2:	13 06       	cpc	r1, r19
    42f4:	14 06       	cpc	r1, r20
    42f6:	55 1f       	adc	r21, r21
    42f8:	f2 cf       	rjmp	.-28     	; 0x42de <__fp_split3+0xe>
    42fa:	46 95       	lsr	r20
    42fc:	f1 df       	rcall	.-30     	; 0x42e0 <__fp_splitA>
    42fe:	08 c0       	rjmp	.+16     	; 0x4310 <__fp_splitA+0x30>
    4300:	16 16       	cp	r1, r22
    4302:	17 06       	cpc	r1, r23
    4304:	18 06       	cpc	r1, r24
    4306:	99 1f       	adc	r25, r25
    4308:	f1 cf       	rjmp	.-30     	; 0x42ec <__fp_splitA+0xc>
    430a:	86 95       	lsr	r24
    430c:	71 05       	cpc	r23, r1
    430e:	61 05       	cpc	r22, r1
    4310:	08 94       	sec
    4312:	08 95       	ret

00004314 <__fp_zero>:
    4314:	e8 94       	clt

00004316 <__fp_szero>:
    4316:	bb 27       	eor	r27, r27
    4318:	66 27       	eor	r22, r22
    431a:	77 27       	eor	r23, r23
    431c:	cb 01       	movw	r24, r22
    431e:	97 f9       	bld	r25, 7
    4320:	08 95       	ret

00004322 <inverse>:
    4322:	9b 01       	movw	r18, r22
    4324:	ac 01       	movw	r20, r24
    4326:	60 e0       	ldi	r22, 0x00	; 0
    4328:	70 e0       	ldi	r23, 0x00	; 0
    432a:	80 e8       	ldi	r24, 0x80	; 128
    432c:	9f e3       	ldi	r25, 0x3F	; 63
    432e:	81 ce       	rjmp	.-766    	; 0x4032 <__divsf3>

00004330 <__mulsf3>:
    4330:	0b d0       	rcall	.+22     	; 0x4348 <__mulsf3x>
    4332:	bd cf       	rjmp	.-134    	; 0x42ae <__fp_round>
    4334:	ae df       	rcall	.-164    	; 0x4292 <__fp_pscA>
    4336:	28 f0       	brcs	.+10     	; 0x4342 <__mulsf3+0x12>
    4338:	b3 df       	rcall	.-154    	; 0x42a0 <__fp_pscB>
    433a:	18 f0       	brcs	.+6      	; 0x4342 <__mulsf3+0x12>
    433c:	95 23       	and	r25, r21
    433e:	09 f0       	breq	.+2      	; 0x4342 <__mulsf3+0x12>
    4340:	69 cf       	rjmp	.-302    	; 0x4214 <__fp_inf>
    4342:	6e cf       	rjmp	.-292    	; 0x4220 <__fp_nan>
    4344:	11 24       	eor	r1, r1
    4346:	e7 cf       	rjmp	.-50     	; 0x4316 <__fp_szero>

00004348 <__mulsf3x>:
    4348:	c3 df       	rcall	.-122    	; 0x42d0 <__fp_split3>
    434a:	a0 f3       	brcs	.-24     	; 0x4334 <__mulsf3+0x4>

0000434c <__mulsf3_pse>:
    434c:	95 9f       	mul	r25, r21
    434e:	d1 f3       	breq	.-12     	; 0x4344 <__mulsf3+0x14>
    4350:	95 0f       	add	r25, r21
    4352:	50 e0       	ldi	r21, 0x00	; 0
    4354:	55 1f       	adc	r21, r21
    4356:	62 9f       	mul	r22, r18
    4358:	f0 01       	movw	r30, r0
    435a:	72 9f       	mul	r23, r18
    435c:	bb 27       	eor	r27, r27
    435e:	f0 0d       	add	r31, r0
    4360:	b1 1d       	adc	r27, r1
    4362:	63 9f       	mul	r22, r19
    4364:	aa 27       	eor	r26, r26
    4366:	f0 0d       	add	r31, r0
    4368:	b1 1d       	adc	r27, r1
    436a:	aa 1f       	adc	r26, r26
    436c:	64 9f       	mul	r22, r20
    436e:	66 27       	eor	r22, r22
    4370:	b0 0d       	add	r27, r0
    4372:	a1 1d       	adc	r26, r1
    4374:	66 1f       	adc	r22, r22
    4376:	82 9f       	mul	r24, r18
    4378:	22 27       	eor	r18, r18
    437a:	b0 0d       	add	r27, r0
    437c:	a1 1d       	adc	r26, r1
    437e:	62 1f       	adc	r22, r18
    4380:	73 9f       	mul	r23, r19
    4382:	b0 0d       	add	r27, r0
    4384:	a1 1d       	adc	r26, r1
    4386:	62 1f       	adc	r22, r18
    4388:	83 9f       	mul	r24, r19
    438a:	a0 0d       	add	r26, r0
    438c:	61 1d       	adc	r22, r1
    438e:	22 1f       	adc	r18, r18
    4390:	74 9f       	mul	r23, r20
    4392:	33 27       	eor	r19, r19
    4394:	a0 0d       	add	r26, r0
    4396:	61 1d       	adc	r22, r1
    4398:	23 1f       	adc	r18, r19
    439a:	84 9f       	mul	r24, r20
    439c:	60 0d       	add	r22, r0
    439e:	21 1d       	adc	r18, r1
    43a0:	82 2f       	mov	r24, r18
    43a2:	76 2f       	mov	r23, r22
    43a4:	6a 2f       	mov	r22, r26
    43a6:	11 24       	eor	r1, r1
    43a8:	9f 57       	subi	r25, 0x7F	; 127
    43aa:	50 40       	sbci	r21, 0x00	; 0
    43ac:	8a f0       	brmi	.+34     	; 0x43d0 <__mulsf3_pse+0x84>
    43ae:	e1 f0       	breq	.+56     	; 0x43e8 <__mulsf3_pse+0x9c>
    43b0:	88 23       	and	r24, r24
    43b2:	4a f0       	brmi	.+18     	; 0x43c6 <__mulsf3_pse+0x7a>
    43b4:	ee 0f       	add	r30, r30
    43b6:	ff 1f       	adc	r31, r31
    43b8:	bb 1f       	adc	r27, r27
    43ba:	66 1f       	adc	r22, r22
    43bc:	77 1f       	adc	r23, r23
    43be:	88 1f       	adc	r24, r24
    43c0:	91 50       	subi	r25, 0x01	; 1
    43c2:	50 40       	sbci	r21, 0x00	; 0
    43c4:	a9 f7       	brne	.-22     	; 0x43b0 <__mulsf3_pse+0x64>
    43c6:	9e 3f       	cpi	r25, 0xFE	; 254
    43c8:	51 05       	cpc	r21, r1
    43ca:	70 f0       	brcs	.+28     	; 0x43e8 <__mulsf3_pse+0x9c>
    43cc:	23 cf       	rjmp	.-442    	; 0x4214 <__fp_inf>
    43ce:	a3 cf       	rjmp	.-186    	; 0x4316 <__fp_szero>
    43d0:	5f 3f       	cpi	r21, 0xFF	; 255
    43d2:	ec f3       	brlt	.-6      	; 0x43ce <__mulsf3_pse+0x82>
    43d4:	98 3e       	cpi	r25, 0xE8	; 232
    43d6:	dc f3       	brlt	.-10     	; 0x43ce <__mulsf3_pse+0x82>
    43d8:	86 95       	lsr	r24
    43da:	77 95       	ror	r23
    43dc:	67 95       	ror	r22
    43de:	b7 95       	ror	r27
    43e0:	f7 95       	ror	r31
    43e2:	e7 95       	ror	r30
    43e4:	9f 5f       	subi	r25, 0xFF	; 255
    43e6:	c1 f7       	brne	.-16     	; 0x43d8 <__mulsf3_pse+0x8c>
    43e8:	fe 2b       	or	r31, r30
    43ea:	88 0f       	add	r24, r24
    43ec:	91 1d       	adc	r25, r1
    43ee:	96 95       	lsr	r25
    43f0:	87 95       	ror	r24
    43f2:	97 f9       	bld	r25, 7
    43f4:	08 95       	ret
    43f6:	11 f4       	brne	.+4      	; 0x43fc <__mulsf3_pse+0xb0>
    43f8:	0e f4       	brtc	.+2      	; 0x43fc <__mulsf3_pse+0xb0>
    43fa:	12 cf       	rjmp	.-476    	; 0x4220 <__fp_nan>
    43fc:	41 c0       	rjmp	.+130    	; 0x4480 <__fp_mpack>

000043fe <sqrt>:
    43fe:	70 df       	rcall	.-288    	; 0x42e0 <__fp_splitA>
    4400:	d0 f3       	brcs	.-12     	; 0x43f6 <__mulsf3_pse+0xaa>
    4402:	99 23       	and	r25, r25
    4404:	d9 f3       	breq	.-10     	; 0x43fc <__mulsf3_pse+0xb0>
    4406:	ce f3       	brts	.-14     	; 0x43fa <__mulsf3_pse+0xae>
    4408:	9f 57       	subi	r25, 0x7F	; 127
    440a:	55 0b       	sbc	r21, r21
    440c:	87 ff       	sbrs	r24, 7
    440e:	46 d0       	rcall	.+140    	; 0x449c <__fp_norm2>
    4410:	00 24       	eor	r0, r0
    4412:	a0 e6       	ldi	r26, 0x60	; 96
    4414:	40 ea       	ldi	r20, 0xA0	; 160
    4416:	90 01       	movw	r18, r0
    4418:	80 58       	subi	r24, 0x80	; 128
    441a:	56 95       	lsr	r21
    441c:	97 95       	ror	r25
    441e:	28 f4       	brcc	.+10     	; 0x442a <sqrt+0x2c>
    4420:	80 5c       	subi	r24, 0xC0	; 192
    4422:	66 0f       	add	r22, r22
    4424:	77 1f       	adc	r23, r23
    4426:	88 1f       	adc	r24, r24
    4428:	20 f0       	brcs	.+8      	; 0x4432 <sqrt+0x34>
    442a:	26 17       	cp	r18, r22
    442c:	37 07       	cpc	r19, r23
    442e:	48 07       	cpc	r20, r24
    4430:	30 f4       	brcc	.+12     	; 0x443e <sqrt+0x40>
    4432:	62 1b       	sub	r22, r18
    4434:	73 0b       	sbc	r23, r19
    4436:	84 0b       	sbc	r24, r20
    4438:	20 29       	or	r18, r0
    443a:	31 29       	or	r19, r1
    443c:	4a 2b       	or	r20, r26
    443e:	a6 95       	lsr	r26
    4440:	17 94       	ror	r1
    4442:	07 94       	ror	r0
    4444:	20 25       	eor	r18, r0
    4446:	31 25       	eor	r19, r1
    4448:	4a 27       	eor	r20, r26
    444a:	58 f7       	brcc	.-42     	; 0x4422 <sqrt+0x24>
    444c:	66 0f       	add	r22, r22
    444e:	77 1f       	adc	r23, r23
    4450:	88 1f       	adc	r24, r24
    4452:	20 f0       	brcs	.+8      	; 0x445c <sqrt+0x5e>
    4454:	26 17       	cp	r18, r22
    4456:	37 07       	cpc	r19, r23
    4458:	48 07       	cpc	r20, r24
    445a:	30 f4       	brcc	.+12     	; 0x4468 <sqrt+0x6a>
    445c:	62 0b       	sbc	r22, r18
    445e:	73 0b       	sbc	r23, r19
    4460:	84 0b       	sbc	r24, r20
    4462:	20 0d       	add	r18, r0
    4464:	31 1d       	adc	r19, r1
    4466:	41 1d       	adc	r20, r1
    4468:	a0 95       	com	r26
    446a:	81 f7       	brne	.-32     	; 0x444c <sqrt+0x4e>
    446c:	b9 01       	movw	r22, r18
    446e:	84 2f       	mov	r24, r20
    4470:	91 58       	subi	r25, 0x81	; 129
    4472:	88 0f       	add	r24, r24
    4474:	96 95       	lsr	r25
    4476:	87 95       	ror	r24
    4478:	08 95       	ret

0000447a <square>:
    447a:	9b 01       	movw	r18, r22
    447c:	ac 01       	movw	r20, r24
    447e:	58 cf       	rjmp	.-336    	; 0x4330 <__mulsf3>

00004480 <__fp_mpack>:
    4480:	9f 3f       	cpi	r25, 0xFF	; 255
    4482:	31 f0       	breq	.+12     	; 0x4490 <__fp_mpack_finite+0xc>

00004484 <__fp_mpack_finite>:
    4484:	91 50       	subi	r25, 0x01	; 1
    4486:	20 f4       	brcc	.+8      	; 0x4490 <__fp_mpack_finite+0xc>
    4488:	87 95       	ror	r24
    448a:	77 95       	ror	r23
    448c:	67 95       	ror	r22
    448e:	b7 95       	ror	r27
    4490:	88 0f       	add	r24, r24
    4492:	91 1d       	adc	r25, r1
    4494:	96 95       	lsr	r25
    4496:	87 95       	ror	r24
    4498:	97 f9       	bld	r25, 7
    449a:	08 95       	ret

0000449c <__fp_norm2>:
    449c:	91 50       	subi	r25, 0x01	; 1
    449e:	50 40       	sbci	r21, 0x00	; 0
    44a0:	66 0f       	add	r22, r22
    44a2:	77 1f       	adc	r23, r23
    44a4:	88 1f       	adc	r24, r24
    44a6:	d2 f7       	brpl	.-12     	; 0x449c <__fp_norm2>
    44a8:	08 95       	ret

000044aa <__udivmodhi4>:
    44aa:	aa 1b       	sub	r26, r26
    44ac:	bb 1b       	sub	r27, r27
    44ae:	51 e1       	ldi	r21, 0x11	; 17
    44b0:	07 c0       	rjmp	.+14     	; 0x44c0 <__udivmodhi4_ep>

000044b2 <__udivmodhi4_loop>:
    44b2:	aa 1f       	adc	r26, r26
    44b4:	bb 1f       	adc	r27, r27
    44b6:	a6 17       	cp	r26, r22
    44b8:	b7 07       	cpc	r27, r23
    44ba:	10 f0       	brcs	.+4      	; 0x44c0 <__udivmodhi4_ep>
    44bc:	a6 1b       	sub	r26, r22
    44be:	b7 0b       	sbc	r27, r23

000044c0 <__udivmodhi4_ep>:
    44c0:	88 1f       	adc	r24, r24
    44c2:	99 1f       	adc	r25, r25
    44c4:	5a 95       	dec	r21
    44c6:	a9 f7       	brne	.-22     	; 0x44b2 <__udivmodhi4_loop>
    44c8:	80 95       	com	r24
    44ca:	90 95       	com	r25
    44cc:	bc 01       	movw	r22, r24
    44ce:	cd 01       	movw	r24, r26
    44d0:	08 95       	ret

000044d2 <__divmodhi4>:
    44d2:	97 fb       	bst	r25, 7
    44d4:	07 2e       	mov	r0, r23
    44d6:	16 f4       	brtc	.+4      	; 0x44dc <__divmodhi4+0xa>
    44d8:	00 94       	com	r0
    44da:	07 d0       	rcall	.+14     	; 0x44ea <__divmodhi4_neg1>
    44dc:	77 fd       	sbrc	r23, 7
    44de:	09 d0       	rcall	.+18     	; 0x44f2 <__divmodhi4_neg2>
    44e0:	0e 94 55 22 	call	0x44aa	; 0x44aa <__udivmodhi4>
    44e4:	07 fc       	sbrc	r0, 7
    44e6:	05 d0       	rcall	.+10     	; 0x44f2 <__divmodhi4_neg2>
    44e8:	3e f4       	brtc	.+14     	; 0x44f8 <__divmodhi4_exit>

000044ea <__divmodhi4_neg1>:
    44ea:	90 95       	com	r25
    44ec:	81 95       	neg	r24
    44ee:	9f 4f       	sbci	r25, 0xFF	; 255
    44f0:	08 95       	ret

000044f2 <__divmodhi4_neg2>:
    44f2:	70 95       	com	r23
    44f4:	61 95       	neg	r22
    44f6:	7f 4f       	sbci	r23, 0xFF	; 255

000044f8 <__divmodhi4_exit>:
    44f8:	08 95       	ret

000044fa <__udivmodsi4>:
    44fa:	a1 e2       	ldi	r26, 0x21	; 33
    44fc:	1a 2e       	mov	r1, r26
    44fe:	aa 1b       	sub	r26, r26
    4500:	bb 1b       	sub	r27, r27
    4502:	fd 01       	movw	r30, r26
    4504:	0d c0       	rjmp	.+26     	; 0x4520 <__udivmodsi4_ep>

00004506 <__udivmodsi4_loop>:
    4506:	aa 1f       	adc	r26, r26
    4508:	bb 1f       	adc	r27, r27
    450a:	ee 1f       	adc	r30, r30
    450c:	ff 1f       	adc	r31, r31
    450e:	a2 17       	cp	r26, r18
    4510:	b3 07       	cpc	r27, r19
    4512:	e4 07       	cpc	r30, r20
    4514:	f5 07       	cpc	r31, r21
    4516:	20 f0       	brcs	.+8      	; 0x4520 <__udivmodsi4_ep>
    4518:	a2 1b       	sub	r26, r18
    451a:	b3 0b       	sbc	r27, r19
    451c:	e4 0b       	sbc	r30, r20
    451e:	f5 0b       	sbc	r31, r21

00004520 <__udivmodsi4_ep>:
    4520:	66 1f       	adc	r22, r22
    4522:	77 1f       	adc	r23, r23
    4524:	88 1f       	adc	r24, r24
    4526:	99 1f       	adc	r25, r25
    4528:	1a 94       	dec	r1
    452a:	69 f7       	brne	.-38     	; 0x4506 <__udivmodsi4_loop>
    452c:	60 95       	com	r22
    452e:	70 95       	com	r23
    4530:	80 95       	com	r24
    4532:	90 95       	com	r25
    4534:	9b 01       	movw	r18, r22
    4536:	ac 01       	movw	r20, r24
    4538:	bd 01       	movw	r22, r26
    453a:	cf 01       	movw	r24, r30
    453c:	08 95       	ret

0000453e <__divmodsi4>:
    453e:	05 2e       	mov	r0, r21
    4540:	97 fb       	bst	r25, 7
    4542:	1e f4       	brtc	.+6      	; 0x454a <__divmodsi4+0xc>
    4544:	00 94       	com	r0
    4546:	0e 94 b6 22 	call	0x456c	; 0x456c <__negsi2>
    454a:	57 fd       	sbrc	r21, 7
    454c:	07 d0       	rcall	.+14     	; 0x455c <__divmodsi4_neg2>
    454e:	0e 94 7d 22 	call	0x44fa	; 0x44fa <__udivmodsi4>
    4552:	07 fc       	sbrc	r0, 7
    4554:	03 d0       	rcall	.+6      	; 0x455c <__divmodsi4_neg2>
    4556:	4e f4       	brtc	.+18     	; 0x456a <__divmodsi4_exit>
    4558:	0c 94 b6 22 	jmp	0x456c	; 0x456c <__negsi2>

0000455c <__divmodsi4_neg2>:
    455c:	50 95       	com	r21
    455e:	40 95       	com	r20
    4560:	30 95       	com	r19
    4562:	21 95       	neg	r18
    4564:	3f 4f       	sbci	r19, 0xFF	; 255
    4566:	4f 4f       	sbci	r20, 0xFF	; 255
    4568:	5f 4f       	sbci	r21, 0xFF	; 255

0000456a <__divmodsi4_exit>:
    456a:	08 95       	ret

0000456c <__negsi2>:
    456c:	90 95       	com	r25
    456e:	80 95       	com	r24
    4570:	70 95       	com	r23
    4572:	61 95       	neg	r22
    4574:	7f 4f       	sbci	r23, 0xFF	; 255
    4576:	8f 4f       	sbci	r24, 0xFF	; 255
    4578:	9f 4f       	sbci	r25, 0xFF	; 255
    457a:	08 95       	ret

0000457c <__umulhisi3>:
    457c:	a2 9f       	mul	r26, r18
    457e:	b0 01       	movw	r22, r0
    4580:	b3 9f       	mul	r27, r19
    4582:	c0 01       	movw	r24, r0
    4584:	a3 9f       	mul	r26, r19
    4586:	70 0d       	add	r23, r0
    4588:	81 1d       	adc	r24, r1
    458a:	11 24       	eor	r1, r1
    458c:	91 1d       	adc	r25, r1
    458e:	b2 9f       	mul	r27, r18
    4590:	70 0d       	add	r23, r0
    4592:	81 1d       	adc	r24, r1
    4594:	11 24       	eor	r1, r1
    4596:	91 1d       	adc	r25, r1
    4598:	08 95       	ret

0000459a <strcmp>:
    459a:	fb 01       	movw	r30, r22
    459c:	dc 01       	movw	r26, r24
    459e:	8d 91       	ld	r24, X+
    45a0:	01 90       	ld	r0, Z+
    45a2:	80 19       	sub	r24, r0
    45a4:	01 10       	cpse	r0, r1
    45a6:	d9 f3       	breq	.-10     	; 0x459e <strcmp+0x4>
    45a8:	99 0b       	sbc	r25, r25
    45aa:	08 95       	ret

000045ac <sprintf>:
    45ac:	ae e0       	ldi	r26, 0x0E	; 14
    45ae:	b0 e0       	ldi	r27, 0x00	; 0
    45b0:	ec ed       	ldi	r30, 0xDC	; 220
    45b2:	f2 e2       	ldi	r31, 0x22	; 34
    45b4:	0c 94 7e 25 	jmp	0x4afc	; 0x4afc <__prologue_saves__+0x1c>
    45b8:	0d 89       	ldd	r16, Y+21	; 0x15
    45ba:	1e 89       	ldd	r17, Y+22	; 0x16
    45bc:	86 e0       	ldi	r24, 0x06	; 6
    45be:	8c 83       	std	Y+4, r24	; 0x04
    45c0:	1a 83       	std	Y+2, r17	; 0x02
    45c2:	09 83       	std	Y+1, r16	; 0x01
    45c4:	8f ef       	ldi	r24, 0xFF	; 255
    45c6:	9f e7       	ldi	r25, 0x7F	; 127
    45c8:	9e 83       	std	Y+6, r25	; 0x06
    45ca:	8d 83       	std	Y+5, r24	; 0x05
    45cc:	ae 01       	movw	r20, r28
    45ce:	47 5e       	subi	r20, 0xE7	; 231
    45d0:	5f 4f       	sbci	r21, 0xFF	; 255
    45d2:	6f 89       	ldd	r22, Y+23	; 0x17
    45d4:	78 8d       	ldd	r23, Y+24	; 0x18
    45d6:	ce 01       	movw	r24, r28
    45d8:	01 96       	adiw	r24, 0x01	; 1
    45da:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <vfprintf>
    45de:	ef 81       	ldd	r30, Y+7	; 0x07
    45e0:	f8 85       	ldd	r31, Y+8	; 0x08
    45e2:	e0 0f       	add	r30, r16
    45e4:	f1 1f       	adc	r31, r17
    45e6:	10 82       	st	Z, r1
    45e8:	2e 96       	adiw	r28, 0x0e	; 14
    45ea:	e4 e0       	ldi	r30, 0x04	; 4
    45ec:	0c 94 9a 25 	jmp	0x4b34	; 0x4b34 <__epilogue_restores__+0x1c>

000045f0 <vfprintf>:
    45f0:	ac e0       	ldi	r26, 0x0C	; 12
    45f2:	b0 e0       	ldi	r27, 0x00	; 0
    45f4:	ee ef       	ldi	r30, 0xFE	; 254
    45f6:	f2 e2       	ldi	r31, 0x22	; 34
    45f8:	0c 94 70 25 	jmp	0x4ae0	; 0x4ae0 <__prologue_saves__>
    45fc:	7c 01       	movw	r14, r24
    45fe:	6b 01       	movw	r12, r22
    4600:	8a 01       	movw	r16, r20
    4602:	fc 01       	movw	r30, r24
    4604:	17 82       	std	Z+7, r1	; 0x07
    4606:	16 82       	std	Z+6, r1	; 0x06
    4608:	83 81       	ldd	r24, Z+3	; 0x03
    460a:	81 ff       	sbrs	r24, 1
    460c:	bd c1       	rjmp	.+890    	; 0x4988 <vfprintf+0x398>
    460e:	ce 01       	movw	r24, r28
    4610:	01 96       	adiw	r24, 0x01	; 1
    4612:	4c 01       	movw	r8, r24
    4614:	f7 01       	movw	r30, r14
    4616:	93 81       	ldd	r25, Z+3	; 0x03
    4618:	f6 01       	movw	r30, r12
    461a:	93 fd       	sbrc	r25, 3
    461c:	85 91       	lpm	r24, Z+
    461e:	93 ff       	sbrs	r25, 3
    4620:	81 91       	ld	r24, Z+
    4622:	6f 01       	movw	r12, r30
    4624:	88 23       	and	r24, r24
    4626:	09 f4       	brne	.+2      	; 0x462a <vfprintf+0x3a>
    4628:	ab c1       	rjmp	.+854    	; 0x4980 <vfprintf+0x390>
    462a:	85 32       	cpi	r24, 0x25	; 37
    462c:	39 f4       	brne	.+14     	; 0x463c <vfprintf+0x4c>
    462e:	93 fd       	sbrc	r25, 3
    4630:	85 91       	lpm	r24, Z+
    4632:	93 ff       	sbrs	r25, 3
    4634:	81 91       	ld	r24, Z+
    4636:	6f 01       	movw	r12, r30
    4638:	85 32       	cpi	r24, 0x25	; 37
    463a:	29 f4       	brne	.+10     	; 0x4646 <vfprintf+0x56>
    463c:	b7 01       	movw	r22, r14
    463e:	90 e0       	ldi	r25, 0x00	; 0
    4640:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <fputc>
    4644:	e7 cf       	rjmp	.-50     	; 0x4614 <vfprintf+0x24>
    4646:	51 2c       	mov	r5, r1
    4648:	31 2c       	mov	r3, r1
    464a:	20 e0       	ldi	r18, 0x00	; 0
    464c:	20 32       	cpi	r18, 0x20	; 32
    464e:	a0 f4       	brcc	.+40     	; 0x4678 <vfprintf+0x88>
    4650:	8b 32       	cpi	r24, 0x2B	; 43
    4652:	69 f0       	breq	.+26     	; 0x466e <vfprintf+0x7e>
    4654:	30 f4       	brcc	.+12     	; 0x4662 <vfprintf+0x72>
    4656:	80 32       	cpi	r24, 0x20	; 32
    4658:	59 f0       	breq	.+22     	; 0x4670 <vfprintf+0x80>
    465a:	83 32       	cpi	r24, 0x23	; 35
    465c:	69 f4       	brne	.+26     	; 0x4678 <vfprintf+0x88>
    465e:	20 61       	ori	r18, 0x10	; 16
    4660:	2c c0       	rjmp	.+88     	; 0x46ba <vfprintf+0xca>
    4662:	8d 32       	cpi	r24, 0x2D	; 45
    4664:	39 f0       	breq	.+14     	; 0x4674 <vfprintf+0x84>
    4666:	80 33       	cpi	r24, 0x30	; 48
    4668:	39 f4       	brne	.+14     	; 0x4678 <vfprintf+0x88>
    466a:	21 60       	ori	r18, 0x01	; 1
    466c:	26 c0       	rjmp	.+76     	; 0x46ba <vfprintf+0xca>
    466e:	22 60       	ori	r18, 0x02	; 2
    4670:	24 60       	ori	r18, 0x04	; 4
    4672:	23 c0       	rjmp	.+70     	; 0x46ba <vfprintf+0xca>
    4674:	28 60       	ori	r18, 0x08	; 8
    4676:	21 c0       	rjmp	.+66     	; 0x46ba <vfprintf+0xca>
    4678:	27 fd       	sbrc	r18, 7
    467a:	27 c0       	rjmp	.+78     	; 0x46ca <vfprintf+0xda>
    467c:	30 ed       	ldi	r19, 0xD0	; 208
    467e:	38 0f       	add	r19, r24
    4680:	3a 30       	cpi	r19, 0x0A	; 10
    4682:	78 f4       	brcc	.+30     	; 0x46a2 <vfprintf+0xb2>
    4684:	26 ff       	sbrs	r18, 6
    4686:	06 c0       	rjmp	.+12     	; 0x4694 <vfprintf+0xa4>
    4688:	fa e0       	ldi	r31, 0x0A	; 10
    468a:	5f 9e       	mul	r5, r31
    468c:	30 0d       	add	r19, r0
    468e:	11 24       	eor	r1, r1
    4690:	53 2e       	mov	r5, r19
    4692:	13 c0       	rjmp	.+38     	; 0x46ba <vfprintf+0xca>
    4694:	8a e0       	ldi	r24, 0x0A	; 10
    4696:	38 9e       	mul	r3, r24
    4698:	30 0d       	add	r19, r0
    469a:	11 24       	eor	r1, r1
    469c:	33 2e       	mov	r3, r19
    469e:	20 62       	ori	r18, 0x20	; 32
    46a0:	0c c0       	rjmp	.+24     	; 0x46ba <vfprintf+0xca>
    46a2:	8e 32       	cpi	r24, 0x2E	; 46
    46a4:	21 f4       	brne	.+8      	; 0x46ae <vfprintf+0xbe>
    46a6:	26 fd       	sbrc	r18, 6
    46a8:	6b c1       	rjmp	.+726    	; 0x4980 <vfprintf+0x390>
    46aa:	20 64       	ori	r18, 0x40	; 64
    46ac:	06 c0       	rjmp	.+12     	; 0x46ba <vfprintf+0xca>
    46ae:	8c 36       	cpi	r24, 0x6C	; 108
    46b0:	11 f4       	brne	.+4      	; 0x46b6 <vfprintf+0xc6>
    46b2:	20 68       	ori	r18, 0x80	; 128
    46b4:	02 c0       	rjmp	.+4      	; 0x46ba <vfprintf+0xca>
    46b6:	88 36       	cpi	r24, 0x68	; 104
    46b8:	41 f4       	brne	.+16     	; 0x46ca <vfprintf+0xda>
    46ba:	f6 01       	movw	r30, r12
    46bc:	93 fd       	sbrc	r25, 3
    46be:	85 91       	lpm	r24, Z+
    46c0:	93 ff       	sbrs	r25, 3
    46c2:	81 91       	ld	r24, Z+
    46c4:	6f 01       	movw	r12, r30
    46c6:	81 11       	cpse	r24, r1
    46c8:	c1 cf       	rjmp	.-126    	; 0x464c <vfprintf+0x5c>
    46ca:	98 2f       	mov	r25, r24
    46cc:	9f 7d       	andi	r25, 0xDF	; 223
    46ce:	95 54       	subi	r25, 0x45	; 69
    46d0:	93 30       	cpi	r25, 0x03	; 3
    46d2:	28 f4       	brcc	.+10     	; 0x46de <vfprintf+0xee>
    46d4:	0c 5f       	subi	r16, 0xFC	; 252
    46d6:	1f 4f       	sbci	r17, 0xFF	; 255
    46d8:	ff e3       	ldi	r31, 0x3F	; 63
    46da:	f9 83       	std	Y+1, r31	; 0x01
    46dc:	0d c0       	rjmp	.+26     	; 0x46f8 <vfprintf+0x108>
    46de:	83 36       	cpi	r24, 0x63	; 99
    46e0:	31 f0       	breq	.+12     	; 0x46ee <vfprintf+0xfe>
    46e2:	83 37       	cpi	r24, 0x73	; 115
    46e4:	71 f0       	breq	.+28     	; 0x4702 <vfprintf+0x112>
    46e6:	83 35       	cpi	r24, 0x53	; 83
    46e8:	09 f0       	breq	.+2      	; 0x46ec <vfprintf+0xfc>
    46ea:	5b c0       	rjmp	.+182    	; 0x47a2 <vfprintf+0x1b2>
    46ec:	22 c0       	rjmp	.+68     	; 0x4732 <vfprintf+0x142>
    46ee:	f8 01       	movw	r30, r16
    46f0:	80 81       	ld	r24, Z
    46f2:	89 83       	std	Y+1, r24	; 0x01
    46f4:	0e 5f       	subi	r16, 0xFE	; 254
    46f6:	1f 4f       	sbci	r17, 0xFF	; 255
    46f8:	44 24       	eor	r4, r4
    46fa:	43 94       	inc	r4
    46fc:	51 2c       	mov	r5, r1
    46fe:	54 01       	movw	r10, r8
    4700:	15 c0       	rjmp	.+42     	; 0x472c <vfprintf+0x13c>
    4702:	38 01       	movw	r6, r16
    4704:	f2 e0       	ldi	r31, 0x02	; 2
    4706:	6f 0e       	add	r6, r31
    4708:	71 1c       	adc	r7, r1
    470a:	f8 01       	movw	r30, r16
    470c:	a0 80       	ld	r10, Z
    470e:	b1 80       	ldd	r11, Z+1	; 0x01
    4710:	26 ff       	sbrs	r18, 6
    4712:	03 c0       	rjmp	.+6      	; 0x471a <vfprintf+0x12a>
    4714:	65 2d       	mov	r22, r5
    4716:	70 e0       	ldi	r23, 0x00	; 0
    4718:	02 c0       	rjmp	.+4      	; 0x471e <vfprintf+0x12e>
    471a:	6f ef       	ldi	r22, 0xFF	; 255
    471c:	7f ef       	ldi	r23, 0xFF	; 255
    471e:	c5 01       	movw	r24, r10
    4720:	2c 87       	std	Y+12, r18	; 0x0c
    4722:	0e 94 d5 24 	call	0x49aa	; 0x49aa <strnlen>
    4726:	2c 01       	movw	r4, r24
    4728:	83 01       	movw	r16, r6
    472a:	2c 85       	ldd	r18, Y+12	; 0x0c
    472c:	2f 77       	andi	r18, 0x7F	; 127
    472e:	22 2e       	mov	r2, r18
    4730:	17 c0       	rjmp	.+46     	; 0x4760 <vfprintf+0x170>
    4732:	38 01       	movw	r6, r16
    4734:	f2 e0       	ldi	r31, 0x02	; 2
    4736:	6f 0e       	add	r6, r31
    4738:	71 1c       	adc	r7, r1
    473a:	f8 01       	movw	r30, r16
    473c:	a0 80       	ld	r10, Z
    473e:	b1 80       	ldd	r11, Z+1	; 0x01
    4740:	26 ff       	sbrs	r18, 6
    4742:	03 c0       	rjmp	.+6      	; 0x474a <vfprintf+0x15a>
    4744:	65 2d       	mov	r22, r5
    4746:	70 e0       	ldi	r23, 0x00	; 0
    4748:	02 c0       	rjmp	.+4      	; 0x474e <vfprintf+0x15e>
    474a:	6f ef       	ldi	r22, 0xFF	; 255
    474c:	7f ef       	ldi	r23, 0xFF	; 255
    474e:	c5 01       	movw	r24, r10
    4750:	2c 87       	std	Y+12, r18	; 0x0c
    4752:	0e 94 ca 24 	call	0x4994	; 0x4994 <strnlen_P>
    4756:	2c 01       	movw	r4, r24
    4758:	2c 85       	ldd	r18, Y+12	; 0x0c
    475a:	20 68       	ori	r18, 0x80	; 128
    475c:	22 2e       	mov	r2, r18
    475e:	83 01       	movw	r16, r6
    4760:	23 fc       	sbrc	r2, 3
    4762:	1b c0       	rjmp	.+54     	; 0x479a <vfprintf+0x1aa>
    4764:	83 2d       	mov	r24, r3
    4766:	90 e0       	ldi	r25, 0x00	; 0
    4768:	48 16       	cp	r4, r24
    476a:	59 06       	cpc	r5, r25
    476c:	b0 f4       	brcc	.+44     	; 0x479a <vfprintf+0x1aa>
    476e:	b7 01       	movw	r22, r14
    4770:	80 e2       	ldi	r24, 0x20	; 32
    4772:	90 e0       	ldi	r25, 0x00	; 0
    4774:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <fputc>
    4778:	3a 94       	dec	r3
    477a:	f4 cf       	rjmp	.-24     	; 0x4764 <vfprintf+0x174>
    477c:	f5 01       	movw	r30, r10
    477e:	27 fc       	sbrc	r2, 7
    4780:	85 91       	lpm	r24, Z+
    4782:	27 fe       	sbrs	r2, 7
    4784:	81 91       	ld	r24, Z+
    4786:	5f 01       	movw	r10, r30
    4788:	b7 01       	movw	r22, r14
    478a:	90 e0       	ldi	r25, 0x00	; 0
    478c:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <fputc>
    4790:	31 10       	cpse	r3, r1
    4792:	3a 94       	dec	r3
    4794:	f1 e0       	ldi	r31, 0x01	; 1
    4796:	4f 1a       	sub	r4, r31
    4798:	51 08       	sbc	r5, r1
    479a:	41 14       	cp	r4, r1
    479c:	51 04       	cpc	r5, r1
    479e:	71 f7       	brne	.-36     	; 0x477c <vfprintf+0x18c>
    47a0:	e5 c0       	rjmp	.+458    	; 0x496c <vfprintf+0x37c>
    47a2:	84 36       	cpi	r24, 0x64	; 100
    47a4:	11 f0       	breq	.+4      	; 0x47aa <vfprintf+0x1ba>
    47a6:	89 36       	cpi	r24, 0x69	; 105
    47a8:	39 f5       	brne	.+78     	; 0x47f8 <vfprintf+0x208>
    47aa:	f8 01       	movw	r30, r16
    47ac:	27 ff       	sbrs	r18, 7
    47ae:	07 c0       	rjmp	.+14     	; 0x47be <vfprintf+0x1ce>
    47b0:	60 81       	ld	r22, Z
    47b2:	71 81       	ldd	r23, Z+1	; 0x01
    47b4:	82 81       	ldd	r24, Z+2	; 0x02
    47b6:	93 81       	ldd	r25, Z+3	; 0x03
    47b8:	0c 5f       	subi	r16, 0xFC	; 252
    47ba:	1f 4f       	sbci	r17, 0xFF	; 255
    47bc:	08 c0       	rjmp	.+16     	; 0x47ce <vfprintf+0x1de>
    47be:	60 81       	ld	r22, Z
    47c0:	71 81       	ldd	r23, Z+1	; 0x01
    47c2:	88 27       	eor	r24, r24
    47c4:	77 fd       	sbrc	r23, 7
    47c6:	80 95       	com	r24
    47c8:	98 2f       	mov	r25, r24
    47ca:	0e 5f       	subi	r16, 0xFE	; 254
    47cc:	1f 4f       	sbci	r17, 0xFF	; 255
    47ce:	2f 76       	andi	r18, 0x6F	; 111
    47d0:	b2 2e       	mov	r11, r18
    47d2:	97 ff       	sbrs	r25, 7
    47d4:	09 c0       	rjmp	.+18     	; 0x47e8 <vfprintf+0x1f8>
    47d6:	90 95       	com	r25
    47d8:	80 95       	com	r24
    47da:	70 95       	com	r23
    47dc:	61 95       	neg	r22
    47de:	7f 4f       	sbci	r23, 0xFF	; 255
    47e0:	8f 4f       	sbci	r24, 0xFF	; 255
    47e2:	9f 4f       	sbci	r25, 0xFF	; 255
    47e4:	20 68       	ori	r18, 0x80	; 128
    47e6:	b2 2e       	mov	r11, r18
    47e8:	2a e0       	ldi	r18, 0x0A	; 10
    47ea:	30 e0       	ldi	r19, 0x00	; 0
    47ec:	a4 01       	movw	r20, r8
    47ee:	0e 94 12 25 	call	0x4a24	; 0x4a24 <__ultoa_invert>
    47f2:	a8 2e       	mov	r10, r24
    47f4:	a8 18       	sub	r10, r8
    47f6:	44 c0       	rjmp	.+136    	; 0x4880 <vfprintf+0x290>
    47f8:	85 37       	cpi	r24, 0x75	; 117
    47fa:	29 f4       	brne	.+10     	; 0x4806 <vfprintf+0x216>
    47fc:	2f 7e       	andi	r18, 0xEF	; 239
    47fe:	b2 2e       	mov	r11, r18
    4800:	2a e0       	ldi	r18, 0x0A	; 10
    4802:	30 e0       	ldi	r19, 0x00	; 0
    4804:	25 c0       	rjmp	.+74     	; 0x4850 <vfprintf+0x260>
    4806:	f2 2f       	mov	r31, r18
    4808:	f9 7f       	andi	r31, 0xF9	; 249
    480a:	bf 2e       	mov	r11, r31
    480c:	8f 36       	cpi	r24, 0x6F	; 111
    480e:	c1 f0       	breq	.+48     	; 0x4840 <vfprintf+0x250>
    4810:	18 f4       	brcc	.+6      	; 0x4818 <vfprintf+0x228>
    4812:	88 35       	cpi	r24, 0x58	; 88
    4814:	79 f0       	breq	.+30     	; 0x4834 <vfprintf+0x244>
    4816:	b4 c0       	rjmp	.+360    	; 0x4980 <vfprintf+0x390>
    4818:	80 37       	cpi	r24, 0x70	; 112
    481a:	19 f0       	breq	.+6      	; 0x4822 <vfprintf+0x232>
    481c:	88 37       	cpi	r24, 0x78	; 120
    481e:	21 f0       	breq	.+8      	; 0x4828 <vfprintf+0x238>
    4820:	af c0       	rjmp	.+350    	; 0x4980 <vfprintf+0x390>
    4822:	2f 2f       	mov	r18, r31
    4824:	20 61       	ori	r18, 0x10	; 16
    4826:	b2 2e       	mov	r11, r18
    4828:	b4 fe       	sbrs	r11, 4
    482a:	0d c0       	rjmp	.+26     	; 0x4846 <vfprintf+0x256>
    482c:	8b 2d       	mov	r24, r11
    482e:	84 60       	ori	r24, 0x04	; 4
    4830:	b8 2e       	mov	r11, r24
    4832:	09 c0       	rjmp	.+18     	; 0x4846 <vfprintf+0x256>
    4834:	24 ff       	sbrs	r18, 4
    4836:	0a c0       	rjmp	.+20     	; 0x484c <vfprintf+0x25c>
    4838:	9f 2f       	mov	r25, r31
    483a:	96 60       	ori	r25, 0x06	; 6
    483c:	b9 2e       	mov	r11, r25
    483e:	06 c0       	rjmp	.+12     	; 0x484c <vfprintf+0x25c>
    4840:	28 e0       	ldi	r18, 0x08	; 8
    4842:	30 e0       	ldi	r19, 0x00	; 0
    4844:	05 c0       	rjmp	.+10     	; 0x4850 <vfprintf+0x260>
    4846:	20 e1       	ldi	r18, 0x10	; 16
    4848:	30 e0       	ldi	r19, 0x00	; 0
    484a:	02 c0       	rjmp	.+4      	; 0x4850 <vfprintf+0x260>
    484c:	20 e1       	ldi	r18, 0x10	; 16
    484e:	32 e0       	ldi	r19, 0x02	; 2
    4850:	f8 01       	movw	r30, r16
    4852:	b7 fe       	sbrs	r11, 7
    4854:	07 c0       	rjmp	.+14     	; 0x4864 <vfprintf+0x274>
    4856:	60 81       	ld	r22, Z
    4858:	71 81       	ldd	r23, Z+1	; 0x01
    485a:	82 81       	ldd	r24, Z+2	; 0x02
    485c:	93 81       	ldd	r25, Z+3	; 0x03
    485e:	0c 5f       	subi	r16, 0xFC	; 252
    4860:	1f 4f       	sbci	r17, 0xFF	; 255
    4862:	06 c0       	rjmp	.+12     	; 0x4870 <vfprintf+0x280>
    4864:	60 81       	ld	r22, Z
    4866:	71 81       	ldd	r23, Z+1	; 0x01
    4868:	80 e0       	ldi	r24, 0x00	; 0
    486a:	90 e0       	ldi	r25, 0x00	; 0
    486c:	0e 5f       	subi	r16, 0xFE	; 254
    486e:	1f 4f       	sbci	r17, 0xFF	; 255
    4870:	a4 01       	movw	r20, r8
    4872:	0e 94 12 25 	call	0x4a24	; 0x4a24 <__ultoa_invert>
    4876:	a8 2e       	mov	r10, r24
    4878:	a8 18       	sub	r10, r8
    487a:	fb 2d       	mov	r31, r11
    487c:	ff 77       	andi	r31, 0x7F	; 127
    487e:	bf 2e       	mov	r11, r31
    4880:	b6 fe       	sbrs	r11, 6
    4882:	0b c0       	rjmp	.+22     	; 0x489a <vfprintf+0x2aa>
    4884:	2b 2d       	mov	r18, r11
    4886:	2e 7f       	andi	r18, 0xFE	; 254
    4888:	a5 14       	cp	r10, r5
    488a:	50 f4       	brcc	.+20     	; 0x48a0 <vfprintf+0x2b0>
    488c:	b4 fe       	sbrs	r11, 4
    488e:	0a c0       	rjmp	.+20     	; 0x48a4 <vfprintf+0x2b4>
    4890:	b2 fc       	sbrc	r11, 2
    4892:	08 c0       	rjmp	.+16     	; 0x48a4 <vfprintf+0x2b4>
    4894:	2b 2d       	mov	r18, r11
    4896:	2e 7e       	andi	r18, 0xEE	; 238
    4898:	05 c0       	rjmp	.+10     	; 0x48a4 <vfprintf+0x2b4>
    489a:	7a 2c       	mov	r7, r10
    489c:	2b 2d       	mov	r18, r11
    489e:	03 c0       	rjmp	.+6      	; 0x48a6 <vfprintf+0x2b6>
    48a0:	7a 2c       	mov	r7, r10
    48a2:	01 c0       	rjmp	.+2      	; 0x48a6 <vfprintf+0x2b6>
    48a4:	75 2c       	mov	r7, r5
    48a6:	24 ff       	sbrs	r18, 4
    48a8:	0d c0       	rjmp	.+26     	; 0x48c4 <vfprintf+0x2d4>
    48aa:	fe 01       	movw	r30, r28
    48ac:	ea 0d       	add	r30, r10
    48ae:	f1 1d       	adc	r31, r1
    48b0:	80 81       	ld	r24, Z
    48b2:	80 33       	cpi	r24, 0x30	; 48
    48b4:	11 f4       	brne	.+4      	; 0x48ba <vfprintf+0x2ca>
    48b6:	29 7e       	andi	r18, 0xE9	; 233
    48b8:	09 c0       	rjmp	.+18     	; 0x48cc <vfprintf+0x2dc>
    48ba:	22 ff       	sbrs	r18, 2
    48bc:	06 c0       	rjmp	.+12     	; 0x48ca <vfprintf+0x2da>
    48be:	73 94       	inc	r7
    48c0:	73 94       	inc	r7
    48c2:	04 c0       	rjmp	.+8      	; 0x48cc <vfprintf+0x2dc>
    48c4:	82 2f       	mov	r24, r18
    48c6:	86 78       	andi	r24, 0x86	; 134
    48c8:	09 f0       	breq	.+2      	; 0x48cc <vfprintf+0x2dc>
    48ca:	73 94       	inc	r7
    48cc:	23 fd       	sbrc	r18, 3
    48ce:	13 c0       	rjmp	.+38     	; 0x48f6 <vfprintf+0x306>
    48d0:	20 ff       	sbrs	r18, 0
    48d2:	06 c0       	rjmp	.+12     	; 0x48e0 <vfprintf+0x2f0>
    48d4:	5a 2c       	mov	r5, r10
    48d6:	73 14       	cp	r7, r3
    48d8:	18 f4       	brcc	.+6      	; 0x48e0 <vfprintf+0x2f0>
    48da:	53 0c       	add	r5, r3
    48dc:	57 18       	sub	r5, r7
    48de:	73 2c       	mov	r7, r3
    48e0:	73 14       	cp	r7, r3
    48e2:	68 f4       	brcc	.+26     	; 0x48fe <vfprintf+0x30e>
    48e4:	b7 01       	movw	r22, r14
    48e6:	80 e2       	ldi	r24, 0x20	; 32
    48e8:	90 e0       	ldi	r25, 0x00	; 0
    48ea:	2c 87       	std	Y+12, r18	; 0x0c
    48ec:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <fputc>
    48f0:	73 94       	inc	r7
    48f2:	2c 85       	ldd	r18, Y+12	; 0x0c
    48f4:	f5 cf       	rjmp	.-22     	; 0x48e0 <vfprintf+0x2f0>
    48f6:	73 14       	cp	r7, r3
    48f8:	10 f4       	brcc	.+4      	; 0x48fe <vfprintf+0x30e>
    48fa:	37 18       	sub	r3, r7
    48fc:	01 c0       	rjmp	.+2      	; 0x4900 <vfprintf+0x310>
    48fe:	31 2c       	mov	r3, r1
    4900:	24 ff       	sbrs	r18, 4
    4902:	12 c0       	rjmp	.+36     	; 0x4928 <vfprintf+0x338>
    4904:	b7 01       	movw	r22, r14
    4906:	80 e3       	ldi	r24, 0x30	; 48
    4908:	90 e0       	ldi	r25, 0x00	; 0
    490a:	2c 87       	std	Y+12, r18	; 0x0c
    490c:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <fputc>
    4910:	2c 85       	ldd	r18, Y+12	; 0x0c
    4912:	22 ff       	sbrs	r18, 2
    4914:	17 c0       	rjmp	.+46     	; 0x4944 <vfprintf+0x354>
    4916:	21 ff       	sbrs	r18, 1
    4918:	03 c0       	rjmp	.+6      	; 0x4920 <vfprintf+0x330>
    491a:	88 e5       	ldi	r24, 0x58	; 88
    491c:	90 e0       	ldi	r25, 0x00	; 0
    491e:	02 c0       	rjmp	.+4      	; 0x4924 <vfprintf+0x334>
    4920:	88 e7       	ldi	r24, 0x78	; 120
    4922:	90 e0       	ldi	r25, 0x00	; 0
    4924:	b7 01       	movw	r22, r14
    4926:	0c c0       	rjmp	.+24     	; 0x4940 <vfprintf+0x350>
    4928:	82 2f       	mov	r24, r18
    492a:	86 78       	andi	r24, 0x86	; 134
    492c:	59 f0       	breq	.+22     	; 0x4944 <vfprintf+0x354>
    492e:	21 fd       	sbrc	r18, 1
    4930:	02 c0       	rjmp	.+4      	; 0x4936 <vfprintf+0x346>
    4932:	80 e2       	ldi	r24, 0x20	; 32
    4934:	01 c0       	rjmp	.+2      	; 0x4938 <vfprintf+0x348>
    4936:	8b e2       	ldi	r24, 0x2B	; 43
    4938:	27 fd       	sbrc	r18, 7
    493a:	8d e2       	ldi	r24, 0x2D	; 45
    493c:	b7 01       	movw	r22, r14
    493e:	90 e0       	ldi	r25, 0x00	; 0
    4940:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <fputc>
    4944:	a5 14       	cp	r10, r5
    4946:	38 f4       	brcc	.+14     	; 0x4956 <vfprintf+0x366>
    4948:	b7 01       	movw	r22, r14
    494a:	80 e3       	ldi	r24, 0x30	; 48
    494c:	90 e0       	ldi	r25, 0x00	; 0
    494e:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <fputc>
    4952:	5a 94       	dec	r5
    4954:	f7 cf       	rjmp	.-18     	; 0x4944 <vfprintf+0x354>
    4956:	aa 94       	dec	r10
    4958:	f4 01       	movw	r30, r8
    495a:	ea 0d       	add	r30, r10
    495c:	f1 1d       	adc	r31, r1
    495e:	80 81       	ld	r24, Z
    4960:	b7 01       	movw	r22, r14
    4962:	90 e0       	ldi	r25, 0x00	; 0
    4964:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <fputc>
    4968:	a1 10       	cpse	r10, r1
    496a:	f5 cf       	rjmp	.-22     	; 0x4956 <vfprintf+0x366>
    496c:	33 20       	and	r3, r3
    496e:	09 f4       	brne	.+2      	; 0x4972 <vfprintf+0x382>
    4970:	51 ce       	rjmp	.-862    	; 0x4614 <vfprintf+0x24>
    4972:	b7 01       	movw	r22, r14
    4974:	80 e2       	ldi	r24, 0x20	; 32
    4976:	90 e0       	ldi	r25, 0x00	; 0
    4978:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <fputc>
    497c:	3a 94       	dec	r3
    497e:	f6 cf       	rjmp	.-20     	; 0x496c <vfprintf+0x37c>
    4980:	f7 01       	movw	r30, r14
    4982:	86 81       	ldd	r24, Z+6	; 0x06
    4984:	97 81       	ldd	r25, Z+7	; 0x07
    4986:	02 c0       	rjmp	.+4      	; 0x498c <vfprintf+0x39c>
    4988:	8f ef       	ldi	r24, 0xFF	; 255
    498a:	9f ef       	ldi	r25, 0xFF	; 255
    498c:	2c 96       	adiw	r28, 0x0c	; 12
    498e:	e2 e1       	ldi	r30, 0x12	; 18
    4990:	0c 94 8c 25 	jmp	0x4b18	; 0x4b18 <__epilogue_restores__>

00004994 <strnlen_P>:
    4994:	fc 01       	movw	r30, r24
    4996:	05 90       	lpm	r0, Z+
    4998:	61 50       	subi	r22, 0x01	; 1
    499a:	70 40       	sbci	r23, 0x00	; 0
    499c:	01 10       	cpse	r0, r1
    499e:	d8 f7       	brcc	.-10     	; 0x4996 <strnlen_P+0x2>
    49a0:	80 95       	com	r24
    49a2:	90 95       	com	r25
    49a4:	8e 0f       	add	r24, r30
    49a6:	9f 1f       	adc	r25, r31
    49a8:	08 95       	ret

000049aa <strnlen>:
    49aa:	fc 01       	movw	r30, r24
    49ac:	61 50       	subi	r22, 0x01	; 1
    49ae:	70 40       	sbci	r23, 0x00	; 0
    49b0:	01 90       	ld	r0, Z+
    49b2:	01 10       	cpse	r0, r1
    49b4:	d8 f7       	brcc	.-10     	; 0x49ac <strnlen+0x2>
    49b6:	80 95       	com	r24
    49b8:	90 95       	com	r25
    49ba:	8e 0f       	add	r24, r30
    49bc:	9f 1f       	adc	r25, r31
    49be:	08 95       	ret

000049c0 <fputc>:
    49c0:	0f 93       	push	r16
    49c2:	1f 93       	push	r17
    49c4:	cf 93       	push	r28
    49c6:	df 93       	push	r29
    49c8:	18 2f       	mov	r17, r24
    49ca:	09 2f       	mov	r16, r25
    49cc:	eb 01       	movw	r28, r22
    49ce:	8b 81       	ldd	r24, Y+3	; 0x03
    49d0:	81 fd       	sbrc	r24, 1
    49d2:	03 c0       	rjmp	.+6      	; 0x49da <fputc+0x1a>
    49d4:	8f ef       	ldi	r24, 0xFF	; 255
    49d6:	9f ef       	ldi	r25, 0xFF	; 255
    49d8:	20 c0       	rjmp	.+64     	; 0x4a1a <fputc+0x5a>
    49da:	82 ff       	sbrs	r24, 2
    49dc:	10 c0       	rjmp	.+32     	; 0x49fe <fputc+0x3e>
    49de:	4e 81       	ldd	r20, Y+6	; 0x06
    49e0:	5f 81       	ldd	r21, Y+7	; 0x07
    49e2:	2c 81       	ldd	r18, Y+4	; 0x04
    49e4:	3d 81       	ldd	r19, Y+5	; 0x05
    49e6:	42 17       	cp	r20, r18
    49e8:	53 07       	cpc	r21, r19
    49ea:	7c f4       	brge	.+30     	; 0x4a0a <fputc+0x4a>
    49ec:	e8 81       	ld	r30, Y
    49ee:	f9 81       	ldd	r31, Y+1	; 0x01
    49f0:	9f 01       	movw	r18, r30
    49f2:	2f 5f       	subi	r18, 0xFF	; 255
    49f4:	3f 4f       	sbci	r19, 0xFF	; 255
    49f6:	39 83       	std	Y+1, r19	; 0x01
    49f8:	28 83       	st	Y, r18
    49fa:	10 83       	st	Z, r17
    49fc:	06 c0       	rjmp	.+12     	; 0x4a0a <fputc+0x4a>
    49fe:	e8 85       	ldd	r30, Y+8	; 0x08
    4a00:	f9 85       	ldd	r31, Y+9	; 0x09
    4a02:	81 2f       	mov	r24, r17
    4a04:	09 95       	icall
    4a06:	89 2b       	or	r24, r25
    4a08:	29 f7       	brne	.-54     	; 0x49d4 <fputc+0x14>
    4a0a:	2e 81       	ldd	r18, Y+6	; 0x06
    4a0c:	3f 81       	ldd	r19, Y+7	; 0x07
    4a0e:	2f 5f       	subi	r18, 0xFF	; 255
    4a10:	3f 4f       	sbci	r19, 0xFF	; 255
    4a12:	3f 83       	std	Y+7, r19	; 0x07
    4a14:	2e 83       	std	Y+6, r18	; 0x06
    4a16:	81 2f       	mov	r24, r17
    4a18:	90 2f       	mov	r25, r16
    4a1a:	df 91       	pop	r29
    4a1c:	cf 91       	pop	r28
    4a1e:	1f 91       	pop	r17
    4a20:	0f 91       	pop	r16
    4a22:	08 95       	ret

00004a24 <__ultoa_invert>:
    4a24:	fa 01       	movw	r30, r20
    4a26:	aa 27       	eor	r26, r26
    4a28:	28 30       	cpi	r18, 0x08	; 8
    4a2a:	51 f1       	breq	.+84     	; 0x4a80 <__ultoa_invert+0x5c>
    4a2c:	20 31       	cpi	r18, 0x10	; 16
    4a2e:	81 f1       	breq	.+96     	; 0x4a90 <__ultoa_invert+0x6c>
    4a30:	e8 94       	clt
    4a32:	6f 93       	push	r22
    4a34:	6e 7f       	andi	r22, 0xFE	; 254
    4a36:	6e 5f       	subi	r22, 0xFE	; 254
    4a38:	7f 4f       	sbci	r23, 0xFF	; 255
    4a3a:	8f 4f       	sbci	r24, 0xFF	; 255
    4a3c:	9f 4f       	sbci	r25, 0xFF	; 255
    4a3e:	af 4f       	sbci	r26, 0xFF	; 255
    4a40:	b1 e0       	ldi	r27, 0x01	; 1
    4a42:	3e d0       	rcall	.+124    	; 0x4ac0 <__ultoa_invert+0x9c>
    4a44:	b4 e0       	ldi	r27, 0x04	; 4
    4a46:	3c d0       	rcall	.+120    	; 0x4ac0 <__ultoa_invert+0x9c>
    4a48:	67 0f       	add	r22, r23
    4a4a:	78 1f       	adc	r23, r24
    4a4c:	89 1f       	adc	r24, r25
    4a4e:	9a 1f       	adc	r25, r26
    4a50:	a1 1d       	adc	r26, r1
    4a52:	68 0f       	add	r22, r24
    4a54:	79 1f       	adc	r23, r25
    4a56:	8a 1f       	adc	r24, r26
    4a58:	91 1d       	adc	r25, r1
    4a5a:	a1 1d       	adc	r26, r1
    4a5c:	6a 0f       	add	r22, r26
    4a5e:	71 1d       	adc	r23, r1
    4a60:	81 1d       	adc	r24, r1
    4a62:	91 1d       	adc	r25, r1
    4a64:	a1 1d       	adc	r26, r1
    4a66:	20 d0       	rcall	.+64     	; 0x4aa8 <__ultoa_invert+0x84>
    4a68:	09 f4       	brne	.+2      	; 0x4a6c <__ultoa_invert+0x48>
    4a6a:	68 94       	set
    4a6c:	3f 91       	pop	r19
    4a6e:	2a e0       	ldi	r18, 0x0A	; 10
    4a70:	26 9f       	mul	r18, r22
    4a72:	11 24       	eor	r1, r1
    4a74:	30 19       	sub	r19, r0
    4a76:	30 5d       	subi	r19, 0xD0	; 208
    4a78:	31 93       	st	Z+, r19
    4a7a:	de f6       	brtc	.-74     	; 0x4a32 <__ultoa_invert+0xe>
    4a7c:	cf 01       	movw	r24, r30
    4a7e:	08 95       	ret
    4a80:	46 2f       	mov	r20, r22
    4a82:	47 70       	andi	r20, 0x07	; 7
    4a84:	40 5d       	subi	r20, 0xD0	; 208
    4a86:	41 93       	st	Z+, r20
    4a88:	b3 e0       	ldi	r27, 0x03	; 3
    4a8a:	0f d0       	rcall	.+30     	; 0x4aaa <__ultoa_invert+0x86>
    4a8c:	c9 f7       	brne	.-14     	; 0x4a80 <__ultoa_invert+0x5c>
    4a8e:	f6 cf       	rjmp	.-20     	; 0x4a7c <__ultoa_invert+0x58>
    4a90:	46 2f       	mov	r20, r22
    4a92:	4f 70       	andi	r20, 0x0F	; 15
    4a94:	40 5d       	subi	r20, 0xD0	; 208
    4a96:	4a 33       	cpi	r20, 0x3A	; 58
    4a98:	18 f0       	brcs	.+6      	; 0x4aa0 <__ultoa_invert+0x7c>
    4a9a:	49 5d       	subi	r20, 0xD9	; 217
    4a9c:	31 fd       	sbrc	r19, 1
    4a9e:	40 52       	subi	r20, 0x20	; 32
    4aa0:	41 93       	st	Z+, r20
    4aa2:	02 d0       	rcall	.+4      	; 0x4aa8 <__ultoa_invert+0x84>
    4aa4:	a9 f7       	brne	.-22     	; 0x4a90 <__ultoa_invert+0x6c>
    4aa6:	ea cf       	rjmp	.-44     	; 0x4a7c <__ultoa_invert+0x58>
    4aa8:	b4 e0       	ldi	r27, 0x04	; 4
    4aaa:	a6 95       	lsr	r26
    4aac:	97 95       	ror	r25
    4aae:	87 95       	ror	r24
    4ab0:	77 95       	ror	r23
    4ab2:	67 95       	ror	r22
    4ab4:	ba 95       	dec	r27
    4ab6:	c9 f7       	brne	.-14     	; 0x4aaa <__ultoa_invert+0x86>
    4ab8:	00 97       	sbiw	r24, 0x00	; 0
    4aba:	61 05       	cpc	r22, r1
    4abc:	71 05       	cpc	r23, r1
    4abe:	08 95       	ret
    4ac0:	9b 01       	movw	r18, r22
    4ac2:	ac 01       	movw	r20, r24
    4ac4:	0a 2e       	mov	r0, r26
    4ac6:	06 94       	lsr	r0
    4ac8:	57 95       	ror	r21
    4aca:	47 95       	ror	r20
    4acc:	37 95       	ror	r19
    4ace:	27 95       	ror	r18
    4ad0:	ba 95       	dec	r27
    4ad2:	c9 f7       	brne	.-14     	; 0x4ac6 <__ultoa_invert+0xa2>
    4ad4:	62 0f       	add	r22, r18
    4ad6:	73 1f       	adc	r23, r19
    4ad8:	84 1f       	adc	r24, r20
    4ada:	95 1f       	adc	r25, r21
    4adc:	a0 1d       	adc	r26, r0
    4ade:	08 95       	ret

00004ae0 <__prologue_saves__>:
    4ae0:	2f 92       	push	r2
    4ae2:	3f 92       	push	r3
    4ae4:	4f 92       	push	r4
    4ae6:	5f 92       	push	r5
    4ae8:	6f 92       	push	r6
    4aea:	7f 92       	push	r7
    4aec:	8f 92       	push	r8
    4aee:	9f 92       	push	r9
    4af0:	af 92       	push	r10
    4af2:	bf 92       	push	r11
    4af4:	cf 92       	push	r12
    4af6:	df 92       	push	r13
    4af8:	ef 92       	push	r14
    4afa:	ff 92       	push	r15
    4afc:	0f 93       	push	r16
    4afe:	1f 93       	push	r17
    4b00:	cf 93       	push	r28
    4b02:	df 93       	push	r29
    4b04:	cd b7       	in	r28, 0x3d	; 61
    4b06:	de b7       	in	r29, 0x3e	; 62
    4b08:	ca 1b       	sub	r28, r26
    4b0a:	db 0b       	sbc	r29, r27
    4b0c:	0f b6       	in	r0, 0x3f	; 63
    4b0e:	f8 94       	cli
    4b10:	de bf       	out	0x3e, r29	; 62
    4b12:	0f be       	out	0x3f, r0	; 63
    4b14:	cd bf       	out	0x3d, r28	; 61
    4b16:	09 94       	ijmp

00004b18 <__epilogue_restores__>:
    4b18:	2a 88       	ldd	r2, Y+18	; 0x12
    4b1a:	39 88       	ldd	r3, Y+17	; 0x11
    4b1c:	48 88       	ldd	r4, Y+16	; 0x10
    4b1e:	5f 84       	ldd	r5, Y+15	; 0x0f
    4b20:	6e 84       	ldd	r6, Y+14	; 0x0e
    4b22:	7d 84       	ldd	r7, Y+13	; 0x0d
    4b24:	8c 84       	ldd	r8, Y+12	; 0x0c
    4b26:	9b 84       	ldd	r9, Y+11	; 0x0b
    4b28:	aa 84       	ldd	r10, Y+10	; 0x0a
    4b2a:	b9 84       	ldd	r11, Y+9	; 0x09
    4b2c:	c8 84       	ldd	r12, Y+8	; 0x08
    4b2e:	df 80       	ldd	r13, Y+7	; 0x07
    4b30:	ee 80       	ldd	r14, Y+6	; 0x06
    4b32:	fd 80       	ldd	r15, Y+5	; 0x05
    4b34:	0c 81       	ldd	r16, Y+4	; 0x04
    4b36:	1b 81       	ldd	r17, Y+3	; 0x03
    4b38:	aa 81       	ldd	r26, Y+2	; 0x02
    4b3a:	b9 81       	ldd	r27, Y+1	; 0x01
    4b3c:	ce 0f       	add	r28, r30
    4b3e:	d1 1d       	adc	r29, r1
    4b40:	0f b6       	in	r0, 0x3f	; 63
    4b42:	f8 94       	cli
    4b44:	de bf       	out	0x3e, r29	; 62
    4b46:	0f be       	out	0x3f, r0	; 63
    4b48:	cd bf       	out	0x3d, r28	; 61
    4b4a:	ed 01       	movw	r28, r26
    4b4c:	08 95       	ret

00004b4e <_exit>:
    4b4e:	f8 94       	cli

00004b50 <__stop_program>:
    4b50:	ff cf       	rjmp	.-2      	; 0x4b50 <__stop_program>
