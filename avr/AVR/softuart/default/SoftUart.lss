
SoftUart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000358  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000358  000003ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002e  00800066  00800066  000003f2  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  000003f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000011e  00000000  00000000  00000432  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004e5  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000241  00000000  00000000  00000a35  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000415  00000000  00000000  00000c76  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  0000108c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000293  00000000  00000000  0000116c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000103  00000000  00000000  000013ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	6f c0       	rjmp	.+222    	; 0xe2 <__bad_interrupt>
   4:	6e c0       	rjmp	.+220    	; 0xe2 <__bad_interrupt>
   6:	6d c0       	rjmp	.+218    	; 0xe2 <__bad_interrupt>
   8:	6c c0       	rjmp	.+216    	; 0xe2 <__bad_interrupt>
   a:	6b c0       	rjmp	.+214    	; 0xe2 <__bad_interrupt>
   c:	6a c0       	rjmp	.+212    	; 0xe2 <__bad_interrupt>
   e:	69 c0       	rjmp	.+210    	; 0xe2 <__bad_interrupt>
  10:	68 c0       	rjmp	.+208    	; 0xe2 <__bad_interrupt>
  12:	67 c0       	rjmp	.+206    	; 0xe2 <__bad_interrupt>
  14:	67 c0       	rjmp	.+206    	; 0xe4 <__vector_10>
  16:	65 c0       	rjmp	.+202    	; 0xe2 <__bad_interrupt>
  18:	64 c0       	rjmp	.+200    	; 0xe2 <__bad_interrupt>
  1a:	63 c0       	rjmp	.+198    	; 0xe2 <__bad_interrupt>
  1c:	62 c0       	rjmp	.+196    	; 0xe2 <__bad_interrupt>

0000001e <__c.1353>:
  1e:	20 48 65 6c 6c 6f 20 00                              Hello .

00000026 <__c.1351>:
  26:	67 65 6e 65 72 69 63 20 73 6f 66 74 75 61 72 74     generic softuart
  36:	20 64 72 69 76 65 72 20 63 6f 64 65 20 62 79 20      driver code by 
  46:	43 6f 6c 69 6e 20 47 69 74 74 69 6e 73 0d 0a 00     Colin Gittins...

00000056 <__c.1349>:
  56:	0d 0a 53 6f 66 74 75 61 72 74 20 44 65 6d 6f 2d     ..Softuart Demo-
  66:	41 70 70 6c 69 63 61 74 69 6f 6e 0d 0a 00           Application...

00000074 <pstring.1347>:
  74:	61 64 61 70 74 65 64 20 66 6f 72 20 41 74 6d 65     adapted for Atme
  84:	6c 20 41 56 52 20 61 6e 64 20 74 68 69 73 20 64     l AVR and this d
  94:	65 6d 6f 20 62 79 20 4d 61 72 74 69 6e 20 54 68     emo by Martin Th
  a4:	6f 6d 61 73 0d 0a 00 00                             omas....

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf e5       	ldi	r28, 0x5F	; 95
  b2:	d2 e0       	ldi	r29, 0x02	; 2
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	10 e0       	ldi	r17, 0x00	; 0
  ba:	a0 e6       	ldi	r26, 0x60	; 96
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	e8 e5       	ldi	r30, 0x58	; 88
  c0:	f3 e0       	ldi	r31, 0x03	; 3
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <.do_copy_data_start>

000000c4 <.do_copy_data_loop>:
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0

000000c8 <.do_copy_data_start>:
  c8:	a6 36       	cpi	r26, 0x66	; 102
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <.do_copy_data_loop>

000000ce <__do_clear_bss>:
  ce:	10 e0       	ldi	r17, 0x00	; 0
  d0:	a6 e6       	ldi	r26, 0x66	; 102
  d2:	b0 e0       	ldi	r27, 0x00	; 0
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a4 39       	cpi	r26, 0x94	; 148
  da:	b1 07       	cpc	r27, r17
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	12 d1       	rcall	.+548    	; 0x304 <main>
  e0:	39 c1       	rjmp	.+626    	; 0x354 <_exit>

000000e2 <__bad_interrupt>:
  e2:	8e cf       	rjmp	.-228    	; 0x0 <__vectors>

000000e4 <__vector_10>:
#define set_tx_pin_high()      ( SOFTUART_TXPORT |=  ( 1 << SOFTUART_TXBIT ) )
#define set_tx_pin_low()       ( SOFTUART_TXPORT &= ~( 1 << SOFTUART_TXBIT ) )
#define get_rx_pin_status()    ( SOFTUART_RXPIN  &   ( 1 << SOFTUART_RXBIT ) )

ISR(SOFTUART_T_COMP_LABEL)
{
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	8f 93       	push	r24
  f0:	9f 93       	push	r25
  f2:	ef 93       	push	r30
  f4:	ff 93       	push	r31
	
	unsigned char start_bit, flag_in;
	unsigned char tmp;
	
	// Transmitter Section
	if ( flag_tx_busy == SU_TRUE ) {
  f6:	80 91 8f 00 	lds	r24, 0x008F
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	29 f5       	brne	.+74     	; 0x148 <__vector_10+0x64>
		tmp = timer_tx_ctr;
  fe:	80 91 90 00 	lds	r24, 0x0090
		if ( --tmp == 0 ) { // if ( --timer_tx_ctr <= 0 )
 102:	81 50       	subi	r24, 0x01	; 1
 104:	f9 f4       	brne	.+62     	; 0x144 <__vector_10+0x60>
			if ( internal_tx_buffer & 0x01 ) {
 106:	80 91 92 00 	lds	r24, 0x0092
 10a:	90 91 93 00 	lds	r25, 0x0093
 10e:	80 ff       	sbrs	r24, 0
 110:	02 c0       	rjmp	.+4      	; 0x116 <__vector_10+0x32>
				set_tx_pin_high();
 112:	c1 9a       	sbi	0x18, 1	; 24
 114:	01 c0       	rjmp	.+2      	; 0x118 <__vector_10+0x34>
			}
			else {
				set_tx_pin_low();
 116:	c1 98       	cbi	0x18, 1	; 24
			}
			internal_tx_buffer >>= 1;
 118:	80 91 92 00 	lds	r24, 0x0092
 11c:	90 91 93 00 	lds	r25, 0x0093
 120:	96 95       	lsr	r25
 122:	87 95       	ror	r24
 124:	90 93 93 00 	sts	0x0093, r25
 128:	80 93 92 00 	sts	0x0092, r24
			tmp = 3; // timer_tx_ctr = 3;
			if ( --bits_left_in_tx == 0 ) {
 12c:	80 91 91 00 	lds	r24, 0x0091
 130:	81 50       	subi	r24, 0x01	; 1
 132:	80 93 91 00 	sts	0x0091, r24
 136:	80 91 91 00 	lds	r24, 0x0091
 13a:	88 23       	and	r24, r24
 13c:	11 f4       	brne	.+4      	; 0x142 <__vector_10+0x5e>
				flag_tx_busy = SU_FALSE;
 13e:	10 92 8f 00 	sts	0x008F, r1
 142:	83 e0       	ldi	r24, 0x03	; 3
			}
		}
		timer_tx_ctr = tmp;
 144:	80 93 90 00 	sts	0x0090, r24
	}

	// Receiver Section
	if ( flag_rx_off == SU_FALSE ) {
 148:	80 91 8d 00 	lds	r24, 0x008D
 14c:	88 23       	and	r24, r24
 14e:	09 f0       	breq	.+2      	; 0x152 <__vector_10+0x6e>
 150:	57 c0       	rjmp	.+174    	; 0x200 <__vector_10+0x11c>
		if ( flag_rx_waiting_for_stop_bit ) {
 152:	80 91 6a 00 	lds	r24, 0x006A
 156:	88 23       	and	r24, r24
 158:	01 f1       	breq	.+64     	; 0x19a <__vector_10+0xb6>
			if ( --timer_rx_ctr == 0 ) {
 15a:	80 91 68 00 	lds	r24, 0x0068
 15e:	81 50       	subi	r24, 0x01	; 1
 160:	80 93 68 00 	sts	0x0068, r24
 164:	88 23       	and	r24, r24
 166:	09 f0       	breq	.+2      	; 0x16a <__vector_10+0x86>
 168:	4b c0       	rjmp	.+150    	; 0x200 <__vector_10+0x11c>
				flag_rx_waiting_for_stop_bit = SU_FALSE;
 16a:	10 92 6a 00 	sts	0x006A, r1
				flag_rx_ready = SU_FALSE;
 16e:	10 92 8e 00 	sts	0x008E, r1
				inbuf[qin] = internal_rx_buffer;
 172:	e0 91 8b 00 	lds	r30, 0x008B
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 91 66 00 	lds	r24, 0x0066
 17c:	e5 59       	subi	r30, 0x95	; 149
 17e:	ff 4f       	sbci	r31, 0xFF	; 255
 180:	80 83       	st	Z, r24
				if ( ++qin >= SOFTUART_IN_BUF_SIZE ) {
 182:	80 91 8b 00 	lds	r24, 0x008B
 186:	8f 5f       	subi	r24, 0xFF	; 255
 188:	80 93 8b 00 	sts	0x008B, r24
 18c:	80 91 8b 00 	lds	r24, 0x008B
 190:	80 32       	cpi	r24, 0x20	; 32
 192:	b0 f1       	brcs	.+108    	; 0x200 <__vector_10+0x11c>
					// overflow - reset inbuf-index
					qin = 0;
 194:	10 92 8b 00 	sts	0x008B, r1
 198:	33 c0       	rjmp	.+102    	; 0x200 <__vector_10+0x11c>
				}
			}
		}
		else {  // rx_test_busy
			if ( flag_rx_ready == SU_FALSE ) {
 19a:	80 91 8e 00 	lds	r24, 0x008E
 19e:	88 23       	and	r24, r24
 1a0:	81 f4       	brne	.+32     	; 0x1c2 <__vector_10+0xde>
				start_bit = get_rx_pin_status();
				// test for start bit
				if ( start_bit == 0 ) {
 1a2:	b0 99       	sbic	0x16, 0	; 22
 1a4:	2d c0       	rjmp	.+90     	; 0x200 <__vector_10+0x11c>
					flag_rx_ready      = SU_TRUE;
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	80 93 8e 00 	sts	0x008E, r24
					internal_rx_buffer = 0;
 1ac:	10 92 66 00 	sts	0x0066, r1
					timer_rx_ctr       = 4;
 1b0:	94 e0       	ldi	r25, 0x04	; 4
 1b2:	90 93 68 00 	sts	0x0068, r25
					bits_left_in_rx    = RX_NUM_OF_BITS;
 1b6:	98 e0       	ldi	r25, 0x08	; 8
 1b8:	90 93 67 00 	sts	0x0067, r25
					rx_mask            = 1;
 1bc:	80 93 69 00 	sts	0x0069, r24
 1c0:	1f c0       	rjmp	.+62     	; 0x200 <__vector_10+0x11c>
				}
			}
			else {  // rx_busy
				tmp = timer_rx_ctr;
 1c2:	80 91 68 00 	lds	r24, 0x0068
				if ( --tmp == 0 ) { // if ( --timer_rx_ctr == 0 ) {
 1c6:	81 50       	subi	r24, 0x01	; 1
 1c8:	c9 f4       	brne	.+50     	; 0x1fc <__vector_10+0x118>
					// rcv
					tmp = 3;
					flag_in = get_rx_pin_status();
					if ( flag_in ) {
 1ca:	b0 9b       	sbis	0x16, 0	; 22
 1cc:	07 c0       	rjmp	.+14     	; 0x1dc <__vector_10+0xf8>
						internal_rx_buffer |= rx_mask;
 1ce:	80 91 66 00 	lds	r24, 0x0066
 1d2:	90 91 69 00 	lds	r25, 0x0069
 1d6:	89 2b       	or	r24, r25
 1d8:	80 93 66 00 	sts	0x0066, r24
					}
					rx_mask <<= 1;
 1dc:	80 91 69 00 	lds	r24, 0x0069
 1e0:	88 0f       	add	r24, r24
 1e2:	80 93 69 00 	sts	0x0069, r24
					if ( --bits_left_in_rx == 0 ) {
 1e6:	80 91 67 00 	lds	r24, 0x0067
 1ea:	81 50       	subi	r24, 0x01	; 1
 1ec:	80 93 67 00 	sts	0x0067, r24
 1f0:	88 23       	and	r24, r24
 1f2:	19 f4       	brne	.+6      	; 0x1fa <__vector_10+0x116>
						flag_rx_waiting_for_stop_bit = SU_TRUE;
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	80 93 6a 00 	sts	0x006A, r24
 1fa:	83 e0       	ldi	r24, 0x03	; 3
					}
				}
				timer_rx_ctr = tmp;
 1fc:	80 93 68 00 	sts	0x0068, r24
			}
		}
	}
}
 200:	ff 91       	pop	r31
 202:	ef 91       	pop	r30
 204:	9f 91       	pop	r25
 206:	8f 91       	pop	r24
 208:	0f 90       	pop	r0
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	0f 90       	pop	r0
 20e:	1f 90       	pop	r1
 210:	18 95       	reti

00000212 <softuart_init>:
	SREG = sreg_tmp;
}

void softuart_init( void )
{
	flag_tx_busy  = SU_FALSE;
 212:	10 92 8f 00 	sts	0x008F, r1
	flag_rx_ready = SU_FALSE;
 216:	10 92 8e 00 	sts	0x008E, r1
	flag_rx_off   = SU_FALSE;
 21a:	10 92 8d 00 	sts	0x008D, r1
	
	set_tx_pin_high(); /* mt: set to high to avoid garbage on init */
 21e:	c1 9a       	sbi	0x18, 1	; 24
}

static void io_init(void)
{
	// TX-Pin as output
	SOFTUART_TXDDR |=  ( 1 << SOFTUART_TXBIT );
 220:	b9 9a       	sbi	0x17, 1	; 23
	// RX-Pin as input
	SOFTUART_RXDDR &= ~( 1 << SOFTUART_RXBIT );
 222:	b8 98       	cbi	0x17, 0	; 23

static void timer_init(void)
{
	unsigned char sreg_tmp;
	
	sreg_tmp = SREG;
 224:	9f b7       	in	r25, 0x3f	; 63
	cli();
 226:	f8 94       	cli
	
	SOFTUART_T_COMP_REG = SOFTUART_TIMERTOP;     /* set top */
 228:	8f e3       	ldi	r24, 0x3F	; 63
 22a:	89 bd       	out	0x29, r24	; 41

	SOFTUART_T_CONTR_REGA = SOFTUART_CTC_MASKA | SOFTUART_PRESC_MASKA;
 22c:	82 e0       	ldi	r24, 0x02	; 2
 22e:	8a bd       	out	0x2a, r24	; 42
	SOFTUART_T_CONTR_REGB = SOFTUART_CTC_MASKB | SOFTUART_PRESC_MASKB;
 230:	83 bf       	out	0x33, r24	; 51

	SOFTUART_T_INTCTL_REG |= SOFTUART_CMPINT_EN_MASK;
 232:	89 b7       	in	r24, 0x39	; 57
 234:	80 61       	ori	r24, 0x10	; 16
 236:	89 bf       	out	0x39, r24	; 57

	SOFTUART_T_CNT_REG = 0; /* reset counter */
 238:	12 be       	out	0x32, r1	; 50
	
	SREG = sreg_tmp;
 23a:	9f bf       	out	0x3f, r25	; 63
	
	set_tx_pin_high(); /* mt: set to high to avoid garbage on init */

	io_init();
	timer_init();
}
 23c:	08 95       	ret

0000023e <softuart_turn_rx_on>:
	// add watchdog-reset here if needed
}

void softuart_turn_rx_on( void )
{
	flag_rx_off = SU_FALSE;
 23e:	10 92 8d 00 	sts	0x008D, r1
}
 242:	08 95       	ret

00000244 <softuart_turn_rx_off>:

void softuart_turn_rx_off( void )
{
	flag_rx_off = SU_TRUE;
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	80 93 8d 00 	sts	0x008D, r24
}
 24a:	08 95       	ret

0000024c <softuart_getchar>:

char softuart_getchar( void )
{
	char ch;

	while ( qout == qin ) {
 24c:	90 91 8c 00 	lds	r25, 0x008C
 250:	80 91 8b 00 	lds	r24, 0x008B
 254:	98 17       	cp	r25, r24
 256:	e1 f3       	breq	.-8      	; 0x250 <softuart_getchar+0x4>
		idle();
	}
	ch = inbuf[qout];
 258:	e9 2f       	mov	r30, r25
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	e5 59       	subi	r30, 0x95	; 149
 25e:	ff 4f       	sbci	r31, 0xFF	; 255
 260:	e0 81       	ld	r30, Z
	if ( ++qout >= SOFTUART_IN_BUF_SIZE ) {
 262:	89 2f       	mov	r24, r25
 264:	8f 5f       	subi	r24, 0xFF	; 255
 266:	80 93 8c 00 	sts	0x008C, r24
 26a:	80 32       	cpi	r24, 0x20	; 32
 26c:	10 f0       	brcs	.+4      	; 0x272 <__stack+0x13>
		qout = 0;
 26e:	10 92 8c 00 	sts	0x008C, r1
	}
	
	return( ch );
}
 272:	8e 2f       	mov	r24, r30
 274:	08 95       	ret

00000276 <softuart_kbhit>:

unsigned char softuart_kbhit( void )
{
	return( qin != qout );
 276:	90 91 8b 00 	lds	r25, 0x008B
 27a:	20 e0       	ldi	r18, 0x00	; 0
 27c:	80 91 8c 00 	lds	r24, 0x008C
 280:	98 13       	cpse	r25, r24
 282:	21 e0       	ldi	r18, 0x01	; 1
}
 284:	82 2f       	mov	r24, r18
 286:	08 95       	ret

00000288 <softuart_flush_input_buffer>:

void softuart_flush_input_buffer( void )
{
	qin  = 0;
 288:	10 92 8b 00 	sts	0x008B, r1
	qout = 0;
 28c:	10 92 8c 00 	sts	0x008C, r1
}
 290:	08 95       	ret

00000292 <softuart_transmit_busy>:
	
unsigned char softuart_transmit_busy( void ) 
{
	return ( flag_tx_busy == SU_TRUE ) ? 1 : 0;
 292:	80 91 8f 00 	lds	r24, 0x008F
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	81 30       	cpi	r24, 0x01	; 1
 29a:	09 f4       	brne	.+2      	; 0x29e <softuart_transmit_busy+0xc>
 29c:	91 e0       	ldi	r25, 0x01	; 1
}
 29e:	89 2f       	mov	r24, r25
 2a0:	08 95       	ret

000002a2 <softuart_putchar>:

void softuart_putchar( const char ch )
{
 2a2:	98 2f       	mov	r25, r24
	while ( flag_tx_busy == SU_TRUE ) {
 2a4:	80 91 8f 00 	lds	r24, 0x008F
 2a8:	81 30       	cpi	r24, 0x01	; 1
 2aa:	e1 f3       	breq	.-8      	; 0x2a4 <softuart_putchar+0x2>
		; // wait for transmitter ready
		  // add watchdog-reset here if needed;
	}

	// invoke_UART_transmit
	timer_tx_ctr       = 3;
 2ac:	83 e0       	ldi	r24, 0x03	; 3
 2ae:	80 93 90 00 	sts	0x0090, r24
	bits_left_in_tx    = TX_NUM_OF_BITS;
 2b2:	8a e0       	ldi	r24, 0x0A	; 10
 2b4:	80 93 91 00 	sts	0x0091, r24
	internal_tx_buffer = ( ch << 1 ) | 0x200;
 2b8:	89 2f       	mov	r24, r25
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	92 60       	ori	r25, 0x02	; 2
 2c2:	90 93 93 00 	sts	0x0093, r25
 2c6:	80 93 92 00 	sts	0x0092, r24
	flag_tx_busy       = SU_TRUE;
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	80 93 8f 00 	sts	0x008F, r24
}
 2d0:	08 95       	ret

000002d2 <softuart_puts>:
	
void softuart_puts( const char *s )
{
 2d2:	cf 93       	push	r28
 2d4:	df 93       	push	r29
 2d6:	ec 01       	movw	r28, r24
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <softuart_puts+0xc>
	while ( *s ) {
		softuart_putchar( *s++ );
 2da:	21 96       	adiw	r28, 0x01	; 1
 2dc:	e2 df       	rcall	.-60     	; 0x2a2 <softuart_putchar>
	flag_tx_busy       = SU_TRUE;
}
	
void softuart_puts( const char *s )
{
	while ( *s ) {
 2de:	88 81       	ld	r24, Y
 2e0:	88 23       	and	r24, r24
 2e2:	d9 f7       	brne	.-10     	; 0x2da <softuart_puts+0x8>
		softuart_putchar( *s++ );
	}
}
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	08 95       	ret

000002ea <softuart_puts_p>:
	
void softuart_puts_p( const char *prg_s )
{
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
 2ee:	ec 01       	movw	r28, r24
 2f0:	01 c0       	rjmp	.+2      	; 0x2f4 <softuart_puts_p+0xa>
	char c;

	while ( ( c = pgm_read_byte( prg_s++ ) ) ) {
		softuart_putchar(c);
 2f2:	d7 df       	rcall	.-82     	; 0x2a2 <softuart_putchar>
 2f4:	fe 01       	movw	r30, r28
	
void softuart_puts_p( const char *prg_s )
{
	char c;

	while ( ( c = pgm_read_byte( prg_s++ ) ) ) {
 2f6:	21 96       	adiw	r28, 0x01	; 1
 2f8:	84 91       	lpm	r24, Z+
 2fa:	88 23       	and	r24, r24
 2fc:	d1 f7       	brne	.-12     	; 0x2f2 <softuart_puts_p+0x8>
		softuart_putchar(c);
	}
}
 2fe:	df 91       	pop	r29
 300:	cf 91       	pop	r28
 302:	08 95       	ret

00000304 <main>:
}
#endif /* WITH_STDIO_DEMO */


int main(void)
{
 304:	1f 93       	push	r17
 306:	cf 93       	push	r28
 308:	df 93       	push	r29
#define CNTHALLO (unsigned int)(0xFFFF)
#else 
#define CNTHALLO (unsigned int)(0xFFFF/3)
#endif

	softuart_init();
 30a:	83 df       	rcall	.-250    	; 0x212 <softuart_init>
	softuart_turn_rx_on(); /* redundant - on by default */
 30c:	98 df       	rcall	.-208    	; 0x23e <softuart_turn_rx_on>
	
	sei();
 30e:	78 94       	sei

	softuart_puts_P( "\r\nSoftuart Demo-Application\r\n" );    // "implicit" PSTR
 310:	86 e5       	ldi	r24, 0x56	; 86
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	ea df       	rcall	.-44     	; 0x2ea <softuart_puts_p>
	softuart_puts_p( PSTR("generic softuart driver code by Colin Gittins\r\n") ); // explicit PSTR
 316:	86 e2       	ldi	r24, 0x26	; 38
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	e7 df       	rcall	.-50     	; 0x2ea <softuart_puts_p>
	softuart_puts_p( pstring ); // pstring defined with PROGMEM
 31c:	84 e7       	ldi	r24, 0x74	; 116
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	e4 df       	rcall	.-56     	; 0x2ea <softuart_puts_p>
	softuart_puts( "--\r\n" );  // string "from RAM"
 322:	80 e6       	ldi	r24, 0x60	; 96
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	d5 df       	rcall	.-86     	; 0x2d2 <softuart_puts>
 328:	c0 e0       	ldi	r28, 0x00	; 0
 32a:	d0 e0       	ldi	r29, 0x00	; 0
	stdio_demo_func();
#endif
	
	for (;;) {
	
		if ( softuart_kbhit() ) {
 32c:	a4 df       	rcall	.-184    	; 0x276 <softuart_kbhit>
 32e:	88 23       	and	r24, r24
 330:	41 f0       	breq	.+16     	; 0x342 <main+0x3e>
			c = softuart_getchar();
 332:	8c df       	rcall	.-232    	; 0x24c <softuart_getchar>
 334:	18 2f       	mov	r17, r24
			softuart_putchar( '[' );
 336:	8b e5       	ldi	r24, 0x5B	; 91
 338:	b4 df       	rcall	.-152    	; 0x2a2 <softuart_putchar>
			softuart_putchar( c );
 33a:	81 2f       	mov	r24, r17
 33c:	b2 df       	rcall	.-156    	; 0x2a2 <softuart_putchar>
			softuart_putchar( ']' );
 33e:	8d e5       	ldi	r24, 0x5D	; 93
 340:	b0 df       	rcall	.-160    	; 0x2a2 <softuart_putchar>
		}

		cnt++;
 342:	21 96       	adiw	r28, 0x01	; 1
		if (cnt == CNTHALLO) {
 344:	85 e5       	ldi	r24, 0x55	; 85
 346:	c5 35       	cpi	r28, 0x55	; 85
 348:	d8 07       	cpc	r29, r24
 34a:	81 f7       	brne	.-32     	; 0x32c <main+0x28>
			cnt = 0;
			softuart_puts_P( " Hello " );
 34c:	8e e1       	ldi	r24, 0x1E	; 30
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	cc df       	rcall	.-104    	; 0x2ea <softuart_puts_p>
 352:	ea cf       	rjmp	.-44     	; 0x328 <main+0x24>

00000354 <_exit>:
 354:	f8 94       	cli

00000356 <__stop_program>:
 356:	ff cf       	rjmp	.-2      	; 0x356 <__stop_program>
