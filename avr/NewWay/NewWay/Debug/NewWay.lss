
NewWay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000080  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000000f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000015b  00000000  00000000  0000010f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000db  00000000  00000000  0000026a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000166  00000000  00000000  00000345  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000004ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000db  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000a0  00000000  00000000  000005a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000060  00000000  00000000  00000647  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	23 c0       	rjmp	.+70     	; 0x7c <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
}
*/
int main(void)
{
	//DDRB = 0xff;
	UCSRC=(1<<URSEL)|(3<<UCSZ0);
  38:	86 e8       	ldi	r24, 0x86	; 134
  3a:	80 bd       	out	0x20, r24	; 32
	set_output(DDRB, LED);
  3c:	e7 e3       	ldi	r30, 0x37	; 55
  3e:	f0 e0       	ldi	r31, 0x00	; 0
  40:	80 81       	ld	r24, Z
  42:	82 60       	ori	r24, 0x02	; 2
  44:	80 83       	st	Z, r24
    while(1)
    {
        //PORTB |= 0x02;
		output_high(PORTB, LED);
  46:	e8 e3       	ldi	r30, 0x38	; 56
  48:	f0 e0       	ldi	r31, 0x00	; 0
  4a:	60 e2       	ldi	r22, 0x20	; 32
  4c:	7e e4       	ldi	r23, 0x4E	; 78
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  4e:	48 ec       	ldi	r20, 0xC8	; 200
  50:	50 e0       	ldi	r21, 0x00	; 0
  52:	80 81       	ld	r24, Z
  54:	82 60       	ori	r24, 0x02	; 2
  56:	80 83       	st	Z, r24
  58:	9b 01       	movw	r18, r22
  5a:	ca 01       	movw	r24, r20
  5c:	01 97       	sbiw	r24, 0x01	; 1
  5e:	f1 f7       	brne	.-4      	; 0x5c <__SREG__+0x1d>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  60:	21 50       	subi	r18, 0x01	; 1
  62:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  64:	d1 f7       	brne	.-12     	; 0x5a <__SREG__+0x1b>
		_delay_ms(2000);
		
		//PORTB &= ~0x02;
		output_low(PORTB, LED);
  66:	80 81       	ld	r24, Z
  68:	8d 7f       	andi	r24, 0xFD	; 253
  6a:	80 83       	st	Z, r24
  6c:	9b 01       	movw	r18, r22
  6e:	ca 01       	movw	r24, r20
  70:	01 97       	sbiw	r24, 0x01	; 1
  72:	f1 f7       	brne	.-4      	; 0x70 <__SREG__+0x31>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  74:	21 50       	subi	r18, 0x01	; 1
  76:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  78:	d1 f7       	brne	.-12     	; 0x6e <__SREG__+0x2f>
  7a:	eb cf       	rjmp	.-42     	; 0x52 <__SREG__+0x13>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>
