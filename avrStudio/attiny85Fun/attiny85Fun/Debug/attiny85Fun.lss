
attiny85Fun.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000446  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800060  00800060  000004ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000033c  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000e9  00000000  00000000  000008fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000216  00000000  00000000  000009e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  00000bfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002e2  00000000  00000000  00000df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ff  00000000  00000000  000010da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000013d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	c8 c1       	rjmp	.+912    	; 0x396 <__vector_2>
   6:	b3 c1       	rjmp	.+870    	; 0x36e <__vector_3>
   8:	61 c1       	rjmp	.+706    	; 0x2cc <__vector_4>
   a:	70 c0       	rjmp	.+224    	; 0xec <__vector_5>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	18 c0       	rjmp	.+48     	; 0x40 <__vector_7>
  10:	26 c0       	rjmp	.+76     	; 0x5e <__vector_8>
  12:	b7 c1       	rjmp	.+878    	; 0x382 <__vector_9>
  14:	47 c1       	rjmp	.+654    	; 0x2a4 <__vector_10>
  16:	50 c1       	rjmp	.+672    	; 0x2b8 <__vector_11>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a6 37       	cpi	r26, 0x76	; 118
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	d5 d1       	rcall	.+938    	; 0x3e6 <main>
  3c:	02 c2       	rjmp	.+1028   	; 0x442 <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <__vector_7>:
volatile uint16_t Auto_Off_Sample_Rate;
volatile bool Light_on; // true if LDR_Value > Light_On_Threshold
volatile bool BTN_Down; // true if the push button is being help down

ISR(ANA_COMP_vect)
{
  40:	1f 92       	push	r1
  42:	0f 92       	push	r0
  44:	0f b6       	in	r0, 0x3f	; 63
  46:	0f 92       	push	r0
  48:	11 24       	eor	r1, r1
	if(ACSR & (1 << ACO))
  4a:	45 9b       	sbis	0x08, 5	; 8
  4c:	02 c0       	rjmp	.+4      	; 0x52 <__vector_7+0x12>
	{
		output_high(PORTB, YellowLED);
  4e:	c3 9a       	sbi	0x18, 3	; 24
  50:	01 c0       	rjmp	.+2      	; 0x54 <__vector_7+0x14>
	}
	else
	{
		output_low(PORTB, YellowLED);
  52:	c3 98       	cbi	0x18, 3	; 24
	}
}
  54:	0f 90       	pop	r0
  56:	0f be       	out	0x3f, r0	; 63
  58:	0f 90       	pop	r0
  5a:	1f 90       	pop	r1
  5c:	18 95       	reti

0000005e <__vector_8>:

ISR(ADC_vect) // Interrupt for ADC Converter
{
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	2f 93       	push	r18
  6a:	3f 93       	push	r19
  6c:	5f 93       	push	r21
  6e:	6f 93       	push	r22
  70:	7f 93       	push	r23
  72:	8f 93       	push	r24
  74:	9f 93       	push	r25
  76:	af 93       	push	r26
  78:	bf 93       	push	r27
	uint8_t temp; // raw a2d variable
	temp = ADCH ; // ADCH is the high portion of the a2d
  7a:	65 b1       	in	r22, 0x05	; 5
	LDR_Value = (56 * 255 / temp); // 56/ 1.1v = 255/5v (5v/wanted voltage level = 255/ 8 bit quantized voltage
  7c:	70 e0       	ldi	r23, 0x00	; 0
  7e:	88 ec       	ldi	r24, 0xC8	; 200
  80:	97 e3       	ldi	r25, 0x37	; 55
  82:	cc d1       	rcall	.+920    	; 0x41c <__divmodhi4>
  84:	70 93 61 00 	sts	0x0061, r23
  88:	60 93 60 00 	sts	0x0060, r22

	//if(LDR_Value > Light_On_Threshold) //132/2.6V Low Battery Voltage divider R1 324Ohms R2 200
	if(LDR_Value > Light_On_Threshold) //250
  8c:	80 91 67 00 	lds	r24, 0x0067
  90:	20 91 60 00 	lds	r18, 0x0060
  94:	30 91 61 00 	lds	r19, 0x0061
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	82 17       	cp	r24, r18
  9c:	93 07       	cpc	r25, r19
  9e:	20 f4       	brcc	.+8      	; 0xa8 <__vector_8+0x4a>
	{
		Light_on = true; // light should power on cause the LDR is reading it is dark
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	80 93 68 00 	sts	0x0068, r24
  a6:	14 c0       	rjmp	.+40     	; 0xd0 <__vector_8+0x72>
	}
	else
	{
		Light_on = false; // LDR senses light
  a8:	10 92 68 00 	sts	0x0068, r1
		if(switch_state != 0) // If light is on
  ac:	80 91 6e 00 	lds	r24, 0x006E
  b0:	88 23       	and	r24, r24
  b2:	61 f0       	breq	.+24     	; 0xcc <__vector_8+0x6e>
		{
			if(switch_state == 9) // If light is on but in the off mode
  b4:	80 91 6e 00 	lds	r24, 0x006E
  b8:	89 30       	cpi	r24, 0x09	; 9
  ba:	21 f4       	brne	.+8      	; 0xc4 <__vector_8+0x66>
			{
				last_switch_state = 1; // store switch state as red so when it is dark again the unit powers on with a light and not in the off mode
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	80 93 75 00 	sts	0x0075, r24
  c2:	04 c0       	rjmp	.+8      	; 0xcc <__vector_8+0x6e>
			}
			else
			{
				last_switch_state = switch_state; // store the previous light state so when it is dark again the correct mode powers up
  c4:	80 91 6e 00 	lds	r24, 0x006E
  c8:	80 93 75 00 	sts	0x0075, r24
			}
		}
		switch_state = 0; // set to power off state because of light detected
  cc:	10 92 6e 00 	sts	0x006E, r1
	}

}
  d0:	bf 91       	pop	r27
  d2:	af 91       	pop	r26
  d4:	9f 91       	pop	r25
  d6:	8f 91       	pop	r24
  d8:	7f 91       	pop	r23
  da:	6f 91       	pop	r22
  dc:	5f 91       	pop	r21
  de:	3f 91       	pop	r19
  e0:	2f 91       	pop	r18
  e2:	0f 90       	pop	r0
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	0f 90       	pop	r0
  e8:	1f 90       	pop	r1
  ea:	18 95       	reti

000000ec <__vector_5>:

ISR(TIMER0_OVF_vect) // timer 0 overflow interrupt
{
  ec:	1f 92       	push	r1
  ee:	0f 92       	push	r0
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	0f 92       	push	r0
  f4:	11 24       	eor	r1, r1
  f6:	2f 93       	push	r18
  f8:	3f 93       	push	r19
  fa:	5f 93       	push	r21
  fc:	6f 93       	push	r22
  fe:	7f 93       	push	r23
 100:	8f 93       	push	r24
 102:	9f 93       	push	r25
 104:	af 93       	push	r26
 106:	bf 93       	push	r27
	timer0Overflows++;	// 225 1 min // 1125 5 min // 2250 10min // 15 4seconds // keep track of timer 0 overflows for timer interrupt polling
 108:	80 91 65 00 	lds	r24, 0x0065
 10c:	90 91 66 00 	lds	r25, 0x0066
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	90 93 66 00 	sts	0x0066, r25
 116:	80 93 65 00 	sts	0x0065, r24
	if((timer0Overflows % 5) == 0) //15 4 seconds
 11a:	80 91 65 00 	lds	r24, 0x0065
 11e:	90 91 66 00 	lds	r25, 0x0066
 122:	65 e0       	ldi	r22, 0x05	; 5
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	66 d1       	rcall	.+716    	; 0x3f4 <__udivmodhi4>
 128:	89 2b       	or	r24, r25
 12a:	09 f0       	breq	.+2      	; 0x12e <__vector_5+0x42>
 12c:	74 c0       	rjmp	.+232    	; 0x216 <__vector_5+0x12a>
	{
		if(switch_state == 0 && Light_on == true) // if the light is off and its supposed to be on
 12e:	80 91 6e 00 	lds	r24, 0x006E
 132:	81 11       	cpse	r24, r1
 134:	0b c0       	rjmp	.+22     	; 0x14c <__vector_5+0x60>
 136:	80 91 68 00 	lds	r24, 0x0068
 13a:	88 23       	and	r24, r24
 13c:	39 f0       	breq	.+14     	; 0x14c <__vector_5+0x60>
		{
			switch_state = last_switch_state; // restore previous powered on switch state
 13e:	80 91 75 00 	lds	r24, 0x0075
 142:	80 93 6e 00 	sts	0x006E, r24
			last_switch_state = 1; // set last switch state to 1
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	80 93 75 00 	sts	0x0075, r24
		}
		if(switch_state == 1)	//Red
 14c:	80 91 6e 00 	lds	r24, 0x006E
 150:	81 30       	cpi	r24, 0x01	; 1
 152:	49 f4       	brne	.+18     	; 0x166 <__vector_5+0x7a>
		{
			Led_Strip_Brightness = 51; // **** NOTE: Red and green should be switched and for there timer 0 is 100% and 255 is 0%
 154:	83 e3       	ldi	r24, 0x33	; 51
 156:	80 93 64 00 	sts	0x0064, r24
			Aux_PWM = 0;
 15a:	10 92 74 00 	sts	0x0074, r1
			Power_Latch = 255;  // **** NOTE: for blue 0 is 0% and 255 is 100%
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	80 93 73 00 	sts	0x0073, r24
 164:	4d c0       	rjmp	.+154    	; 0x200 <__vector_5+0x114>
		}
		else if(switch_state == 2)	//Orange
 166:	80 91 6e 00 	lds	r24, 0x006E
 16a:	82 30       	cpi	r24, 0x02	; 2
 16c:	49 f4       	brne	.+18     	; 0x180 <__vector_5+0x94>
		{
			Led_Strip_Brightness = 102; //245
 16e:	86 e6       	ldi	r24, 0x66	; 102
 170:	80 93 64 00 	sts	0x0064, r24
			Aux_PWM = 0; //165
 174:	10 92 74 00 	sts	0x0074, r1
			Power_Latch = 255;
 178:	8f ef       	ldi	r24, 0xFF	; 255
 17a:	80 93 73 00 	sts	0x0073, r24
 17e:	40 c0       	rjmp	.+128    	; 0x200 <__vector_5+0x114>
		}
		else if(switch_state == 3)	//Yellow
 180:	80 91 6e 00 	lds	r24, 0x006E
 184:	83 30       	cpi	r24, 0x03	; 3
 186:	49 f4       	brne	.+18     	; 0x19a <__vector_5+0xae>
		{
			Led_Strip_Brightness = 153; //40 is less brighter than 0
 188:	89 e9       	ldi	r24, 0x99	; 153
 18a:	80 93 64 00 	sts	0x0064, r24
			Aux_PWM = 0; //40 is less brighter than 0
 18e:	10 92 74 00 	sts	0x0074, r1
			Power_Latch = 255;
 192:	8f ef       	ldi	r24, 0xFF	; 255
 194:	80 93 73 00 	sts	0x0073, r24
 198:	33 c0       	rjmp	.+102    	; 0x200 <__vector_5+0x114>
		}
		
		else if(switch_state == 4)	//Green
 19a:	80 91 6e 00 	lds	r24, 0x006E
 19e:	84 30       	cpi	r24, 0x04	; 4
 1a0:	49 f4       	brne	.+18     	; 0x1b4 <__vector_5+0xc8>
		{
			Led_Strip_Brightness = 204;
 1a2:	8c ec       	ldi	r24, 0xCC	; 204
 1a4:	80 93 64 00 	sts	0x0064, r24
			Aux_PWM = 0;
 1a8:	10 92 74 00 	sts	0x0074, r1
			Power_Latch = 255;
 1ac:	8f ef       	ldi	r24, 0xFF	; 255
 1ae:	80 93 73 00 	sts	0x0073, r24
 1b2:	26 c0       	rjmp	.+76     	; 0x200 <__vector_5+0x114>
		}
		else if(switch_state == 5)	//Blue
 1b4:	80 91 6e 00 	lds	r24, 0x006E
 1b8:	85 30       	cpi	r24, 0x05	; 5
 1ba:	41 f4       	brne	.+16     	; 0x1cc <__vector_5+0xe0>
		{
			Led_Strip_Brightness = 255;
 1bc:	8f ef       	ldi	r24, 0xFF	; 255
 1be:	80 93 64 00 	sts	0x0064, r24
			Aux_PWM = 0;
 1c2:	10 92 74 00 	sts	0x0074, r1
			Power_Latch = 255;
 1c6:	80 93 73 00 	sts	0x0073, r24
 1ca:	1a c0       	rjmp	.+52     	; 0x200 <__vector_5+0x114>
		}
		else if(switch_state == 6)	//Blue
 1cc:	80 91 6e 00 	lds	r24, 0x006E
 1d0:	86 30       	cpi	r24, 0x06	; 6
 1d2:	39 f4       	brne	.+14     	; 0x1e2 <__vector_5+0xf6>
		{
			Led_Strip_Brightness = 0;
 1d4:	10 92 64 00 	sts	0x0064, r1
			Aux_PWM = 0;
 1d8:	10 92 74 00 	sts	0x0074, r1
			Power_Latch = 0;
 1dc:	10 92 73 00 	sts	0x0073, r1
 1e0:	0f c0       	rjmp	.+30     	; 0x200 <__vector_5+0x114>
		}
		else if(switch_state == 0)	//Light detected OFF
 1e2:	80 91 6e 00 	lds	r24, 0x006E
 1e6:	81 11       	cpse	r24, r1
 1e8:	09 c0       	rjmp	.+18     	; 0x1fc <__vector_5+0x110>
		{
			Led_Strip_Brightness = 0;
 1ea:	10 92 64 00 	sts	0x0064, r1
			Aux_PWM = 0;
 1ee:	10 92 74 00 	sts	0x0074, r1
			Power_Latch = 0;
 1f2:	10 92 73 00 	sts	0x0073, r1
			switch_state = 0;
 1f6:	10 92 6e 00 	sts	0x006E, r1
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <__vector_5+0x114>
		}
		else
		{
			
			switch_state = 0; // set switch state to 0 if the state is above 9
 1fc:	10 92 6e 00 	sts	0x006E, r1
			
		}
		
		OCR0B = (255 - Led_Strip_Brightness);  // PWM Duty cycle value
 200:	80 91 64 00 	lds	r24, 0x0064
 204:	80 95       	com	r24
 206:	88 bd       	out	0x28, r24	; 40
		OCR0A = (255 - Aux_PWM); // PWM Duty cycle value switched green and red
 208:	80 91 74 00 	lds	r24, 0x0074
 20c:	80 95       	com	r24
 20e:	89 bd       	out	0x29, r24	; 41
		OCR1B = Power_Latch; // PWM Duty cycle value
 210:	80 91 73 00 	lds	r24, 0x0073
 214:	8b bd       	out	0x2b, r24	; 43
	}

	if((timer0Overflows % Sensor_Sample_Rate) == 0) //  Sensor_Sample_Rate = %500
 216:	80 91 65 00 	lds	r24, 0x0065
 21a:	90 91 66 00 	lds	r25, 0x0066
 21e:	60 91 69 00 	lds	r22, 0x0069
 222:	70 91 6a 00 	lds	r23, 0x006A
 226:	e6 d0       	rcall	.+460    	; 0x3f4 <__udivmodhi4>
 228:	89 2b       	or	r24, r25
 22a:	39 f4       	brne	.+14     	; 0x23a <__vector_5+0x14e>
	{
		ADCSRA|=(1<<ADSC); // setting ADSC to 1 starts A2D Conversion
 22c:	36 9a       	sbi	0x06, 6	; 6
		if(Light_on == false) // return from A2D interrupt check if the light should be on
 22e:	80 91 68 00 	lds	r24, 0x0068
 232:	81 11       	cpse	r24, r1
 234:	02 c0       	rjmp	.+4      	; 0x23a <__vector_5+0x14e>
		{
			switch_state = 0; // if light should be off set to state 0 or the off state
 236:	10 92 6e 00 	sts	0x006E, r1
		}
		
	}
	
	if((timer0Overflows % Auto_Off_Sample_Rate) == 0) //  Sensor_Sample_Rate = %500
 23a:	80 91 65 00 	lds	r24, 0x0065
 23e:	90 91 66 00 	lds	r25, 0x0066
 242:	60 91 71 00 	lds	r22, 0x0071
 246:	70 91 72 00 	lds	r23, 0x0072
 24a:	d4 d0       	rcall	.+424    	; 0x3f4 <__udivmodhi4>
 24c:	89 2b       	or	r24, r25
 24e:	e1 f4       	brne	.+56     	; 0x288 <__stack+0x29>
	{	
		if(Auto_Off_Timer >= Auto_Off_Seconds) // Value in Seconds
 250:	20 91 62 00 	lds	r18, 0x0062
 254:	30 91 63 00 	lds	r19, 0x0063
 258:	80 91 6b 00 	lds	r24, 0x006B
 25c:	90 91 6c 00 	lds	r25, 0x006C
 260:	28 17       	cp	r18, r24
 262:	39 07       	cpc	r19, r25
 264:	40 f0       	brcs	.+16     	; 0x276 <__stack+0x17>
		{
			switch_state = 6; // if light should be off set to state 0 or the off state
 266:	86 e0       	ldi	r24, 0x06	; 6
 268:	80 93 6e 00 	sts	0x006E, r24
			Auto_Off_Timer = 0;
 26c:	10 92 63 00 	sts	0x0063, r1
 270:	10 92 62 00 	sts	0x0062, r1
 274:	09 c0       	rjmp	.+18     	; 0x288 <__stack+0x29>
		}
		else
		{
			Auto_Off_Timer++;
 276:	80 91 62 00 	lds	r24, 0x0062
 27a:	90 91 63 00 	lds	r25, 0x0063
 27e:	01 96       	adiw	r24, 0x01	; 1
 280:	90 93 63 00 	sts	0x0063, r25
 284:	80 93 62 00 	sts	0x0062, r24
		}
		
	}

	
}
 288:	bf 91       	pop	r27
 28a:	af 91       	pop	r26
 28c:	9f 91       	pop	r25
 28e:	8f 91       	pop	r24
 290:	7f 91       	pop	r23
 292:	6f 91       	pop	r22
 294:	5f 91       	pop	r21
 296:	3f 91       	pop	r19
 298:	2f 91       	pop	r18
 29a:	0f 90       	pop	r0
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	0f 90       	pop	r0
 2a0:	1f 90       	pop	r1
 2a2:	18 95       	reti

000002a4 <__vector_10>:
ISR(TIMER0_COMPA_vect) // timer 0 compare A interrupt
{
 2a4:	1f 92       	push	r1
 2a6:	0f 92       	push	r0
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	0f 92       	push	r0
 2ac:	11 24       	eor	r1, r1
	
}
 2ae:	0f 90       	pop	r0
 2b0:	0f be       	out	0x3f, r0	; 63
 2b2:	0f 90       	pop	r0
 2b4:	1f 90       	pop	r1
 2b6:	18 95       	reti

000002b8 <__vector_11>:

ISR(TIMER0_COMPB_vect) // timer 0 compare B interrupt
{
 2b8:	1f 92       	push	r1
 2ba:	0f 92       	push	r0
 2bc:	0f b6       	in	r0, 0x3f	; 63
 2be:	0f 92       	push	r0
 2c0:	11 24       	eor	r1, r1

}
 2c2:	0f 90       	pop	r0
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	0f 90       	pop	r0
 2c8:	1f 90       	pop	r1
 2ca:	18 95       	reti

000002cc <__vector_4>:

ISR(TIMER1_OVF_vect) // timer 1 overflow interrupt
{
 2cc:	1f 92       	push	r1
 2ce:	0f 92       	push	r0
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	0f 92       	push	r0
 2d4:	11 24       	eor	r1, r1
 2d6:	5f 93       	push	r21
 2d8:	6f 93       	push	r22
 2da:	7f 93       	push	r23
 2dc:	8f 93       	push	r24
 2de:	9f 93       	push	r25
 2e0:	af 93       	push	r26
 2e2:	bf 93       	push	r27
	timer1Overflows++; //keep track of timer 1 overflows for timer interrupt polling
 2e4:	80 91 6f 00 	lds	r24, 0x006F
 2e8:	90 91 70 00 	lds	r25, 0x0070
 2ec:	01 96       	adiw	r24, 0x01	; 1
 2ee:	90 93 70 00 	sts	0x0070, r25
 2f2:	80 93 6f 00 	sts	0x006F, r24
	
	if((timer1Overflows % 20) == 0) // push button polling 195 1 sec /975 5 sec/ 11700 1 min/
 2f6:	80 91 6f 00 	lds	r24, 0x006F
 2fa:	90 91 70 00 	lds	r25, 0x0070
 2fe:	64 e1       	ldi	r22, 0x14	; 20
 300:	70 e0       	ldi	r23, 0x00	; 0
 302:	78 d0       	rcall	.+240    	; 0x3f4 <__udivmodhi4>
 304:	89 2b       	or	r24, r25
 306:	49 f4       	brne	.+18     	; 0x31a <__vector_4+0x4e>
	{
		if(is_clear(PINB, 2)) // if the push button is held down connecting pin B2 to ground
 308:	b2 99       	sbic	0x16, 2	; 22
 30a:	07 c0       	rjmp	.+14     	; 0x31a <__vector_4+0x4e>
		{
			BTN_Down = true; // button down is true
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	80 93 6d 00 	sts	0x006D, r24
			Auto_Off_Timer = 0;
 312:	10 92 63 00 	sts	0x0063, r1
 316:	10 92 62 00 	sts	0x0062, r1
		}
	}
	if((timer1Overflows % 25) == 0) // push button polling on the release
 31a:	80 91 6f 00 	lds	r24, 0x006F
 31e:	90 91 70 00 	lds	r25, 0x0070
 322:	69 e1       	ldi	r22, 0x19	; 25
 324:	70 e0       	ldi	r23, 0x00	; 0
 326:	66 d0       	rcall	.+204    	; 0x3f4 <__udivmodhi4>
 328:	89 2b       	or	r24, r25
 32a:	a9 f4       	brne	.+42     	; 0x356 <__vector_4+0x8a>
	{

		if(is_set(PINB, 2) && BTN_Down) // push button release to set pin B2 to high again after being held low
 32c:	b2 9b       	sbis	0x16, 2	; 22
 32e:	13 c0       	rjmp	.+38     	; 0x356 <__vector_4+0x8a>
 330:	80 91 6d 00 	lds	r24, 0x006D
 334:	88 23       	and	r24, r24
 336:	79 f0       	breq	.+30     	; 0x356 <__vector_4+0x8a>
		{
			//sbi(PORTB,PB3);
			switch_state++; // increment mode states by 1 i.e. red -> yellow, green - > blue
 338:	80 91 6e 00 	lds	r24, 0x006E
 33c:	8f 5f       	subi	r24, 0xFF	; 255
 33e:	80 93 6e 00 	sts	0x006E, r24
			last_switch_state = switch_state; // update the last switch state to hold the value of switch state in case of a light power down
 342:	80 91 6e 00 	lds	r24, 0x006E
 346:	80 93 75 00 	sts	0x0075, r24
			BTN_Down = false; // push button is released so the button is no longer held down
 34a:	10 92 6d 00 	sts	0x006D, r1
			Auto_Off_Timer = 0;
 34e:	10 92 63 00 	sts	0x0063, r1
 352:	10 92 62 00 	sts	0x0062, r1
		}
	}
	
}
 356:	bf 91       	pop	r27
 358:	af 91       	pop	r26
 35a:	9f 91       	pop	r25
 35c:	8f 91       	pop	r24
 35e:	7f 91       	pop	r23
 360:	6f 91       	pop	r22
 362:	5f 91       	pop	r21
 364:	0f 90       	pop	r0
 366:	0f be       	out	0x3f, r0	; 63
 368:	0f 90       	pop	r0
 36a:	1f 90       	pop	r1
 36c:	18 95       	reti

0000036e <__vector_3>:



ISR(TIMER1_COMPA_vect) // timer 1 compare A interrupt
{
 36e:	1f 92       	push	r1
 370:	0f 92       	push	r0
 372:	0f b6       	in	r0, 0x3f	; 63
 374:	0f 92       	push	r0
 376:	11 24       	eor	r1, r1

}
 378:	0f 90       	pop	r0
 37a:	0f be       	out	0x3f, r0	; 63
 37c:	0f 90       	pop	r0
 37e:	1f 90       	pop	r1
 380:	18 95       	reti

00000382 <__vector_9>:

ISR(TIMER1_COMPB_vect) // timer 1 compare B interrupt
{
 382:	1f 92       	push	r1
 384:	0f 92       	push	r0
 386:	0f b6       	in	r0, 0x3f	; 63
 388:	0f 92       	push	r0
 38a:	11 24       	eor	r1, r1

}
 38c:	0f 90       	pop	r0
 38e:	0f be       	out	0x3f, r0	; 63
 390:	0f 90       	pop	r0
 392:	1f 90       	pop	r1
 394:	18 95       	reti

00000396 <__vector_2>:

ISR(PCINT0_vect) // Pin Change interrupt service routine
{
 396:	1f 92       	push	r1
 398:	0f 92       	push	r0
 39a:	0f b6       	in	r0, 0x3f	; 63
 39c:	0f 92       	push	r0
 39e:	11 24       	eor	r1, r1
	//sleep_disable(); // If pins change state wake up
	if(is_set(PINB, Switch1))
 3a0:	b2 9b       	sbis	0x16, 2	; 22
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <__vector_2+0x12>
	{
		output_high(PORTB, GreenLED);
 3a4:	c4 9a       	sbi	0x18, 4	; 24
 3a6:	01 c0       	rjmp	.+2      	; 0x3aa <__vector_2+0x14>
	}
	else
	{
		output_low(PORTB, GreenLED);
 3a8:	c4 98       	cbi	0x18, 4	; 24
	}
	//TCNT0 = 0x00; // reset timer 0
	//TCNT1 = 0x00; // reset timer 1
	//timer0Overflows = 0; // reset timer o overflows
	//timer1Overflows = 0; // dont reset timer 1 overflows keep running forever
}
 3aa:	0f 90       	pop	r0
 3ac:	0f be       	out	0x3f, r0	; 63
 3ae:	0f 90       	pop	r0
 3b0:	1f 90       	pop	r1
 3b2:	18 95       	reti

000003b4 <PortInit>:

	//PORTB |= (1<<PB4)|(1<<PB3)|(1<<PB2)|(1<<PB1)|(1<<PB0); // set all pins we are using high
	//DDRB |= (1<<DDB4)|(1<<DDB3)|(1<<DDB2)|(1<<DDB1)|(0<<DDB0); // set PB4, PB1 and PB0 as outputs and PB3 and PB2 as inputs
	//PORTB |= (0<<PB4)|(0<<PB3)|(0<<PB2)|(0<<PB1); // set all outputs to 0
	// make sure pull-up resistors are turned off
	PORTB = 0x00;
 3b4:	18 ba       	out	0x18, r1	; 24
	DDRB = 0x00;
 3b6:	17 ba       	out	0x17, r1	; 23
	set_input(DDRB, Pot);
 3b8:	b8 98       	cbi	0x17, 0	; 23
	set_input(DDRB, Divider);
 3ba:	b9 98       	cbi	0x17, 1	; 23
	set_input(DDRB, Switch1);
 3bc:	ba 98       	cbi	0x17, 2	; 23
	set_output(DDRB, YellowLED);
 3be:	bb 9a       	sbi	0x17, 3	; 23
	set_output(DDRB, GreenLED);
 3c0:	bc 9a       	sbi	0x17, 4	; 23
	
	output_high(PORTB, YellowLED);
 3c2:	c3 9a       	sbi	0x18, 3	; 24
	output_high(PORTB, GreenLED);
 3c4:	c4 9a       	sbi	0x18, 4	; 24
 3c6:	08 95       	ret

000003c8 <SystemInit>:
}

void SystemInit(void) // Power on variable initialization
{
	//BTN_Down = false; // button is not pushed down
	PCMSK |= (1<<PCINT2); // pin change mask: listen to portb bit 0 PB0
 3c8:	aa 9a       	sbi	0x15, 2	; 21
	GIMSK |= (1<<PCIE); // enable PCINT interrupt
 3ca:	8b b7       	in	r24, 0x3b	; 59
 3cc:	80 62       	ori	r24, 0x20	; 32
 3ce:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1<<BODS)|(0<<PUD)|(1<<SE)|(0<<SM1)|(1<<SM0)|(0<<BODSE)|(1<<ISC01)|(0<<ISC00); // disable BOD during sleep, Sleep Enable, ADC Noise Reduction, The falling edge of INT0 generates an interrupt request
 3d0:	85 b7       	in	r24, 0x35	; 53
 3d2:	8a 6a       	ori	r24, 0xAA	; 170
 3d4:	85 bf       	out	0x35, r24	; 53
	sei(); // enable all interrupts
 3d6:	78 94       	sei
 3d8:	08 95       	ret

000003da <Analog_Comparator_init>:
	timer1Overflows = 0; // Start timer overflows at 0
}

void Analog_Comparator_init(void) // Initialize Analog Comparator
{
	ADCSRB |= (0<<BIN)|(0<<ACME)|(0<<IPR)|(0<<ADTS2)|(0<<ADTS1)|(0<<ADTS0); //Analog Comparator Multiplexer Enable
 3da:	83 b1       	in	r24, 0x03	; 3
 3dc:	83 b9       	out	0x03, r24	; 3
	ACSR |= (0<<ACD)|(0<<ACBG)|(0<<ACO)|(0<<ACI)|(1<<ACIE)|(0<<ACIS1)|(0<<ACIS0); // Analog Comparator Control Register
 3de:	43 9a       	sbi	0x08, 3	; 8
	DIDR0 |= (0<<ADC0D)|(0<<ADC2D)|(0<<ADC3D)|(0<<ADC1D)|(0<<AIN1D)|(0<<AIN0D); // Digital input Disable Register
 3e0:	84 b3       	in	r24, 0x14	; 20
 3e2:	84 bb       	out	0x14, r24	; 20
 3e4:	08 95       	ret

000003e6 <main>:
int main(void)
{
	//timer0_init(); // timer 0 initialize
	//timer1_init(); // timer 1 initialize
	//ADC_init(); // analog to digital converter initialize
	Analog_Comparator_init();
 3e6:	f9 df       	rcall	.-14     	; 0x3da <Analog_Comparator_init>
	PortInit(); // inputs and outputs initialize
 3e8:	e5 df       	rcall	.-54     	; 0x3b4 <PortInit>
	SystemInit(); // system variables and state initialize
 3ea:	ee df       	rcall	.-36     	; 0x3c8 <SystemInit>

	while(1)
	{
		sleep_enable(); // sleep until pin interrupt
 3ec:	85 b7       	in	r24, 0x35	; 53
 3ee:	80 62       	ori	r24, 0x20	; 32
 3f0:	85 bf       	out	0x35, r24	; 53
	}
 3f2:	fc cf       	rjmp	.-8      	; 0x3ec <main+0x6>

000003f4 <__udivmodhi4>:
 3f4:	aa 1b       	sub	r26, r26
 3f6:	bb 1b       	sub	r27, r27
 3f8:	51 e1       	ldi	r21, 0x11	; 17
 3fa:	07 c0       	rjmp	.+14     	; 0x40a <__udivmodhi4_ep>

000003fc <__udivmodhi4_loop>:
 3fc:	aa 1f       	adc	r26, r26
 3fe:	bb 1f       	adc	r27, r27
 400:	a6 17       	cp	r26, r22
 402:	b7 07       	cpc	r27, r23
 404:	10 f0       	brcs	.+4      	; 0x40a <__udivmodhi4_ep>
 406:	a6 1b       	sub	r26, r22
 408:	b7 0b       	sbc	r27, r23

0000040a <__udivmodhi4_ep>:
 40a:	88 1f       	adc	r24, r24
 40c:	99 1f       	adc	r25, r25
 40e:	5a 95       	dec	r21
 410:	a9 f7       	brne	.-22     	; 0x3fc <__udivmodhi4_loop>
 412:	80 95       	com	r24
 414:	90 95       	com	r25
 416:	bc 01       	movw	r22, r24
 418:	cd 01       	movw	r24, r26
 41a:	08 95       	ret

0000041c <__divmodhi4>:
 41c:	97 fb       	bst	r25, 7
 41e:	07 2e       	mov	r0, r23
 420:	16 f4       	brtc	.+4      	; 0x426 <__divmodhi4+0xa>
 422:	00 94       	com	r0
 424:	06 d0       	rcall	.+12     	; 0x432 <__divmodhi4_neg1>
 426:	77 fd       	sbrc	r23, 7
 428:	08 d0       	rcall	.+16     	; 0x43a <__divmodhi4_neg2>
 42a:	e4 df       	rcall	.-56     	; 0x3f4 <__udivmodhi4>
 42c:	07 fc       	sbrc	r0, 7
 42e:	05 d0       	rcall	.+10     	; 0x43a <__divmodhi4_neg2>
 430:	3e f4       	brtc	.+14     	; 0x440 <__divmodhi4_exit>

00000432 <__divmodhi4_neg1>:
 432:	90 95       	com	r25
 434:	81 95       	neg	r24
 436:	9f 4f       	sbci	r25, 0xFF	; 255
 438:	08 95       	ret

0000043a <__divmodhi4_neg2>:
 43a:	70 95       	com	r23
 43c:	61 95       	neg	r22
 43e:	7f 4f       	sbci	r23, 0xFF	; 255

00000440 <__divmodhi4_exit>:
 440:	08 95       	ret

00000442 <_exit>:
 442:	f8 94       	cli

00000444 <__stop_program>:
 444:	ff cf       	rjmp	.-2      	; 0x444 <__stop_program>
