
blinkyLight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ee  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000242  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013fa  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b6d  00000000  00000000  0000173e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c2  00000000  00000000  000022ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000fc  00000000  00000000  00002670  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000065f  00000000  00000000  0000276c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000253  00000000  00000000  00002dcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  0000301e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	43 d0       	rcall	.+134    	; 0x120 <main>
  9a:	a7 c0       	rjmp	.+334    	; 0x1ea <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <_ZN6IOPort16SetPortDirectionEh>:
{
    // assumes pin is correctly in the range of 0..7
    if (direction == DirectionOutput)
        *_ddr |= (1 << pin);
    else
        *_ddr ^= (1 << pin);
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	1f 92       	push	r1
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
  a8:	69 83       	std	Y+1, r22	; 0x01
  aa:	dc 01       	movw	r26, r24
  ac:	14 96       	adiw	r26, 0x04	; 4
  ae:	ed 91       	ld	r30, X+
  b0:	fc 91       	ld	r31, X
  b2:	15 97       	sbiw	r26, 0x05	; 5
  b4:	89 81       	ldd	r24, Y+1	; 0x01
  b6:	80 83       	st	Z, r24
  b8:	0f 90       	pop	r0
  ba:	df 91       	pop	r29
  bc:	cf 91       	pop	r28
  be:	08 95       	ret

000000c0 <_ZN6IOPort11SetPinValueEib>:
    // if the pin was already low and we want it low, do nothing.
    // if the pin was high, and we're requesting low, toggle it
    // if the pin was low, and we're requesting high, toggle it


    if (*_pins & (1 << pin))
  c0:	dc 01       	movw	r26, r24
  c2:	12 96       	adiw	r26, 0x02	; 2
  c4:	ed 91       	ld	r30, X+
  c6:	fc 91       	ld	r31, X
  c8:	13 97       	sbiw	r26, 0x03	; 3
  ca:	80 81       	ld	r24, Z
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	06 2e       	mov	r0, r22
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <_ZN6IOPort11SetPinValueEib+0x16>
  d2:	95 95       	asr	r25
  d4:	87 95       	ror	r24
  d6:	0a 94       	dec	r0
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <_ZN6IOPort11SetPinValueEib+0x12>
  da:	80 ff       	sbrs	r24, 0
  dc:	0b c0       	rjmp	.+22     	; 0xf4 <_ZN6IOPort11SetPinValueEib+0x34>
    {
        // pin is currently high

        if (!value)
  de:	41 11       	cpse	r20, r1
  e0:	13 c0       	rjmp	.+38     	; 0x108 <_ZN6IOPort11SetPinValueEib+0x48>
            *_pins = (1 << pin);    // toggle pin because we want it low
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	02 c0       	rjmp	.+4      	; 0xec <_ZN6IOPort11SetPinValueEib+0x2c>
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	6a 95       	dec	r22
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <_ZN6IOPort11SetPinValueEib+0x28>
  f0:	80 83       	st	Z, r24
  f2:	08 95       	ret
    }
    else
    {
        // pin is currently low

        if (value)
  f4:	44 23       	and	r20, r20
  f6:	41 f0       	breq	.+16     	; 0x108 <_ZN6IOPort11SetPinValueEib+0x48>
            *_pins = (1 << pin);    // toggle pin because we want it high
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <_ZN6IOPort11SetPinValueEib+0x42>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	6a 95       	dec	r22
 104:	e2 f7       	brpl	.-8      	; 0xfe <_ZN6IOPort11SetPinValueEib+0x3e>
 106:	80 83       	st	Z, r24
 108:	08 95       	ret

0000010a <_ZN3Led6TurnOnEv>:
 */
#include "Led.h"


void Led::TurnOn()
{
 10a:	fc 01       	movw	r30, r24
    _port->SetPinValue(_pin, (_configuration == LedCurrentSource));
 10c:	41 e0       	ldi	r20, 0x01	; 1
 10e:	82 81       	ldd	r24, Z+2	; 0x02
 110:	81 11       	cpse	r24, r1
 112:	40 e0       	ldi	r20, 0x00	; 0
 114:	63 81       	ldd	r22, Z+3	; 0x03
 116:	70 e0       	ldi	r23, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	91 81       	ldd	r25, Z+1	; 0x01
 11c:	d1 cf       	rjmp	.-94     	; 0xc0 <_ZN6IOPort11SetPinValueEib>
 11e:	08 95       	ret

00000120 <main>:
#include "ATmega1284P.h"
#include "IOPort.h"
#include "Led.h"

int main(void)
{
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
 128:	a6 97       	sbiw	r28, 0x26	; 38
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	f8 94       	cli
 12e:	de bf       	out	0x3e, r29	; 62
 130:	0f be       	out	0x3f, r0	; 63
 132:	cd bf       	out	0x3d, r28	; 61
    volatile register8_t* _ddr;
public:
    IOPort(register8_t* portRegister, register8_t* pinsRegister, register8_t* ddrRegister) :
        _port(portRegister),
        _pins(pinsRegister),
        _ddr(ddrRegister) {}
 134:	82 e2       	ldi	r24, 0x22	; 34
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	9a 83       	std	Y+2, r25	; 0x02
 13a:	89 83       	std	Y+1, r24	; 0x01
 13c:	80 e2       	ldi	r24, 0x20	; 32
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	9c 83       	std	Y+4, r25	; 0x04
 142:	8b 83       	std	Y+3, r24	; 0x03
 144:	81 e2       	ldi	r24, 0x21	; 33
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	9e 83       	std	Y+6, r25	; 0x06
 14a:	8d 83       	std	Y+5, r24	; 0x05
	//DDRA = 0b11111111;
	//PINA = 0b10101010;

	IOPort portA(&PORTA, &PINA, &DDRA);

	portA.SetPortDirection(0xFF);
 14c:	6f ef       	ldi	r22, 0xFF	; 255
 14e:	ce 01       	movw	r24, r28
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	a5 df       	rcall	.-182    	; 0x9e <_ZN6IOPort16SetPortDirectionEh>

public:
    Led(IOPort* port, uint8_t pin, LedConfiguration configuration) :
        _port((IOPort *)port),
        _configuration(configuration),
        _pin(pin) {};
 154:	8e 01       	movw	r16, r28
 156:	0f 5f       	subi	r16, 0xFF	; 255
 158:	1f 4f       	sbci	r17, 0xFF	; 255
 15a:	cc 24       	eor	r12, r12
 15c:	c3 94       	inc	r12
 15e:	68 94       	set
 160:	dd 24       	eor	r13, r13
 162:	d1 f8       	bld	r13, 1
 164:	0f 2e       	mov	r0, r31
 166:	f3 e0       	ldi	r31, 0x03	; 3
 168:	ef 2e       	mov	r14, r31
 16a:	f0 2d       	mov	r31, r0
 16c:	68 94       	set
 16e:	ff 24       	eor	r15, r15
 170:	f2 f8       	bld	r15, 2
 172:	1c a3       	std	Y+36, r17	; 0x24
 174:	0b a3       	std	Y+35, r16	; 0x23
 176:	1d a2       	std	Y+37, r1	; 0x25
 178:	1e a2       	std	Y+38, r1	; 0x26
 17a:	18 a3       	std	Y+32, r17	; 0x20
 17c:	0f 8f       	std	Y+31, r16	; 0x1f
 17e:	19 a2       	std	Y+33, r1	; 0x21
 180:	ca a2       	std	Y+34, r12	; 0x22
 182:	1c 8f       	std	Y+28, r17	; 0x1c
 184:	0b 8f       	std	Y+27, r16	; 0x1b
 186:	1d 8e       	std	Y+29, r1	; 0x1d
 188:	de 8e       	std	Y+30, r13	; 0x1e
 18a:	18 8f       	std	Y+24, r17	; 0x18
 18c:	0f 8b       	std	Y+23, r16	; 0x17
 18e:	19 8e       	std	Y+25, r1	; 0x19
 190:	ea 8e       	std	Y+26, r14	; 0x1a
 192:	1c 8b       	std	Y+20, r17	; 0x14
 194:	0b 8b       	std	Y+19, r16	; 0x13
 196:	1d 8a       	std	Y+21, r1	; 0x15
 198:	fe 8a       	std	Y+22, r15	; 0x16
 19a:	18 8b       	std	Y+16, r17	; 0x10
 19c:	0f 87       	std	Y+15, r16	; 0x0f
 19e:	19 8a       	std	Y+17, r1	; 0x11
 1a0:	85 e0       	ldi	r24, 0x05	; 5
 1a2:	8a 8b       	std	Y+18, r24	; 0x12
 1a4:	1c 87       	std	Y+12, r17	; 0x0c
 1a6:	0b 87       	std	Y+11, r16	; 0x0b
 1a8:	1d 86       	std	Y+13, r1	; 0x0d
 1aa:	86 e0       	ldi	r24, 0x06	; 6
 1ac:	8e 87       	std	Y+14, r24	; 0x0e
 1ae:	18 87       	std	Y+8, r17	; 0x08
 1b0:	0f 83       	std	Y+7, r16	; 0x07
 1b2:	19 86       	std	Y+9, r1	; 0x09
 1b4:	87 e0       	ldi	r24, 0x07	; 7
 1b6:	8a 87       	std	Y+10, r24	; 0x0a
		Led ledA4(&portA, (uint8_t)4, LedCurrentSource);
		Led ledA5(&portA, (uint8_t)5, LedCurrentSource);
		Led ledA6(&portA, (uint8_t)6, LedCurrentSource);
		Led ledA7(&portA, (uint8_t)7, LedCurrentSource);

		ledA0.TurnOn();
 1b8:	ce 01       	movw	r24, r28
 1ba:	83 96       	adiw	r24, 0x23	; 35
 1bc:	a6 df       	rcall	.-180    	; 0x10a <_ZN3Led6TurnOnEv>
		ledA1.TurnOn();
 1be:	ce 01       	movw	r24, r28
 1c0:	4f 96       	adiw	r24, 0x1f	; 31
 1c2:	a3 df       	rcall	.-186    	; 0x10a <_ZN3Led6TurnOnEv>
		ledA2.TurnOn();
 1c4:	ce 01       	movw	r24, r28
 1c6:	4b 96       	adiw	r24, 0x1b	; 27
 1c8:	a0 df       	rcall	.-192    	; 0x10a <_ZN3Led6TurnOnEv>
		ledA3.TurnOn();
 1ca:	ce 01       	movw	r24, r28
 1cc:	47 96       	adiw	r24, 0x17	; 23
 1ce:	9d df       	rcall	.-198    	; 0x10a <_ZN3Led6TurnOnEv>
		ledA4.TurnOn();
 1d0:	ce 01       	movw	r24, r28
 1d2:	43 96       	adiw	r24, 0x13	; 19
 1d4:	9a df       	rcall	.-204    	; 0x10a <_ZN3Led6TurnOnEv>
		ledA5.TurnOn();
 1d6:	ce 01       	movw	r24, r28
 1d8:	0f 96       	adiw	r24, 0x0f	; 15
 1da:	97 df       	rcall	.-210    	; 0x10a <_ZN3Led6TurnOnEv>
		ledA6.TurnOn();
 1dc:	ce 01       	movw	r24, r28
 1de:	0b 96       	adiw	r24, 0x0b	; 11
 1e0:	94 df       	rcall	.-216    	; 0x10a <_ZN3Led6TurnOnEv>
		ledA7.TurnOn();
 1e2:	ce 01       	movw	r24, r28
 1e4:	07 96       	adiw	r24, 0x07	; 7
 1e6:	91 df       	rcall	.-222    	; 0x10a <_ZN3Led6TurnOnEv>



	}
	return 0;
 1e8:	c4 cf       	rjmp	.-120    	; 0x172 <main+0x52>

000001ea <_exit>:
 1ea:	f8 94       	cli

000001ec <__stop_program>:
 1ec:	ff cf       	rjmp	.-2      	; 0x1ec <__stop_program>
