{"filter":false,"title":"prime2.cpp","tooltip":"/classFiles/data_struct_hw/hw1/prime2.cpp","undoManager":{"mark":22,"position":22,"stack":[[{"start":{"row":0,"column":0},"end":{"row":90,"column":0},"action":"insert","lines":["/// @file     segmented_sieve.cpp","/// @author   Kim Walisch, <kim.walisch@gmail.com> ","/// @brief    This is a simple implementation of the segmented sieve of","///           Eratosthenes with a few optimizations. It generates the","///           primes below 10^9 in 0.9 seconds (single-threaded) on an","///           Intel Core i7-4770 CPU (3.4 GHz) from 2013.","/// @license  Public domain.","","#include <iostream>","#include <algorithm>","#include <cmath>","#include <vector>","#include <cstdlib>","#include <stdint.h>","","/// Set your CPU's L1 data cache size (in bytes) here","const int L1D_CACHE_SIZE = 32768;","","/// Generate primes using the segmented sieve of Eratosthenes.","/// This algorithm uses O(n log log n) operations and O(sqrt(n)) space.","/// @param limit  Sieve primes <= limit.","///","void segmented_sieve(int64_t limit)","{","  int sqrt = (int) std::sqrt(limit);","  int segment_size = std::max(sqrt, L1D_CACHE_SIZE);","","  int64_t count = (limit < 2) ? 0 : 1;","  int64_t s = 3;","  int64_t n = 3;","","  // generate small primes <= sqrt","  std::vector<char> is_prime(sqrt + 1, 1);","  for (int i = 2; i * i <= sqrt; i++)","    if (is_prime[i])","      for (int j = i * i; j <= sqrt; j += i)","        is_prime[j] = 0;","","  // vector used for sieving","  std::vector<char> sieve(segment_size);","  std::vector<int> primes;","  std::vector<int> next;","","  for (int64_t low = 0; low <= limit; low += segment_size)","  {","    std::fill(sieve.begin(), sieve.end(), 1);","","    // current segment = interval [low, high]","    int64_t high = std::min(low + segment_size - 1, limit);","","    // add new sieving primes <= sqrt(high)","    for (; s * s <= high; s += 2)","    {","      if (is_prime[s])","      {","        primes.push_back((int) s);","          next.push_back((int)(s * s - low));","      }","    }","    ","    // sieve the current segment","    for (std::size_t i = 0; i < primes.size(); i++)","    {","      int j = next[i];","      for (int k = primes[i] * 2; j < segment_size; j += k)","        sieve[j] = 0;","      next[i] = j - segment_size;","    }","","    for (; n <= high; n += 2)","      if (sieve[n - low]) // n is a prime","        count++;","  }","","  std::cout << count << \" primes found.\" << std::endl;","}","","/// Usage: ./segmented_sieve n","/// @param n  Sieve the primes up to n.","///","int main(int argc, char** argv)","{","  if (argc >= 2)","    segmented_sieve(std::atol(argv[1]));","  else","    segmented_sieve(1000000000);","","  return 0;","}","",""],"id":1}],[{"start":{"row":85,"column":21},"end":{"row":85,"column":30},"action":"remove","lines":["000000000"],"id":2}],[{"start":{"row":85,"column":21},"end":{"row":85,"column":22},"action":"insert","lines":["0"],"id":3}],[{"start":{"row":85,"column":22},"end":{"row":85,"column":23},"action":"insert","lines":["0"],"id":4}],[{"start":{"row":85,"column":21},"end":{"row":85,"column":23},"action":"remove","lines":["00"],"id":5},{"start":{"row":85,"column":21},"end":{"row":85,"column":22},"action":"insert","lines":["0"]}],[{"start":{"row":85,"column":22},"end":{"row":85,"column":23},"action":"insert","lines":["0"],"id":6}],[{"start":{"row":85,"column":23},"end":{"row":85,"column":24},"action":"insert","lines":["0"],"id":7}],[{"start":{"row":85,"column":24},"end":{"row":85,"column":25},"action":"insert","lines":["0"],"id":8}],[{"start":{"row":85,"column":25},"end":{"row":85,"column":26},"action":"insert","lines":["0"],"id":9}],[{"start":{"row":85,"column":26},"end":{"row":85,"column":27},"action":"insert","lines":["0"],"id":10}],[{"start":{"row":85,"column":27},"end":{"row":85,"column":28},"action":"insert","lines":["0"],"id":11}],[{"start":{"row":85,"column":28},"end":{"row":85,"column":29},"action":"insert","lines":["0"],"id":12}],[{"start":{"row":85,"column":29},"end":{"row":85,"column":30},"action":"insert","lines":["0"],"id":13}],[{"start":{"row":85,"column":30},"end":{"row":85,"column":31},"action":"insert","lines":["0"],"id":14}],[{"start":{"row":85,"column":31},"end":{"row":85,"column":32},"action":"insert","lines":["0"],"id":15}],[{"start":{"row":85,"column":32},"end":{"row":85,"column":33},"action":"insert","lines":["0"],"id":16}],[{"start":{"row":85,"column":33},"end":{"row":85,"column":34},"action":"insert","lines":["0"],"id":17}],[{"start":{"row":85,"column":34},"end":{"row":85,"column":35},"action":"insert","lines":["0"],"id":18}],[{"start":{"row":85,"column":33},"end":{"row":85,"column":34},"action":"remove","lines":["0"],"id":19}],[{"start":{"row":85,"column":32},"end":{"row":85,"column":33},"action":"remove","lines":["0"],"id":20}],[{"start":{"row":85,"column":32},"end":{"row":85,"column":33},"action":"remove","lines":["0"],"id":21}],[{"start":{"row":85,"column":31},"end":{"row":85,"column":32},"action":"remove","lines":["0"],"id":22}],[{"start":{"row":85,"column":30},"end":{"row":85,"column":31},"action":"remove","lines":["0"],"id":23}]]},"ace":{"folds":[],"scrolltop":720,"scrollleft":0,"selection":{"start":{"row":83,"column":26},"end":{"row":83,"column":26},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":47,"state":"start","mode":"ace/mode/c_cpp"}},"timestamp":1473272787328,"hash":"7b499ca22d6f8defd400a5d0f773c9f44da6a372"}