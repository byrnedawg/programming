{"filter":false,"title":"quadtraticProbeHashing.cpp","tooltip":"/data_struct_hw/Test3/quadtraticProbeHashing.cpp","undoManager":{"mark":60,"position":60,"stack":[[{"start":{"row":0,"column":0},"end":{"row":180,"column":0},"action":"insert","lines":["#include <iostream>","","using namespace std;","","class HashSet {","private:","\tint* table;","\tint capacity;","\tint used;","\t","\tvoid grow() ","\t{","\t\tint* temp = table;","\t\tint oldCapacity = capacity;","\t\tcapacity = capacity*2;","\t\ttable = new int[capacity];","\t\tused = 0;","\t\tfor (int i = 0; i < oldCapacity; i++)","\t\t{","\t\t\tif (temp[i] != 0)","\t\t\t{","\t\t\t    add(temp[i]);","\t\t\t}","\t\t\t\t","\t\t}","\t\t","\t}","public:","\tHashSet(int size) : capacity(size), used(0) ","\t{","\t\ttable = new int[capacity];","\t\tfor (int i = 0; i < capacity; i++)","\t\t\ttable[i] = 0;","\t}","\t","\tint hash(int v) ","\t{","        return v % capacity;","\t}","","\tvoid add(int v) ","\t{","\t\tif (used + used >= capacity)","\t\t\tgrow();","\t\tint i = hash(v);","\t\twhile (table[i] != 0) ","\t\t{","\t\t\ti++;","\t\t\tif (i == capacity)","\t\t\t{","\t\t\t\ti = 0;","\t\t\t}","\t\t}","\t\ttable[i] = v;","\t\tused++;","\t}","\t","\tbool contains(int v) ","\t{","        int hashV = hash(v);","        int numChecks = 1;","        while(table[hashV] != 0)","        {","            if(table[hashV] == v)","            {","                    cout << \"Number of hash look ups = \" << numChecks << \"\\n\";","                    return true;","            }","            else","            {","                    if(hashV < capacity-1)","                    {","                        hashV++;","                    }","                    else","                    {","                        hashV = 0;","                    }","                    numChecks++;","            }","        }","        cout << \"Number of hash look ups = \" << numChecks << \"\\n\";","        return false;","\t}","\t","\tint getCapacity() ","\t{","        return capacity;","\t}","\t","\tint getUsed() ","\t{","        return used;","\t}","\t","\tfriend ostream& operator<<(ostream& s, const HashSet& hashSet) ","\t{","\t    cout << \"\\t\\t\";","\t    for(int i= 0; i < hashSet.capacity; i++)","\t    {","        \tcout << i << \"\\t\";","\t    }","\t    s << \"\\n\\t{ \\t\";","\t    for(int i= 0; i < hashSet.capacity; i++)","\t    {","        \tcout << \"[\" << hashSet.table[i] << \"]\\t\";","\t    }","\t\ts << \"}\";","\t\treturn s;","\t}","","};","","void firstTest()","{","\tHashSet myHash(10);","\tint answer = 0;","\tint inValue = 0;","","\tdo{","\t\tcout << \"-----------------------------------------------------------\\n\";","\t\tcout << \"Hash Set Options \\n\";","\t\tcout << \"1: Add a Value to Set \\n\";","\t\tcout << \"2: Determine if value is in the set \\n\";","\t\tcout << \"3: Print the Hash set \\n\";","\t\tcout << \"4: Finished End Program \\n\";","\t\tcout << \"-----------------------------------------------------------\\n\";","\t\tcin >> answer;","\t\tif(answer == 1)","\t\t{","\t\t\tcout << \"What value do you want to add to the set?\\n\";","\t\t\tcin >> inValue;","\t\t\tmyHash.add(inValue);","\t\t\tcout << \"-----------------------------------------------------------\\n\";","\t\t\tcout << myHash << \"\\n\";","\t\t\tcout << \"-----------------------------------------------------------\\n\";","\t\t}","\t\telse if(answer == 2)","\t\t{","\t\t    cout << \"What value do you want to see is in the set?\\n\";","\t\t\tcin >> inValue;","\t\t\tif(myHash.contains(inValue))","\t\t\t{","\t\t\t    cout << inValue << \" was IN the hash set\\n\";","\t\t\t}","\t\t\telse","\t\t\t{","\t\t\t    cout << inValue << \" was NOT in the hash set\\n\";","\t\t\t}","\t\t\tcout << \"-----------------------------------------------------------\\n\";","\t\t\tcout << myHash << \"\\n\";","\t\t\tcout << \"-----------------------------------------------------------\\n\";","\t\t}","\t\telse if(answer == 3)","\t\t{","\t\t    cout << \"This is what the hash set looks like\\n\";","\t\t\tcout << \"-----------------------------------------------------------\\n\";","\t\t\tcout << \"Hash Set Used = \" << myHash.getUsed() << \"\\n\";","\t\t\tcout << \"Hash Set Capacity = \" << myHash.getCapacity() << \"\\n\";","\t\t\tcout << myHash << \"\\n\";","\t\t\tcout << \"-----------------------------------------------------------\\n\";","\t\t}","\t\telse","\t\t{","\t\t   cout << \"This is what the hash set looks like\\n\";","\t\t\tcout << \"-----------------------------------------------------------\\n\";","\t\t\tcout << \"Hash Set Used = \" << myHash.getUsed() << \"\\n\";","\t\t\tcout << \"Hash Set Capacity  = \" << myHash.getCapacity() << \"\\n\";","\t\t\tcout << myHash << \"\\n\";","\t\t\tcout << \"-----------------------------------------------------------\\n\";","\t\t}","\t}while(answer != 4);","","}","","int main()","{","    firstTest();","    return 0;","}",""],"id":1}],[{"start":{"row":47,"column":5},"end":{"row":47,"column":6},"action":"remove","lines":["+"],"id":2}],[{"start":{"row":47,"column":4},"end":{"row":47,"column":5},"action":"remove","lines":["+"],"id":3}],[{"start":{"row":47,"column":4},"end":{"row":47,"column":5},"action":"insert","lines":[" "],"id":4}],[{"start":{"row":47,"column":5},"end":{"row":47,"column":6},"action":"insert","lines":["="],"id":5}],[{"start":{"row":47,"column":6},"end":{"row":47,"column":7},"action":"insert","lines":[" "],"id":6}],[{"start":{"row":47,"column":7},"end":{"row":47,"column":8},"action":"insert","lines":["i"],"id":7}],[{"start":{"row":47,"column":7},"end":{"row":47,"column":8},"action":"remove","lines":["i"],"id":8}],[{"start":{"row":47,"column":7},"end":{"row":47,"column":8},"action":"insert","lines":["i"],"id":9}],[{"start":{"row":47,"column":8},"end":{"row":47,"column":9},"action":"insert","lines":[" "],"id":10}],[{"start":{"row":47,"column":9},"end":{"row":47,"column":10},"action":"insert","lines":["+"],"id":11}],[{"start":{"row":47,"column":10},"end":{"row":47,"column":11},"action":"insert","lines":[" "],"id":12}],[{"start":{"row":47,"column":11},"end":{"row":47,"column":12},"action":"insert","lines":["n"],"id":13}],[{"start":{"row":47,"column":12},"end":{"row":47,"column":13},"action":"insert","lines":["u"],"id":14}],[{"start":{"row":47,"column":13},"end":{"row":47,"column":14},"action":"insert","lines":["m"],"id":15}],[{"start":{"row":47,"column":14},"end":{"row":47,"column":15},"action":"insert","lines":["t"],"id":16}],[{"start":{"row":47,"column":14},"end":{"row":47,"column":15},"action":"remove","lines":["t"],"id":17}],[{"start":{"row":47,"column":14},"end":{"row":47,"column":15},"action":"insert","lines":["T"],"id":18}],[{"start":{"row":47,"column":15},"end":{"row":47,"column":16},"action":"insert","lines":["i"],"id":19}],[{"start":{"row":47,"column":16},"end":{"row":47,"column":17},"action":"insert","lines":["m"],"id":20}],[{"start":{"row":47,"column":17},"end":{"row":47,"column":18},"action":"insert","lines":["e"],"id":21}],[{"start":{"row":47,"column":18},"end":{"row":47,"column":19},"action":"insert","lines":["s"],"id":22}],[{"start":{"row":47,"column":19},"end":{"row":47,"column":20},"action":"insert","lines":[" "],"id":23}],[{"start":{"row":47,"column":20},"end":{"row":47,"column":21},"action":"insert","lines":["*"],"id":24}],[{"start":{"row":47,"column":21},"end":{"row":47,"column":22},"action":"insert","lines":[" "],"id":25}],[{"start":{"row":47,"column":22},"end":{"row":47,"column":30},"action":"insert","lines":["numTimes"],"id":26}],[{"start":{"row":42,"column":2},"end":{"row":43,"column":0},"action":"insert","lines":["",""],"id":27},{"start":{"row":43,"column":0},"end":{"row":43,"column":2},"action":"insert","lines":["\t\t"]}],[{"start":{"row":42,"column":2},"end":{"row":42,"column":3},"action":"insert","lines":["i"],"id":28}],[{"start":{"row":42,"column":3},"end":{"row":42,"column":4},"action":"insert","lines":["n"],"id":29}],[{"start":{"row":42,"column":4},"end":{"row":42,"column":5},"action":"insert","lines":["t"],"id":30}],[{"start":{"row":42,"column":5},"end":{"row":42,"column":6},"action":"insert","lines":[" "],"id":31}],[{"start":{"row":42,"column":6},"end":{"row":42,"column":7},"action":"insert","lines":["n"],"id":32}],[{"start":{"row":42,"column":7},"end":{"row":42,"column":8},"action":"insert","lines":["u"],"id":33}],[{"start":{"row":42,"column":8},"end":{"row":42,"column":9},"action":"insert","lines":["m"],"id":34}],[{"start":{"row":42,"column":9},"end":{"row":42,"column":10},"action":"insert","lines":["T"],"id":35}],[{"start":{"row":42,"column":10},"end":{"row":42,"column":11},"action":"insert","lines":["i"],"id":36}],[{"start":{"row":42,"column":11},"end":{"row":42,"column":12},"action":"insert","lines":["m"],"id":37}],[{"start":{"row":42,"column":12},"end":{"row":42,"column":13},"action":"insert","lines":["e"],"id":38}],[{"start":{"row":42,"column":13},"end":{"row":42,"column":14},"action":"insert","lines":["s"],"id":39}],[{"start":{"row":42,"column":14},"end":{"row":42,"column":15},"action":"insert","lines":[" "],"id":40}],[{"start":{"row":42,"column":15},"end":{"row":42,"column":16},"action":"insert","lines":["="],"id":41}],[{"start":{"row":42,"column":16},"end":{"row":42,"column":17},"action":"insert","lines":[" "],"id":42}],[{"start":{"row":42,"column":17},"end":{"row":42,"column":18},"action":"insert","lines":["1"],"id":43}],[{"start":{"row":42,"column":18},"end":{"row":42,"column":19},"action":"insert","lines":["l"],"id":44}],[{"start":{"row":42,"column":18},"end":{"row":42,"column":19},"action":"remove","lines":["l"],"id":45}],[{"start":{"row":42,"column":18},"end":{"row":42,"column":19},"action":"insert","lines":["l"],"id":46}],[{"start":{"row":42,"column":18},"end":{"row":42,"column":19},"action":"remove","lines":["l"],"id":47}],[{"start":{"row":42,"column":18},"end":{"row":42,"column":19},"action":"insert","lines":[";"],"id":48}],[{"start":{"row":52,"column":4},"end":{"row":53,"column":0},"action":"insert","lines":["",""],"id":49},{"start":{"row":53,"column":0},"end":{"row":53,"column":3},"action":"insert","lines":["\t\t\t"]}],[{"start":{"row":53,"column":3},"end":{"row":53,"column":11},"action":"insert","lines":["numTimes"],"id":50}],[{"start":{"row":53,"column":11},"end":{"row":53,"column":12},"action":"insert","lines":["+"],"id":51}],[{"start":{"row":53,"column":12},"end":{"row":53,"column":13},"action":"insert","lines":["+"],"id":52}],[{"start":{"row":53,"column":13},"end":{"row":53,"column":14},"action":"insert","lines":[";"],"id":53}],[{"start":{"row":48,"column":30},"end":{"row":48,"column":31},"action":"insert","lines":[" "],"id":54}],[{"start":{"row":48,"column":7},"end":{"row":48,"column":8},"action":"insert","lines":["("],"id":55}],[{"start":{"row":48,"column":31},"end":{"row":48,"column":32},"action":"insert","lines":[")"],"id":56}],[{"start":{"row":48,"column":32},"end":{"row":48,"column":33},"action":"insert","lines":[" "],"id":57}],[{"start":{"row":48,"column":33},"end":{"row":48,"column":34},"action":"insert","lines":["%"],"id":58}],[{"start":{"row":48,"column":34},"end":{"row":48,"column":35},"action":"insert","lines":[" "],"id":59}],[{"start":{"row":48,"column":35},"end":{"row":48,"column":36},"action":"insert","lines":["c"],"id":60}],[{"start":{"row":48,"column":35},"end":{"row":48,"column":36},"action":"remove","lines":["c"],"id":61},{"start":{"row":48,"column":35},"end":{"row":48,"column":43},"action":"insert","lines":["capacity"]}]]},"ace":{"folds":[],"scrolltop":333,"scrollleft":0,"selection":{"start":{"row":50,"column":4},"end":{"row":50,"column":4},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":21,"state":"start","mode":"ace/mode/c_cpp"}},"timestamp":1478197267082,"hash":"7a6fd5ca56ddfb98b3a21a5b819fba0c84db150c"}